
test1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004380  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000174  08004510  08004510  00014510  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004684  08004684  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08004684  08004684  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004684  08004684  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004684  08004684  00014684  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004688  08004688  00014688  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fn1          00000004  0800468c  0800468c  0001468c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .fn2          00000000  08004690  08004690  00020074  2**0
                  CONTENTS
 10 .fn3          00000000  08004690  08004690  00020074  2**0
                  CONTENTS
 11 .fn4          00000000  08004690  08004690  00020074  2**0
                  CONTENTS
 12 .fn5          00000000  08004690  08004690  00020074  2**0
                  CONTENTS
 13 .fn6          00000000  08004690  08004690  00020074  2**0
                  CONTENTS
 14 .fn7          00000000  08004690  08004690  00020074  2**0
                  CONTENTS
 15 .data         00000074  20000000  08004690  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 16 .bss          00001940  20000074  08004704  00020074  2**2
                  ALLOC
 17 ._user_heap_stack 00000600  10000000  10000000  00030000  2**0
                  ALLOC
 18 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 19 .debug_info   00015573  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_abbrev 00002dfc  00000000  00000000  00035617  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_aranges 00000f10  00000000  00000000  00038418  2**3
                  CONTENTS, READONLY, DEBUGGING
 22 .debug_ranges 00000da8  00000000  00000000  00039328  2**3
                  CONTENTS, READONLY, DEBUGGING
 23 .debug_macro  00024b13  00000000  00000000  0003a0d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 24 .debug_line   0000e8f0  00000000  00000000  0005ebe3  2**0
                  CONTENTS, READONLY, DEBUGGING
 25 .debug_str    000dd013  00000000  00000000  0006d4d3  2**0
                  CONTENTS, READONLY, DEBUGGING
 26 .comment      0000007b  00000000  00000000  0014a4e6  2**0
                  CONTENTS, READONLY
 27 .debug_frame  00003d2c  00000000  00000000  0014a564  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080044f8 	.word	0x080044f8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	080044f8 	.word	0x080044f8

080001d0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80001d0:	b580      	push	{r7, lr}
 80001d2:	b082      	sub	sp, #8
 80001d4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80001d6:	2300      	movs	r3, #0
 80001d8:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80001da:	2003      	movs	r0, #3
 80001dc:	f000 f91a 	bl	8000414 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80001e0:	200f      	movs	r0, #15
 80001e2:	f000 f80d 	bl	8000200 <HAL_InitTick>
 80001e6:	4603      	mov	r3, r0
 80001e8:	2b00      	cmp	r3, #0
 80001ea:	d002      	beq.n	80001f2 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80001ec:	2301      	movs	r3, #1
 80001ee:	71fb      	strb	r3, [r7, #7]
 80001f0:	e001      	b.n	80001f6 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80001f2:	f003 ff89 	bl	8004108 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80001f6:	79fb      	ldrb	r3, [r7, #7]
}
 80001f8:	4618      	mov	r0, r3
 80001fa:	3708      	adds	r7, #8
 80001fc:	46bd      	mov	sp, r7
 80001fe:	bd80      	pop	{r7, pc}

08000200 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000200:	b580      	push	{r7, lr}
 8000202:	b084      	sub	sp, #16
 8000204:	af00      	add	r7, sp, #0
 8000206:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000208:	2300      	movs	r3, #0
 800020a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800020c:	4b16      	ldr	r3, [pc, #88]	; (8000268 <HAL_InitTick+0x68>)
 800020e:	681b      	ldr	r3, [r3, #0]
 8000210:	2b00      	cmp	r3, #0
 8000212:	d022      	beq.n	800025a <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000214:	4b15      	ldr	r3, [pc, #84]	; (800026c <HAL_InitTick+0x6c>)
 8000216:	681a      	ldr	r2, [r3, #0]
 8000218:	4b13      	ldr	r3, [pc, #76]	; (8000268 <HAL_InitTick+0x68>)
 800021a:	681b      	ldr	r3, [r3, #0]
 800021c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000220:	fbb1 f3f3 	udiv	r3, r1, r3
 8000224:	fbb2 f3f3 	udiv	r3, r2, r3
 8000228:	4618      	mov	r0, r3
 800022a:	f000 f93f 	bl	80004ac <HAL_SYSTICK_Config>
 800022e:	4603      	mov	r3, r0
 8000230:	2b00      	cmp	r3, #0
 8000232:	d10f      	bne.n	8000254 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000234:	687b      	ldr	r3, [r7, #4]
 8000236:	2b0f      	cmp	r3, #15
 8000238:	d809      	bhi.n	800024e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800023a:	2200      	movs	r2, #0
 800023c:	6879      	ldr	r1, [r7, #4]
 800023e:	f04f 30ff 	mov.w	r0, #4294967295
 8000242:	f000 f907 	bl	8000454 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000246:	4a0a      	ldr	r2, [pc, #40]	; (8000270 <HAL_InitTick+0x70>)
 8000248:	687b      	ldr	r3, [r7, #4]
 800024a:	6013      	str	r3, [r2, #0]
 800024c:	e007      	b.n	800025e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800024e:	2301      	movs	r3, #1
 8000250:	73fb      	strb	r3, [r7, #15]
 8000252:	e004      	b.n	800025e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000254:	2301      	movs	r3, #1
 8000256:	73fb      	strb	r3, [r7, #15]
 8000258:	e001      	b.n	800025e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800025a:	2301      	movs	r3, #1
 800025c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800025e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000260:	4618      	mov	r0, r3
 8000262:	3710      	adds	r7, #16
 8000264:	46bd      	mov	sp, r7
 8000266:	bd80      	pop	{r7, pc}
 8000268:	20000004 	.word	0x20000004
 800026c:	2000000c 	.word	0x2000000c
 8000270:	20000000 	.word	0x20000000

08000274 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000274:	b480      	push	{r7}
 8000276:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000278:	4b05      	ldr	r3, [pc, #20]	; (8000290 <HAL_IncTick+0x1c>)
 800027a:	681a      	ldr	r2, [r3, #0]
 800027c:	4b05      	ldr	r3, [pc, #20]	; (8000294 <HAL_IncTick+0x20>)
 800027e:	681b      	ldr	r3, [r3, #0]
 8000280:	4413      	add	r3, r2
 8000282:	4a03      	ldr	r2, [pc, #12]	; (8000290 <HAL_IncTick+0x1c>)
 8000284:	6013      	str	r3, [r2, #0]
}
 8000286:	bf00      	nop
 8000288:	46bd      	mov	sp, r7
 800028a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800028e:	4770      	bx	lr
 8000290:	20001964 	.word	0x20001964
 8000294:	20000004 	.word	0x20000004

08000298 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000298:	b480      	push	{r7}
 800029a:	af00      	add	r7, sp, #0
  return uwTick;
 800029c:	4b03      	ldr	r3, [pc, #12]	; (80002ac <HAL_GetTick+0x14>)
 800029e:	681b      	ldr	r3, [r3, #0]
}
 80002a0:	4618      	mov	r0, r3
 80002a2:	46bd      	mov	sp, r7
 80002a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002a8:	4770      	bx	lr
 80002aa:	bf00      	nop
 80002ac:	20001964 	.word	0x20001964

080002b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80002b0:	b480      	push	{r7}
 80002b2:	b085      	sub	sp, #20
 80002b4:	af00      	add	r7, sp, #0
 80002b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80002b8:	687b      	ldr	r3, [r7, #4]
 80002ba:	f003 0307 	and.w	r3, r3, #7
 80002be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80002c0:	4b0c      	ldr	r3, [pc, #48]	; (80002f4 <__NVIC_SetPriorityGrouping+0x44>)
 80002c2:	68db      	ldr	r3, [r3, #12]
 80002c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80002c6:	68ba      	ldr	r2, [r7, #8]
 80002c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80002cc:	4013      	ands	r3, r2
 80002ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80002d0:	68fb      	ldr	r3, [r7, #12]
 80002d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80002d4:	68bb      	ldr	r3, [r7, #8]
 80002d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80002d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80002dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80002e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80002e2:	4a04      	ldr	r2, [pc, #16]	; (80002f4 <__NVIC_SetPriorityGrouping+0x44>)
 80002e4:	68bb      	ldr	r3, [r7, #8]
 80002e6:	60d3      	str	r3, [r2, #12]
}
 80002e8:	bf00      	nop
 80002ea:	3714      	adds	r7, #20
 80002ec:	46bd      	mov	sp, r7
 80002ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002f2:	4770      	bx	lr
 80002f4:	e000ed00 	.word	0xe000ed00

080002f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80002f8:	b480      	push	{r7}
 80002fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80002fc:	4b04      	ldr	r3, [pc, #16]	; (8000310 <__NVIC_GetPriorityGrouping+0x18>)
 80002fe:	68db      	ldr	r3, [r3, #12]
 8000300:	0a1b      	lsrs	r3, r3, #8
 8000302:	f003 0307 	and.w	r3, r3, #7
}
 8000306:	4618      	mov	r0, r3
 8000308:	46bd      	mov	sp, r7
 800030a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800030e:	4770      	bx	lr
 8000310:	e000ed00 	.word	0xe000ed00

08000314 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000314:	b480      	push	{r7}
 8000316:	b083      	sub	sp, #12
 8000318:	af00      	add	r7, sp, #0
 800031a:	4603      	mov	r3, r0
 800031c:	6039      	str	r1, [r7, #0]
 800031e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000320:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000324:	2b00      	cmp	r3, #0
 8000326:	db0a      	blt.n	800033e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000328:	683b      	ldr	r3, [r7, #0]
 800032a:	b2da      	uxtb	r2, r3
 800032c:	490c      	ldr	r1, [pc, #48]	; (8000360 <__NVIC_SetPriority+0x4c>)
 800032e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000332:	0112      	lsls	r2, r2, #4
 8000334:	b2d2      	uxtb	r2, r2
 8000336:	440b      	add	r3, r1
 8000338:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800033c:	e00a      	b.n	8000354 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800033e:	683b      	ldr	r3, [r7, #0]
 8000340:	b2da      	uxtb	r2, r3
 8000342:	4908      	ldr	r1, [pc, #32]	; (8000364 <__NVIC_SetPriority+0x50>)
 8000344:	79fb      	ldrb	r3, [r7, #7]
 8000346:	f003 030f 	and.w	r3, r3, #15
 800034a:	3b04      	subs	r3, #4
 800034c:	0112      	lsls	r2, r2, #4
 800034e:	b2d2      	uxtb	r2, r2
 8000350:	440b      	add	r3, r1
 8000352:	761a      	strb	r2, [r3, #24]
}
 8000354:	bf00      	nop
 8000356:	370c      	adds	r7, #12
 8000358:	46bd      	mov	sp, r7
 800035a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800035e:	4770      	bx	lr
 8000360:	e000e100 	.word	0xe000e100
 8000364:	e000ed00 	.word	0xe000ed00

08000368 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000368:	b480      	push	{r7}
 800036a:	b089      	sub	sp, #36	; 0x24
 800036c:	af00      	add	r7, sp, #0
 800036e:	60f8      	str	r0, [r7, #12]
 8000370:	60b9      	str	r1, [r7, #8]
 8000372:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000374:	68fb      	ldr	r3, [r7, #12]
 8000376:	f003 0307 	and.w	r3, r3, #7
 800037a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800037c:	69fb      	ldr	r3, [r7, #28]
 800037e:	f1c3 0307 	rsb	r3, r3, #7
 8000382:	2b04      	cmp	r3, #4
 8000384:	bf28      	it	cs
 8000386:	2304      	movcs	r3, #4
 8000388:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800038a:	69fb      	ldr	r3, [r7, #28]
 800038c:	3304      	adds	r3, #4
 800038e:	2b06      	cmp	r3, #6
 8000390:	d902      	bls.n	8000398 <NVIC_EncodePriority+0x30>
 8000392:	69fb      	ldr	r3, [r7, #28]
 8000394:	3b03      	subs	r3, #3
 8000396:	e000      	b.n	800039a <NVIC_EncodePriority+0x32>
 8000398:	2300      	movs	r3, #0
 800039a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800039c:	f04f 32ff 	mov.w	r2, #4294967295
 80003a0:	69bb      	ldr	r3, [r7, #24]
 80003a2:	fa02 f303 	lsl.w	r3, r2, r3
 80003a6:	43da      	mvns	r2, r3
 80003a8:	68bb      	ldr	r3, [r7, #8]
 80003aa:	401a      	ands	r2, r3
 80003ac:	697b      	ldr	r3, [r7, #20]
 80003ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80003b0:	f04f 31ff 	mov.w	r1, #4294967295
 80003b4:	697b      	ldr	r3, [r7, #20]
 80003b6:	fa01 f303 	lsl.w	r3, r1, r3
 80003ba:	43d9      	mvns	r1, r3
 80003bc:	687b      	ldr	r3, [r7, #4]
 80003be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80003c0:	4313      	orrs	r3, r2
         );
}
 80003c2:	4618      	mov	r0, r3
 80003c4:	3724      	adds	r7, #36	; 0x24
 80003c6:	46bd      	mov	sp, r7
 80003c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003cc:	4770      	bx	lr
	...

080003d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80003d0:	b580      	push	{r7, lr}
 80003d2:	b082      	sub	sp, #8
 80003d4:	af00      	add	r7, sp, #0
 80003d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80003d8:	687b      	ldr	r3, [r7, #4]
 80003da:	3b01      	subs	r3, #1
 80003dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80003e0:	d301      	bcc.n	80003e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80003e2:	2301      	movs	r3, #1
 80003e4:	e00f      	b.n	8000406 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80003e6:	4a0a      	ldr	r2, [pc, #40]	; (8000410 <SysTick_Config+0x40>)
 80003e8:	687b      	ldr	r3, [r7, #4]
 80003ea:	3b01      	subs	r3, #1
 80003ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80003ee:	210f      	movs	r1, #15
 80003f0:	f04f 30ff 	mov.w	r0, #4294967295
 80003f4:	f7ff ff8e 	bl	8000314 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80003f8:	4b05      	ldr	r3, [pc, #20]	; (8000410 <SysTick_Config+0x40>)
 80003fa:	2200      	movs	r2, #0
 80003fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80003fe:	4b04      	ldr	r3, [pc, #16]	; (8000410 <SysTick_Config+0x40>)
 8000400:	2207      	movs	r2, #7
 8000402:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000404:	2300      	movs	r3, #0
}
 8000406:	4618      	mov	r0, r3
 8000408:	3708      	adds	r7, #8
 800040a:	46bd      	mov	sp, r7
 800040c:	bd80      	pop	{r7, pc}
 800040e:	bf00      	nop
 8000410:	e000e010 	.word	0xe000e010

08000414 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000414:	b580      	push	{r7, lr}
 8000416:	b082      	sub	sp, #8
 8000418:	af00      	add	r7, sp, #0
 800041a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 800041c:	687b      	ldr	r3, [r7, #4]
 800041e:	2b07      	cmp	r3, #7
 8000420:	d00f      	beq.n	8000442 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8000422:	687b      	ldr	r3, [r7, #4]
 8000424:	2b06      	cmp	r3, #6
 8000426:	d00c      	beq.n	8000442 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8000428:	687b      	ldr	r3, [r7, #4]
 800042a:	2b05      	cmp	r3, #5
 800042c:	d009      	beq.n	8000442 <HAL_NVIC_SetPriorityGrouping+0x2e>
 800042e:	687b      	ldr	r3, [r7, #4]
 8000430:	2b04      	cmp	r3, #4
 8000432:	d006      	beq.n	8000442 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8000434:	687b      	ldr	r3, [r7, #4]
 8000436:	2b03      	cmp	r3, #3
 8000438:	d003      	beq.n	8000442 <HAL_NVIC_SetPriorityGrouping+0x2e>
 800043a:	21a7      	movs	r1, #167	; 0xa7
 800043c:	4804      	ldr	r0, [pc, #16]	; (8000450 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 800043e:	f003 fe58 	bl	80040f2 <assert_failed>

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000442:	6878      	ldr	r0, [r7, #4]
 8000444:	f7ff ff34 	bl	80002b0 <__NVIC_SetPriorityGrouping>
}
 8000448:	bf00      	nop
 800044a:	3708      	adds	r7, #8
 800044c:	46bd      	mov	sp, r7
 800044e:	bd80      	pop	{r7, pc}
 8000450:	08004510 	.word	0x08004510

08000454 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000454:	b580      	push	{r7, lr}
 8000456:	b086      	sub	sp, #24
 8000458:	af00      	add	r7, sp, #0
 800045a:	4603      	mov	r3, r0
 800045c:	60b9      	str	r1, [r7, #8]
 800045e:	607a      	str	r2, [r7, #4]
 8000460:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000462:	2300      	movs	r3, #0
 8000464:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8000466:	687b      	ldr	r3, [r7, #4]
 8000468:	2b0f      	cmp	r3, #15
 800046a:	d903      	bls.n	8000474 <HAL_NVIC_SetPriority+0x20>
 800046c:	21bf      	movs	r1, #191	; 0xbf
 800046e:	480e      	ldr	r0, [pc, #56]	; (80004a8 <HAL_NVIC_SetPriority+0x54>)
 8000470:	f003 fe3f 	bl	80040f2 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8000474:	68bb      	ldr	r3, [r7, #8]
 8000476:	2b0f      	cmp	r3, #15
 8000478:	d903      	bls.n	8000482 <HAL_NVIC_SetPriority+0x2e>
 800047a:	21c0      	movs	r1, #192	; 0xc0
 800047c:	480a      	ldr	r0, [pc, #40]	; (80004a8 <HAL_NVIC_SetPriority+0x54>)
 800047e:	f003 fe38 	bl	80040f2 <assert_failed>

  prioritygroup = NVIC_GetPriorityGrouping();
 8000482:	f7ff ff39 	bl	80002f8 <__NVIC_GetPriorityGrouping>
 8000486:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000488:	687a      	ldr	r2, [r7, #4]
 800048a:	68b9      	ldr	r1, [r7, #8]
 800048c:	6978      	ldr	r0, [r7, #20]
 800048e:	f7ff ff6b 	bl	8000368 <NVIC_EncodePriority>
 8000492:	4602      	mov	r2, r0
 8000494:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000498:	4611      	mov	r1, r2
 800049a:	4618      	mov	r0, r3
 800049c:	f7ff ff3a 	bl	8000314 <__NVIC_SetPriority>
}
 80004a0:	bf00      	nop
 80004a2:	3718      	adds	r7, #24
 80004a4:	46bd      	mov	sp, r7
 80004a6:	bd80      	pop	{r7, pc}
 80004a8:	08004510 	.word	0x08004510

080004ac <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80004ac:	b580      	push	{r7, lr}
 80004ae:	b082      	sub	sp, #8
 80004b0:	af00      	add	r7, sp, #0
 80004b2:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80004b4:	6878      	ldr	r0, [r7, #4]
 80004b6:	f7ff ff8b 	bl	80003d0 <SysTick_Config>
 80004ba:	4603      	mov	r3, r0
}
 80004bc:	4618      	mov	r0, r3
 80004be:	3708      	adds	r7, #8
 80004c0:	46bd      	mov	sp, r7
 80004c2:	bd80      	pop	{r7, pc}

080004c4 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80004c4:	b480      	push	{r7}
 80004c6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80004c8:	4b05      	ldr	r3, [pc, #20]	; (80004e0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80004ca:	681b      	ldr	r3, [r3, #0]
 80004cc:	4a04      	ldr	r2, [pc, #16]	; (80004e0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80004ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80004d2:	6013      	str	r3, [r2, #0]
}
 80004d4:	bf00      	nop
 80004d6:	46bd      	mov	sp, r7
 80004d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004dc:	4770      	bx	lr
 80004de:	bf00      	nop
 80004e0:	40007000 	.word	0x40007000

080004e4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80004e4:	b480      	push	{r7}
 80004e6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80004e8:	4b04      	ldr	r3, [pc, #16]	; (80004fc <HAL_PWREx_GetVoltageRange+0x18>)
 80004ea:	681b      	ldr	r3, [r3, #0]
 80004ec:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80004f0:	4618      	mov	r0, r3
 80004f2:	46bd      	mov	sp, r7
 80004f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f8:	4770      	bx	lr
 80004fa:	bf00      	nop
 80004fc:	40007000 	.word	0x40007000

08000500 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b084      	sub	sp, #16
 8000504:	af00      	add	r7, sp, #0
 8000506:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800050e:	d007      	beq.n	8000520 <HAL_PWREx_ControlVoltageScaling+0x20>
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000516:	d003      	beq.n	8000520 <HAL_PWREx_ControlVoltageScaling+0x20>
 8000518:	21a8      	movs	r1, #168	; 0xa8
 800051a:	4826      	ldr	r0, [pc, #152]	; (80005b4 <HAL_PWREx_ControlVoltageScaling+0xb4>)
 800051c:	f003 fde9 	bl	80040f2 <assert_failed>
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000526:	d130      	bne.n	800058a <HAL_PWREx_ControlVoltageScaling+0x8a>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000528:	4b23      	ldr	r3, [pc, #140]	; (80005b8 <HAL_PWREx_ControlVoltageScaling+0xb8>)
 800052a:	681b      	ldr	r3, [r3, #0]
 800052c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000530:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000534:	d038      	beq.n	80005a8 <HAL_PWREx_ControlVoltageScaling+0xa8>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000536:	4b20      	ldr	r3, [pc, #128]	; (80005b8 <HAL_PWREx_ControlVoltageScaling+0xb8>)
 8000538:	681b      	ldr	r3, [r3, #0]
 800053a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800053e:	4a1e      	ldr	r2, [pc, #120]	; (80005b8 <HAL_PWREx_ControlVoltageScaling+0xb8>)
 8000540:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000544:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000546:	4b1d      	ldr	r3, [pc, #116]	; (80005bc <HAL_PWREx_ControlVoltageScaling+0xbc>)
 8000548:	681b      	ldr	r3, [r3, #0]
 800054a:	2232      	movs	r2, #50	; 0x32
 800054c:	fb02 f303 	mul.w	r3, r2, r3
 8000550:	4a1b      	ldr	r2, [pc, #108]	; (80005c0 <HAL_PWREx_ControlVoltageScaling+0xc0>)
 8000552:	fba2 2303 	umull	r2, r3, r2, r3
 8000556:	0c9b      	lsrs	r3, r3, #18
 8000558:	3301      	adds	r3, #1
 800055a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800055c:	e002      	b.n	8000564 <HAL_PWREx_ControlVoltageScaling+0x64>
      {
        wait_loop_index--;
 800055e:	68fb      	ldr	r3, [r7, #12]
 8000560:	3b01      	subs	r3, #1
 8000562:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000564:	4b14      	ldr	r3, [pc, #80]	; (80005b8 <HAL_PWREx_ControlVoltageScaling+0xb8>)
 8000566:	695b      	ldr	r3, [r3, #20]
 8000568:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800056c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000570:	d102      	bne.n	8000578 <HAL_PWREx_ControlVoltageScaling+0x78>
 8000572:	68fb      	ldr	r3, [r7, #12]
 8000574:	2b00      	cmp	r3, #0
 8000576:	d1f2      	bne.n	800055e <HAL_PWREx_ControlVoltageScaling+0x5e>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000578:	4b0f      	ldr	r3, [pc, #60]	; (80005b8 <HAL_PWREx_ControlVoltageScaling+0xb8>)
 800057a:	695b      	ldr	r3, [r3, #20]
 800057c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000580:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000584:	d110      	bne.n	80005a8 <HAL_PWREx_ControlVoltageScaling+0xa8>
      {
        return HAL_TIMEOUT;
 8000586:	2303      	movs	r3, #3
 8000588:	e00f      	b.n	80005aa <HAL_PWREx_ControlVoltageScaling+0xaa>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800058a:	4b0b      	ldr	r3, [pc, #44]	; (80005b8 <HAL_PWREx_ControlVoltageScaling+0xb8>)
 800058c:	681b      	ldr	r3, [r3, #0]
 800058e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000592:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000596:	d007      	beq.n	80005a8 <HAL_PWREx_ControlVoltageScaling+0xa8>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000598:	4b07      	ldr	r3, [pc, #28]	; (80005b8 <HAL_PWREx_ControlVoltageScaling+0xb8>)
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80005a0:	4a05      	ldr	r2, [pc, #20]	; (80005b8 <HAL_PWREx_ControlVoltageScaling+0xb8>)
 80005a2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80005a6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80005a8:	2300      	movs	r3, #0
}
 80005aa:	4618      	mov	r0, r3
 80005ac:	3710      	adds	r7, #16
 80005ae:	46bd      	mov	sp, r7
 80005b0:	bd80      	pop	{r7, pc}
 80005b2:	bf00      	nop
 80005b4:	0800454c 	.word	0x0800454c
 80005b8:	40007000 	.word	0x40007000
 80005bc:	2000000c 	.word	0x2000000c
 80005c0:	431bde83 	.word	0x431bde83

080005c4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b088      	sub	sp, #32
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d102      	bne.n	80005d8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80005d2:	2301      	movs	r3, #1
 80005d4:	f000 bcdc 	b.w	8000f90 <HAL_RCC_OscConfig+0x9cc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d022      	beq.n	8000626 <HAL_RCC_OscConfig+0x62>
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	f003 0301 	and.w	r3, r3, #1
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d11c      	bne.n	8000626 <HAL_RCC_OscConfig+0x62>
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	f003 0302 	and.w	r3, r3, #2
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d116      	bne.n	8000626 <HAL_RCC_OscConfig+0x62>
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	f003 0310 	and.w	r3, r3, #16
 8000600:	2b00      	cmp	r3, #0
 8000602:	d110      	bne.n	8000626 <HAL_RCC_OscConfig+0x62>
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	f003 0308 	and.w	r3, r3, #8
 800060c:	2b00      	cmp	r3, #0
 800060e:	d10a      	bne.n	8000626 <HAL_RCC_OscConfig+0x62>
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	f003 0304 	and.w	r3, r3, #4
 8000618:	2b00      	cmp	r3, #0
 800061a:	d104      	bne.n	8000626 <HAL_RCC_OscConfig+0x62>
 800061c:	f44f 71cf 	mov.w	r1, #414	; 0x19e
 8000620:	48a0      	ldr	r0, [pc, #640]	; (80008a4 <HAL_RCC_OscConfig+0x2e0>)
 8000622:	f003 fd66 	bl	80040f2 <assert_failed>

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000626:	4ba0      	ldr	r3, [pc, #640]	; (80008a8 <HAL_RCC_OscConfig+0x2e4>)
 8000628:	689b      	ldr	r3, [r3, #8]
 800062a:	f003 030c 	and.w	r3, r3, #12
 800062e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000630:	4b9d      	ldr	r3, [pc, #628]	; (80008a8 <HAL_RCC_OscConfig+0x2e4>)
 8000632:	68db      	ldr	r3, [r3, #12]
 8000634:	f003 0303 	and.w	r3, r3, #3
 8000638:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	f003 0310 	and.w	r3, r3, #16
 8000642:	2b00      	cmp	r3, #0
 8000644:	f000 8139 	beq.w	80008ba <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	699b      	ldr	r3, [r3, #24]
 800064c:	2b00      	cmp	r3, #0
 800064e:	d008      	beq.n	8000662 <HAL_RCC_OscConfig+0x9e>
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	699b      	ldr	r3, [r3, #24]
 8000654:	2b01      	cmp	r3, #1
 8000656:	d004      	beq.n	8000662 <HAL_RCC_OscConfig+0x9e>
 8000658:	f240 11a7 	movw	r1, #423	; 0x1a7
 800065c:	4891      	ldr	r0, [pc, #580]	; (80008a4 <HAL_RCC_OscConfig+0x2e0>)
 800065e:	f003 fd48 	bl	80040f2 <assert_failed>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	69db      	ldr	r3, [r3, #28]
 8000666:	2bff      	cmp	r3, #255	; 0xff
 8000668:	d904      	bls.n	8000674 <HAL_RCC_OscConfig+0xb0>
 800066a:	f44f 71d4 	mov.w	r1, #424	; 0x1a8
 800066e:	488d      	ldr	r0, [pc, #564]	; (80008a4 <HAL_RCC_OscConfig+0x2e0>)
 8000670:	f003 fd3f 	bl	80040f2 <assert_failed>
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	6a1b      	ldr	r3, [r3, #32]
 8000678:	2b00      	cmp	r3, #0
 800067a:	d030      	beq.n	80006de <HAL_RCC_OscConfig+0x11a>
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	6a1b      	ldr	r3, [r3, #32]
 8000680:	2b10      	cmp	r3, #16
 8000682:	d02c      	beq.n	80006de <HAL_RCC_OscConfig+0x11a>
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	6a1b      	ldr	r3, [r3, #32]
 8000688:	2b20      	cmp	r3, #32
 800068a:	d028      	beq.n	80006de <HAL_RCC_OscConfig+0x11a>
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	6a1b      	ldr	r3, [r3, #32]
 8000690:	2b30      	cmp	r3, #48	; 0x30
 8000692:	d024      	beq.n	80006de <HAL_RCC_OscConfig+0x11a>
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	6a1b      	ldr	r3, [r3, #32]
 8000698:	2b40      	cmp	r3, #64	; 0x40
 800069a:	d020      	beq.n	80006de <HAL_RCC_OscConfig+0x11a>
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	6a1b      	ldr	r3, [r3, #32]
 80006a0:	2b50      	cmp	r3, #80	; 0x50
 80006a2:	d01c      	beq.n	80006de <HAL_RCC_OscConfig+0x11a>
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	6a1b      	ldr	r3, [r3, #32]
 80006a8:	2b60      	cmp	r3, #96	; 0x60
 80006aa:	d018      	beq.n	80006de <HAL_RCC_OscConfig+0x11a>
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	6a1b      	ldr	r3, [r3, #32]
 80006b0:	2b70      	cmp	r3, #112	; 0x70
 80006b2:	d014      	beq.n	80006de <HAL_RCC_OscConfig+0x11a>
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	6a1b      	ldr	r3, [r3, #32]
 80006b8:	2b80      	cmp	r3, #128	; 0x80
 80006ba:	d010      	beq.n	80006de <HAL_RCC_OscConfig+0x11a>
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	6a1b      	ldr	r3, [r3, #32]
 80006c0:	2b90      	cmp	r3, #144	; 0x90
 80006c2:	d00c      	beq.n	80006de <HAL_RCC_OscConfig+0x11a>
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	6a1b      	ldr	r3, [r3, #32]
 80006c8:	2ba0      	cmp	r3, #160	; 0xa0
 80006ca:	d008      	beq.n	80006de <HAL_RCC_OscConfig+0x11a>
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	6a1b      	ldr	r3, [r3, #32]
 80006d0:	2bb0      	cmp	r3, #176	; 0xb0
 80006d2:	d004      	beq.n	80006de <HAL_RCC_OscConfig+0x11a>
 80006d4:	f240 11a9 	movw	r1, #425	; 0x1a9
 80006d8:	4872      	ldr	r0, [pc, #456]	; (80008a4 <HAL_RCC_OscConfig+0x2e0>)
 80006da:	f003 fd0a 	bl	80040f2 <assert_failed>

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80006de:	69bb      	ldr	r3, [r7, #24]
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d007      	beq.n	80006f4 <HAL_RCC_OscConfig+0x130>
 80006e4:	69bb      	ldr	r3, [r7, #24]
 80006e6:	2b0c      	cmp	r3, #12
 80006e8:	f040 808a 	bne.w	8000800 <HAL_RCC_OscConfig+0x23c>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80006ec:	697b      	ldr	r3, [r7, #20]
 80006ee:	2b01      	cmp	r3, #1
 80006f0:	f040 8086 	bne.w	8000800 <HAL_RCC_OscConfig+0x23c>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80006f4:	4b6c      	ldr	r3, [pc, #432]	; (80008a8 <HAL_RCC_OscConfig+0x2e4>)
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	f003 0302 	and.w	r3, r3, #2
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d006      	beq.n	800070e <HAL_RCC_OscConfig+0x14a>
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	699b      	ldr	r3, [r3, #24]
 8000704:	2b00      	cmp	r3, #0
 8000706:	d102      	bne.n	800070e <HAL_RCC_OscConfig+0x14a>
      {
        return HAL_ERROR;
 8000708:	2301      	movs	r3, #1
 800070a:	f000 bc41 	b.w	8000f90 <HAL_RCC_OscConfig+0x9cc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	6a1a      	ldr	r2, [r3, #32]
 8000712:	4b65      	ldr	r3, [pc, #404]	; (80008a8 <HAL_RCC_OscConfig+0x2e4>)
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	f003 0308 	and.w	r3, r3, #8
 800071a:	2b00      	cmp	r3, #0
 800071c:	d004      	beq.n	8000728 <HAL_RCC_OscConfig+0x164>
 800071e:	4b62      	ldr	r3, [pc, #392]	; (80008a8 <HAL_RCC_OscConfig+0x2e4>)
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000726:	e005      	b.n	8000734 <HAL_RCC_OscConfig+0x170>
 8000728:	4b5f      	ldr	r3, [pc, #380]	; (80008a8 <HAL_RCC_OscConfig+0x2e4>)
 800072a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800072e:	091b      	lsrs	r3, r3, #4
 8000730:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000734:	4293      	cmp	r3, r2
 8000736:	d224      	bcs.n	8000782 <HAL_RCC_OscConfig+0x1be>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	6a1b      	ldr	r3, [r3, #32]
 800073c:	4618      	mov	r0, r3
 800073e:	f000 fe3b 	bl	80013b8 <RCC_SetFlashLatencyFromMSIRange>
 8000742:	4603      	mov	r3, r0
 8000744:	2b00      	cmp	r3, #0
 8000746:	d002      	beq.n	800074e <HAL_RCC_OscConfig+0x18a>
          {
            return HAL_ERROR;
 8000748:	2301      	movs	r3, #1
 800074a:	f000 bc21 	b.w	8000f90 <HAL_RCC_OscConfig+0x9cc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800074e:	4b56      	ldr	r3, [pc, #344]	; (80008a8 <HAL_RCC_OscConfig+0x2e4>)
 8000750:	681b      	ldr	r3, [r3, #0]
 8000752:	4a55      	ldr	r2, [pc, #340]	; (80008a8 <HAL_RCC_OscConfig+0x2e4>)
 8000754:	f043 0308 	orr.w	r3, r3, #8
 8000758:	6013      	str	r3, [r2, #0]
 800075a:	4b53      	ldr	r3, [pc, #332]	; (80008a8 <HAL_RCC_OscConfig+0x2e4>)
 800075c:	681b      	ldr	r3, [r3, #0]
 800075e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	6a1b      	ldr	r3, [r3, #32]
 8000766:	4950      	ldr	r1, [pc, #320]	; (80008a8 <HAL_RCC_OscConfig+0x2e4>)
 8000768:	4313      	orrs	r3, r2
 800076a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800076c:	4b4e      	ldr	r3, [pc, #312]	; (80008a8 <HAL_RCC_OscConfig+0x2e4>)
 800076e:	685b      	ldr	r3, [r3, #4]
 8000770:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	69db      	ldr	r3, [r3, #28]
 8000778:	021b      	lsls	r3, r3, #8
 800077a:	494b      	ldr	r1, [pc, #300]	; (80008a8 <HAL_RCC_OscConfig+0x2e4>)
 800077c:	4313      	orrs	r3, r2
 800077e:	604b      	str	r3, [r1, #4]
 8000780:	e022      	b.n	80007c8 <HAL_RCC_OscConfig+0x204>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000782:	4b49      	ldr	r3, [pc, #292]	; (80008a8 <HAL_RCC_OscConfig+0x2e4>)
 8000784:	681b      	ldr	r3, [r3, #0]
 8000786:	4a48      	ldr	r2, [pc, #288]	; (80008a8 <HAL_RCC_OscConfig+0x2e4>)
 8000788:	f043 0308 	orr.w	r3, r3, #8
 800078c:	6013      	str	r3, [r2, #0]
 800078e:	4b46      	ldr	r3, [pc, #280]	; (80008a8 <HAL_RCC_OscConfig+0x2e4>)
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	6a1b      	ldr	r3, [r3, #32]
 800079a:	4943      	ldr	r1, [pc, #268]	; (80008a8 <HAL_RCC_OscConfig+0x2e4>)
 800079c:	4313      	orrs	r3, r2
 800079e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80007a0:	4b41      	ldr	r3, [pc, #260]	; (80008a8 <HAL_RCC_OscConfig+0x2e4>)
 80007a2:	685b      	ldr	r3, [r3, #4]
 80007a4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	69db      	ldr	r3, [r3, #28]
 80007ac:	021b      	lsls	r3, r3, #8
 80007ae:	493e      	ldr	r1, [pc, #248]	; (80008a8 <HAL_RCC_OscConfig+0x2e4>)
 80007b0:	4313      	orrs	r3, r2
 80007b2:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	6a1b      	ldr	r3, [r3, #32]
 80007b8:	4618      	mov	r0, r3
 80007ba:	f000 fdfd 	bl	80013b8 <RCC_SetFlashLatencyFromMSIRange>
 80007be:	4603      	mov	r3, r0
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d001      	beq.n	80007c8 <HAL_RCC_OscConfig+0x204>
          {
            return HAL_ERROR;
 80007c4:	2301      	movs	r3, #1
 80007c6:	e3e3      	b.n	8000f90 <HAL_RCC_OscConfig+0x9cc>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80007c8:	f000 fd6c 	bl	80012a4 <HAL_RCC_GetSysClockFreq>
 80007cc:	4601      	mov	r1, r0
 80007ce:	4b36      	ldr	r3, [pc, #216]	; (80008a8 <HAL_RCC_OscConfig+0x2e4>)
 80007d0:	689b      	ldr	r3, [r3, #8]
 80007d2:	091b      	lsrs	r3, r3, #4
 80007d4:	f003 030f 	and.w	r3, r3, #15
 80007d8:	4a34      	ldr	r2, [pc, #208]	; (80008ac <HAL_RCC_OscConfig+0x2e8>)
 80007da:	5cd3      	ldrb	r3, [r2, r3]
 80007dc:	f003 031f 	and.w	r3, r3, #31
 80007e0:	fa21 f303 	lsr.w	r3, r1, r3
 80007e4:	4a32      	ldr	r2, [pc, #200]	; (80008b0 <HAL_RCC_OscConfig+0x2ec>)
 80007e6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80007e8:	4b32      	ldr	r3, [pc, #200]	; (80008b4 <HAL_RCC_OscConfig+0x2f0>)
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	4618      	mov	r0, r3
 80007ee:	f7ff fd07 	bl	8000200 <HAL_InitTick>
 80007f2:	4603      	mov	r3, r0
 80007f4:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80007f6:	7bfb      	ldrb	r3, [r7, #15]
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d05d      	beq.n	80008b8 <HAL_RCC_OscConfig+0x2f4>
        {
          return status;
 80007fc:	7bfb      	ldrb	r3, [r7, #15]
 80007fe:	e3c7      	b.n	8000f90 <HAL_RCC_OscConfig+0x9cc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	699b      	ldr	r3, [r3, #24]
 8000804:	2b00      	cmp	r3, #0
 8000806:	d032      	beq.n	800086e <HAL_RCC_OscConfig+0x2aa>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8000808:	4b27      	ldr	r3, [pc, #156]	; (80008a8 <HAL_RCC_OscConfig+0x2e4>)
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	4a26      	ldr	r2, [pc, #152]	; (80008a8 <HAL_RCC_OscConfig+0x2e4>)
 800080e:	f043 0301 	orr.w	r3, r3, #1
 8000812:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000814:	f7ff fd40 	bl	8000298 <HAL_GetTick>
 8000818:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800081a:	e008      	b.n	800082e <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800081c:	f7ff fd3c 	bl	8000298 <HAL_GetTick>
 8000820:	4602      	mov	r2, r0
 8000822:	693b      	ldr	r3, [r7, #16]
 8000824:	1ad3      	subs	r3, r2, r3
 8000826:	2b02      	cmp	r3, #2
 8000828:	d901      	bls.n	800082e <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 800082a:	2303      	movs	r3, #3
 800082c:	e3b0      	b.n	8000f90 <HAL_RCC_OscConfig+0x9cc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800082e:	4b1e      	ldr	r3, [pc, #120]	; (80008a8 <HAL_RCC_OscConfig+0x2e4>)
 8000830:	681b      	ldr	r3, [r3, #0]
 8000832:	f003 0302 	and.w	r3, r3, #2
 8000836:	2b00      	cmp	r3, #0
 8000838:	d0f0      	beq.n	800081c <HAL_RCC_OscConfig+0x258>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800083a:	4b1b      	ldr	r3, [pc, #108]	; (80008a8 <HAL_RCC_OscConfig+0x2e4>)
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	4a1a      	ldr	r2, [pc, #104]	; (80008a8 <HAL_RCC_OscConfig+0x2e4>)
 8000840:	f043 0308 	orr.w	r3, r3, #8
 8000844:	6013      	str	r3, [r2, #0]
 8000846:	4b18      	ldr	r3, [pc, #96]	; (80008a8 <HAL_RCC_OscConfig+0x2e4>)
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	6a1b      	ldr	r3, [r3, #32]
 8000852:	4915      	ldr	r1, [pc, #84]	; (80008a8 <HAL_RCC_OscConfig+0x2e4>)
 8000854:	4313      	orrs	r3, r2
 8000856:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000858:	4b13      	ldr	r3, [pc, #76]	; (80008a8 <HAL_RCC_OscConfig+0x2e4>)
 800085a:	685b      	ldr	r3, [r3, #4]
 800085c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	69db      	ldr	r3, [r3, #28]
 8000864:	021b      	lsls	r3, r3, #8
 8000866:	4910      	ldr	r1, [pc, #64]	; (80008a8 <HAL_RCC_OscConfig+0x2e4>)
 8000868:	4313      	orrs	r3, r2
 800086a:	604b      	str	r3, [r1, #4]
 800086c:	e025      	b.n	80008ba <HAL_RCC_OscConfig+0x2f6>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800086e:	4b0e      	ldr	r3, [pc, #56]	; (80008a8 <HAL_RCC_OscConfig+0x2e4>)
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	4a0d      	ldr	r2, [pc, #52]	; (80008a8 <HAL_RCC_OscConfig+0x2e4>)
 8000874:	f023 0301 	bic.w	r3, r3, #1
 8000878:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800087a:	f7ff fd0d 	bl	8000298 <HAL_GetTick>
 800087e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000880:	e008      	b.n	8000894 <HAL_RCC_OscConfig+0x2d0>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000882:	f7ff fd09 	bl	8000298 <HAL_GetTick>
 8000886:	4602      	mov	r2, r0
 8000888:	693b      	ldr	r3, [r7, #16]
 800088a:	1ad3      	subs	r3, r2, r3
 800088c:	2b02      	cmp	r3, #2
 800088e:	d901      	bls.n	8000894 <HAL_RCC_OscConfig+0x2d0>
          {
            return HAL_TIMEOUT;
 8000890:	2303      	movs	r3, #3
 8000892:	e37d      	b.n	8000f90 <HAL_RCC_OscConfig+0x9cc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000894:	4b04      	ldr	r3, [pc, #16]	; (80008a8 <HAL_RCC_OscConfig+0x2e4>)
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	f003 0302 	and.w	r3, r3, #2
 800089c:	2b00      	cmp	r3, #0
 800089e:	d1f0      	bne.n	8000882 <HAL_RCC_OscConfig+0x2be>
 80008a0:	e00b      	b.n	80008ba <HAL_RCC_OscConfig+0x2f6>
 80008a2:	bf00      	nop
 80008a4:	08004588 	.word	0x08004588
 80008a8:	40021000 	.word	0x40021000
 80008ac:	080045e4 	.word	0x080045e4
 80008b0:	2000000c 	.word	0x2000000c
 80008b4:	20000000 	.word	0x20000000
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80008b8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	681b      	ldr	r3, [r3, #0]
 80008be:	f003 0301 	and.w	r3, r3, #1
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d07e      	beq.n	80009c4 <HAL_RCC_OscConfig+0x400>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	685b      	ldr	r3, [r3, #4]
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d00e      	beq.n	80008ec <HAL_RCC_OscConfig+0x328>
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	685b      	ldr	r3, [r3, #4]
 80008d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80008d6:	d009      	beq.n	80008ec <HAL_RCC_OscConfig+0x328>
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	685b      	ldr	r3, [r3, #4]
 80008dc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80008e0:	d004      	beq.n	80008ec <HAL_RCC_OscConfig+0x328>
 80008e2:	f240 2111 	movw	r1, #529	; 0x211
 80008e6:	489b      	ldr	r0, [pc, #620]	; (8000b54 <HAL_RCC_OscConfig+0x590>)
 80008e8:	f003 fc03 	bl	80040f2 <assert_failed>

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80008ec:	69bb      	ldr	r3, [r7, #24]
 80008ee:	2b08      	cmp	r3, #8
 80008f0:	d005      	beq.n	80008fe <HAL_RCC_OscConfig+0x33a>
 80008f2:	69bb      	ldr	r3, [r7, #24]
 80008f4:	2b0c      	cmp	r3, #12
 80008f6:	d10e      	bne.n	8000916 <HAL_RCC_OscConfig+0x352>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80008f8:	697b      	ldr	r3, [r7, #20]
 80008fa:	2b03      	cmp	r3, #3
 80008fc:	d10b      	bne.n	8000916 <HAL_RCC_OscConfig+0x352>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80008fe:	4b96      	ldr	r3, [pc, #600]	; (8000b58 <HAL_RCC_OscConfig+0x594>)
 8000900:	681b      	ldr	r3, [r3, #0]
 8000902:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000906:	2b00      	cmp	r3, #0
 8000908:	d05b      	beq.n	80009c2 <HAL_RCC_OscConfig+0x3fe>
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	685b      	ldr	r3, [r3, #4]
 800090e:	2b00      	cmp	r3, #0
 8000910:	d157      	bne.n	80009c2 <HAL_RCC_OscConfig+0x3fe>
      {
        return HAL_ERROR;
 8000912:	2301      	movs	r3, #1
 8000914:	e33c      	b.n	8000f90 <HAL_RCC_OscConfig+0x9cc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	685b      	ldr	r3, [r3, #4]
 800091a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800091e:	d106      	bne.n	800092e <HAL_RCC_OscConfig+0x36a>
 8000920:	4b8d      	ldr	r3, [pc, #564]	; (8000b58 <HAL_RCC_OscConfig+0x594>)
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	4a8c      	ldr	r2, [pc, #560]	; (8000b58 <HAL_RCC_OscConfig+0x594>)
 8000926:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800092a:	6013      	str	r3, [r2, #0]
 800092c:	e01d      	b.n	800096a <HAL_RCC_OscConfig+0x3a6>
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	685b      	ldr	r3, [r3, #4]
 8000932:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000936:	d10c      	bne.n	8000952 <HAL_RCC_OscConfig+0x38e>
 8000938:	4b87      	ldr	r3, [pc, #540]	; (8000b58 <HAL_RCC_OscConfig+0x594>)
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	4a86      	ldr	r2, [pc, #536]	; (8000b58 <HAL_RCC_OscConfig+0x594>)
 800093e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000942:	6013      	str	r3, [r2, #0]
 8000944:	4b84      	ldr	r3, [pc, #528]	; (8000b58 <HAL_RCC_OscConfig+0x594>)
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	4a83      	ldr	r2, [pc, #524]	; (8000b58 <HAL_RCC_OscConfig+0x594>)
 800094a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800094e:	6013      	str	r3, [r2, #0]
 8000950:	e00b      	b.n	800096a <HAL_RCC_OscConfig+0x3a6>
 8000952:	4b81      	ldr	r3, [pc, #516]	; (8000b58 <HAL_RCC_OscConfig+0x594>)
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	4a80      	ldr	r2, [pc, #512]	; (8000b58 <HAL_RCC_OscConfig+0x594>)
 8000958:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800095c:	6013      	str	r3, [r2, #0]
 800095e:	4b7e      	ldr	r3, [pc, #504]	; (8000b58 <HAL_RCC_OscConfig+0x594>)
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	4a7d      	ldr	r2, [pc, #500]	; (8000b58 <HAL_RCC_OscConfig+0x594>)
 8000964:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000968:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	685b      	ldr	r3, [r3, #4]
 800096e:	2b00      	cmp	r3, #0
 8000970:	d013      	beq.n	800099a <HAL_RCC_OscConfig+0x3d6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000972:	f7ff fc91 	bl	8000298 <HAL_GetTick>
 8000976:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000978:	e008      	b.n	800098c <HAL_RCC_OscConfig+0x3c8>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800097a:	f7ff fc8d 	bl	8000298 <HAL_GetTick>
 800097e:	4602      	mov	r2, r0
 8000980:	693b      	ldr	r3, [r7, #16]
 8000982:	1ad3      	subs	r3, r2, r3
 8000984:	2b64      	cmp	r3, #100	; 0x64
 8000986:	d901      	bls.n	800098c <HAL_RCC_OscConfig+0x3c8>
          {
            return HAL_TIMEOUT;
 8000988:	2303      	movs	r3, #3
 800098a:	e301      	b.n	8000f90 <HAL_RCC_OscConfig+0x9cc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800098c:	4b72      	ldr	r3, [pc, #456]	; (8000b58 <HAL_RCC_OscConfig+0x594>)
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000994:	2b00      	cmp	r3, #0
 8000996:	d0f0      	beq.n	800097a <HAL_RCC_OscConfig+0x3b6>
 8000998:	e014      	b.n	80009c4 <HAL_RCC_OscConfig+0x400>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800099a:	f7ff fc7d 	bl	8000298 <HAL_GetTick>
 800099e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80009a0:	e008      	b.n	80009b4 <HAL_RCC_OscConfig+0x3f0>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80009a2:	f7ff fc79 	bl	8000298 <HAL_GetTick>
 80009a6:	4602      	mov	r2, r0
 80009a8:	693b      	ldr	r3, [r7, #16]
 80009aa:	1ad3      	subs	r3, r2, r3
 80009ac:	2b64      	cmp	r3, #100	; 0x64
 80009ae:	d901      	bls.n	80009b4 <HAL_RCC_OscConfig+0x3f0>
          {
            return HAL_TIMEOUT;
 80009b0:	2303      	movs	r3, #3
 80009b2:	e2ed      	b.n	8000f90 <HAL_RCC_OscConfig+0x9cc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80009b4:	4b68      	ldr	r3, [pc, #416]	; (8000b58 <HAL_RCC_OscConfig+0x594>)
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d1f0      	bne.n	80009a2 <HAL_RCC_OscConfig+0x3de>
 80009c0:	e000      	b.n	80009c4 <HAL_RCC_OscConfig+0x400>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80009c2:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	f003 0302 	and.w	r3, r3, #2
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d077      	beq.n	8000ac0 <HAL_RCC_OscConfig+0x4fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	68db      	ldr	r3, [r3, #12]
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d009      	beq.n	80009ec <HAL_RCC_OscConfig+0x428>
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	68db      	ldr	r3, [r3, #12]
 80009dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80009e0:	d004      	beq.n	80009ec <HAL_RCC_OscConfig+0x428>
 80009e2:	f44f 7111 	mov.w	r1, #580	; 0x244
 80009e6:	485b      	ldr	r0, [pc, #364]	; (8000b54 <HAL_RCC_OscConfig+0x590>)
 80009e8:	f003 fb83 	bl	80040f2 <assert_failed>
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	691b      	ldr	r3, [r3, #16]
 80009f0:	2b1f      	cmp	r3, #31
 80009f2:	d904      	bls.n	80009fe <HAL_RCC_OscConfig+0x43a>
 80009f4:	f240 2145 	movw	r1, #581	; 0x245
 80009f8:	4856      	ldr	r0, [pc, #344]	; (8000b54 <HAL_RCC_OscConfig+0x590>)
 80009fa:	f003 fb7a 	bl	80040f2 <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80009fe:	69bb      	ldr	r3, [r7, #24]
 8000a00:	2b04      	cmp	r3, #4
 8000a02:	d005      	beq.n	8000a10 <HAL_RCC_OscConfig+0x44c>
 8000a04:	69bb      	ldr	r3, [r7, #24]
 8000a06:	2b0c      	cmp	r3, #12
 8000a08:	d119      	bne.n	8000a3e <HAL_RCC_OscConfig+0x47a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8000a0a:	697b      	ldr	r3, [r7, #20]
 8000a0c:	2b02      	cmp	r3, #2
 8000a0e:	d116      	bne.n	8000a3e <HAL_RCC_OscConfig+0x47a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000a10:	4b51      	ldr	r3, [pc, #324]	; (8000b58 <HAL_RCC_OscConfig+0x594>)
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d005      	beq.n	8000a28 <HAL_RCC_OscConfig+0x464>
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	68db      	ldr	r3, [r3, #12]
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d101      	bne.n	8000a28 <HAL_RCC_OscConfig+0x464>
      {
        return HAL_ERROR;
 8000a24:	2301      	movs	r3, #1
 8000a26:	e2b3      	b.n	8000f90 <HAL_RCC_OscConfig+0x9cc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000a28:	4b4b      	ldr	r3, [pc, #300]	; (8000b58 <HAL_RCC_OscConfig+0x594>)
 8000a2a:	685b      	ldr	r3, [r3, #4]
 8000a2c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	691b      	ldr	r3, [r3, #16]
 8000a34:	061b      	lsls	r3, r3, #24
 8000a36:	4948      	ldr	r1, [pc, #288]	; (8000b58 <HAL_RCC_OscConfig+0x594>)
 8000a38:	4313      	orrs	r3, r2
 8000a3a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000a3c:	e040      	b.n	8000ac0 <HAL_RCC_OscConfig+0x4fc>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	68db      	ldr	r3, [r3, #12]
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d023      	beq.n	8000a8e <HAL_RCC_OscConfig+0x4ca>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000a46:	4b44      	ldr	r3, [pc, #272]	; (8000b58 <HAL_RCC_OscConfig+0x594>)
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	4a43      	ldr	r2, [pc, #268]	; (8000b58 <HAL_RCC_OscConfig+0x594>)
 8000a4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a50:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000a52:	f7ff fc21 	bl	8000298 <HAL_GetTick>
 8000a56:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000a58:	e008      	b.n	8000a6c <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000a5a:	f7ff fc1d 	bl	8000298 <HAL_GetTick>
 8000a5e:	4602      	mov	r2, r0
 8000a60:	693b      	ldr	r3, [r7, #16]
 8000a62:	1ad3      	subs	r3, r2, r3
 8000a64:	2b02      	cmp	r3, #2
 8000a66:	d901      	bls.n	8000a6c <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8000a68:	2303      	movs	r3, #3
 8000a6a:	e291      	b.n	8000f90 <HAL_RCC_OscConfig+0x9cc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000a6c:	4b3a      	ldr	r3, [pc, #232]	; (8000b58 <HAL_RCC_OscConfig+0x594>)
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d0f0      	beq.n	8000a5a <HAL_RCC_OscConfig+0x496>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000a78:	4b37      	ldr	r3, [pc, #220]	; (8000b58 <HAL_RCC_OscConfig+0x594>)
 8000a7a:	685b      	ldr	r3, [r3, #4]
 8000a7c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	691b      	ldr	r3, [r3, #16]
 8000a84:	061b      	lsls	r3, r3, #24
 8000a86:	4934      	ldr	r1, [pc, #208]	; (8000b58 <HAL_RCC_OscConfig+0x594>)
 8000a88:	4313      	orrs	r3, r2
 8000a8a:	604b      	str	r3, [r1, #4]
 8000a8c:	e018      	b.n	8000ac0 <HAL_RCC_OscConfig+0x4fc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000a8e:	4b32      	ldr	r3, [pc, #200]	; (8000b58 <HAL_RCC_OscConfig+0x594>)
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	4a31      	ldr	r2, [pc, #196]	; (8000b58 <HAL_RCC_OscConfig+0x594>)
 8000a94:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000a98:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000a9a:	f7ff fbfd 	bl	8000298 <HAL_GetTick>
 8000a9e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000aa0:	e008      	b.n	8000ab4 <HAL_RCC_OscConfig+0x4f0>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000aa2:	f7ff fbf9 	bl	8000298 <HAL_GetTick>
 8000aa6:	4602      	mov	r2, r0
 8000aa8:	693b      	ldr	r3, [r7, #16]
 8000aaa:	1ad3      	subs	r3, r2, r3
 8000aac:	2b02      	cmp	r3, #2
 8000aae:	d901      	bls.n	8000ab4 <HAL_RCC_OscConfig+0x4f0>
          {
            return HAL_TIMEOUT;
 8000ab0:	2303      	movs	r3, #3
 8000ab2:	e26d      	b.n	8000f90 <HAL_RCC_OscConfig+0x9cc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000ab4:	4b28      	ldr	r3, [pc, #160]	; (8000b58 <HAL_RCC_OscConfig+0x594>)
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d1f0      	bne.n	8000aa2 <HAL_RCC_OscConfig+0x4de>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	f003 0308 	and.w	r3, r3, #8
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d04e      	beq.n	8000b6a <HAL_RCC_OscConfig+0x5a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	695b      	ldr	r3, [r3, #20]
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d008      	beq.n	8000ae6 <HAL_RCC_OscConfig+0x522>
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	695b      	ldr	r3, [r3, #20]
 8000ad8:	2b01      	cmp	r3, #1
 8000ada:	d004      	beq.n	8000ae6 <HAL_RCC_OscConfig+0x522>
 8000adc:	f240 2185 	movw	r1, #645	; 0x285
 8000ae0:	481c      	ldr	r0, [pc, #112]	; (8000b54 <HAL_RCC_OscConfig+0x590>)
 8000ae2:	f003 fb06 	bl	80040f2 <assert_failed>

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	695b      	ldr	r3, [r3, #20]
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d01c      	beq.n	8000b28 <HAL_RCC_OscConfig+0x564>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000aee:	4b1a      	ldr	r3, [pc, #104]	; (8000b58 <HAL_RCC_OscConfig+0x594>)
 8000af0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000af4:	4a18      	ldr	r2, [pc, #96]	; (8000b58 <HAL_RCC_OscConfig+0x594>)
 8000af6:	f043 0301 	orr.w	r3, r3, #1
 8000afa:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000afe:	f7ff fbcb 	bl	8000298 <HAL_GetTick>
 8000b02:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8000b04:	e008      	b.n	8000b18 <HAL_RCC_OscConfig+0x554>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000b06:	f7ff fbc7 	bl	8000298 <HAL_GetTick>
 8000b0a:	4602      	mov	r2, r0
 8000b0c:	693b      	ldr	r3, [r7, #16]
 8000b0e:	1ad3      	subs	r3, r2, r3
 8000b10:	2b02      	cmp	r3, #2
 8000b12:	d901      	bls.n	8000b18 <HAL_RCC_OscConfig+0x554>
        {
          return HAL_TIMEOUT;
 8000b14:	2303      	movs	r3, #3
 8000b16:	e23b      	b.n	8000f90 <HAL_RCC_OscConfig+0x9cc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8000b18:	4b0f      	ldr	r3, [pc, #60]	; (8000b58 <HAL_RCC_OscConfig+0x594>)
 8000b1a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000b1e:	f003 0302 	and.w	r3, r3, #2
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d0ef      	beq.n	8000b06 <HAL_RCC_OscConfig+0x542>
 8000b26:	e020      	b.n	8000b6a <HAL_RCC_OscConfig+0x5a6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000b28:	4b0b      	ldr	r3, [pc, #44]	; (8000b58 <HAL_RCC_OscConfig+0x594>)
 8000b2a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000b2e:	4a0a      	ldr	r2, [pc, #40]	; (8000b58 <HAL_RCC_OscConfig+0x594>)
 8000b30:	f023 0301 	bic.w	r3, r3, #1
 8000b34:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000b38:	f7ff fbae 	bl	8000298 <HAL_GetTick>
 8000b3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8000b3e:	e00d      	b.n	8000b5c <HAL_RCC_OscConfig+0x598>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000b40:	f7ff fbaa 	bl	8000298 <HAL_GetTick>
 8000b44:	4602      	mov	r2, r0
 8000b46:	693b      	ldr	r3, [r7, #16]
 8000b48:	1ad3      	subs	r3, r2, r3
 8000b4a:	2b02      	cmp	r3, #2
 8000b4c:	d906      	bls.n	8000b5c <HAL_RCC_OscConfig+0x598>
        {
          return HAL_TIMEOUT;
 8000b4e:	2303      	movs	r3, #3
 8000b50:	e21e      	b.n	8000f90 <HAL_RCC_OscConfig+0x9cc>
 8000b52:	bf00      	nop
 8000b54:	08004588 	.word	0x08004588
 8000b58:	40021000 	.word	0x40021000
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8000b5c:	4ba7      	ldr	r3, [pc, #668]	; (8000dfc <HAL_RCC_OscConfig+0x838>)
 8000b5e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000b62:	f003 0302 	and.w	r3, r3, #2
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d1ea      	bne.n	8000b40 <HAL_RCC_OscConfig+0x57c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	f003 0304 	and.w	r3, r3, #4
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	f000 80b2 	beq.w	8000cdc <HAL_RCC_OscConfig+0x718>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	77fb      	strb	r3, [r7, #31]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	689b      	ldr	r3, [r3, #8]
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d00c      	beq.n	8000b9e <HAL_RCC_OscConfig+0x5da>
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	689b      	ldr	r3, [r3, #8]
 8000b88:	2b01      	cmp	r3, #1
 8000b8a:	d008      	beq.n	8000b9e <HAL_RCC_OscConfig+0x5da>
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	689b      	ldr	r3, [r3, #8]
 8000b90:	2b05      	cmp	r3, #5
 8000b92:	d004      	beq.n	8000b9e <HAL_RCC_OscConfig+0x5da>
 8000b94:	f44f 7136 	mov.w	r1, #728	; 0x2d8
 8000b98:	4899      	ldr	r0, [pc, #612]	; (8000e00 <HAL_RCC_OscConfig+0x83c>)
 8000b9a:	f003 faaa 	bl	80040f2 <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8000b9e:	4b97      	ldr	r3, [pc, #604]	; (8000dfc <HAL_RCC_OscConfig+0x838>)
 8000ba0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ba2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d10d      	bne.n	8000bc6 <HAL_RCC_OscConfig+0x602>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000baa:	4b94      	ldr	r3, [pc, #592]	; (8000dfc <HAL_RCC_OscConfig+0x838>)
 8000bac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bae:	4a93      	ldr	r2, [pc, #588]	; (8000dfc <HAL_RCC_OscConfig+0x838>)
 8000bb0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bb4:	6593      	str	r3, [r2, #88]	; 0x58
 8000bb6:	4b91      	ldr	r3, [pc, #580]	; (8000dfc <HAL_RCC_OscConfig+0x838>)
 8000bb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bbe:	60bb      	str	r3, [r7, #8]
 8000bc0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000bc2:	2301      	movs	r3, #1
 8000bc4:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000bc6:	4b8f      	ldr	r3, [pc, #572]	; (8000e04 <HAL_RCC_OscConfig+0x840>)
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d118      	bne.n	8000c04 <HAL_RCC_OscConfig+0x640>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8000bd2:	4b8c      	ldr	r3, [pc, #560]	; (8000e04 <HAL_RCC_OscConfig+0x840>)
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	4a8b      	ldr	r2, [pc, #556]	; (8000e04 <HAL_RCC_OscConfig+0x840>)
 8000bd8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000bdc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000bde:	f7ff fb5b 	bl	8000298 <HAL_GetTick>
 8000be2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000be4:	e008      	b.n	8000bf8 <HAL_RCC_OscConfig+0x634>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000be6:	f7ff fb57 	bl	8000298 <HAL_GetTick>
 8000bea:	4602      	mov	r2, r0
 8000bec:	693b      	ldr	r3, [r7, #16]
 8000bee:	1ad3      	subs	r3, r2, r3
 8000bf0:	2b02      	cmp	r3, #2
 8000bf2:	d901      	bls.n	8000bf8 <HAL_RCC_OscConfig+0x634>
        {
          return HAL_TIMEOUT;
 8000bf4:	2303      	movs	r3, #3
 8000bf6:	e1cb      	b.n	8000f90 <HAL_RCC_OscConfig+0x9cc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000bf8:	4b82      	ldr	r3, [pc, #520]	; (8000e04 <HAL_RCC_OscConfig+0x840>)
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d0f0      	beq.n	8000be6 <HAL_RCC_OscConfig+0x622>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	689b      	ldr	r3, [r3, #8]
 8000c08:	2b01      	cmp	r3, #1
 8000c0a:	d108      	bne.n	8000c1e <HAL_RCC_OscConfig+0x65a>
 8000c0c:	4b7b      	ldr	r3, [pc, #492]	; (8000dfc <HAL_RCC_OscConfig+0x838>)
 8000c0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000c12:	4a7a      	ldr	r2, [pc, #488]	; (8000dfc <HAL_RCC_OscConfig+0x838>)
 8000c14:	f043 0301 	orr.w	r3, r3, #1
 8000c18:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8000c1c:	e024      	b.n	8000c68 <HAL_RCC_OscConfig+0x6a4>
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	689b      	ldr	r3, [r3, #8]
 8000c22:	2b05      	cmp	r3, #5
 8000c24:	d110      	bne.n	8000c48 <HAL_RCC_OscConfig+0x684>
 8000c26:	4b75      	ldr	r3, [pc, #468]	; (8000dfc <HAL_RCC_OscConfig+0x838>)
 8000c28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000c2c:	4a73      	ldr	r2, [pc, #460]	; (8000dfc <HAL_RCC_OscConfig+0x838>)
 8000c2e:	f043 0304 	orr.w	r3, r3, #4
 8000c32:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8000c36:	4b71      	ldr	r3, [pc, #452]	; (8000dfc <HAL_RCC_OscConfig+0x838>)
 8000c38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000c3c:	4a6f      	ldr	r2, [pc, #444]	; (8000dfc <HAL_RCC_OscConfig+0x838>)
 8000c3e:	f043 0301 	orr.w	r3, r3, #1
 8000c42:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8000c46:	e00f      	b.n	8000c68 <HAL_RCC_OscConfig+0x6a4>
 8000c48:	4b6c      	ldr	r3, [pc, #432]	; (8000dfc <HAL_RCC_OscConfig+0x838>)
 8000c4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000c4e:	4a6b      	ldr	r2, [pc, #428]	; (8000dfc <HAL_RCC_OscConfig+0x838>)
 8000c50:	f023 0301 	bic.w	r3, r3, #1
 8000c54:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8000c58:	4b68      	ldr	r3, [pc, #416]	; (8000dfc <HAL_RCC_OscConfig+0x838>)
 8000c5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000c5e:	4a67      	ldr	r2, [pc, #412]	; (8000dfc <HAL_RCC_OscConfig+0x838>)
 8000c60:	f023 0304 	bic.w	r3, r3, #4
 8000c64:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	689b      	ldr	r3, [r3, #8]
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d016      	beq.n	8000c9e <HAL_RCC_OscConfig+0x6da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000c70:	f7ff fb12 	bl	8000298 <HAL_GetTick>
 8000c74:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8000c76:	e00a      	b.n	8000c8e <HAL_RCC_OscConfig+0x6ca>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000c78:	f7ff fb0e 	bl	8000298 <HAL_GetTick>
 8000c7c:	4602      	mov	r2, r0
 8000c7e:	693b      	ldr	r3, [r7, #16]
 8000c80:	1ad3      	subs	r3, r2, r3
 8000c82:	f241 3288 	movw	r2, #5000	; 0x1388
 8000c86:	4293      	cmp	r3, r2
 8000c88:	d901      	bls.n	8000c8e <HAL_RCC_OscConfig+0x6ca>
        {
          return HAL_TIMEOUT;
 8000c8a:	2303      	movs	r3, #3
 8000c8c:	e180      	b.n	8000f90 <HAL_RCC_OscConfig+0x9cc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8000c8e:	4b5b      	ldr	r3, [pc, #364]	; (8000dfc <HAL_RCC_OscConfig+0x838>)
 8000c90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000c94:	f003 0302 	and.w	r3, r3, #2
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d0ed      	beq.n	8000c78 <HAL_RCC_OscConfig+0x6b4>
 8000c9c:	e015      	b.n	8000cca <HAL_RCC_OscConfig+0x706>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000c9e:	f7ff fafb 	bl	8000298 <HAL_GetTick>
 8000ca2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8000ca4:	e00a      	b.n	8000cbc <HAL_RCC_OscConfig+0x6f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000ca6:	f7ff faf7 	bl	8000298 <HAL_GetTick>
 8000caa:	4602      	mov	r2, r0
 8000cac:	693b      	ldr	r3, [r7, #16]
 8000cae:	1ad3      	subs	r3, r2, r3
 8000cb0:	f241 3288 	movw	r2, #5000	; 0x1388
 8000cb4:	4293      	cmp	r3, r2
 8000cb6:	d901      	bls.n	8000cbc <HAL_RCC_OscConfig+0x6f8>
        {
          return HAL_TIMEOUT;
 8000cb8:	2303      	movs	r3, #3
 8000cba:	e169      	b.n	8000f90 <HAL_RCC_OscConfig+0x9cc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8000cbc:	4b4f      	ldr	r3, [pc, #316]	; (8000dfc <HAL_RCC_OscConfig+0x838>)
 8000cbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000cc2:	f003 0302 	and.w	r3, r3, #2
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d1ed      	bne.n	8000ca6 <HAL_RCC_OscConfig+0x6e2>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8000cca:	7ffb      	ldrb	r3, [r7, #31]
 8000ccc:	2b01      	cmp	r3, #1
 8000cce:	d105      	bne.n	8000cdc <HAL_RCC_OscConfig+0x718>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000cd0:	4b4a      	ldr	r3, [pc, #296]	; (8000dfc <HAL_RCC_OscConfig+0x838>)
 8000cd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cd4:	4a49      	ldr	r2, [pc, #292]	; (8000dfc <HAL_RCC_OscConfig+0x838>)
 8000cd6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000cda:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d00c      	beq.n	8000cfe <HAL_RCC_OscConfig+0x73a>
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ce8:	2b01      	cmp	r3, #1
 8000cea:	d008      	beq.n	8000cfe <HAL_RCC_OscConfig+0x73a>
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cf0:	2b02      	cmp	r3, #2
 8000cf2:	d004      	beq.n	8000cfe <HAL_RCC_OscConfig+0x73a>
 8000cf4:	f240 3166 	movw	r1, #870	; 0x366
 8000cf8:	4841      	ldr	r0, [pc, #260]	; (8000e00 <HAL_RCC_OscConfig+0x83c>)
 8000cfa:	f003 f9fa 	bl	80040f2 <assert_failed>

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	f000 8143 	beq.w	8000f8e <HAL_RCC_OscConfig+0x9ca>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_CFGR_SWS_PLL)
 8000d08:	69bb      	ldr	r3, [r7, #24]
 8000d0a:	2b0c      	cmp	r3, #12
 8000d0c:	f000 80fc 	beq.w	8000f08 <HAL_RCC_OscConfig+0x944>
    {
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d14:	2b02      	cmp	r3, #2
 8000d16:	f040 80c9 	bne.w	8000eac <HAL_RCC_OscConfig+0x8e8>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d010      	beq.n	8000d44 <HAL_RCC_OscConfig+0x780>
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d26:	2b01      	cmp	r3, #1
 8000d28:	d00c      	beq.n	8000d44 <HAL_RCC_OscConfig+0x780>
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d2e:	2b02      	cmp	r3, #2
 8000d30:	d008      	beq.n	8000d44 <HAL_RCC_OscConfig+0x780>
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d36:	2b03      	cmp	r3, #3
 8000d38:	d004      	beq.n	8000d44 <HAL_RCC_OscConfig+0x780>
 8000d3a:	f44f 715c 	mov.w	r1, #880	; 0x370
 8000d3e:	4830      	ldr	r0, [pc, #192]	; (8000e00 <HAL_RCC_OscConfig+0x83c>)
 8000d40:	f003 f9d7 	bl	80040f2 <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d003      	beq.n	8000d54 <HAL_RCC_OscConfig+0x790>
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d50:	2b08      	cmp	r3, #8
 8000d52:	d904      	bls.n	8000d5e <HAL_RCC_OscConfig+0x79a>
 8000d54:	f240 3171 	movw	r1, #881	; 0x371
 8000d58:	4829      	ldr	r0, [pc, #164]	; (8000e00 <HAL_RCC_OscConfig+0x83c>)
 8000d5a:	f003 f9ca 	bl	80040f2 <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d62:	2b07      	cmp	r3, #7
 8000d64:	d903      	bls.n	8000d6e <HAL_RCC_OscConfig+0x7aa>
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d6a:	2b56      	cmp	r3, #86	; 0x56
 8000d6c:	d904      	bls.n	8000d78 <HAL_RCC_OscConfig+0x7b4>
 8000d6e:	f240 3172 	movw	r1, #882	; 0x372
 8000d72:	4823      	ldr	r0, [pc, #140]	; (8000e00 <HAL_RCC_OscConfig+0x83c>)
 8000d74:	f003 f9bd 	bl	80040f2 <assert_failed>
#if defined(RCC_PLLP_SUPPORT)
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000d7c:	2b07      	cmp	r3, #7
 8000d7e:	d008      	beq.n	8000d92 <HAL_RCC_OscConfig+0x7ce>
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000d84:	2b11      	cmp	r3, #17
 8000d86:	d004      	beq.n	8000d92 <HAL_RCC_OscConfig+0x7ce>
 8000d88:	f44f 715d 	mov.w	r1, #884	; 0x374
 8000d8c:	481c      	ldr	r0, [pc, #112]	; (8000e00 <HAL_RCC_OscConfig+0x83c>)
 8000d8e:	f003 f9b0 	bl	80040f2 <assert_failed>
#endif /* RCC_PLLP_SUPPORT */
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000d96:	2b02      	cmp	r3, #2
 8000d98:	d010      	beq.n	8000dbc <HAL_RCC_OscConfig+0x7f8>
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000d9e:	2b04      	cmp	r3, #4
 8000da0:	d00c      	beq.n	8000dbc <HAL_RCC_OscConfig+0x7f8>
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000da6:	2b06      	cmp	r3, #6
 8000da8:	d008      	beq.n	8000dbc <HAL_RCC_OscConfig+0x7f8>
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000dae:	2b08      	cmp	r3, #8
 8000db0:	d004      	beq.n	8000dbc <HAL_RCC_OscConfig+0x7f8>
 8000db2:	f240 3176 	movw	r1, #886	; 0x376
 8000db6:	4812      	ldr	r0, [pc, #72]	; (8000e00 <HAL_RCC_OscConfig+0x83c>)
 8000db8:	f003 f99b 	bl	80040f2 <assert_failed>
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dc0:	2b02      	cmp	r3, #2
 8000dc2:	d010      	beq.n	8000de6 <HAL_RCC_OscConfig+0x822>
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dc8:	2b04      	cmp	r3, #4
 8000dca:	d00c      	beq.n	8000de6 <HAL_RCC_OscConfig+0x822>
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dd0:	2b06      	cmp	r3, #6
 8000dd2:	d008      	beq.n	8000de6 <HAL_RCC_OscConfig+0x822>
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dd8:	2b08      	cmp	r3, #8
 8000dda:	d004      	beq.n	8000de6 <HAL_RCC_OscConfig+0x822>
 8000ddc:	f240 3177 	movw	r1, #887	; 0x377
 8000de0:	4807      	ldr	r0, [pc, #28]	; (8000e00 <HAL_RCC_OscConfig+0x83c>)
 8000de2:	f003 f986 	bl	80040f2 <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000de6:	4b05      	ldr	r3, [pc, #20]	; (8000dfc <HAL_RCC_OscConfig+0x838>)
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	4a04      	ldr	r2, [pc, #16]	; (8000dfc <HAL_RCC_OscConfig+0x838>)
 8000dec:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000df0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000df2:	f7ff fa51 	bl	8000298 <HAL_GetTick>
 8000df6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8000df8:	e00f      	b.n	8000e1a <HAL_RCC_OscConfig+0x856>
 8000dfa:	bf00      	nop
 8000dfc:	40021000 	.word	0x40021000
 8000e00:	08004588 	.word	0x08004588
 8000e04:	40007000 	.word	0x40007000
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000e08:	f7ff fa46 	bl	8000298 <HAL_GetTick>
 8000e0c:	4602      	mov	r2, r0
 8000e0e:	693b      	ldr	r3, [r7, #16]
 8000e10:	1ad3      	subs	r3, r2, r3
 8000e12:	2b02      	cmp	r3, #2
 8000e14:	d901      	bls.n	8000e1a <HAL_RCC_OscConfig+0x856>
          {
            return HAL_TIMEOUT;
 8000e16:	2303      	movs	r3, #3
 8000e18:	e0ba      	b.n	8000f90 <HAL_RCC_OscConfig+0x9cc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8000e1a:	4b5f      	ldr	r3, [pc, #380]	; (8000f98 <HAL_RCC_OscConfig+0x9d4>)
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d1f0      	bne.n	8000e08 <HAL_RCC_OscConfig+0x844>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000e26:	4b5c      	ldr	r3, [pc, #368]	; (8000f98 <HAL_RCC_OscConfig+0x9d4>)
 8000e28:	68da      	ldr	r2, [r3, #12]
 8000e2a:	4b5c      	ldr	r3, [pc, #368]	; (8000f9c <HAL_RCC_OscConfig+0x9d8>)
 8000e2c:	4013      	ands	r3, r2
 8000e2e:	687a      	ldr	r2, [r7, #4]
 8000e30:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8000e32:	687a      	ldr	r2, [r7, #4]
 8000e34:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8000e36:	3a01      	subs	r2, #1
 8000e38:	0112      	lsls	r2, r2, #4
 8000e3a:	4311      	orrs	r1, r2
 8000e3c:	687a      	ldr	r2, [r7, #4]
 8000e3e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8000e40:	0212      	lsls	r2, r2, #8
 8000e42:	4311      	orrs	r1, r2
 8000e44:	687a      	ldr	r2, [r7, #4]
 8000e46:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8000e48:	0852      	lsrs	r2, r2, #1
 8000e4a:	3a01      	subs	r2, #1
 8000e4c:	0552      	lsls	r2, r2, #21
 8000e4e:	4311      	orrs	r1, r2
 8000e50:	687a      	ldr	r2, [r7, #4]
 8000e52:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8000e54:	0852      	lsrs	r2, r2, #1
 8000e56:	3a01      	subs	r2, #1
 8000e58:	0652      	lsls	r2, r2, #25
 8000e5a:	4311      	orrs	r1, r2
 8000e5c:	687a      	ldr	r2, [r7, #4]
 8000e5e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8000e60:	0912      	lsrs	r2, r2, #4
 8000e62:	0452      	lsls	r2, r2, #17
 8000e64:	430a      	orrs	r2, r1
 8000e66:	494c      	ldr	r1, [pc, #304]	; (8000f98 <HAL_RCC_OscConfig+0x9d4>)
 8000e68:	4313      	orrs	r3, r2
 8000e6a:	60cb      	str	r3, [r1, #12]
#endif
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000e6c:	4b4a      	ldr	r3, [pc, #296]	; (8000f98 <HAL_RCC_OscConfig+0x9d4>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	4a49      	ldr	r2, [pc, #292]	; (8000f98 <HAL_RCC_OscConfig+0x9d4>)
 8000e72:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000e76:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8000e78:	4b47      	ldr	r3, [pc, #284]	; (8000f98 <HAL_RCC_OscConfig+0x9d4>)
 8000e7a:	68db      	ldr	r3, [r3, #12]
 8000e7c:	4a46      	ldr	r2, [pc, #280]	; (8000f98 <HAL_RCC_OscConfig+0x9d4>)
 8000e7e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000e82:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000e84:	f7ff fa08 	bl	8000298 <HAL_GetTick>
 8000e88:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8000e8a:	e008      	b.n	8000e9e <HAL_RCC_OscConfig+0x8da>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000e8c:	f7ff fa04 	bl	8000298 <HAL_GetTick>
 8000e90:	4602      	mov	r2, r0
 8000e92:	693b      	ldr	r3, [r7, #16]
 8000e94:	1ad3      	subs	r3, r2, r3
 8000e96:	2b02      	cmp	r3, #2
 8000e98:	d901      	bls.n	8000e9e <HAL_RCC_OscConfig+0x8da>
          {
            return HAL_TIMEOUT;
 8000e9a:	2303      	movs	r3, #3
 8000e9c:	e078      	b.n	8000f90 <HAL_RCC_OscConfig+0x9cc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8000e9e:	4b3e      	ldr	r3, [pc, #248]	; (8000f98 <HAL_RCC_OscConfig+0x9d4>)
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d0f0      	beq.n	8000e8c <HAL_RCC_OscConfig+0x8c8>
 8000eaa:	e070      	b.n	8000f8e <HAL_RCC_OscConfig+0x9ca>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000eac:	4b3a      	ldr	r3, [pc, #232]	; (8000f98 <HAL_RCC_OscConfig+0x9d4>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	4a39      	ldr	r2, [pc, #228]	; (8000f98 <HAL_RCC_OscConfig+0x9d4>)
 8000eb2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000eb6:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8000eb8:	4b37      	ldr	r3, [pc, #220]	; (8000f98 <HAL_RCC_OscConfig+0x9d4>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d105      	bne.n	8000ed0 <HAL_RCC_OscConfig+0x90c>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8000ec4:	4b34      	ldr	r3, [pc, #208]	; (8000f98 <HAL_RCC_OscConfig+0x9d4>)
 8000ec6:	68db      	ldr	r3, [r3, #12]
 8000ec8:	4a33      	ldr	r2, [pc, #204]	; (8000f98 <HAL_RCC_OscConfig+0x9d4>)
 8000eca:	f023 0303 	bic.w	r3, r3, #3
 8000ece:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8000ed0:	4b31      	ldr	r3, [pc, #196]	; (8000f98 <HAL_RCC_OscConfig+0x9d4>)
 8000ed2:	68db      	ldr	r3, [r3, #12]
 8000ed4:	4a30      	ldr	r2, [pc, #192]	; (8000f98 <HAL_RCC_OscConfig+0x9d4>)
 8000ed6:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8000eda:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000ede:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000ee0:	f7ff f9da 	bl	8000298 <HAL_GetTick>
 8000ee4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8000ee6:	e008      	b.n	8000efa <HAL_RCC_OscConfig+0x936>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000ee8:	f7ff f9d6 	bl	8000298 <HAL_GetTick>
 8000eec:	4602      	mov	r2, r0
 8000eee:	693b      	ldr	r3, [r7, #16]
 8000ef0:	1ad3      	subs	r3, r2, r3
 8000ef2:	2b02      	cmp	r3, #2
 8000ef4:	d901      	bls.n	8000efa <HAL_RCC_OscConfig+0x936>
          {
            return HAL_TIMEOUT;
 8000ef6:	2303      	movs	r3, #3
 8000ef8:	e04a      	b.n	8000f90 <HAL_RCC_OscConfig+0x9cc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8000efa:	4b27      	ldr	r3, [pc, #156]	; (8000f98 <HAL_RCC_OscConfig+0x9d4>)
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d1f0      	bne.n	8000ee8 <HAL_RCC_OscConfig+0x924>
 8000f06:	e042      	b.n	8000f8e <HAL_RCC_OscConfig+0x9ca>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f0c:	2b01      	cmp	r3, #1
 8000f0e:	d101      	bne.n	8000f14 <HAL_RCC_OscConfig+0x950>
      {
        return HAL_ERROR;
 8000f10:	2301      	movs	r3, #1
 8000f12:	e03d      	b.n	8000f90 <HAL_RCC_OscConfig+0x9cc>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 8000f14:	4b20      	ldr	r3, [pc, #128]	; (8000f98 <HAL_RCC_OscConfig+0x9d4>)
 8000f16:	68db      	ldr	r3, [r3, #12]
 8000f18:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8000f1a:	697b      	ldr	r3, [r7, #20]
 8000f1c:	f003 0203 	and.w	r2, r3, #3
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f24:	429a      	cmp	r2, r3
 8000f26:	d130      	bne.n	8000f8a <HAL_RCC_OscConfig+0x9c6>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8000f28:	697b      	ldr	r3, [r7, #20]
 8000f2a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f32:	3b01      	subs	r3, #1
 8000f34:	011b      	lsls	r3, r3, #4
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8000f36:	429a      	cmp	r2, r3
 8000f38:	d127      	bne.n	8000f8a <HAL_RCC_OscConfig+0x9c6>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8000f3a:	697b      	ldr	r3, [r7, #20]
 8000f3c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f44:	021b      	lsls	r3, r3, #8
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8000f46:	429a      	cmp	r2, r3
 8000f48:	d11f      	bne.n	8000f8a <HAL_RCC_OscConfig+0x9c6>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8000f4a:	697b      	ldr	r3, [r7, #20]
 8000f4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f50:	687a      	ldr	r2, [r7, #4]
 8000f52:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8000f54:	2a07      	cmp	r2, #7
 8000f56:	bf14      	ite	ne
 8000f58:	2201      	movne	r2, #1
 8000f5a:	2200      	moveq	r2, #0
 8000f5c:	b2d2      	uxtb	r2, r2
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8000f5e:	4293      	cmp	r3, r2
 8000f60:	d113      	bne.n	8000f8a <HAL_RCC_OscConfig+0x9c6>
#endif
#endif
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8000f62:	697b      	ldr	r3, [r7, #20]
 8000f64:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f6c:	085b      	lsrs	r3, r3, #1
 8000f6e:	3b01      	subs	r3, #1
 8000f70:	055b      	lsls	r3, r3, #21
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8000f72:	429a      	cmp	r2, r3
 8000f74:	d109      	bne.n	8000f8a <HAL_RCC_OscConfig+0x9c6>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8000f76:	697b      	ldr	r3, [r7, #20]
 8000f78:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f80:	085b      	lsrs	r3, r3, #1
 8000f82:	3b01      	subs	r3, #1
 8000f84:	065b      	lsls	r3, r3, #25
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8000f86:	429a      	cmp	r2, r3
 8000f88:	d001      	beq.n	8000f8e <HAL_RCC_OscConfig+0x9ca>
        {
          return HAL_ERROR;
 8000f8a:	2301      	movs	r3, #1
 8000f8c:	e000      	b.n	8000f90 <HAL_RCC_OscConfig+0x9cc>
        }
      }
    }
  }
  return HAL_OK;
 8000f8e:	2300      	movs	r3, #0
}
 8000f90:	4618      	mov	r0, r3
 8000f92:	3720      	adds	r7, #32
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bd80      	pop	{r7, pc}
 8000f98:	40021000 	.word	0x40021000
 8000f9c:	f99d808c 	.word	0xf99d808c

08000fa0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b084      	sub	sp, #16
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
 8000fa8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d101      	bne.n	8000fb4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8000fb0:	2301      	movs	r3, #1
 8000fb2:	e168      	b.n	8001286 <HAL_RCC_ClockConfig+0x2e6>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d003      	beq.n	8000fc4 <HAL_RCC_ClockConfig+0x24>
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	2b0f      	cmp	r3, #15
 8000fc2:	d904      	bls.n	8000fce <HAL_RCC_ClockConfig+0x2e>
 8000fc4:	f240 412e 	movw	r1, #1070	; 0x42e
 8000fc8:	4873      	ldr	r0, [pc, #460]	; (8001198 <HAL_RCC_ClockConfig+0x1f8>)
 8000fca:	f003 f892 	bl	80040f2 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8000fce:	683b      	ldr	r3, [r7, #0]
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d010      	beq.n	8000ff6 <HAL_RCC_ClockConfig+0x56>
 8000fd4:	683b      	ldr	r3, [r7, #0]
 8000fd6:	2b01      	cmp	r3, #1
 8000fd8:	d00d      	beq.n	8000ff6 <HAL_RCC_ClockConfig+0x56>
 8000fda:	683b      	ldr	r3, [r7, #0]
 8000fdc:	2b02      	cmp	r3, #2
 8000fde:	d00a      	beq.n	8000ff6 <HAL_RCC_ClockConfig+0x56>
 8000fe0:	683b      	ldr	r3, [r7, #0]
 8000fe2:	2b03      	cmp	r3, #3
 8000fe4:	d007      	beq.n	8000ff6 <HAL_RCC_ClockConfig+0x56>
 8000fe6:	683b      	ldr	r3, [r7, #0]
 8000fe8:	2b04      	cmp	r3, #4
 8000fea:	d004      	beq.n	8000ff6 <HAL_RCC_ClockConfig+0x56>
 8000fec:	f240 412f 	movw	r1, #1071	; 0x42f
 8000ff0:	4869      	ldr	r0, [pc, #420]	; (8001198 <HAL_RCC_ClockConfig+0x1f8>)
 8000ff2:	f003 f87e 	bl	80040f2 <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000ff6:	4b69      	ldr	r3, [pc, #420]	; (800119c <HAL_RCC_ClockConfig+0x1fc>)
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	f003 0307 	and.w	r3, r3, #7
 8000ffe:	683a      	ldr	r2, [r7, #0]
 8001000:	429a      	cmp	r2, r3
 8001002:	d910      	bls.n	8001026 <HAL_RCC_ClockConfig+0x86>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001004:	4b65      	ldr	r3, [pc, #404]	; (800119c <HAL_RCC_ClockConfig+0x1fc>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	f023 0207 	bic.w	r2, r3, #7
 800100c:	4963      	ldr	r1, [pc, #396]	; (800119c <HAL_RCC_ClockConfig+0x1fc>)
 800100e:	683b      	ldr	r3, [r7, #0]
 8001010:	4313      	orrs	r3, r2
 8001012:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001014:	4b61      	ldr	r3, [pc, #388]	; (800119c <HAL_RCC_ClockConfig+0x1fc>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	f003 0307 	and.w	r3, r3, #7
 800101c:	683a      	ldr	r2, [r7, #0]
 800101e:	429a      	cmp	r2, r3
 8001020:	d001      	beq.n	8001026 <HAL_RCC_ClockConfig+0x86>
    {
      return HAL_ERROR;
 8001022:	2301      	movs	r3, #1
 8001024:	e12f      	b.n	8001286 <HAL_RCC_ClockConfig+0x2e6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	f003 0301 	and.w	r3, r3, #1
 800102e:	2b00      	cmp	r3, #0
 8001030:	d061      	beq.n	80010f6 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	685b      	ldr	r3, [r3, #4]
 8001036:	2b00      	cmp	r3, #0
 8001038:	d010      	beq.n	800105c <HAL_RCC_ClockConfig+0xbc>
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	685b      	ldr	r3, [r3, #4]
 800103e:	2b01      	cmp	r3, #1
 8001040:	d00c      	beq.n	800105c <HAL_RCC_ClockConfig+0xbc>
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	685b      	ldr	r3, [r3, #4]
 8001046:	2b02      	cmp	r3, #2
 8001048:	d008      	beq.n	800105c <HAL_RCC_ClockConfig+0xbc>
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	685b      	ldr	r3, [r3, #4]
 800104e:	2b03      	cmp	r3, #3
 8001050:	d004      	beq.n	800105c <HAL_RCC_ClockConfig+0xbc>
 8001052:	f240 4146 	movw	r1, #1094	; 0x446
 8001056:	4850      	ldr	r0, [pc, #320]	; (8001198 <HAL_RCC_ClockConfig+0x1f8>)
 8001058:	f003 f84b 	bl	80040f2 <assert_failed>

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	685b      	ldr	r3, [r3, #4]
 8001060:	2b03      	cmp	r3, #3
 8001062:	d107      	bne.n	8001074 <HAL_RCC_ClockConfig+0xd4>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001064:	4b4e      	ldr	r3, [pc, #312]	; (80011a0 <HAL_RCC_ClockConfig+0x200>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800106c:	2b00      	cmp	r3, #0
 800106e:	d121      	bne.n	80010b4 <HAL_RCC_ClockConfig+0x114>
      {
        return HAL_ERROR;
 8001070:	2301      	movs	r3, #1
 8001072:	e108      	b.n	8001286 <HAL_RCC_ClockConfig+0x2e6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	685b      	ldr	r3, [r3, #4]
 8001078:	2b02      	cmp	r3, #2
 800107a:	d107      	bne.n	800108c <HAL_RCC_ClockConfig+0xec>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800107c:	4b48      	ldr	r3, [pc, #288]	; (80011a0 <HAL_RCC_ClockConfig+0x200>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001084:	2b00      	cmp	r3, #0
 8001086:	d115      	bne.n	80010b4 <HAL_RCC_ClockConfig+0x114>
        {
          return HAL_ERROR;
 8001088:	2301      	movs	r3, #1
 800108a:	e0fc      	b.n	8001286 <HAL_RCC_ClockConfig+0x2e6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	685b      	ldr	r3, [r3, #4]
 8001090:	2b00      	cmp	r3, #0
 8001092:	d107      	bne.n	80010a4 <HAL_RCC_ClockConfig+0x104>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001094:	4b42      	ldr	r3, [pc, #264]	; (80011a0 <HAL_RCC_ClockConfig+0x200>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	f003 0302 	and.w	r3, r3, #2
 800109c:	2b00      	cmp	r3, #0
 800109e:	d109      	bne.n	80010b4 <HAL_RCC_ClockConfig+0x114>
        {
          return HAL_ERROR;
 80010a0:	2301      	movs	r3, #1
 80010a2:	e0f0      	b.n	8001286 <HAL_RCC_ClockConfig+0x2e6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80010a4:	4b3e      	ldr	r3, [pc, #248]	; (80011a0 <HAL_RCC_ClockConfig+0x200>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d101      	bne.n	80010b4 <HAL_RCC_ClockConfig+0x114>
        {
          return HAL_ERROR;
 80010b0:	2301      	movs	r3, #1
 80010b2:	e0e8      	b.n	8001286 <HAL_RCC_ClockConfig+0x2e6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80010b4:	4b3a      	ldr	r3, [pc, #232]	; (80011a0 <HAL_RCC_ClockConfig+0x200>)
 80010b6:	689b      	ldr	r3, [r3, #8]
 80010b8:	f023 0203 	bic.w	r2, r3, #3
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	685b      	ldr	r3, [r3, #4]
 80010c0:	4937      	ldr	r1, [pc, #220]	; (80011a0 <HAL_RCC_ClockConfig+0x200>)
 80010c2:	4313      	orrs	r3, r2
 80010c4:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80010c6:	f7ff f8e7 	bl	8000298 <HAL_GetTick>
 80010ca:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80010cc:	e00a      	b.n	80010e4 <HAL_RCC_ClockConfig+0x144>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80010ce:	f7ff f8e3 	bl	8000298 <HAL_GetTick>
 80010d2:	4602      	mov	r2, r0
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	1ad3      	subs	r3, r2, r3
 80010d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80010dc:	4293      	cmp	r3, r2
 80010de:	d901      	bls.n	80010e4 <HAL_RCC_ClockConfig+0x144>
      {
        return HAL_TIMEOUT;
 80010e0:	2303      	movs	r3, #3
 80010e2:	e0d0      	b.n	8001286 <HAL_RCC_ClockConfig+0x2e6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80010e4:	4b2e      	ldr	r3, [pc, #184]	; (80011a0 <HAL_RCC_ClockConfig+0x200>)
 80010e6:	689b      	ldr	r3, [r3, #8]
 80010e8:	f003 020c 	and.w	r2, r3, #12
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	685b      	ldr	r3, [r3, #4]
 80010f0:	009b      	lsls	r3, r3, #2
 80010f2:	429a      	cmp	r2, r3
 80010f4:	d1eb      	bne.n	80010ce <HAL_RCC_ClockConfig+0x12e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	f003 0302 	and.w	r3, r3, #2
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d031      	beq.n	8001166 <HAL_RCC_ClockConfig+0x1c6>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	689b      	ldr	r3, [r3, #8]
 8001106:	2b00      	cmp	r3, #0
 8001108:	d024      	beq.n	8001154 <HAL_RCC_ClockConfig+0x1b4>
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	689b      	ldr	r3, [r3, #8]
 800110e:	2b80      	cmp	r3, #128	; 0x80
 8001110:	d020      	beq.n	8001154 <HAL_RCC_ClockConfig+0x1b4>
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	689b      	ldr	r3, [r3, #8]
 8001116:	2b90      	cmp	r3, #144	; 0x90
 8001118:	d01c      	beq.n	8001154 <HAL_RCC_ClockConfig+0x1b4>
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	689b      	ldr	r3, [r3, #8]
 800111e:	2ba0      	cmp	r3, #160	; 0xa0
 8001120:	d018      	beq.n	8001154 <HAL_RCC_ClockConfig+0x1b4>
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	689b      	ldr	r3, [r3, #8]
 8001126:	2bb0      	cmp	r3, #176	; 0xb0
 8001128:	d014      	beq.n	8001154 <HAL_RCC_ClockConfig+0x1b4>
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	689b      	ldr	r3, [r3, #8]
 800112e:	2bc0      	cmp	r3, #192	; 0xc0
 8001130:	d010      	beq.n	8001154 <HAL_RCC_ClockConfig+0x1b4>
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	689b      	ldr	r3, [r3, #8]
 8001136:	2bd0      	cmp	r3, #208	; 0xd0
 8001138:	d00c      	beq.n	8001154 <HAL_RCC_ClockConfig+0x1b4>
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	689b      	ldr	r3, [r3, #8]
 800113e:	2be0      	cmp	r3, #224	; 0xe0
 8001140:	d008      	beq.n	8001154 <HAL_RCC_ClockConfig+0x1b4>
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	689b      	ldr	r3, [r3, #8]
 8001146:	2bf0      	cmp	r3, #240	; 0xf0
 8001148:	d004      	beq.n	8001154 <HAL_RCC_ClockConfig+0x1b4>
 800114a:	f240 41a2 	movw	r1, #1186	; 0x4a2
 800114e:	4812      	ldr	r0, [pc, #72]	; (8001198 <HAL_RCC_ClockConfig+0x1f8>)
 8001150:	f002 ffcf 	bl	80040f2 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001154:	4b12      	ldr	r3, [pc, #72]	; (80011a0 <HAL_RCC_ClockConfig+0x200>)
 8001156:	689b      	ldr	r3, [r3, #8]
 8001158:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	689b      	ldr	r3, [r3, #8]
 8001160:	490f      	ldr	r1, [pc, #60]	; (80011a0 <HAL_RCC_ClockConfig+0x200>)
 8001162:	4313      	orrs	r3, r2
 8001164:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001166:	4b0d      	ldr	r3, [pc, #52]	; (800119c <HAL_RCC_ClockConfig+0x1fc>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	f003 0307 	and.w	r3, r3, #7
 800116e:	683a      	ldr	r2, [r7, #0]
 8001170:	429a      	cmp	r2, r3
 8001172:	d217      	bcs.n	80011a4 <HAL_RCC_ClockConfig+0x204>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001174:	4b09      	ldr	r3, [pc, #36]	; (800119c <HAL_RCC_ClockConfig+0x1fc>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	f023 0207 	bic.w	r2, r3, #7
 800117c:	4907      	ldr	r1, [pc, #28]	; (800119c <HAL_RCC_ClockConfig+0x1fc>)
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	4313      	orrs	r3, r2
 8001182:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001184:	4b05      	ldr	r3, [pc, #20]	; (800119c <HAL_RCC_ClockConfig+0x1fc>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	f003 0307 	and.w	r3, r3, #7
 800118c:	683a      	ldr	r2, [r7, #0]
 800118e:	429a      	cmp	r2, r3
 8001190:	d008      	beq.n	80011a4 <HAL_RCC_ClockConfig+0x204>
    {
      return HAL_ERROR;
 8001192:	2301      	movs	r3, #1
 8001194:	e077      	b.n	8001286 <HAL_RCC_ClockConfig+0x2e6>
 8001196:	bf00      	nop
 8001198:	08004588 	.word	0x08004588
 800119c:	40022000 	.word	0x40022000
 80011a0:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	f003 0304 	and.w	r3, r3, #4
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d025      	beq.n	80011fc <HAL_RCC_ClockConfig+0x25c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	68db      	ldr	r3, [r3, #12]
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d018      	beq.n	80011ea <HAL_RCC_ClockConfig+0x24a>
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	68db      	ldr	r3, [r3, #12]
 80011bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80011c0:	d013      	beq.n	80011ea <HAL_RCC_ClockConfig+0x24a>
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	68db      	ldr	r3, [r3, #12]
 80011c6:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80011ca:	d00e      	beq.n	80011ea <HAL_RCC_ClockConfig+0x24a>
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	68db      	ldr	r3, [r3, #12]
 80011d0:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80011d4:	d009      	beq.n	80011ea <HAL_RCC_ClockConfig+0x24a>
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	68db      	ldr	r3, [r3, #12]
 80011da:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80011de:	d004      	beq.n	80011ea <HAL_RCC_ClockConfig+0x24a>
 80011e0:	f240 41c1 	movw	r1, #1217	; 0x4c1
 80011e4:	482a      	ldr	r0, [pc, #168]	; (8001290 <HAL_RCC_ClockConfig+0x2f0>)
 80011e6:	f002 ff84 	bl	80040f2 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80011ea:	4b2a      	ldr	r3, [pc, #168]	; (8001294 <HAL_RCC_ClockConfig+0x2f4>)
 80011ec:	689b      	ldr	r3, [r3, #8]
 80011ee:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	68db      	ldr	r3, [r3, #12]
 80011f6:	4927      	ldr	r1, [pc, #156]	; (8001294 <HAL_RCC_ClockConfig+0x2f4>)
 80011f8:	4313      	orrs	r3, r2
 80011fa:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	f003 0308 	and.w	r3, r3, #8
 8001204:	2b00      	cmp	r3, #0
 8001206:	d026      	beq.n	8001256 <HAL_RCC_ClockConfig+0x2b6>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	691b      	ldr	r3, [r3, #16]
 800120c:	2b00      	cmp	r3, #0
 800120e:	d018      	beq.n	8001242 <HAL_RCC_ClockConfig+0x2a2>
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	691b      	ldr	r3, [r3, #16]
 8001214:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001218:	d013      	beq.n	8001242 <HAL_RCC_ClockConfig+0x2a2>
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	691b      	ldr	r3, [r3, #16]
 800121e:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8001222:	d00e      	beq.n	8001242 <HAL_RCC_ClockConfig+0x2a2>
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	691b      	ldr	r3, [r3, #16]
 8001228:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800122c:	d009      	beq.n	8001242 <HAL_RCC_ClockConfig+0x2a2>
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	691b      	ldr	r3, [r3, #16]
 8001232:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8001236:	d004      	beq.n	8001242 <HAL_RCC_ClockConfig+0x2a2>
 8001238:	f44f 6199 	mov.w	r1, #1224	; 0x4c8
 800123c:	4814      	ldr	r0, [pc, #80]	; (8001290 <HAL_RCC_ClockConfig+0x2f0>)
 800123e:	f002 ff58 	bl	80040f2 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001242:	4b14      	ldr	r3, [pc, #80]	; (8001294 <HAL_RCC_ClockConfig+0x2f4>)
 8001244:	689b      	ldr	r3, [r3, #8]
 8001246:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	691b      	ldr	r3, [r3, #16]
 800124e:	00db      	lsls	r3, r3, #3
 8001250:	4910      	ldr	r1, [pc, #64]	; (8001294 <HAL_RCC_ClockConfig+0x2f4>)
 8001252:	4313      	orrs	r3, r2
 8001254:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001256:	f000 f825 	bl	80012a4 <HAL_RCC_GetSysClockFreq>
 800125a:	4601      	mov	r1, r0
 800125c:	4b0d      	ldr	r3, [pc, #52]	; (8001294 <HAL_RCC_ClockConfig+0x2f4>)
 800125e:	689b      	ldr	r3, [r3, #8]
 8001260:	091b      	lsrs	r3, r3, #4
 8001262:	f003 030f 	and.w	r3, r3, #15
 8001266:	4a0c      	ldr	r2, [pc, #48]	; (8001298 <HAL_RCC_ClockConfig+0x2f8>)
 8001268:	5cd3      	ldrb	r3, [r2, r3]
 800126a:	f003 031f 	and.w	r3, r3, #31
 800126e:	fa21 f303 	lsr.w	r3, r1, r3
 8001272:	4a0a      	ldr	r2, [pc, #40]	; (800129c <HAL_RCC_ClockConfig+0x2fc>)
 8001274:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001276:	4b0a      	ldr	r3, [pc, #40]	; (80012a0 <HAL_RCC_ClockConfig+0x300>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	4618      	mov	r0, r3
 800127c:	f7fe ffc0 	bl	8000200 <HAL_InitTick>
 8001280:	4603      	mov	r3, r0
 8001282:	72fb      	strb	r3, [r7, #11]

  return status;
 8001284:	7afb      	ldrb	r3, [r7, #11]
}
 8001286:	4618      	mov	r0, r3
 8001288:	3710      	adds	r7, #16
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}
 800128e:	bf00      	nop
 8001290:	08004588 	.word	0x08004588
 8001294:	40021000 	.word	0x40021000
 8001298:	080045e4 	.word	0x080045e4
 800129c:	2000000c 	.word	0x2000000c
 80012a0:	20000000 	.word	0x20000000

080012a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80012a4:	b480      	push	{r7}
 80012a6:	b089      	sub	sp, #36	; 0x24
 80012a8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80012aa:	2300      	movs	r3, #0
 80012ac:	61fb      	str	r3, [r7, #28]
 80012ae:	2300      	movs	r3, #0
 80012b0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80012b2:	4b3d      	ldr	r3, [pc, #244]	; (80013a8 <HAL_RCC_GetSysClockFreq+0x104>)
 80012b4:	689b      	ldr	r3, [r3, #8]
 80012b6:	f003 030c 	and.w	r3, r3, #12
 80012ba:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80012bc:	4b3a      	ldr	r3, [pc, #232]	; (80013a8 <HAL_RCC_GetSysClockFreq+0x104>)
 80012be:	68db      	ldr	r3, [r3, #12]
 80012c0:	f003 0303 	and.w	r3, r3, #3
 80012c4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80012c6:	693b      	ldr	r3, [r7, #16]
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d005      	beq.n	80012d8 <HAL_RCC_GetSysClockFreq+0x34>
 80012cc:	693b      	ldr	r3, [r7, #16]
 80012ce:	2b0c      	cmp	r3, #12
 80012d0:	d121      	bne.n	8001316 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	2b01      	cmp	r3, #1
 80012d6:	d11e      	bne.n	8001316 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80012d8:	4b33      	ldr	r3, [pc, #204]	; (80013a8 <HAL_RCC_GetSysClockFreq+0x104>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	f003 0308 	and.w	r3, r3, #8
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d107      	bne.n	80012f4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80012e4:	4b30      	ldr	r3, [pc, #192]	; (80013a8 <HAL_RCC_GetSysClockFreq+0x104>)
 80012e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80012ea:	0a1b      	lsrs	r3, r3, #8
 80012ec:	f003 030f 	and.w	r3, r3, #15
 80012f0:	61fb      	str	r3, [r7, #28]
 80012f2:	e005      	b.n	8001300 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80012f4:	4b2c      	ldr	r3, [pc, #176]	; (80013a8 <HAL_RCC_GetSysClockFreq+0x104>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	091b      	lsrs	r3, r3, #4
 80012fa:	f003 030f 	and.w	r3, r3, #15
 80012fe:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001300:	4a2a      	ldr	r2, [pc, #168]	; (80013ac <HAL_RCC_GetSysClockFreq+0x108>)
 8001302:	69fb      	ldr	r3, [r7, #28]
 8001304:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001308:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800130a:	693b      	ldr	r3, [r7, #16]
 800130c:	2b00      	cmp	r3, #0
 800130e:	d10d      	bne.n	800132c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001310:	69fb      	ldr	r3, [r7, #28]
 8001312:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001314:	e00a      	b.n	800132c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001316:	693b      	ldr	r3, [r7, #16]
 8001318:	2b04      	cmp	r3, #4
 800131a:	d102      	bne.n	8001322 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800131c:	4b24      	ldr	r3, [pc, #144]	; (80013b0 <HAL_RCC_GetSysClockFreq+0x10c>)
 800131e:	61bb      	str	r3, [r7, #24]
 8001320:	e004      	b.n	800132c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001322:	693b      	ldr	r3, [r7, #16]
 8001324:	2b08      	cmp	r3, #8
 8001326:	d101      	bne.n	800132c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001328:	4b22      	ldr	r3, [pc, #136]	; (80013b4 <HAL_RCC_GetSysClockFreq+0x110>)
 800132a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800132c:	693b      	ldr	r3, [r7, #16]
 800132e:	2b0c      	cmp	r3, #12
 8001330:	d133      	bne.n	800139a <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001332:	4b1d      	ldr	r3, [pc, #116]	; (80013a8 <HAL_RCC_GetSysClockFreq+0x104>)
 8001334:	68db      	ldr	r3, [r3, #12]
 8001336:	f003 0303 	and.w	r3, r3, #3
 800133a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800133c:	68bb      	ldr	r3, [r7, #8]
 800133e:	2b02      	cmp	r3, #2
 8001340:	d002      	beq.n	8001348 <HAL_RCC_GetSysClockFreq+0xa4>
 8001342:	2b03      	cmp	r3, #3
 8001344:	d003      	beq.n	800134e <HAL_RCC_GetSysClockFreq+0xaa>
 8001346:	e005      	b.n	8001354 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001348:	4b19      	ldr	r3, [pc, #100]	; (80013b0 <HAL_RCC_GetSysClockFreq+0x10c>)
 800134a:	617b      	str	r3, [r7, #20]
      break;
 800134c:	e005      	b.n	800135a <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800134e:	4b19      	ldr	r3, [pc, #100]	; (80013b4 <HAL_RCC_GetSysClockFreq+0x110>)
 8001350:	617b      	str	r3, [r7, #20]
      break;
 8001352:	e002      	b.n	800135a <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001354:	69fb      	ldr	r3, [r7, #28]
 8001356:	617b      	str	r3, [r7, #20]
      break;
 8001358:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800135a:	4b13      	ldr	r3, [pc, #76]	; (80013a8 <HAL_RCC_GetSysClockFreq+0x104>)
 800135c:	68db      	ldr	r3, [r3, #12]
 800135e:	091b      	lsrs	r3, r3, #4
 8001360:	f003 0307 	and.w	r3, r3, #7
 8001364:	3301      	adds	r3, #1
 8001366:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001368:	4b0f      	ldr	r3, [pc, #60]	; (80013a8 <HAL_RCC_GetSysClockFreq+0x104>)
 800136a:	68db      	ldr	r3, [r3, #12]
 800136c:	0a1b      	lsrs	r3, r3, #8
 800136e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001372:	697a      	ldr	r2, [r7, #20]
 8001374:	fb02 f203 	mul.w	r2, r2, r3
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	fbb2 f3f3 	udiv	r3, r2, r3
 800137e:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001380:	4b09      	ldr	r3, [pc, #36]	; (80013a8 <HAL_RCC_GetSysClockFreq+0x104>)
 8001382:	68db      	ldr	r3, [r3, #12]
 8001384:	0e5b      	lsrs	r3, r3, #25
 8001386:	f003 0303 	and.w	r3, r3, #3
 800138a:	3301      	adds	r3, #1
 800138c:	005b      	lsls	r3, r3, #1
 800138e:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001390:	697a      	ldr	r2, [r7, #20]
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	fbb2 f3f3 	udiv	r3, r2, r3
 8001398:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800139a:	69bb      	ldr	r3, [r7, #24]
}
 800139c:	4618      	mov	r0, r3
 800139e:	3724      	adds	r7, #36	; 0x24
 80013a0:	46bd      	mov	sp, r7
 80013a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a6:	4770      	bx	lr
 80013a8:	40021000 	.word	0x40021000
 80013ac:	080045f4 	.word	0x080045f4
 80013b0:	00f42400 	.word	0x00f42400
 80013b4:	007a1200 	.word	0x007a1200

080013b8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b086      	sub	sp, #24
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80013c0:	2300      	movs	r3, #0
 80013c2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80013c4:	4b2a      	ldr	r3, [pc, #168]	; (8001470 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80013c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d003      	beq.n	80013d8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80013d0:	f7ff f888 	bl	80004e4 <HAL_PWREx_GetVoltageRange>
 80013d4:	6178      	str	r0, [r7, #20]
 80013d6:	e014      	b.n	8001402 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80013d8:	4b25      	ldr	r3, [pc, #148]	; (8001470 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80013da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013dc:	4a24      	ldr	r2, [pc, #144]	; (8001470 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80013de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013e2:	6593      	str	r3, [r2, #88]	; 0x58
 80013e4:	4b22      	ldr	r3, [pc, #136]	; (8001470 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80013e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013ec:	60fb      	str	r3, [r7, #12]
 80013ee:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80013f0:	f7ff f878 	bl	80004e4 <HAL_PWREx_GetVoltageRange>
 80013f4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80013f6:	4b1e      	ldr	r3, [pc, #120]	; (8001470 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80013f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013fa:	4a1d      	ldr	r2, [pc, #116]	; (8001470 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80013fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001400:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001402:	697b      	ldr	r3, [r7, #20]
 8001404:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001408:	d10b      	bne.n	8001422 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	2b80      	cmp	r3, #128	; 0x80
 800140e:	d919      	bls.n	8001444 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	2ba0      	cmp	r3, #160	; 0xa0
 8001414:	d902      	bls.n	800141c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001416:	2302      	movs	r3, #2
 8001418:	613b      	str	r3, [r7, #16]
 800141a:	e013      	b.n	8001444 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800141c:	2301      	movs	r3, #1
 800141e:	613b      	str	r3, [r7, #16]
 8001420:	e010      	b.n	8001444 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	2b80      	cmp	r3, #128	; 0x80
 8001426:	d902      	bls.n	800142e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001428:	2303      	movs	r3, #3
 800142a:	613b      	str	r3, [r7, #16]
 800142c:	e00a      	b.n	8001444 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	2b80      	cmp	r3, #128	; 0x80
 8001432:	d102      	bne.n	800143a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001434:	2302      	movs	r3, #2
 8001436:	613b      	str	r3, [r7, #16]
 8001438:	e004      	b.n	8001444 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	2b70      	cmp	r3, #112	; 0x70
 800143e:	d101      	bne.n	8001444 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001440:	2301      	movs	r3, #1
 8001442:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001444:	4b0b      	ldr	r3, [pc, #44]	; (8001474 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	f023 0207 	bic.w	r2, r3, #7
 800144c:	4909      	ldr	r1, [pc, #36]	; (8001474 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800144e:	693b      	ldr	r3, [r7, #16]
 8001450:	4313      	orrs	r3, r2
 8001452:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001454:	4b07      	ldr	r3, [pc, #28]	; (8001474 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	f003 0307 	and.w	r3, r3, #7
 800145c:	693a      	ldr	r2, [r7, #16]
 800145e:	429a      	cmp	r2, r3
 8001460:	d001      	beq.n	8001466 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001462:	2301      	movs	r3, #1
 8001464:	e000      	b.n	8001468 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001466:	2300      	movs	r3, #0
}
 8001468:	4618      	mov	r0, r3
 800146a:	3718      	adds	r7, #24
 800146c:	46bd      	mov	sp, r7
 800146e:	bd80      	pop	{r7, pc}
 8001470:	40021000 	.word	0x40021000
 8001474:	40022000 	.word	0x40022000

08001478 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8001478:	b480      	push	{r7}
 800147a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 800147c:	4b05      	ldr	r3, [pc, #20]	; (8001494 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	4a04      	ldr	r2, [pc, #16]	; (8001494 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8001482:	f043 0304 	orr.w	r3, r3, #4
 8001486:	6013      	str	r3, [r2, #0]
}
 8001488:	bf00      	nop
 800148a:	46bd      	mov	sp, r7
 800148c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001490:	4770      	bx	lr
 8001492:	bf00      	nop
 8001494:	40021000 	.word	0x40021000

08001498 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8001498:	b480      	push	{r7}
 800149a:	b085      	sub	sp, #20
 800149c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800149e:	f3ef 8305 	mrs	r3, IPSR
 80014a2:	60bb      	str	r3, [r7, #8]
  return(result);
 80014a4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d10f      	bne.n	80014ca <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80014aa:	f3ef 8310 	mrs	r3, PRIMASK
 80014ae:	607b      	str	r3, [r7, #4]
  return(result);
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d109      	bne.n	80014ca <osKernelInitialize+0x32>
 80014b6:	4b11      	ldr	r3, [pc, #68]	; (80014fc <osKernelInitialize+0x64>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	2b02      	cmp	r3, #2
 80014bc:	d109      	bne.n	80014d2 <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80014be:	f3ef 8311 	mrs	r3, BASEPRI
 80014c2:	603b      	str	r3, [r7, #0]
  return(result);
 80014c4:	683b      	ldr	r3, [r7, #0]
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d003      	beq.n	80014d2 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 80014ca:	f06f 0305 	mvn.w	r3, #5
 80014ce:	60fb      	str	r3, [r7, #12]
 80014d0:	e00c      	b.n	80014ec <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80014d2:	4b0a      	ldr	r3, [pc, #40]	; (80014fc <osKernelInitialize+0x64>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d105      	bne.n	80014e6 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 80014da:	4b08      	ldr	r3, [pc, #32]	; (80014fc <osKernelInitialize+0x64>)
 80014dc:	2201      	movs	r2, #1
 80014de:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80014e0:	2300      	movs	r3, #0
 80014e2:	60fb      	str	r3, [r7, #12]
 80014e4:	e002      	b.n	80014ec <osKernelInitialize+0x54>
    } else {
      stat = osError;
 80014e6:	f04f 33ff 	mov.w	r3, #4294967295
 80014ea:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80014ec:	68fb      	ldr	r3, [r7, #12]
}
 80014ee:	4618      	mov	r0, r3
 80014f0:	3714      	adds	r7, #20
 80014f2:	46bd      	mov	sp, r7
 80014f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f8:	4770      	bx	lr
 80014fa:	bf00      	nop
 80014fc:	20000090 	.word	0x20000090

08001500 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8001500:	b580      	push	{r7, lr}
 8001502:	b084      	sub	sp, #16
 8001504:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001506:	f3ef 8305 	mrs	r3, IPSR
 800150a:	60bb      	str	r3, [r7, #8]
  return(result);
 800150c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800150e:	2b00      	cmp	r3, #0
 8001510:	d10f      	bne.n	8001532 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001512:	f3ef 8310 	mrs	r3, PRIMASK
 8001516:	607b      	str	r3, [r7, #4]
  return(result);
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	2b00      	cmp	r3, #0
 800151c:	d109      	bne.n	8001532 <osKernelStart+0x32>
 800151e:	4b11      	ldr	r3, [pc, #68]	; (8001564 <osKernelStart+0x64>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	2b02      	cmp	r3, #2
 8001524:	d109      	bne.n	800153a <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8001526:	f3ef 8311 	mrs	r3, BASEPRI
 800152a:	603b      	str	r3, [r7, #0]
  return(result);
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	2b00      	cmp	r3, #0
 8001530:	d003      	beq.n	800153a <osKernelStart+0x3a>
    stat = osErrorISR;
 8001532:	f06f 0305 	mvn.w	r3, #5
 8001536:	60fb      	str	r3, [r7, #12]
 8001538:	e00e      	b.n	8001558 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 800153a:	4b0a      	ldr	r3, [pc, #40]	; (8001564 <osKernelStart+0x64>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	2b01      	cmp	r3, #1
 8001540:	d107      	bne.n	8001552 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8001542:	4b08      	ldr	r3, [pc, #32]	; (8001564 <osKernelStart+0x64>)
 8001544:	2202      	movs	r2, #2
 8001546:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8001548:	f001 f8d8 	bl	80026fc <vTaskStartScheduler>
      stat = osOK;
 800154c:	2300      	movs	r3, #0
 800154e:	60fb      	str	r3, [r7, #12]
 8001550:	e002      	b.n	8001558 <osKernelStart+0x58>
    } else {
      stat = osError;
 8001552:	f04f 33ff 	mov.w	r3, #4294967295
 8001556:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8001558:	68fb      	ldr	r3, [r7, #12]
}
 800155a:	4618      	mov	r0, r3
 800155c:	3710      	adds	r7, #16
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}
 8001562:	bf00      	nop
 8001564:	20000090 	.word	0x20000090

08001568 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8001568:	b580      	push	{r7, lr}
 800156a:	b092      	sub	sp, #72	; 0x48
 800156c:	af04      	add	r7, sp, #16
 800156e:	60f8      	str	r0, [r7, #12]
 8001570:	60b9      	str	r1, [r7, #8]
 8001572:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8001574:	2300      	movs	r3, #0
 8001576:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001578:	f3ef 8305 	mrs	r3, IPSR
 800157c:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800157e:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8001580:	2b00      	cmp	r3, #0
 8001582:	f040 8094 	bne.w	80016ae <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001586:	f3ef 8310 	mrs	r3, PRIMASK
 800158a:	623b      	str	r3, [r7, #32]
  return(result);
 800158c:	6a3b      	ldr	r3, [r7, #32]
 800158e:	2b00      	cmp	r3, #0
 8001590:	f040 808d 	bne.w	80016ae <osThreadNew+0x146>
 8001594:	4b48      	ldr	r3, [pc, #288]	; (80016b8 <osThreadNew+0x150>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	2b02      	cmp	r3, #2
 800159a:	d106      	bne.n	80015aa <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800159c:	f3ef 8311 	mrs	r3, BASEPRI
 80015a0:	61fb      	str	r3, [r7, #28]
  return(result);
 80015a2:	69fb      	ldr	r3, [r7, #28]
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	f040 8082 	bne.w	80016ae <osThreadNew+0x146>
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d07e      	beq.n	80016ae <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 80015b0:	2380      	movs	r3, #128	; 0x80
 80015b2:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 80015b4:	2318      	movs	r3, #24
 80015b6:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 80015b8:	2300      	movs	r3, #0
 80015ba:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 80015bc:	f107 031b 	add.w	r3, r7, #27
 80015c0:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 80015c2:	f04f 33ff 	mov.w	r3, #4294967295
 80015c6:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d045      	beq.n	800165a <osThreadNew+0xf2>
      if (attr->name != NULL) {
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d002      	beq.n	80015dc <osThreadNew+0x74>
        name = attr->name;
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	699b      	ldr	r3, [r3, #24]
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d002      	beq.n	80015ea <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	699b      	ldr	r3, [r3, #24]
 80015e8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80015ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d008      	beq.n	8001602 <osThreadNew+0x9a>
 80015f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015f2:	2b38      	cmp	r3, #56	; 0x38
 80015f4:	d805      	bhi.n	8001602 <osThreadNew+0x9a>
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	685b      	ldr	r3, [r3, #4]
 80015fa:	f003 0301 	and.w	r3, r3, #1
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d001      	beq.n	8001606 <osThreadNew+0x9e>
        return (NULL);
 8001602:	2300      	movs	r3, #0
 8001604:	e054      	b.n	80016b0 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	695b      	ldr	r3, [r3, #20]
 800160a:	2b00      	cmp	r3, #0
 800160c:	d003      	beq.n	8001616 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	695b      	ldr	r3, [r3, #20]
 8001612:	089b      	lsrs	r3, r3, #2
 8001614:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	689b      	ldr	r3, [r3, #8]
 800161a:	2b00      	cmp	r3, #0
 800161c:	d00e      	beq.n	800163c <osThreadNew+0xd4>
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	68db      	ldr	r3, [r3, #12]
 8001622:	2b5b      	cmp	r3, #91	; 0x5b
 8001624:	d90a      	bls.n	800163c <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800162a:	2b00      	cmp	r3, #0
 800162c:	d006      	beq.n	800163c <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	695b      	ldr	r3, [r3, #20]
 8001632:	2b00      	cmp	r3, #0
 8001634:	d002      	beq.n	800163c <osThreadNew+0xd4>
        mem = 1;
 8001636:	2301      	movs	r3, #1
 8001638:	62bb      	str	r3, [r7, #40]	; 0x28
 800163a:	e010      	b.n	800165e <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	689b      	ldr	r3, [r3, #8]
 8001640:	2b00      	cmp	r3, #0
 8001642:	d10c      	bne.n	800165e <osThreadNew+0xf6>
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	68db      	ldr	r3, [r3, #12]
 8001648:	2b00      	cmp	r3, #0
 800164a:	d108      	bne.n	800165e <osThreadNew+0xf6>
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	691b      	ldr	r3, [r3, #16]
 8001650:	2b00      	cmp	r3, #0
 8001652:	d104      	bne.n	800165e <osThreadNew+0xf6>
          mem = 0;
 8001654:	2300      	movs	r3, #0
 8001656:	62bb      	str	r3, [r7, #40]	; 0x28
 8001658:	e001      	b.n	800165e <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 800165a:	2300      	movs	r3, #0
 800165c:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 800165e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001660:	2b01      	cmp	r3, #1
 8001662:	d110      	bne.n	8001686 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8001668:	687a      	ldr	r2, [r7, #4]
 800166a:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800166c:	9202      	str	r2, [sp, #8]
 800166e:	9301      	str	r3, [sp, #4]
 8001670:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001672:	9300      	str	r3, [sp, #0]
 8001674:	68bb      	ldr	r3, [r7, #8]
 8001676:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001678:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800167a:	68f8      	ldr	r0, [r7, #12]
 800167c:	f000 fe76 	bl	800236c <xTaskCreateStatic>
 8001680:	4603      	mov	r3, r0
 8001682:	617b      	str	r3, [r7, #20]
 8001684:	e013      	b.n	80016ae <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8001686:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001688:	2b00      	cmp	r3, #0
 800168a:	d110      	bne.n	80016ae <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800168c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800168e:	b29a      	uxth	r2, r3
 8001690:	f107 0314 	add.w	r3, r7, #20
 8001694:	9301      	str	r3, [sp, #4]
 8001696:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001698:	9300      	str	r3, [sp, #0]
 800169a:	68bb      	ldr	r3, [r7, #8]
 800169c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800169e:	68f8      	ldr	r0, [r7, #12]
 80016a0:	f000 febd 	bl	800241e <xTaskCreate>
 80016a4:	4603      	mov	r3, r0
 80016a6:	2b01      	cmp	r3, #1
 80016a8:	d001      	beq.n	80016ae <osThreadNew+0x146>
          hTask = NULL;
 80016aa:	2300      	movs	r3, #0
 80016ac:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80016ae:	697b      	ldr	r3, [r7, #20]
}
 80016b0:	4618      	mov	r0, r3
 80016b2:	3738      	adds	r7, #56	; 0x38
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bd80      	pop	{r7, pc}
 80016b8:	20000090 	.word	0x20000090

080016bc <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 80016bc:	b580      	push	{r7, lr}
 80016be:	b086      	sub	sp, #24
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80016c4:	f3ef 8305 	mrs	r3, IPSR
 80016c8:	613b      	str	r3, [r7, #16]
  return(result);
 80016ca:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d10f      	bne.n	80016f0 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80016d0:	f3ef 8310 	mrs	r3, PRIMASK
 80016d4:	60fb      	str	r3, [r7, #12]
  return(result);
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d109      	bne.n	80016f0 <osDelay+0x34>
 80016dc:	4b0d      	ldr	r3, [pc, #52]	; (8001714 <osDelay+0x58>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	2b02      	cmp	r3, #2
 80016e2:	d109      	bne.n	80016f8 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80016e4:	f3ef 8311 	mrs	r3, BASEPRI
 80016e8:	60bb      	str	r3, [r7, #8]
  return(result);
 80016ea:	68bb      	ldr	r3, [r7, #8]
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d003      	beq.n	80016f8 <osDelay+0x3c>
    stat = osErrorISR;
 80016f0:	f06f 0305 	mvn.w	r3, #5
 80016f4:	617b      	str	r3, [r7, #20]
 80016f6:	e007      	b.n	8001708 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 80016f8:	2300      	movs	r3, #0
 80016fa:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d002      	beq.n	8001708 <osDelay+0x4c>
      vTaskDelay(ticks);
 8001702:	6878      	ldr	r0, [r7, #4]
 8001704:	f000 ffc6 	bl	8002694 <vTaskDelay>
    }
  }

  return (stat);
 8001708:	697b      	ldr	r3, [r7, #20]
}
 800170a:	4618      	mov	r0, r3
 800170c:	3718      	adds	r7, #24
 800170e:	46bd      	mov	sp, r7
 8001710:	bd80      	pop	{r7, pc}
 8001712:	bf00      	nop
 8001714:	20000090 	.word	0x20000090

08001718 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8001718:	b480      	push	{r7}
 800171a:	b085      	sub	sp, #20
 800171c:	af00      	add	r7, sp, #0
 800171e:	60f8      	str	r0, [r7, #12]
 8001720:	60b9      	str	r1, [r7, #8]
 8001722:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	4a07      	ldr	r2, [pc, #28]	; (8001744 <vApplicationGetIdleTaskMemory+0x2c>)
 8001728:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800172a:	68bb      	ldr	r3, [r7, #8]
 800172c:	4a06      	ldr	r2, [pc, #24]	; (8001748 <vApplicationGetIdleTaskMemory+0x30>)
 800172e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	2280      	movs	r2, #128	; 0x80
 8001734:	601a      	str	r2, [r3, #0]
}
 8001736:	bf00      	nop
 8001738:	3714      	adds	r7, #20
 800173a:	46bd      	mov	sp, r7
 800173c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001740:	4770      	bx	lr
 8001742:	bf00      	nop
 8001744:	20000094 	.word	0x20000094
 8001748:	200000f0 	.word	0x200000f0

0800174c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800174c:	b480      	push	{r7}
 800174e:	b085      	sub	sp, #20
 8001750:	af00      	add	r7, sp, #0
 8001752:	60f8      	str	r0, [r7, #12]
 8001754:	60b9      	str	r1, [r7, #8]
 8001756:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	4a07      	ldr	r2, [pc, #28]	; (8001778 <vApplicationGetTimerTaskMemory+0x2c>)
 800175c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800175e:	68bb      	ldr	r3, [r7, #8]
 8001760:	4a06      	ldr	r2, [pc, #24]	; (800177c <vApplicationGetTimerTaskMemory+0x30>)
 8001762:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	f44f 7280 	mov.w	r2, #256	; 0x100
 800176a:	601a      	str	r2, [r3, #0]
}
 800176c:	bf00      	nop
 800176e:	3714      	adds	r7, #20
 8001770:	46bd      	mov	sp, r7
 8001772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001776:	4770      	bx	lr
 8001778:	200002f0 	.word	0x200002f0
 800177c:	2000034c 	.word	0x2000034c

08001780 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001780:	b480      	push	{r7}
 8001782:	b083      	sub	sp, #12
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	f103 0208 	add.w	r2, r3, #8
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	f04f 32ff 	mov.w	r2, #4294967295
 8001798:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	f103 0208 	add.w	r2, r3, #8
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	f103 0208 	add.w	r2, r3, #8
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	2200      	movs	r2, #0
 80017b2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80017b4:	bf00      	nop
 80017b6:	370c      	adds	r7, #12
 80017b8:	46bd      	mov	sp, r7
 80017ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017be:	4770      	bx	lr

080017c0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80017c0:	b480      	push	{r7}
 80017c2:	b083      	sub	sp, #12
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	2200      	movs	r2, #0
 80017cc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80017ce:	bf00      	nop
 80017d0:	370c      	adds	r7, #12
 80017d2:	46bd      	mov	sp, r7
 80017d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d8:	4770      	bx	lr

080017da <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80017da:	b480      	push	{r7}
 80017dc:	b085      	sub	sp, #20
 80017de:	af00      	add	r7, sp, #0
 80017e0:	6078      	str	r0, [r7, #4]
 80017e2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	685b      	ldr	r3, [r3, #4]
 80017e8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80017ea:	683b      	ldr	r3, [r7, #0]
 80017ec:	68fa      	ldr	r2, [r7, #12]
 80017ee:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	689a      	ldr	r2, [r3, #8]
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	689b      	ldr	r3, [r3, #8]
 80017fc:	683a      	ldr	r2, [r7, #0]
 80017fe:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	683a      	ldr	r2, [r7, #0]
 8001804:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8001806:	683b      	ldr	r3, [r7, #0]
 8001808:	687a      	ldr	r2, [r7, #4]
 800180a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	1c5a      	adds	r2, r3, #1
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	601a      	str	r2, [r3, #0]
}
 8001816:	bf00      	nop
 8001818:	3714      	adds	r7, #20
 800181a:	46bd      	mov	sp, r7
 800181c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001820:	4770      	bx	lr

08001822 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001822:	b480      	push	{r7}
 8001824:	b085      	sub	sp, #20
 8001826:	af00      	add	r7, sp, #0
 8001828:	6078      	str	r0, [r7, #4]
 800182a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8001832:	68bb      	ldr	r3, [r7, #8]
 8001834:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001838:	d103      	bne.n	8001842 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	691b      	ldr	r3, [r3, #16]
 800183e:	60fb      	str	r3, [r7, #12]
 8001840:	e00c      	b.n	800185c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	3308      	adds	r3, #8
 8001846:	60fb      	str	r3, [r7, #12]
 8001848:	e002      	b.n	8001850 <vListInsert+0x2e>
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	685b      	ldr	r3, [r3, #4]
 800184e:	60fb      	str	r3, [r7, #12]
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	685b      	ldr	r3, [r3, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	68ba      	ldr	r2, [r7, #8]
 8001858:	429a      	cmp	r2, r3
 800185a:	d2f6      	bcs.n	800184a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	685a      	ldr	r2, [r3, #4]
 8001860:	683b      	ldr	r3, [r7, #0]
 8001862:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	685b      	ldr	r3, [r3, #4]
 8001868:	683a      	ldr	r2, [r7, #0]
 800186a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	68fa      	ldr	r2, [r7, #12]
 8001870:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	683a      	ldr	r2, [r7, #0]
 8001876:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	687a      	ldr	r2, [r7, #4]
 800187c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	1c5a      	adds	r2, r3, #1
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	601a      	str	r2, [r3, #0]
}
 8001888:	bf00      	nop
 800188a:	3714      	adds	r7, #20
 800188c:	46bd      	mov	sp, r7
 800188e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001892:	4770      	bx	lr

08001894 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8001894:	b480      	push	{r7}
 8001896:	b085      	sub	sp, #20
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	691b      	ldr	r3, [r3, #16]
 80018a0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	685b      	ldr	r3, [r3, #4]
 80018a6:	687a      	ldr	r2, [r7, #4]
 80018a8:	6892      	ldr	r2, [r2, #8]
 80018aa:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	689b      	ldr	r3, [r3, #8]
 80018b0:	687a      	ldr	r2, [r7, #4]
 80018b2:	6852      	ldr	r2, [r2, #4]
 80018b4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	685b      	ldr	r3, [r3, #4]
 80018ba:	687a      	ldr	r2, [r7, #4]
 80018bc:	429a      	cmp	r2, r3
 80018be:	d103      	bne.n	80018c8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	689a      	ldr	r2, [r3, #8]
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	2200      	movs	r2, #0
 80018cc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	1e5a      	subs	r2, r3, #1
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	681b      	ldr	r3, [r3, #0]
}
 80018dc:	4618      	mov	r0, r3
 80018de:	3714      	adds	r7, #20
 80018e0:	46bd      	mov	sp, r7
 80018e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e6:	4770      	bx	lr

080018e8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b084      	sub	sp, #16
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
 80018f0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d109      	bne.n	8001910 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80018fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001900:	f383 8811 	msr	BASEPRI, r3
 8001904:	f3bf 8f6f 	isb	sy
 8001908:	f3bf 8f4f 	dsb	sy
 800190c:	60bb      	str	r3, [r7, #8]
 800190e:	e7fe      	b.n	800190e <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8001910:	f002 f844 	bl	800399c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	681a      	ldr	r2, [r3, #0]
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800191c:	68f9      	ldr	r1, [r7, #12]
 800191e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001920:	fb01 f303 	mul.w	r3, r1, r3
 8001924:	441a      	add	r2, r3
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	2200      	movs	r2, #0
 800192e:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	681a      	ldr	r2, [r3, #0]
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	681a      	ldr	r2, [r3, #0]
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001940:	3b01      	subs	r3, #1
 8001942:	68f9      	ldr	r1, [r7, #12]
 8001944:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001946:	fb01 f303 	mul.w	r3, r1, r3
 800194a:	441a      	add	r2, r3
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	22ff      	movs	r2, #255	; 0xff
 8001954:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	22ff      	movs	r2, #255	; 0xff
 800195c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	2b00      	cmp	r3, #0
 8001964:	d114      	bne.n	8001990 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	691b      	ldr	r3, [r3, #16]
 800196a:	2b00      	cmp	r3, #0
 800196c:	d01a      	beq.n	80019a4 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	3310      	adds	r3, #16
 8001972:	4618      	mov	r0, r3
 8001974:	f001 f948 	bl	8002c08 <xTaskRemoveFromEventList>
 8001978:	4603      	mov	r3, r0
 800197a:	2b00      	cmp	r3, #0
 800197c:	d012      	beq.n	80019a4 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800197e:	4b0d      	ldr	r3, [pc, #52]	; (80019b4 <xQueueGenericReset+0xcc>)
 8001980:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001984:	601a      	str	r2, [r3, #0]
 8001986:	f3bf 8f4f 	dsb	sy
 800198a:	f3bf 8f6f 	isb	sy
 800198e:	e009      	b.n	80019a4 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	3310      	adds	r3, #16
 8001994:	4618      	mov	r0, r3
 8001996:	f7ff fef3 	bl	8001780 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	3324      	adds	r3, #36	; 0x24
 800199e:	4618      	mov	r0, r3
 80019a0:	f7ff feee 	bl	8001780 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80019a4:	f002 f828 	bl	80039f8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80019a8:	2301      	movs	r3, #1
}
 80019aa:	4618      	mov	r0, r3
 80019ac:	3710      	adds	r7, #16
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd80      	pop	{r7, pc}
 80019b2:	bf00      	nop
 80019b4:	e000ed04 	.word	0xe000ed04

080019b8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b08e      	sub	sp, #56	; 0x38
 80019bc:	af02      	add	r7, sp, #8
 80019be:	60f8      	str	r0, [r7, #12]
 80019c0:	60b9      	str	r1, [r7, #8]
 80019c2:	607a      	str	r2, [r7, #4]
 80019c4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d109      	bne.n	80019e0 <xQueueGenericCreateStatic+0x28>
 80019cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80019d0:	f383 8811 	msr	BASEPRI, r3
 80019d4:	f3bf 8f6f 	isb	sy
 80019d8:	f3bf 8f4f 	dsb	sy
 80019dc:	62bb      	str	r3, [r7, #40]	; 0x28
 80019de:	e7fe      	b.n	80019de <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d109      	bne.n	80019fa <xQueueGenericCreateStatic+0x42>
 80019e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80019ea:	f383 8811 	msr	BASEPRI, r3
 80019ee:	f3bf 8f6f 	isb	sy
 80019f2:	f3bf 8f4f 	dsb	sy
 80019f6:	627b      	str	r3, [r7, #36]	; 0x24
 80019f8:	e7fe      	b.n	80019f8 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d002      	beq.n	8001a06 <xQueueGenericCreateStatic+0x4e>
 8001a00:	68bb      	ldr	r3, [r7, #8]
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d001      	beq.n	8001a0a <xQueueGenericCreateStatic+0x52>
 8001a06:	2301      	movs	r3, #1
 8001a08:	e000      	b.n	8001a0c <xQueueGenericCreateStatic+0x54>
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d109      	bne.n	8001a24 <xQueueGenericCreateStatic+0x6c>
 8001a10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a14:	f383 8811 	msr	BASEPRI, r3
 8001a18:	f3bf 8f6f 	isb	sy
 8001a1c:	f3bf 8f4f 	dsb	sy
 8001a20:	623b      	str	r3, [r7, #32]
 8001a22:	e7fe      	b.n	8001a22 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d102      	bne.n	8001a30 <xQueueGenericCreateStatic+0x78>
 8001a2a:	68bb      	ldr	r3, [r7, #8]
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d101      	bne.n	8001a34 <xQueueGenericCreateStatic+0x7c>
 8001a30:	2301      	movs	r3, #1
 8001a32:	e000      	b.n	8001a36 <xQueueGenericCreateStatic+0x7e>
 8001a34:	2300      	movs	r3, #0
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d109      	bne.n	8001a4e <xQueueGenericCreateStatic+0x96>
 8001a3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a3e:	f383 8811 	msr	BASEPRI, r3
 8001a42:	f3bf 8f6f 	isb	sy
 8001a46:	f3bf 8f4f 	dsb	sy
 8001a4a:	61fb      	str	r3, [r7, #28]
 8001a4c:	e7fe      	b.n	8001a4c <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8001a4e:	2350      	movs	r3, #80	; 0x50
 8001a50:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8001a52:	697b      	ldr	r3, [r7, #20]
 8001a54:	2b50      	cmp	r3, #80	; 0x50
 8001a56:	d009      	beq.n	8001a6c <xQueueGenericCreateStatic+0xb4>
 8001a58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a5c:	f383 8811 	msr	BASEPRI, r3
 8001a60:	f3bf 8f6f 	isb	sy
 8001a64:	f3bf 8f4f 	dsb	sy
 8001a68:	61bb      	str	r3, [r7, #24]
 8001a6a:	e7fe      	b.n	8001a6a <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8001a70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d00d      	beq.n	8001a92 <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8001a76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a78:	2201      	movs	r2, #1
 8001a7a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8001a7e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8001a82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a84:	9300      	str	r3, [sp, #0]
 8001a86:	4613      	mov	r3, r2
 8001a88:	687a      	ldr	r2, [r7, #4]
 8001a8a:	68b9      	ldr	r1, [r7, #8]
 8001a8c:	68f8      	ldr	r0, [r7, #12]
 8001a8e:	f000 f842 	bl	8001b16 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8001a92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8001a94:	4618      	mov	r0, r3
 8001a96:	3730      	adds	r7, #48	; 0x30
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	bd80      	pop	{r7, pc}

08001a9c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b08a      	sub	sp, #40	; 0x28
 8001aa0:	af02      	add	r7, sp, #8
 8001aa2:	60f8      	str	r0, [r7, #12]
 8001aa4:	60b9      	str	r1, [r7, #8]
 8001aa6:	4613      	mov	r3, r2
 8001aa8:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d109      	bne.n	8001ac4 <xQueueGenericCreate+0x28>
 8001ab0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ab4:	f383 8811 	msr	BASEPRI, r3
 8001ab8:	f3bf 8f6f 	isb	sy
 8001abc:	f3bf 8f4f 	dsb	sy
 8001ac0:	613b      	str	r3, [r7, #16]
 8001ac2:	e7fe      	b.n	8001ac2 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8001ac4:	68bb      	ldr	r3, [r7, #8]
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d102      	bne.n	8001ad0 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8001aca:	2300      	movs	r3, #0
 8001acc:	61fb      	str	r3, [r7, #28]
 8001ace:	e004      	b.n	8001ada <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	68ba      	ldr	r2, [r7, #8]
 8001ad4:	fb02 f303 	mul.w	r3, r2, r3
 8001ad8:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8001ada:	69fb      	ldr	r3, [r7, #28]
 8001adc:	3350      	adds	r3, #80	; 0x50
 8001ade:	4618      	mov	r0, r3
 8001ae0:	f002 f876 	bl	8003bd0 <pvPortMalloc>
 8001ae4:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8001ae6:	69bb      	ldr	r3, [r7, #24]
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d00f      	beq.n	8001b0c <xQueueGenericCreate+0x70>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8001aec:	69bb      	ldr	r3, [r7, #24]
 8001aee:	3350      	adds	r3, #80	; 0x50
 8001af0:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8001af2:	69bb      	ldr	r3, [r7, #24]
 8001af4:	2200      	movs	r2, #0
 8001af6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8001afa:	79fa      	ldrb	r2, [r7, #7]
 8001afc:	69bb      	ldr	r3, [r7, #24]
 8001afe:	9300      	str	r3, [sp, #0]
 8001b00:	4613      	mov	r3, r2
 8001b02:	697a      	ldr	r2, [r7, #20]
 8001b04:	68b9      	ldr	r1, [r7, #8]
 8001b06:	68f8      	ldr	r0, [r7, #12]
 8001b08:	f000 f805 	bl	8001b16 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8001b0c:	69bb      	ldr	r3, [r7, #24]
	}
 8001b0e:	4618      	mov	r0, r3
 8001b10:	3720      	adds	r7, #32
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bd80      	pop	{r7, pc}

08001b16 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8001b16:	b580      	push	{r7, lr}
 8001b18:	b084      	sub	sp, #16
 8001b1a:	af00      	add	r7, sp, #0
 8001b1c:	60f8      	str	r0, [r7, #12]
 8001b1e:	60b9      	str	r1, [r7, #8]
 8001b20:	607a      	str	r2, [r7, #4]
 8001b22:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8001b24:	68bb      	ldr	r3, [r7, #8]
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d103      	bne.n	8001b32 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8001b2a:	69bb      	ldr	r3, [r7, #24]
 8001b2c:	69ba      	ldr	r2, [r7, #24]
 8001b2e:	601a      	str	r2, [r3, #0]
 8001b30:	e002      	b.n	8001b38 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8001b32:	69bb      	ldr	r3, [r7, #24]
 8001b34:	687a      	ldr	r2, [r7, #4]
 8001b36:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8001b38:	69bb      	ldr	r3, [r7, #24]
 8001b3a:	68fa      	ldr	r2, [r7, #12]
 8001b3c:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8001b3e:	69bb      	ldr	r3, [r7, #24]
 8001b40:	68ba      	ldr	r2, [r7, #8]
 8001b42:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8001b44:	2101      	movs	r1, #1
 8001b46:	69b8      	ldr	r0, [r7, #24]
 8001b48:	f7ff fece 	bl	80018e8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8001b4c:	69bb      	ldr	r3, [r7, #24]
 8001b4e:	78fa      	ldrb	r2, [r7, #3]
 8001b50:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8001b54:	bf00      	nop
 8001b56:	3710      	adds	r7, #16
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bd80      	pop	{r7, pc}

08001b5c <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b082      	sub	sp, #8
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d00e      	beq.n	8001b88 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	2200      	movs	r2, #0
 8001b74:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	2200      	movs	r2, #0
 8001b7a:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	2200      	movs	r2, #0
 8001b80:	2100      	movs	r1, #0
 8001b82:	6878      	ldr	r0, [r7, #4]
 8001b84:	f000 f81c 	bl	8001bc0 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8001b88:	bf00      	nop
 8001b8a:	3708      	adds	r7, #8
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	bd80      	pop	{r7, pc}

08001b90 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b086      	sub	sp, #24
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	4603      	mov	r3, r0
 8001b98:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	617b      	str	r3, [r7, #20]
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8001ba2:	79fb      	ldrb	r3, [r7, #7]
 8001ba4:	461a      	mov	r2, r3
 8001ba6:	6939      	ldr	r1, [r7, #16]
 8001ba8:	6978      	ldr	r0, [r7, #20]
 8001baa:	f7ff ff77 	bl	8001a9c <xQueueGenericCreate>
 8001bae:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 8001bb0:	68f8      	ldr	r0, [r7, #12]
 8001bb2:	f7ff ffd3 	bl	8001b5c <prvInitialiseMutex>

		return pxNewQueue;
 8001bb6:	68fb      	ldr	r3, [r7, #12]
	}
 8001bb8:	4618      	mov	r0, r3
 8001bba:	3718      	adds	r7, #24
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	bd80      	pop	{r7, pc}

08001bc0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b08e      	sub	sp, #56	; 0x38
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	60f8      	str	r0, [r7, #12]
 8001bc8:	60b9      	str	r1, [r7, #8]
 8001bca:	607a      	str	r2, [r7, #4]
 8001bcc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8001bd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d109      	bne.n	8001bf0 <xQueueGenericSend+0x30>
 8001bdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001be0:	f383 8811 	msr	BASEPRI, r3
 8001be4:	f3bf 8f6f 	isb	sy
 8001be8:	f3bf 8f4f 	dsb	sy
 8001bec:	62bb      	str	r3, [r7, #40]	; 0x28
 8001bee:	e7fe      	b.n	8001bee <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001bf0:	68bb      	ldr	r3, [r7, #8]
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d103      	bne.n	8001bfe <xQueueGenericSend+0x3e>
 8001bf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d101      	bne.n	8001c02 <xQueueGenericSend+0x42>
 8001bfe:	2301      	movs	r3, #1
 8001c00:	e000      	b.n	8001c04 <xQueueGenericSend+0x44>
 8001c02:	2300      	movs	r3, #0
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d109      	bne.n	8001c1c <xQueueGenericSend+0x5c>
 8001c08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c0c:	f383 8811 	msr	BASEPRI, r3
 8001c10:	f3bf 8f6f 	isb	sy
 8001c14:	f3bf 8f4f 	dsb	sy
 8001c18:	627b      	str	r3, [r7, #36]	; 0x24
 8001c1a:	e7fe      	b.n	8001c1a <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	2b02      	cmp	r3, #2
 8001c20:	d103      	bne.n	8001c2a <xQueueGenericSend+0x6a>
 8001c22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c26:	2b01      	cmp	r3, #1
 8001c28:	d101      	bne.n	8001c2e <xQueueGenericSend+0x6e>
 8001c2a:	2301      	movs	r3, #1
 8001c2c:	e000      	b.n	8001c30 <xQueueGenericSend+0x70>
 8001c2e:	2300      	movs	r3, #0
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d109      	bne.n	8001c48 <xQueueGenericSend+0x88>
 8001c34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c38:	f383 8811 	msr	BASEPRI, r3
 8001c3c:	f3bf 8f6f 	isb	sy
 8001c40:	f3bf 8f4f 	dsb	sy
 8001c44:	623b      	str	r3, [r7, #32]
 8001c46:	e7fe      	b.n	8001c46 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001c48:	f001 f99a 	bl	8002f80 <xTaskGetSchedulerState>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d102      	bne.n	8001c58 <xQueueGenericSend+0x98>
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d101      	bne.n	8001c5c <xQueueGenericSend+0x9c>
 8001c58:	2301      	movs	r3, #1
 8001c5a:	e000      	b.n	8001c5e <xQueueGenericSend+0x9e>
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d109      	bne.n	8001c76 <xQueueGenericSend+0xb6>
 8001c62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c66:	f383 8811 	msr	BASEPRI, r3
 8001c6a:	f3bf 8f6f 	isb	sy
 8001c6e:	f3bf 8f4f 	dsb	sy
 8001c72:	61fb      	str	r3, [r7, #28]
 8001c74:	e7fe      	b.n	8001c74 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8001c76:	f001 fe91 	bl	800399c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8001c7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c7c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001c7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c82:	429a      	cmp	r2, r3
 8001c84:	d302      	bcc.n	8001c8c <xQueueGenericSend+0xcc>
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	2b02      	cmp	r3, #2
 8001c8a:	d129      	bne.n	8001ce0 <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8001c8c:	683a      	ldr	r2, [r7, #0]
 8001c8e:	68b9      	ldr	r1, [r7, #8]
 8001c90:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001c92:	f000 f9ff 	bl	8002094 <prvCopyDataToQueue>
 8001c96:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001c98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d010      	beq.n	8001cc2 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001ca0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ca2:	3324      	adds	r3, #36	; 0x24
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	f000 ffaf 	bl	8002c08 <xTaskRemoveFromEventList>
 8001caa:	4603      	mov	r3, r0
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d013      	beq.n	8001cd8 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8001cb0:	4b3f      	ldr	r3, [pc, #252]	; (8001db0 <xQueueGenericSend+0x1f0>)
 8001cb2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001cb6:	601a      	str	r2, [r3, #0]
 8001cb8:	f3bf 8f4f 	dsb	sy
 8001cbc:	f3bf 8f6f 	isb	sy
 8001cc0:	e00a      	b.n	8001cd8 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8001cc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d007      	beq.n	8001cd8 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8001cc8:	4b39      	ldr	r3, [pc, #228]	; (8001db0 <xQueueGenericSend+0x1f0>)
 8001cca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001cce:	601a      	str	r2, [r3, #0]
 8001cd0:	f3bf 8f4f 	dsb	sy
 8001cd4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8001cd8:	f001 fe8e 	bl	80039f8 <vPortExitCritical>
				return pdPASS;
 8001cdc:	2301      	movs	r3, #1
 8001cde:	e063      	b.n	8001da8 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d103      	bne.n	8001cee <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8001ce6:	f001 fe87 	bl	80039f8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8001cea:	2300      	movs	r3, #0
 8001cec:	e05c      	b.n	8001da8 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8001cee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d106      	bne.n	8001d02 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8001cf4:	f107 0314 	add.w	r3, r7, #20
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	f000 ffe7 	bl	8002ccc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8001cfe:	2301      	movs	r3, #1
 8001d00:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8001d02:	f001 fe79 	bl	80039f8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8001d06:	f000 fd5d 	bl	80027c4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8001d0a:	f001 fe47 	bl	800399c <vPortEnterCritical>
 8001d0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d10:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001d14:	b25b      	sxtb	r3, r3
 8001d16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d1a:	d103      	bne.n	8001d24 <xQueueGenericSend+0x164>
 8001d1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d1e:	2200      	movs	r2, #0
 8001d20:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001d24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d26:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001d2a:	b25b      	sxtb	r3, r3
 8001d2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d30:	d103      	bne.n	8001d3a <xQueueGenericSend+0x17a>
 8001d32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d34:	2200      	movs	r2, #0
 8001d36:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001d3a:	f001 fe5d 	bl	80039f8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001d3e:	1d3a      	adds	r2, r7, #4
 8001d40:	f107 0314 	add.w	r3, r7, #20
 8001d44:	4611      	mov	r1, r2
 8001d46:	4618      	mov	r0, r3
 8001d48:	f000 ffd6 	bl	8002cf8 <xTaskCheckForTimeOut>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d124      	bne.n	8001d9c <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8001d52:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001d54:	f000 fa96 	bl	8002284 <prvIsQueueFull>
 8001d58:	4603      	mov	r3, r0
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d018      	beq.n	8001d90 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8001d5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d60:	3310      	adds	r3, #16
 8001d62:	687a      	ldr	r2, [r7, #4]
 8001d64:	4611      	mov	r1, r2
 8001d66:	4618      	mov	r0, r3
 8001d68:	f000 ff00 	bl	8002b6c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8001d6c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001d6e:	f000 fa21 	bl	80021b4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8001d72:	f000 fd35 	bl	80027e0 <xTaskResumeAll>
 8001d76:	4603      	mov	r3, r0
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	f47f af7c 	bne.w	8001c76 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8001d7e:	4b0c      	ldr	r3, [pc, #48]	; (8001db0 <xQueueGenericSend+0x1f0>)
 8001d80:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001d84:	601a      	str	r2, [r3, #0]
 8001d86:	f3bf 8f4f 	dsb	sy
 8001d8a:	f3bf 8f6f 	isb	sy
 8001d8e:	e772      	b.n	8001c76 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8001d90:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001d92:	f000 fa0f 	bl	80021b4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8001d96:	f000 fd23 	bl	80027e0 <xTaskResumeAll>
 8001d9a:	e76c      	b.n	8001c76 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8001d9c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001d9e:	f000 fa09 	bl	80021b4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8001da2:	f000 fd1d 	bl	80027e0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8001da6:	2300      	movs	r3, #0
		}
	}
}
 8001da8:	4618      	mov	r0, r3
 8001daa:	3738      	adds	r7, #56	; 0x38
 8001dac:	46bd      	mov	sp, r7
 8001dae:	bd80      	pop	{r7, pc}
 8001db0:	e000ed04 	.word	0xe000ed04

08001db4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b08e      	sub	sp, #56	; 0x38
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	60f8      	str	r0, [r7, #12]
 8001dbc:	60b9      	str	r1, [r7, #8]
 8001dbe:	607a      	str	r2, [r7, #4]
 8001dc0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8001dc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d109      	bne.n	8001de0 <xQueueGenericSendFromISR+0x2c>
 8001dcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001dd0:	f383 8811 	msr	BASEPRI, r3
 8001dd4:	f3bf 8f6f 	isb	sy
 8001dd8:	f3bf 8f4f 	dsb	sy
 8001ddc:	627b      	str	r3, [r7, #36]	; 0x24
 8001dde:	e7fe      	b.n	8001dde <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001de0:	68bb      	ldr	r3, [r7, #8]
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d103      	bne.n	8001dee <xQueueGenericSendFromISR+0x3a>
 8001de6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d101      	bne.n	8001df2 <xQueueGenericSendFromISR+0x3e>
 8001dee:	2301      	movs	r3, #1
 8001df0:	e000      	b.n	8001df4 <xQueueGenericSendFromISR+0x40>
 8001df2:	2300      	movs	r3, #0
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d109      	bne.n	8001e0c <xQueueGenericSendFromISR+0x58>
 8001df8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001dfc:	f383 8811 	msr	BASEPRI, r3
 8001e00:	f3bf 8f6f 	isb	sy
 8001e04:	f3bf 8f4f 	dsb	sy
 8001e08:	623b      	str	r3, [r7, #32]
 8001e0a:	e7fe      	b.n	8001e0a <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	2b02      	cmp	r3, #2
 8001e10:	d103      	bne.n	8001e1a <xQueueGenericSendFromISR+0x66>
 8001e12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e16:	2b01      	cmp	r3, #1
 8001e18:	d101      	bne.n	8001e1e <xQueueGenericSendFromISR+0x6a>
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	e000      	b.n	8001e20 <xQueueGenericSendFromISR+0x6c>
 8001e1e:	2300      	movs	r3, #0
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d109      	bne.n	8001e38 <xQueueGenericSendFromISR+0x84>
 8001e24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e28:	f383 8811 	msr	BASEPRI, r3
 8001e2c:	f3bf 8f6f 	isb	sy
 8001e30:	f3bf 8f4f 	dsb	sy
 8001e34:	61fb      	str	r3, [r7, #28]
 8001e36:	e7fe      	b.n	8001e36 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8001e38:	f001 fe8c 	bl	8003b54 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8001e3c:	f3ef 8211 	mrs	r2, BASEPRI
 8001e40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e44:	f383 8811 	msr	BASEPRI, r3
 8001e48:	f3bf 8f6f 	isb	sy
 8001e4c:	f3bf 8f4f 	dsb	sy
 8001e50:	61ba      	str	r2, [r7, #24]
 8001e52:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8001e54:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8001e56:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8001e58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e5a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001e5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e60:	429a      	cmp	r2, r3
 8001e62:	d302      	bcc.n	8001e6a <xQueueGenericSendFromISR+0xb6>
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	2b02      	cmp	r3, #2
 8001e68:	d12c      	bne.n	8001ec4 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8001e6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e6c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001e70:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8001e74:	683a      	ldr	r2, [r7, #0]
 8001e76:	68b9      	ldr	r1, [r7, #8]
 8001e78:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001e7a:	f000 f90b 	bl	8002094 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8001e7e:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8001e82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e86:	d112      	bne.n	8001eae <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001e88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d016      	beq.n	8001ebe <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001e90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e92:	3324      	adds	r3, #36	; 0x24
 8001e94:	4618      	mov	r0, r3
 8001e96:	f000 feb7 	bl	8002c08 <xTaskRemoveFromEventList>
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d00e      	beq.n	8001ebe <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d00b      	beq.n	8001ebe <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	2201      	movs	r2, #1
 8001eaa:	601a      	str	r2, [r3, #0]
 8001eac:	e007      	b.n	8001ebe <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8001eae:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001eb2:	3301      	adds	r3, #1
 8001eb4:	b2db      	uxtb	r3, r3
 8001eb6:	b25a      	sxtb	r2, r3
 8001eb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001eba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8001ec2:	e001      	b.n	8001ec8 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	637b      	str	r3, [r7, #52]	; 0x34
 8001ec8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001eca:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8001ecc:	693b      	ldr	r3, [r7, #16]
 8001ece:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8001ed2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	3738      	adds	r7, #56	; 0x38
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	bd80      	pop	{r7, pc}

08001edc <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b08c      	sub	sp, #48	; 0x30
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	60f8      	str	r0, [r7, #12]
 8001ee4:	60b9      	str	r1, [r7, #8]
 8001ee6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8001ee8:	2300      	movs	r3, #0
 8001eea:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8001ef0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d109      	bne.n	8001f0a <xQueueReceive+0x2e>
	__asm volatile
 8001ef6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001efa:	f383 8811 	msr	BASEPRI, r3
 8001efe:	f3bf 8f6f 	isb	sy
 8001f02:	f3bf 8f4f 	dsb	sy
 8001f06:	623b      	str	r3, [r7, #32]
 8001f08:	e7fe      	b.n	8001f08 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001f0a:	68bb      	ldr	r3, [r7, #8]
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d103      	bne.n	8001f18 <xQueueReceive+0x3c>
 8001f10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d101      	bne.n	8001f1c <xQueueReceive+0x40>
 8001f18:	2301      	movs	r3, #1
 8001f1a:	e000      	b.n	8001f1e <xQueueReceive+0x42>
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d109      	bne.n	8001f36 <xQueueReceive+0x5a>
 8001f22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f26:	f383 8811 	msr	BASEPRI, r3
 8001f2a:	f3bf 8f6f 	isb	sy
 8001f2e:	f3bf 8f4f 	dsb	sy
 8001f32:	61fb      	str	r3, [r7, #28]
 8001f34:	e7fe      	b.n	8001f34 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001f36:	f001 f823 	bl	8002f80 <xTaskGetSchedulerState>
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d102      	bne.n	8001f46 <xQueueReceive+0x6a>
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d101      	bne.n	8001f4a <xQueueReceive+0x6e>
 8001f46:	2301      	movs	r3, #1
 8001f48:	e000      	b.n	8001f4c <xQueueReceive+0x70>
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d109      	bne.n	8001f64 <xQueueReceive+0x88>
 8001f50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f54:	f383 8811 	msr	BASEPRI, r3
 8001f58:	f3bf 8f6f 	isb	sy
 8001f5c:	f3bf 8f4f 	dsb	sy
 8001f60:	61bb      	str	r3, [r7, #24]
 8001f62:	e7fe      	b.n	8001f62 <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8001f64:	f001 fd1a 	bl	800399c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001f68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f6c:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8001f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d01f      	beq.n	8001fb4 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8001f74:	68b9      	ldr	r1, [r7, #8]
 8001f76:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001f78:	f000 f8f6 	bl	8002168 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8001f7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f7e:	1e5a      	subs	r2, r3, #1
 8001f80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f82:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001f84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f86:	691b      	ldr	r3, [r3, #16]
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d00f      	beq.n	8001fac <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001f8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f8e:	3310      	adds	r3, #16
 8001f90:	4618      	mov	r0, r3
 8001f92:	f000 fe39 	bl	8002c08 <xTaskRemoveFromEventList>
 8001f96:	4603      	mov	r3, r0
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d007      	beq.n	8001fac <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8001f9c:	4b3c      	ldr	r3, [pc, #240]	; (8002090 <xQueueReceive+0x1b4>)
 8001f9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001fa2:	601a      	str	r2, [r3, #0]
 8001fa4:	f3bf 8f4f 	dsb	sy
 8001fa8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8001fac:	f001 fd24 	bl	80039f8 <vPortExitCritical>
				return pdPASS;
 8001fb0:	2301      	movs	r3, #1
 8001fb2:	e069      	b.n	8002088 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d103      	bne.n	8001fc2 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8001fba:	f001 fd1d 	bl	80039f8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	e062      	b.n	8002088 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8001fc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d106      	bne.n	8001fd6 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8001fc8:	f107 0310 	add.w	r3, r7, #16
 8001fcc:	4618      	mov	r0, r3
 8001fce:	f000 fe7d 	bl	8002ccc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8001fd6:	f001 fd0f 	bl	80039f8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8001fda:	f000 fbf3 	bl	80027c4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8001fde:	f001 fcdd 	bl	800399c <vPortEnterCritical>
 8001fe2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fe4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001fe8:	b25b      	sxtb	r3, r3
 8001fea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fee:	d103      	bne.n	8001ff8 <xQueueReceive+0x11c>
 8001ff0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001ff8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ffa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001ffe:	b25b      	sxtb	r3, r3
 8002000:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002004:	d103      	bne.n	800200e <xQueueReceive+0x132>
 8002006:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002008:	2200      	movs	r2, #0
 800200a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800200e:	f001 fcf3 	bl	80039f8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002012:	1d3a      	adds	r2, r7, #4
 8002014:	f107 0310 	add.w	r3, r7, #16
 8002018:	4611      	mov	r1, r2
 800201a:	4618      	mov	r0, r3
 800201c:	f000 fe6c 	bl	8002cf8 <xTaskCheckForTimeOut>
 8002020:	4603      	mov	r3, r0
 8002022:	2b00      	cmp	r3, #0
 8002024:	d123      	bne.n	800206e <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002026:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002028:	f000 f916 	bl	8002258 <prvIsQueueEmpty>
 800202c:	4603      	mov	r3, r0
 800202e:	2b00      	cmp	r3, #0
 8002030:	d017      	beq.n	8002062 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002032:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002034:	3324      	adds	r3, #36	; 0x24
 8002036:	687a      	ldr	r2, [r7, #4]
 8002038:	4611      	mov	r1, r2
 800203a:	4618      	mov	r0, r3
 800203c:	f000 fd96 	bl	8002b6c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002040:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002042:	f000 f8b7 	bl	80021b4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002046:	f000 fbcb 	bl	80027e0 <xTaskResumeAll>
 800204a:	4603      	mov	r3, r0
 800204c:	2b00      	cmp	r3, #0
 800204e:	d189      	bne.n	8001f64 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8002050:	4b0f      	ldr	r3, [pc, #60]	; (8002090 <xQueueReceive+0x1b4>)
 8002052:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002056:	601a      	str	r2, [r3, #0]
 8002058:	f3bf 8f4f 	dsb	sy
 800205c:	f3bf 8f6f 	isb	sy
 8002060:	e780      	b.n	8001f64 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8002062:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002064:	f000 f8a6 	bl	80021b4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002068:	f000 fbba 	bl	80027e0 <xTaskResumeAll>
 800206c:	e77a      	b.n	8001f64 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800206e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002070:	f000 f8a0 	bl	80021b4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002074:	f000 fbb4 	bl	80027e0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002078:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800207a:	f000 f8ed 	bl	8002258 <prvIsQueueEmpty>
 800207e:	4603      	mov	r3, r0
 8002080:	2b00      	cmp	r3, #0
 8002082:	f43f af6f 	beq.w	8001f64 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002086:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8002088:	4618      	mov	r0, r3
 800208a:	3730      	adds	r7, #48	; 0x30
 800208c:	46bd      	mov	sp, r7
 800208e:	bd80      	pop	{r7, pc}
 8002090:	e000ed04 	.word	0xe000ed04

08002094 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b086      	sub	sp, #24
 8002098:	af00      	add	r7, sp, #0
 800209a:	60f8      	str	r0, [r7, #12]
 800209c:	60b9      	str	r1, [r7, #8]
 800209e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80020a0:	2300      	movs	r3, #0
 80020a2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020a8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d10d      	bne.n	80020ce <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d14d      	bne.n	8002156 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	685b      	ldr	r3, [r3, #4]
 80020be:	4618      	mov	r0, r3
 80020c0:	f000 ff7c 	bl	8002fbc <xTaskPriorityDisinherit>
 80020c4:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	2200      	movs	r2, #0
 80020ca:	605a      	str	r2, [r3, #4]
 80020cc:	e043      	b.n	8002156 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d119      	bne.n	8002108 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	6898      	ldr	r0, [r3, #8]
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020dc:	461a      	mov	r2, r3
 80020de:	68b9      	ldr	r1, [r7, #8]
 80020e0:	f002 f98a 	bl	80043f8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	689a      	ldr	r2, [r3, #8]
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ec:	441a      	add	r2, r3
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	689a      	ldr	r2, [r3, #8]
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	685b      	ldr	r3, [r3, #4]
 80020fa:	429a      	cmp	r2, r3
 80020fc:	d32b      	bcc.n	8002156 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	681a      	ldr	r2, [r3, #0]
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	609a      	str	r2, [r3, #8]
 8002106:	e026      	b.n	8002156 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	68d8      	ldr	r0, [r3, #12]
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002110:	461a      	mov	r2, r3
 8002112:	68b9      	ldr	r1, [r7, #8]
 8002114:	f002 f970 	bl	80043f8 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	68da      	ldr	r2, [r3, #12]
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002120:	425b      	negs	r3, r3
 8002122:	441a      	add	r2, r3
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	68da      	ldr	r2, [r3, #12]
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	429a      	cmp	r2, r3
 8002132:	d207      	bcs.n	8002144 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	685a      	ldr	r2, [r3, #4]
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800213c:	425b      	negs	r3, r3
 800213e:	441a      	add	r2, r3
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	2b02      	cmp	r3, #2
 8002148:	d105      	bne.n	8002156 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800214a:	693b      	ldr	r3, [r7, #16]
 800214c:	2b00      	cmp	r3, #0
 800214e:	d002      	beq.n	8002156 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8002150:	693b      	ldr	r3, [r7, #16]
 8002152:	3b01      	subs	r3, #1
 8002154:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002156:	693b      	ldr	r3, [r7, #16]
 8002158:	1c5a      	adds	r2, r3, #1
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800215e:	697b      	ldr	r3, [r7, #20]
}
 8002160:	4618      	mov	r0, r3
 8002162:	3718      	adds	r7, #24
 8002164:	46bd      	mov	sp, r7
 8002166:	bd80      	pop	{r7, pc}

08002168 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b082      	sub	sp, #8
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
 8002170:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002176:	2b00      	cmp	r3, #0
 8002178:	d018      	beq.n	80021ac <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	68da      	ldr	r2, [r3, #12]
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002182:	441a      	add	r2, r3
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	68da      	ldr	r2, [r3, #12]
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	429a      	cmp	r2, r3
 8002192:	d303      	bcc.n	800219c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681a      	ldr	r2, [r3, #0]
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	68d9      	ldr	r1, [r3, #12]
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021a4:	461a      	mov	r2, r3
 80021a6:	6838      	ldr	r0, [r7, #0]
 80021a8:	f002 f926 	bl	80043f8 <memcpy>
	}
}
 80021ac:	bf00      	nop
 80021ae:	3708      	adds	r7, #8
 80021b0:	46bd      	mov	sp, r7
 80021b2:	bd80      	pop	{r7, pc}

080021b4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b084      	sub	sp, #16
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80021bc:	f001 fbee 	bl	800399c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80021c6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80021c8:	e011      	b.n	80021ee <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d012      	beq.n	80021f8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	3324      	adds	r3, #36	; 0x24
 80021d6:	4618      	mov	r0, r3
 80021d8:	f000 fd16 	bl	8002c08 <xTaskRemoveFromEventList>
 80021dc:	4603      	mov	r3, r0
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d001      	beq.n	80021e6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80021e2:	f000 fde9 	bl	8002db8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80021e6:	7bfb      	ldrb	r3, [r7, #15]
 80021e8:	3b01      	subs	r3, #1
 80021ea:	b2db      	uxtb	r3, r3
 80021ec:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80021ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	dce9      	bgt.n	80021ca <prvUnlockQueue+0x16>
 80021f6:	e000      	b.n	80021fa <prvUnlockQueue+0x46>
					break;
 80021f8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	22ff      	movs	r2, #255	; 0xff
 80021fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8002202:	f001 fbf9 	bl	80039f8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8002206:	f001 fbc9 	bl	800399c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002210:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002212:	e011      	b.n	8002238 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	691b      	ldr	r3, [r3, #16]
 8002218:	2b00      	cmp	r3, #0
 800221a:	d012      	beq.n	8002242 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	3310      	adds	r3, #16
 8002220:	4618      	mov	r0, r3
 8002222:	f000 fcf1 	bl	8002c08 <xTaskRemoveFromEventList>
 8002226:	4603      	mov	r3, r0
 8002228:	2b00      	cmp	r3, #0
 800222a:	d001      	beq.n	8002230 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800222c:	f000 fdc4 	bl	8002db8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8002230:	7bbb      	ldrb	r3, [r7, #14]
 8002232:	3b01      	subs	r3, #1
 8002234:	b2db      	uxtb	r3, r3
 8002236:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002238:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800223c:	2b00      	cmp	r3, #0
 800223e:	dce9      	bgt.n	8002214 <prvUnlockQueue+0x60>
 8002240:	e000      	b.n	8002244 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8002242:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	22ff      	movs	r2, #255	; 0xff
 8002248:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800224c:	f001 fbd4 	bl	80039f8 <vPortExitCritical>
}
 8002250:	bf00      	nop
 8002252:	3710      	adds	r7, #16
 8002254:	46bd      	mov	sp, r7
 8002256:	bd80      	pop	{r7, pc}

08002258 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b084      	sub	sp, #16
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002260:	f001 fb9c 	bl	800399c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002268:	2b00      	cmp	r3, #0
 800226a:	d102      	bne.n	8002272 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800226c:	2301      	movs	r3, #1
 800226e:	60fb      	str	r3, [r7, #12]
 8002270:	e001      	b.n	8002276 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8002272:	2300      	movs	r3, #0
 8002274:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002276:	f001 fbbf 	bl	80039f8 <vPortExitCritical>

	return xReturn;
 800227a:	68fb      	ldr	r3, [r7, #12]
}
 800227c:	4618      	mov	r0, r3
 800227e:	3710      	adds	r7, #16
 8002280:	46bd      	mov	sp, r7
 8002282:	bd80      	pop	{r7, pc}

08002284 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b084      	sub	sp, #16
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800228c:	f001 fb86 	bl	800399c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002298:	429a      	cmp	r2, r3
 800229a:	d102      	bne.n	80022a2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800229c:	2301      	movs	r3, #1
 800229e:	60fb      	str	r3, [r7, #12]
 80022a0:	e001      	b.n	80022a6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80022a2:	2300      	movs	r3, #0
 80022a4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80022a6:	f001 fba7 	bl	80039f8 <vPortExitCritical>

	return xReturn;
 80022aa:	68fb      	ldr	r3, [r7, #12]
}
 80022ac:	4618      	mov	r0, r3
 80022ae:	3710      	adds	r7, #16
 80022b0:	46bd      	mov	sp, r7
 80022b2:	bd80      	pop	{r7, pc}

080022b4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80022b4:	b480      	push	{r7}
 80022b6:	b085      	sub	sp, #20
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
 80022bc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80022be:	2300      	movs	r3, #0
 80022c0:	60fb      	str	r3, [r7, #12]
 80022c2:	e014      	b.n	80022ee <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80022c4:	4a0e      	ldr	r2, [pc, #56]	; (8002300 <vQueueAddToRegistry+0x4c>)
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d10b      	bne.n	80022e8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80022d0:	490b      	ldr	r1, [pc, #44]	; (8002300 <vQueueAddToRegistry+0x4c>)
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	683a      	ldr	r2, [r7, #0]
 80022d6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80022da:	4a09      	ldr	r2, [pc, #36]	; (8002300 <vQueueAddToRegistry+0x4c>)
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	00db      	lsls	r3, r3, #3
 80022e0:	4413      	add	r3, r2
 80022e2:	687a      	ldr	r2, [r7, #4]
 80022e4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80022e6:	e005      	b.n	80022f4 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	3301      	adds	r3, #1
 80022ec:	60fb      	str	r3, [r7, #12]
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	2b07      	cmp	r3, #7
 80022f2:	d9e7      	bls.n	80022c4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80022f4:	bf00      	nop
 80022f6:	3714      	adds	r7, #20
 80022f8:	46bd      	mov	sp, r7
 80022fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fe:	4770      	bx	lr
 8002300:	20001968 	.word	0x20001968

08002304 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8002304:	b580      	push	{r7, lr}
 8002306:	b086      	sub	sp, #24
 8002308:	af00      	add	r7, sp, #0
 800230a:	60f8      	str	r0, [r7, #12]
 800230c:	60b9      	str	r1, [r7, #8]
 800230e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8002314:	f001 fb42 	bl	800399c <vPortEnterCritical>
 8002318:	697b      	ldr	r3, [r7, #20]
 800231a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800231e:	b25b      	sxtb	r3, r3
 8002320:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002324:	d103      	bne.n	800232e <vQueueWaitForMessageRestricted+0x2a>
 8002326:	697b      	ldr	r3, [r7, #20]
 8002328:	2200      	movs	r2, #0
 800232a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800232e:	697b      	ldr	r3, [r7, #20]
 8002330:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002334:	b25b      	sxtb	r3, r3
 8002336:	f1b3 3fff 	cmp.w	r3, #4294967295
 800233a:	d103      	bne.n	8002344 <vQueueWaitForMessageRestricted+0x40>
 800233c:	697b      	ldr	r3, [r7, #20]
 800233e:	2200      	movs	r2, #0
 8002340:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002344:	f001 fb58 	bl	80039f8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002348:	697b      	ldr	r3, [r7, #20]
 800234a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800234c:	2b00      	cmp	r3, #0
 800234e:	d106      	bne.n	800235e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002350:	697b      	ldr	r3, [r7, #20]
 8002352:	3324      	adds	r3, #36	; 0x24
 8002354:	687a      	ldr	r2, [r7, #4]
 8002356:	68b9      	ldr	r1, [r7, #8]
 8002358:	4618      	mov	r0, r3
 800235a:	f000 fc2b 	bl	8002bb4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800235e:	6978      	ldr	r0, [r7, #20]
 8002360:	f7ff ff28 	bl	80021b4 <prvUnlockQueue>
	}
 8002364:	bf00      	nop
 8002366:	3718      	adds	r7, #24
 8002368:	46bd      	mov	sp, r7
 800236a:	bd80      	pop	{r7, pc}

0800236c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800236c:	b580      	push	{r7, lr}
 800236e:	b08e      	sub	sp, #56	; 0x38
 8002370:	af04      	add	r7, sp, #16
 8002372:	60f8      	str	r0, [r7, #12]
 8002374:	60b9      	str	r1, [r7, #8]
 8002376:	607a      	str	r2, [r7, #4]
 8002378:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800237a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800237c:	2b00      	cmp	r3, #0
 800237e:	d109      	bne.n	8002394 <xTaskCreateStatic+0x28>
 8002380:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002384:	f383 8811 	msr	BASEPRI, r3
 8002388:	f3bf 8f6f 	isb	sy
 800238c:	f3bf 8f4f 	dsb	sy
 8002390:	623b      	str	r3, [r7, #32]
 8002392:	e7fe      	b.n	8002392 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8002394:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002396:	2b00      	cmp	r3, #0
 8002398:	d109      	bne.n	80023ae <xTaskCreateStatic+0x42>
 800239a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800239e:	f383 8811 	msr	BASEPRI, r3
 80023a2:	f3bf 8f6f 	isb	sy
 80023a6:	f3bf 8f4f 	dsb	sy
 80023aa:	61fb      	str	r3, [r7, #28]
 80023ac:	e7fe      	b.n	80023ac <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80023ae:	235c      	movs	r3, #92	; 0x5c
 80023b0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80023b2:	693b      	ldr	r3, [r7, #16]
 80023b4:	2b5c      	cmp	r3, #92	; 0x5c
 80023b6:	d009      	beq.n	80023cc <xTaskCreateStatic+0x60>
 80023b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023bc:	f383 8811 	msr	BASEPRI, r3
 80023c0:	f3bf 8f6f 	isb	sy
 80023c4:	f3bf 8f4f 	dsb	sy
 80023c8:	61bb      	str	r3, [r7, #24]
 80023ca:	e7fe      	b.n	80023ca <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80023cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d01e      	beq.n	8002410 <xTaskCreateStatic+0xa4>
 80023d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d01b      	beq.n	8002410 <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80023d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023da:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80023dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023de:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80023e0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80023e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023e4:	2202      	movs	r2, #2
 80023e6:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80023ea:	2300      	movs	r3, #0
 80023ec:	9303      	str	r3, [sp, #12]
 80023ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023f0:	9302      	str	r3, [sp, #8]
 80023f2:	f107 0314 	add.w	r3, r7, #20
 80023f6:	9301      	str	r3, [sp, #4]
 80023f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023fa:	9300      	str	r3, [sp, #0]
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	687a      	ldr	r2, [r7, #4]
 8002400:	68b9      	ldr	r1, [r7, #8]
 8002402:	68f8      	ldr	r0, [r7, #12]
 8002404:	f000 f850 	bl	80024a8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002408:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800240a:	f000 f8d3 	bl	80025b4 <prvAddNewTaskToReadyList>
 800240e:	e001      	b.n	8002414 <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 8002410:	2300      	movs	r3, #0
 8002412:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8002414:	697b      	ldr	r3, [r7, #20]
	}
 8002416:	4618      	mov	r0, r3
 8002418:	3728      	adds	r7, #40	; 0x28
 800241a:	46bd      	mov	sp, r7
 800241c:	bd80      	pop	{r7, pc}

0800241e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800241e:	b580      	push	{r7, lr}
 8002420:	b08c      	sub	sp, #48	; 0x30
 8002422:	af04      	add	r7, sp, #16
 8002424:	60f8      	str	r0, [r7, #12]
 8002426:	60b9      	str	r1, [r7, #8]
 8002428:	603b      	str	r3, [r7, #0]
 800242a:	4613      	mov	r3, r2
 800242c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800242e:	88fb      	ldrh	r3, [r7, #6]
 8002430:	009b      	lsls	r3, r3, #2
 8002432:	4618      	mov	r0, r3
 8002434:	f001 fbcc 	bl	8003bd0 <pvPortMalloc>
 8002438:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800243a:	697b      	ldr	r3, [r7, #20]
 800243c:	2b00      	cmp	r3, #0
 800243e:	d00e      	beq.n	800245e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8002440:	205c      	movs	r0, #92	; 0x5c
 8002442:	f001 fbc5 	bl	8003bd0 <pvPortMalloc>
 8002446:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8002448:	69fb      	ldr	r3, [r7, #28]
 800244a:	2b00      	cmp	r3, #0
 800244c:	d003      	beq.n	8002456 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800244e:	69fb      	ldr	r3, [r7, #28]
 8002450:	697a      	ldr	r2, [r7, #20]
 8002452:	631a      	str	r2, [r3, #48]	; 0x30
 8002454:	e005      	b.n	8002462 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002456:	6978      	ldr	r0, [r7, #20]
 8002458:	f001 fc7c 	bl	8003d54 <vPortFree>
 800245c:	e001      	b.n	8002462 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800245e:	2300      	movs	r3, #0
 8002460:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002462:	69fb      	ldr	r3, [r7, #28]
 8002464:	2b00      	cmp	r3, #0
 8002466:	d017      	beq.n	8002498 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8002468:	69fb      	ldr	r3, [r7, #28]
 800246a:	2200      	movs	r2, #0
 800246c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002470:	88fa      	ldrh	r2, [r7, #6]
 8002472:	2300      	movs	r3, #0
 8002474:	9303      	str	r3, [sp, #12]
 8002476:	69fb      	ldr	r3, [r7, #28]
 8002478:	9302      	str	r3, [sp, #8]
 800247a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800247c:	9301      	str	r3, [sp, #4]
 800247e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002480:	9300      	str	r3, [sp, #0]
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	68b9      	ldr	r1, [r7, #8]
 8002486:	68f8      	ldr	r0, [r7, #12]
 8002488:	f000 f80e 	bl	80024a8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800248c:	69f8      	ldr	r0, [r7, #28]
 800248e:	f000 f891 	bl	80025b4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002492:	2301      	movs	r3, #1
 8002494:	61bb      	str	r3, [r7, #24]
 8002496:	e002      	b.n	800249e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002498:	f04f 33ff 	mov.w	r3, #4294967295
 800249c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800249e:	69bb      	ldr	r3, [r7, #24]
	}
 80024a0:	4618      	mov	r0, r3
 80024a2:	3720      	adds	r7, #32
 80024a4:	46bd      	mov	sp, r7
 80024a6:	bd80      	pop	{r7, pc}

080024a8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b088      	sub	sp, #32
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	60f8      	str	r0, [r7, #12]
 80024b0:	60b9      	str	r1, [r7, #8]
 80024b2:	607a      	str	r2, [r7, #4]
 80024b4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80024b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024b8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	009b      	lsls	r3, r3, #2
 80024be:	461a      	mov	r2, r3
 80024c0:	21a5      	movs	r1, #165	; 0xa5
 80024c2:	f001 ffa4 	bl	800440e <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80024c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80024d0:	3b01      	subs	r3, #1
 80024d2:	009b      	lsls	r3, r3, #2
 80024d4:	4413      	add	r3, r2
 80024d6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80024d8:	69bb      	ldr	r3, [r7, #24]
 80024da:	f023 0307 	bic.w	r3, r3, #7
 80024de:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80024e0:	69bb      	ldr	r3, [r7, #24]
 80024e2:	f003 0307 	and.w	r3, r3, #7
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d009      	beq.n	80024fe <prvInitialiseNewTask+0x56>
 80024ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024ee:	f383 8811 	msr	BASEPRI, r3
 80024f2:	f3bf 8f6f 	isb	sy
 80024f6:	f3bf 8f4f 	dsb	sy
 80024fa:	617b      	str	r3, [r7, #20]
 80024fc:	e7fe      	b.n	80024fc <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80024fe:	2300      	movs	r3, #0
 8002500:	61fb      	str	r3, [r7, #28]
 8002502:	e012      	b.n	800252a <prvInitialiseNewTask+0x82>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002504:	68ba      	ldr	r2, [r7, #8]
 8002506:	69fb      	ldr	r3, [r7, #28]
 8002508:	4413      	add	r3, r2
 800250a:	7819      	ldrb	r1, [r3, #0]
 800250c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800250e:	69fb      	ldr	r3, [r7, #28]
 8002510:	4413      	add	r3, r2
 8002512:	3334      	adds	r3, #52	; 0x34
 8002514:	460a      	mov	r2, r1
 8002516:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8002518:	68ba      	ldr	r2, [r7, #8]
 800251a:	69fb      	ldr	r3, [r7, #28]
 800251c:	4413      	add	r3, r2
 800251e:	781b      	ldrb	r3, [r3, #0]
 8002520:	2b00      	cmp	r3, #0
 8002522:	d006      	beq.n	8002532 <prvInitialiseNewTask+0x8a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002524:	69fb      	ldr	r3, [r7, #28]
 8002526:	3301      	adds	r3, #1
 8002528:	61fb      	str	r3, [r7, #28]
 800252a:	69fb      	ldr	r3, [r7, #28]
 800252c:	2b0f      	cmp	r3, #15
 800252e:	d9e9      	bls.n	8002504 <prvInitialiseNewTask+0x5c>
 8002530:	e000      	b.n	8002534 <prvInitialiseNewTask+0x8c>
		{
			break;
 8002532:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002534:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002536:	2200      	movs	r2, #0
 8002538:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800253c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800253e:	2b37      	cmp	r3, #55	; 0x37
 8002540:	d901      	bls.n	8002546 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002542:	2337      	movs	r3, #55	; 0x37
 8002544:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002546:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002548:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800254a:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800254c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800254e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002550:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8002552:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002554:	2200      	movs	r2, #0
 8002556:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002558:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800255a:	3304      	adds	r3, #4
 800255c:	4618      	mov	r0, r3
 800255e:	f7ff f92f 	bl	80017c0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002562:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002564:	3318      	adds	r3, #24
 8002566:	4618      	mov	r0, r3
 8002568:	f7ff f92a 	bl	80017c0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800256c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800256e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002570:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002572:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002574:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8002578:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800257a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800257c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800257e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002580:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8002582:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002584:	2200      	movs	r2, #0
 8002586:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002588:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800258a:	2200      	movs	r2, #0
 800258c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002590:	683a      	ldr	r2, [r7, #0]
 8002592:	68f9      	ldr	r1, [r7, #12]
 8002594:	69b8      	ldr	r0, [r7, #24]
 8002596:	f001 f8db 	bl	8003750 <pxPortInitialiseStack>
 800259a:	4602      	mov	r2, r0
 800259c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800259e:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80025a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d002      	beq.n	80025ac <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80025a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80025aa:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80025ac:	bf00      	nop
 80025ae:	3720      	adds	r7, #32
 80025b0:	46bd      	mov	sp, r7
 80025b2:	bd80      	pop	{r7, pc}

080025b4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b082      	sub	sp, #8
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80025bc:	f001 f9ee 	bl	800399c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80025c0:	4b2d      	ldr	r3, [pc, #180]	; (8002678 <prvAddNewTaskToReadyList+0xc4>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	3301      	adds	r3, #1
 80025c6:	4a2c      	ldr	r2, [pc, #176]	; (8002678 <prvAddNewTaskToReadyList+0xc4>)
 80025c8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80025ca:	4b2c      	ldr	r3, [pc, #176]	; (800267c <prvAddNewTaskToReadyList+0xc8>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d109      	bne.n	80025e6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80025d2:	4a2a      	ldr	r2, [pc, #168]	; (800267c <prvAddNewTaskToReadyList+0xc8>)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80025d8:	4b27      	ldr	r3, [pc, #156]	; (8002678 <prvAddNewTaskToReadyList+0xc4>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	2b01      	cmp	r3, #1
 80025de:	d110      	bne.n	8002602 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80025e0:	f000 fc0e 	bl	8002e00 <prvInitialiseTaskLists>
 80025e4:	e00d      	b.n	8002602 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80025e6:	4b26      	ldr	r3, [pc, #152]	; (8002680 <prvAddNewTaskToReadyList+0xcc>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d109      	bne.n	8002602 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80025ee:	4b23      	ldr	r3, [pc, #140]	; (800267c <prvAddNewTaskToReadyList+0xc8>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025f8:	429a      	cmp	r2, r3
 80025fa:	d802      	bhi.n	8002602 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80025fc:	4a1f      	ldr	r2, [pc, #124]	; (800267c <prvAddNewTaskToReadyList+0xc8>)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8002602:	4b20      	ldr	r3, [pc, #128]	; (8002684 <prvAddNewTaskToReadyList+0xd0>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	3301      	adds	r3, #1
 8002608:	4a1e      	ldr	r2, [pc, #120]	; (8002684 <prvAddNewTaskToReadyList+0xd0>)
 800260a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800260c:	4b1d      	ldr	r3, [pc, #116]	; (8002684 <prvAddNewTaskToReadyList+0xd0>)
 800260e:	681a      	ldr	r2, [r3, #0]
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002618:	4b1b      	ldr	r3, [pc, #108]	; (8002688 <prvAddNewTaskToReadyList+0xd4>)
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	429a      	cmp	r2, r3
 800261e:	d903      	bls.n	8002628 <prvAddNewTaskToReadyList+0x74>
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002624:	4a18      	ldr	r2, [pc, #96]	; (8002688 <prvAddNewTaskToReadyList+0xd4>)
 8002626:	6013      	str	r3, [r2, #0]
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800262c:	4613      	mov	r3, r2
 800262e:	009b      	lsls	r3, r3, #2
 8002630:	4413      	add	r3, r2
 8002632:	009b      	lsls	r3, r3, #2
 8002634:	4a15      	ldr	r2, [pc, #84]	; (800268c <prvAddNewTaskToReadyList+0xd8>)
 8002636:	441a      	add	r2, r3
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	3304      	adds	r3, #4
 800263c:	4619      	mov	r1, r3
 800263e:	4610      	mov	r0, r2
 8002640:	f7ff f8cb 	bl	80017da <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8002644:	f001 f9d8 	bl	80039f8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8002648:	4b0d      	ldr	r3, [pc, #52]	; (8002680 <prvAddNewTaskToReadyList+0xcc>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	2b00      	cmp	r3, #0
 800264e:	d00e      	beq.n	800266e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002650:	4b0a      	ldr	r3, [pc, #40]	; (800267c <prvAddNewTaskToReadyList+0xc8>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800265a:	429a      	cmp	r2, r3
 800265c:	d207      	bcs.n	800266e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800265e:	4b0c      	ldr	r3, [pc, #48]	; (8002690 <prvAddNewTaskToReadyList+0xdc>)
 8002660:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002664:	601a      	str	r2, [r3, #0]
 8002666:	f3bf 8f4f 	dsb	sy
 800266a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800266e:	bf00      	nop
 8002670:	3708      	adds	r7, #8
 8002672:	46bd      	mov	sp, r7
 8002674:	bd80      	pop	{r7, pc}
 8002676:	bf00      	nop
 8002678:	20000c20 	.word	0x20000c20
 800267c:	2000074c 	.word	0x2000074c
 8002680:	20000c2c 	.word	0x20000c2c
 8002684:	20000c3c 	.word	0x20000c3c
 8002688:	20000c28 	.word	0x20000c28
 800268c:	20000750 	.word	0x20000750
 8002690:	e000ed04 	.word	0xe000ed04

08002694 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8002694:	b580      	push	{r7, lr}
 8002696:	b084      	sub	sp, #16
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800269c:	2300      	movs	r3, #0
 800269e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d016      	beq.n	80026d4 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80026a6:	4b13      	ldr	r3, [pc, #76]	; (80026f4 <vTaskDelay+0x60>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d009      	beq.n	80026c2 <vTaskDelay+0x2e>
 80026ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026b2:	f383 8811 	msr	BASEPRI, r3
 80026b6:	f3bf 8f6f 	isb	sy
 80026ba:	f3bf 8f4f 	dsb	sy
 80026be:	60bb      	str	r3, [r7, #8]
 80026c0:	e7fe      	b.n	80026c0 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 80026c2:	f000 f87f 	bl	80027c4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80026c6:	2100      	movs	r1, #0
 80026c8:	6878      	ldr	r0, [r7, #4]
 80026ca:	f000 fce3 	bl	8003094 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80026ce:	f000 f887 	bl	80027e0 <xTaskResumeAll>
 80026d2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d107      	bne.n	80026ea <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 80026da:	4b07      	ldr	r3, [pc, #28]	; (80026f8 <vTaskDelay+0x64>)
 80026dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80026e0:	601a      	str	r2, [r3, #0]
 80026e2:	f3bf 8f4f 	dsb	sy
 80026e6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80026ea:	bf00      	nop
 80026ec:	3710      	adds	r7, #16
 80026ee:	46bd      	mov	sp, r7
 80026f0:	bd80      	pop	{r7, pc}
 80026f2:	bf00      	nop
 80026f4:	20000c48 	.word	0x20000c48
 80026f8:	e000ed04 	.word	0xe000ed04

080026fc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b08a      	sub	sp, #40	; 0x28
 8002700:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8002702:	2300      	movs	r3, #0
 8002704:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8002706:	2300      	movs	r3, #0
 8002708:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800270a:	463a      	mov	r2, r7
 800270c:	1d39      	adds	r1, r7, #4
 800270e:	f107 0308 	add.w	r3, r7, #8
 8002712:	4618      	mov	r0, r3
 8002714:	f7ff f800 	bl	8001718 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8002718:	6839      	ldr	r1, [r7, #0]
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	68ba      	ldr	r2, [r7, #8]
 800271e:	9202      	str	r2, [sp, #8]
 8002720:	9301      	str	r3, [sp, #4]
 8002722:	2300      	movs	r3, #0
 8002724:	9300      	str	r3, [sp, #0]
 8002726:	2300      	movs	r3, #0
 8002728:	460a      	mov	r2, r1
 800272a:	4920      	ldr	r1, [pc, #128]	; (80027ac <vTaskStartScheduler+0xb0>)
 800272c:	4820      	ldr	r0, [pc, #128]	; (80027b0 <vTaskStartScheduler+0xb4>)
 800272e:	f7ff fe1d 	bl	800236c <xTaskCreateStatic>
 8002732:	4602      	mov	r2, r0
 8002734:	4b1f      	ldr	r3, [pc, #124]	; (80027b4 <vTaskStartScheduler+0xb8>)
 8002736:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8002738:	4b1e      	ldr	r3, [pc, #120]	; (80027b4 <vTaskStartScheduler+0xb8>)
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	2b00      	cmp	r3, #0
 800273e:	d002      	beq.n	8002746 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8002740:	2301      	movs	r3, #1
 8002742:	617b      	str	r3, [r7, #20]
 8002744:	e001      	b.n	800274a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8002746:	2300      	movs	r3, #0
 8002748:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800274a:	697b      	ldr	r3, [r7, #20]
 800274c:	2b01      	cmp	r3, #1
 800274e:	d102      	bne.n	8002756 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8002750:	f000 fcf4 	bl	800313c <xTimerCreateTimerTask>
 8002754:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8002756:	697b      	ldr	r3, [r7, #20]
 8002758:	2b01      	cmp	r3, #1
 800275a:	d115      	bne.n	8002788 <vTaskStartScheduler+0x8c>
 800275c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002760:	f383 8811 	msr	BASEPRI, r3
 8002764:	f3bf 8f6f 	isb	sy
 8002768:	f3bf 8f4f 	dsb	sy
 800276c:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800276e:	4b12      	ldr	r3, [pc, #72]	; (80027b8 <vTaskStartScheduler+0xbc>)
 8002770:	f04f 32ff 	mov.w	r2, #4294967295
 8002774:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8002776:	4b11      	ldr	r3, [pc, #68]	; (80027bc <vTaskStartScheduler+0xc0>)
 8002778:	2201      	movs	r2, #1
 800277a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800277c:	4b10      	ldr	r3, [pc, #64]	; (80027c0 <vTaskStartScheduler+0xc4>)
 800277e:	2200      	movs	r2, #0
 8002780:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8002782:	f001 f86d 	bl	8003860 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8002786:	e00d      	b.n	80027a4 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002788:	697b      	ldr	r3, [r7, #20]
 800278a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800278e:	d109      	bne.n	80027a4 <vTaskStartScheduler+0xa8>
 8002790:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002794:	f383 8811 	msr	BASEPRI, r3
 8002798:	f3bf 8f6f 	isb	sy
 800279c:	f3bf 8f4f 	dsb	sy
 80027a0:	60fb      	str	r3, [r7, #12]
 80027a2:	e7fe      	b.n	80027a2 <vTaskStartScheduler+0xa6>
}
 80027a4:	bf00      	nop
 80027a6:	3718      	adds	r7, #24
 80027a8:	46bd      	mov	sp, r7
 80027aa:	bd80      	pop	{r7, pc}
 80027ac:	080045c0 	.word	0x080045c0
 80027b0:	08002dd1 	.word	0x08002dd1
 80027b4:	20000c44 	.word	0x20000c44
 80027b8:	20000c40 	.word	0x20000c40
 80027bc:	20000c2c 	.word	0x20000c2c
 80027c0:	20000c24 	.word	0x20000c24

080027c4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80027c4:	b480      	push	{r7}
 80027c6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80027c8:	4b04      	ldr	r3, [pc, #16]	; (80027dc <vTaskSuspendAll+0x18>)
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	3301      	adds	r3, #1
 80027ce:	4a03      	ldr	r2, [pc, #12]	; (80027dc <vTaskSuspendAll+0x18>)
 80027d0:	6013      	str	r3, [r2, #0]
}
 80027d2:	bf00      	nop
 80027d4:	46bd      	mov	sp, r7
 80027d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027da:	4770      	bx	lr
 80027dc:	20000c48 	.word	0x20000c48

080027e0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b084      	sub	sp, #16
 80027e4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80027e6:	2300      	movs	r3, #0
 80027e8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80027ea:	2300      	movs	r3, #0
 80027ec:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80027ee:	4b41      	ldr	r3, [pc, #260]	; (80028f4 <xTaskResumeAll+0x114>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d109      	bne.n	800280a <xTaskResumeAll+0x2a>
 80027f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027fa:	f383 8811 	msr	BASEPRI, r3
 80027fe:	f3bf 8f6f 	isb	sy
 8002802:	f3bf 8f4f 	dsb	sy
 8002806:	603b      	str	r3, [r7, #0]
 8002808:	e7fe      	b.n	8002808 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800280a:	f001 f8c7 	bl	800399c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800280e:	4b39      	ldr	r3, [pc, #228]	; (80028f4 <xTaskResumeAll+0x114>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	3b01      	subs	r3, #1
 8002814:	4a37      	ldr	r2, [pc, #220]	; (80028f4 <xTaskResumeAll+0x114>)
 8002816:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002818:	4b36      	ldr	r3, [pc, #216]	; (80028f4 <xTaskResumeAll+0x114>)
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	2b00      	cmp	r3, #0
 800281e:	d162      	bne.n	80028e6 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002820:	4b35      	ldr	r3, [pc, #212]	; (80028f8 <xTaskResumeAll+0x118>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	2b00      	cmp	r3, #0
 8002826:	d05e      	beq.n	80028e6 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002828:	e02f      	b.n	800288a <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800282a:	4b34      	ldr	r3, [pc, #208]	; (80028fc <xTaskResumeAll+0x11c>)
 800282c:	68db      	ldr	r3, [r3, #12]
 800282e:	68db      	ldr	r3, [r3, #12]
 8002830:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	3318      	adds	r3, #24
 8002836:	4618      	mov	r0, r3
 8002838:	f7ff f82c 	bl	8001894 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	3304      	adds	r3, #4
 8002840:	4618      	mov	r0, r3
 8002842:	f7ff f827 	bl	8001894 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800284a:	4b2d      	ldr	r3, [pc, #180]	; (8002900 <xTaskResumeAll+0x120>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	429a      	cmp	r2, r3
 8002850:	d903      	bls.n	800285a <xTaskResumeAll+0x7a>
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002856:	4a2a      	ldr	r2, [pc, #168]	; (8002900 <xTaskResumeAll+0x120>)
 8002858:	6013      	str	r3, [r2, #0]
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800285e:	4613      	mov	r3, r2
 8002860:	009b      	lsls	r3, r3, #2
 8002862:	4413      	add	r3, r2
 8002864:	009b      	lsls	r3, r3, #2
 8002866:	4a27      	ldr	r2, [pc, #156]	; (8002904 <xTaskResumeAll+0x124>)
 8002868:	441a      	add	r2, r3
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	3304      	adds	r3, #4
 800286e:	4619      	mov	r1, r3
 8002870:	4610      	mov	r0, r2
 8002872:	f7fe ffb2 	bl	80017da <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800287a:	4b23      	ldr	r3, [pc, #140]	; (8002908 <xTaskResumeAll+0x128>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002880:	429a      	cmp	r2, r3
 8002882:	d302      	bcc.n	800288a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8002884:	4b21      	ldr	r3, [pc, #132]	; (800290c <xTaskResumeAll+0x12c>)
 8002886:	2201      	movs	r2, #1
 8002888:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800288a:	4b1c      	ldr	r3, [pc, #112]	; (80028fc <xTaskResumeAll+0x11c>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	2b00      	cmp	r3, #0
 8002890:	d1cb      	bne.n	800282a <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	2b00      	cmp	r3, #0
 8002896:	d001      	beq.n	800289c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8002898:	f000 fb4c 	bl	8002f34 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800289c:	4b1c      	ldr	r3, [pc, #112]	; (8002910 <xTaskResumeAll+0x130>)
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d010      	beq.n	80028ca <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80028a8:	f000 f846 	bl	8002938 <xTaskIncrementTick>
 80028ac:	4603      	mov	r3, r0
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d002      	beq.n	80028b8 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80028b2:	4b16      	ldr	r3, [pc, #88]	; (800290c <xTaskResumeAll+0x12c>)
 80028b4:	2201      	movs	r2, #1
 80028b6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	3b01      	subs	r3, #1
 80028bc:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d1f1      	bne.n	80028a8 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 80028c4:	4b12      	ldr	r3, [pc, #72]	; (8002910 <xTaskResumeAll+0x130>)
 80028c6:	2200      	movs	r2, #0
 80028c8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80028ca:	4b10      	ldr	r3, [pc, #64]	; (800290c <xTaskResumeAll+0x12c>)
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d009      	beq.n	80028e6 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80028d2:	2301      	movs	r3, #1
 80028d4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80028d6:	4b0f      	ldr	r3, [pc, #60]	; (8002914 <xTaskResumeAll+0x134>)
 80028d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80028dc:	601a      	str	r2, [r3, #0]
 80028de:	f3bf 8f4f 	dsb	sy
 80028e2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80028e6:	f001 f887 	bl	80039f8 <vPortExitCritical>

	return xAlreadyYielded;
 80028ea:	68bb      	ldr	r3, [r7, #8]
}
 80028ec:	4618      	mov	r0, r3
 80028ee:	3710      	adds	r7, #16
 80028f0:	46bd      	mov	sp, r7
 80028f2:	bd80      	pop	{r7, pc}
 80028f4:	20000c48 	.word	0x20000c48
 80028f8:	20000c20 	.word	0x20000c20
 80028fc:	20000be0 	.word	0x20000be0
 8002900:	20000c28 	.word	0x20000c28
 8002904:	20000750 	.word	0x20000750
 8002908:	2000074c 	.word	0x2000074c
 800290c:	20000c34 	.word	0x20000c34
 8002910:	20000c30 	.word	0x20000c30
 8002914:	e000ed04 	.word	0xe000ed04

08002918 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8002918:	b480      	push	{r7}
 800291a:	b083      	sub	sp, #12
 800291c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800291e:	4b05      	ldr	r3, [pc, #20]	; (8002934 <xTaskGetTickCount+0x1c>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8002924:	687b      	ldr	r3, [r7, #4]
}
 8002926:	4618      	mov	r0, r3
 8002928:	370c      	adds	r7, #12
 800292a:	46bd      	mov	sp, r7
 800292c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002930:	4770      	bx	lr
 8002932:	bf00      	nop
 8002934:	20000c24 	.word	0x20000c24

08002938 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b086      	sub	sp, #24
 800293c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800293e:	2300      	movs	r3, #0
 8002940:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002942:	4b51      	ldr	r3, [pc, #324]	; (8002a88 <xTaskIncrementTick+0x150>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	2b00      	cmp	r3, #0
 8002948:	f040 808d 	bne.w	8002a66 <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800294c:	4b4f      	ldr	r3, [pc, #316]	; (8002a8c <xTaskIncrementTick+0x154>)
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	3301      	adds	r3, #1
 8002952:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8002954:	4a4d      	ldr	r2, [pc, #308]	; (8002a8c <xTaskIncrementTick+0x154>)
 8002956:	693b      	ldr	r3, [r7, #16]
 8002958:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800295a:	693b      	ldr	r3, [r7, #16]
 800295c:	2b00      	cmp	r3, #0
 800295e:	d11f      	bne.n	80029a0 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8002960:	4b4b      	ldr	r3, [pc, #300]	; (8002a90 <xTaskIncrementTick+0x158>)
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	2b00      	cmp	r3, #0
 8002968:	d009      	beq.n	800297e <xTaskIncrementTick+0x46>
 800296a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800296e:	f383 8811 	msr	BASEPRI, r3
 8002972:	f3bf 8f6f 	isb	sy
 8002976:	f3bf 8f4f 	dsb	sy
 800297a:	603b      	str	r3, [r7, #0]
 800297c:	e7fe      	b.n	800297c <xTaskIncrementTick+0x44>
 800297e:	4b44      	ldr	r3, [pc, #272]	; (8002a90 <xTaskIncrementTick+0x158>)
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	60fb      	str	r3, [r7, #12]
 8002984:	4b43      	ldr	r3, [pc, #268]	; (8002a94 <xTaskIncrementTick+0x15c>)
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	4a41      	ldr	r2, [pc, #260]	; (8002a90 <xTaskIncrementTick+0x158>)
 800298a:	6013      	str	r3, [r2, #0]
 800298c:	4a41      	ldr	r2, [pc, #260]	; (8002a94 <xTaskIncrementTick+0x15c>)
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	6013      	str	r3, [r2, #0]
 8002992:	4b41      	ldr	r3, [pc, #260]	; (8002a98 <xTaskIncrementTick+0x160>)
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	3301      	adds	r3, #1
 8002998:	4a3f      	ldr	r2, [pc, #252]	; (8002a98 <xTaskIncrementTick+0x160>)
 800299a:	6013      	str	r3, [r2, #0]
 800299c:	f000 faca 	bl	8002f34 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80029a0:	4b3e      	ldr	r3, [pc, #248]	; (8002a9c <xTaskIncrementTick+0x164>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	693a      	ldr	r2, [r7, #16]
 80029a6:	429a      	cmp	r2, r3
 80029a8:	d34e      	bcc.n	8002a48 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80029aa:	4b39      	ldr	r3, [pc, #228]	; (8002a90 <xTaskIncrementTick+0x158>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d101      	bne.n	80029b8 <xTaskIncrementTick+0x80>
 80029b4:	2301      	movs	r3, #1
 80029b6:	e000      	b.n	80029ba <xTaskIncrementTick+0x82>
 80029b8:	2300      	movs	r3, #0
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d004      	beq.n	80029c8 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80029be:	4b37      	ldr	r3, [pc, #220]	; (8002a9c <xTaskIncrementTick+0x164>)
 80029c0:	f04f 32ff 	mov.w	r2, #4294967295
 80029c4:	601a      	str	r2, [r3, #0]
					break;
 80029c6:	e03f      	b.n	8002a48 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80029c8:	4b31      	ldr	r3, [pc, #196]	; (8002a90 <xTaskIncrementTick+0x158>)
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	68db      	ldr	r3, [r3, #12]
 80029ce:	68db      	ldr	r3, [r3, #12]
 80029d0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80029d2:	68bb      	ldr	r3, [r7, #8]
 80029d4:	685b      	ldr	r3, [r3, #4]
 80029d6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80029d8:	693a      	ldr	r2, [r7, #16]
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	429a      	cmp	r2, r3
 80029de:	d203      	bcs.n	80029e8 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80029e0:	4a2e      	ldr	r2, [pc, #184]	; (8002a9c <xTaskIncrementTick+0x164>)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6013      	str	r3, [r2, #0]
						break;
 80029e6:	e02f      	b.n	8002a48 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80029e8:	68bb      	ldr	r3, [r7, #8]
 80029ea:	3304      	adds	r3, #4
 80029ec:	4618      	mov	r0, r3
 80029ee:	f7fe ff51 	bl	8001894 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80029f2:	68bb      	ldr	r3, [r7, #8]
 80029f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d004      	beq.n	8002a04 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80029fa:	68bb      	ldr	r3, [r7, #8]
 80029fc:	3318      	adds	r3, #24
 80029fe:	4618      	mov	r0, r3
 8002a00:	f7fe ff48 	bl	8001894 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8002a04:	68bb      	ldr	r3, [r7, #8]
 8002a06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a08:	4b25      	ldr	r3, [pc, #148]	; (8002aa0 <xTaskIncrementTick+0x168>)
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	429a      	cmp	r2, r3
 8002a0e:	d903      	bls.n	8002a18 <xTaskIncrementTick+0xe0>
 8002a10:	68bb      	ldr	r3, [r7, #8]
 8002a12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a14:	4a22      	ldr	r2, [pc, #136]	; (8002aa0 <xTaskIncrementTick+0x168>)
 8002a16:	6013      	str	r3, [r2, #0]
 8002a18:	68bb      	ldr	r3, [r7, #8]
 8002a1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a1c:	4613      	mov	r3, r2
 8002a1e:	009b      	lsls	r3, r3, #2
 8002a20:	4413      	add	r3, r2
 8002a22:	009b      	lsls	r3, r3, #2
 8002a24:	4a1f      	ldr	r2, [pc, #124]	; (8002aa4 <xTaskIncrementTick+0x16c>)
 8002a26:	441a      	add	r2, r3
 8002a28:	68bb      	ldr	r3, [r7, #8]
 8002a2a:	3304      	adds	r3, #4
 8002a2c:	4619      	mov	r1, r3
 8002a2e:	4610      	mov	r0, r2
 8002a30:	f7fe fed3 	bl	80017da <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002a34:	68bb      	ldr	r3, [r7, #8]
 8002a36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a38:	4b1b      	ldr	r3, [pc, #108]	; (8002aa8 <xTaskIncrementTick+0x170>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a3e:	429a      	cmp	r2, r3
 8002a40:	d3b3      	bcc.n	80029aa <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8002a42:	2301      	movs	r3, #1
 8002a44:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002a46:	e7b0      	b.n	80029aa <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002a48:	4b17      	ldr	r3, [pc, #92]	; (8002aa8 <xTaskIncrementTick+0x170>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a4e:	4915      	ldr	r1, [pc, #84]	; (8002aa4 <xTaskIncrementTick+0x16c>)
 8002a50:	4613      	mov	r3, r2
 8002a52:	009b      	lsls	r3, r3, #2
 8002a54:	4413      	add	r3, r2
 8002a56:	009b      	lsls	r3, r3, #2
 8002a58:	440b      	add	r3, r1
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	2b01      	cmp	r3, #1
 8002a5e:	d907      	bls.n	8002a70 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8002a60:	2301      	movs	r3, #1
 8002a62:	617b      	str	r3, [r7, #20]
 8002a64:	e004      	b.n	8002a70 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8002a66:	4b11      	ldr	r3, [pc, #68]	; (8002aac <xTaskIncrementTick+0x174>)
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	3301      	adds	r3, #1
 8002a6c:	4a0f      	ldr	r2, [pc, #60]	; (8002aac <xTaskIncrementTick+0x174>)
 8002a6e:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8002a70:	4b0f      	ldr	r3, [pc, #60]	; (8002ab0 <xTaskIncrementTick+0x178>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d001      	beq.n	8002a7c <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8002a78:	2301      	movs	r3, #1
 8002a7a:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8002a7c:	697b      	ldr	r3, [r7, #20]
}
 8002a7e:	4618      	mov	r0, r3
 8002a80:	3718      	adds	r7, #24
 8002a82:	46bd      	mov	sp, r7
 8002a84:	bd80      	pop	{r7, pc}
 8002a86:	bf00      	nop
 8002a88:	20000c48 	.word	0x20000c48
 8002a8c:	20000c24 	.word	0x20000c24
 8002a90:	20000bd8 	.word	0x20000bd8
 8002a94:	20000bdc 	.word	0x20000bdc
 8002a98:	20000c38 	.word	0x20000c38
 8002a9c:	20000c40 	.word	0x20000c40
 8002aa0:	20000c28 	.word	0x20000c28
 8002aa4:	20000750 	.word	0x20000750
 8002aa8:	2000074c 	.word	0x2000074c
 8002aac:	20000c30 	.word	0x20000c30
 8002ab0:	20000c34 	.word	0x20000c34

08002ab4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002ab4:	b480      	push	{r7}
 8002ab6:	b085      	sub	sp, #20
 8002ab8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002aba:	4b27      	ldr	r3, [pc, #156]	; (8002b58 <vTaskSwitchContext+0xa4>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d003      	beq.n	8002aca <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8002ac2:	4b26      	ldr	r3, [pc, #152]	; (8002b5c <vTaskSwitchContext+0xa8>)
 8002ac4:	2201      	movs	r2, #1
 8002ac6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8002ac8:	e040      	b.n	8002b4c <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8002aca:	4b24      	ldr	r3, [pc, #144]	; (8002b5c <vTaskSwitchContext+0xa8>)
 8002acc:	2200      	movs	r2, #0
 8002ace:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8002ad0:	4b23      	ldr	r3, [pc, #140]	; (8002b60 <vTaskSwitchContext+0xac>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	60fb      	str	r3, [r7, #12]
 8002ad6:	e00f      	b.n	8002af8 <vTaskSwitchContext+0x44>
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d109      	bne.n	8002af2 <vTaskSwitchContext+0x3e>
 8002ade:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ae2:	f383 8811 	msr	BASEPRI, r3
 8002ae6:	f3bf 8f6f 	isb	sy
 8002aea:	f3bf 8f4f 	dsb	sy
 8002aee:	607b      	str	r3, [r7, #4]
 8002af0:	e7fe      	b.n	8002af0 <vTaskSwitchContext+0x3c>
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	3b01      	subs	r3, #1
 8002af6:	60fb      	str	r3, [r7, #12]
 8002af8:	491a      	ldr	r1, [pc, #104]	; (8002b64 <vTaskSwitchContext+0xb0>)
 8002afa:	68fa      	ldr	r2, [r7, #12]
 8002afc:	4613      	mov	r3, r2
 8002afe:	009b      	lsls	r3, r3, #2
 8002b00:	4413      	add	r3, r2
 8002b02:	009b      	lsls	r3, r3, #2
 8002b04:	440b      	add	r3, r1
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d0e5      	beq.n	8002ad8 <vTaskSwitchContext+0x24>
 8002b0c:	68fa      	ldr	r2, [r7, #12]
 8002b0e:	4613      	mov	r3, r2
 8002b10:	009b      	lsls	r3, r3, #2
 8002b12:	4413      	add	r3, r2
 8002b14:	009b      	lsls	r3, r3, #2
 8002b16:	4a13      	ldr	r2, [pc, #76]	; (8002b64 <vTaskSwitchContext+0xb0>)
 8002b18:	4413      	add	r3, r2
 8002b1a:	60bb      	str	r3, [r7, #8]
 8002b1c:	68bb      	ldr	r3, [r7, #8]
 8002b1e:	685b      	ldr	r3, [r3, #4]
 8002b20:	685a      	ldr	r2, [r3, #4]
 8002b22:	68bb      	ldr	r3, [r7, #8]
 8002b24:	605a      	str	r2, [r3, #4]
 8002b26:	68bb      	ldr	r3, [r7, #8]
 8002b28:	685a      	ldr	r2, [r3, #4]
 8002b2a:	68bb      	ldr	r3, [r7, #8]
 8002b2c:	3308      	adds	r3, #8
 8002b2e:	429a      	cmp	r2, r3
 8002b30:	d104      	bne.n	8002b3c <vTaskSwitchContext+0x88>
 8002b32:	68bb      	ldr	r3, [r7, #8]
 8002b34:	685b      	ldr	r3, [r3, #4]
 8002b36:	685a      	ldr	r2, [r3, #4]
 8002b38:	68bb      	ldr	r3, [r7, #8]
 8002b3a:	605a      	str	r2, [r3, #4]
 8002b3c:	68bb      	ldr	r3, [r7, #8]
 8002b3e:	685b      	ldr	r3, [r3, #4]
 8002b40:	68db      	ldr	r3, [r3, #12]
 8002b42:	4a09      	ldr	r2, [pc, #36]	; (8002b68 <vTaskSwitchContext+0xb4>)
 8002b44:	6013      	str	r3, [r2, #0]
 8002b46:	4a06      	ldr	r2, [pc, #24]	; (8002b60 <vTaskSwitchContext+0xac>)
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	6013      	str	r3, [r2, #0]
}
 8002b4c:	bf00      	nop
 8002b4e:	3714      	adds	r7, #20
 8002b50:	46bd      	mov	sp, r7
 8002b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b56:	4770      	bx	lr
 8002b58:	20000c48 	.word	0x20000c48
 8002b5c:	20000c34 	.word	0x20000c34
 8002b60:	20000c28 	.word	0x20000c28
 8002b64:	20000750 	.word	0x20000750
 8002b68:	2000074c 	.word	0x2000074c

08002b6c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b084      	sub	sp, #16
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
 8002b74:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d109      	bne.n	8002b90 <vTaskPlaceOnEventList+0x24>
 8002b7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b80:	f383 8811 	msr	BASEPRI, r3
 8002b84:	f3bf 8f6f 	isb	sy
 8002b88:	f3bf 8f4f 	dsb	sy
 8002b8c:	60fb      	str	r3, [r7, #12]
 8002b8e:	e7fe      	b.n	8002b8e <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002b90:	4b07      	ldr	r3, [pc, #28]	; (8002bb0 <vTaskPlaceOnEventList+0x44>)
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	3318      	adds	r3, #24
 8002b96:	4619      	mov	r1, r3
 8002b98:	6878      	ldr	r0, [r7, #4]
 8002b9a:	f7fe fe42 	bl	8001822 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8002b9e:	2101      	movs	r1, #1
 8002ba0:	6838      	ldr	r0, [r7, #0]
 8002ba2:	f000 fa77 	bl	8003094 <prvAddCurrentTaskToDelayedList>
}
 8002ba6:	bf00      	nop
 8002ba8:	3710      	adds	r7, #16
 8002baa:	46bd      	mov	sp, r7
 8002bac:	bd80      	pop	{r7, pc}
 8002bae:	bf00      	nop
 8002bb0:	2000074c 	.word	0x2000074c

08002bb4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b086      	sub	sp, #24
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	60f8      	str	r0, [r7, #12]
 8002bbc:	60b9      	str	r1, [r7, #8]
 8002bbe:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d109      	bne.n	8002bda <vTaskPlaceOnEventListRestricted+0x26>
 8002bc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bca:	f383 8811 	msr	BASEPRI, r3
 8002bce:	f3bf 8f6f 	isb	sy
 8002bd2:	f3bf 8f4f 	dsb	sy
 8002bd6:	617b      	str	r3, [r7, #20]
 8002bd8:	e7fe      	b.n	8002bd8 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002bda:	4b0a      	ldr	r3, [pc, #40]	; (8002c04 <vTaskPlaceOnEventListRestricted+0x50>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	3318      	adds	r3, #24
 8002be0:	4619      	mov	r1, r3
 8002be2:	68f8      	ldr	r0, [r7, #12]
 8002be4:	f7fe fdf9 	bl	80017da <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d002      	beq.n	8002bf4 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 8002bee:	f04f 33ff 	mov.w	r3, #4294967295
 8002bf2:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8002bf4:	6879      	ldr	r1, [r7, #4]
 8002bf6:	68b8      	ldr	r0, [r7, #8]
 8002bf8:	f000 fa4c 	bl	8003094 <prvAddCurrentTaskToDelayedList>
	}
 8002bfc:	bf00      	nop
 8002bfe:	3718      	adds	r7, #24
 8002c00:	46bd      	mov	sp, r7
 8002c02:	bd80      	pop	{r7, pc}
 8002c04:	2000074c 	.word	0x2000074c

08002c08 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b086      	sub	sp, #24
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	68db      	ldr	r3, [r3, #12]
 8002c14:	68db      	ldr	r3, [r3, #12]
 8002c16:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8002c18:	693b      	ldr	r3, [r7, #16]
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d109      	bne.n	8002c32 <xTaskRemoveFromEventList+0x2a>
 8002c1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c22:	f383 8811 	msr	BASEPRI, r3
 8002c26:	f3bf 8f6f 	isb	sy
 8002c2a:	f3bf 8f4f 	dsb	sy
 8002c2e:	60fb      	str	r3, [r7, #12]
 8002c30:	e7fe      	b.n	8002c30 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8002c32:	693b      	ldr	r3, [r7, #16]
 8002c34:	3318      	adds	r3, #24
 8002c36:	4618      	mov	r0, r3
 8002c38:	f7fe fe2c 	bl	8001894 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002c3c:	4b1d      	ldr	r3, [pc, #116]	; (8002cb4 <xTaskRemoveFromEventList+0xac>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d11d      	bne.n	8002c80 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8002c44:	693b      	ldr	r3, [r7, #16]
 8002c46:	3304      	adds	r3, #4
 8002c48:	4618      	mov	r0, r3
 8002c4a:	f7fe fe23 	bl	8001894 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8002c4e:	693b      	ldr	r3, [r7, #16]
 8002c50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c52:	4b19      	ldr	r3, [pc, #100]	; (8002cb8 <xTaskRemoveFromEventList+0xb0>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	429a      	cmp	r2, r3
 8002c58:	d903      	bls.n	8002c62 <xTaskRemoveFromEventList+0x5a>
 8002c5a:	693b      	ldr	r3, [r7, #16]
 8002c5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c5e:	4a16      	ldr	r2, [pc, #88]	; (8002cb8 <xTaskRemoveFromEventList+0xb0>)
 8002c60:	6013      	str	r3, [r2, #0]
 8002c62:	693b      	ldr	r3, [r7, #16]
 8002c64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c66:	4613      	mov	r3, r2
 8002c68:	009b      	lsls	r3, r3, #2
 8002c6a:	4413      	add	r3, r2
 8002c6c:	009b      	lsls	r3, r3, #2
 8002c6e:	4a13      	ldr	r2, [pc, #76]	; (8002cbc <xTaskRemoveFromEventList+0xb4>)
 8002c70:	441a      	add	r2, r3
 8002c72:	693b      	ldr	r3, [r7, #16]
 8002c74:	3304      	adds	r3, #4
 8002c76:	4619      	mov	r1, r3
 8002c78:	4610      	mov	r0, r2
 8002c7a:	f7fe fdae 	bl	80017da <vListInsertEnd>
 8002c7e:	e005      	b.n	8002c8c <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8002c80:	693b      	ldr	r3, [r7, #16]
 8002c82:	3318      	adds	r3, #24
 8002c84:	4619      	mov	r1, r3
 8002c86:	480e      	ldr	r0, [pc, #56]	; (8002cc0 <xTaskRemoveFromEventList+0xb8>)
 8002c88:	f7fe fda7 	bl	80017da <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002c8c:	693b      	ldr	r3, [r7, #16]
 8002c8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c90:	4b0c      	ldr	r3, [pc, #48]	; (8002cc4 <xTaskRemoveFromEventList+0xbc>)
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c96:	429a      	cmp	r2, r3
 8002c98:	d905      	bls.n	8002ca6 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8002c9e:	4b0a      	ldr	r3, [pc, #40]	; (8002cc8 <xTaskRemoveFromEventList+0xc0>)
 8002ca0:	2201      	movs	r2, #1
 8002ca2:	601a      	str	r2, [r3, #0]
 8002ca4:	e001      	b.n	8002caa <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8002caa:	697b      	ldr	r3, [r7, #20]
}
 8002cac:	4618      	mov	r0, r3
 8002cae:	3718      	adds	r7, #24
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	bd80      	pop	{r7, pc}
 8002cb4:	20000c48 	.word	0x20000c48
 8002cb8:	20000c28 	.word	0x20000c28
 8002cbc:	20000750 	.word	0x20000750
 8002cc0:	20000be0 	.word	0x20000be0
 8002cc4:	2000074c 	.word	0x2000074c
 8002cc8:	20000c34 	.word	0x20000c34

08002ccc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8002ccc:	b480      	push	{r7}
 8002cce:	b083      	sub	sp, #12
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8002cd4:	4b06      	ldr	r3, [pc, #24]	; (8002cf0 <vTaskInternalSetTimeOutState+0x24>)
 8002cd6:	681a      	ldr	r2, [r3, #0]
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8002cdc:	4b05      	ldr	r3, [pc, #20]	; (8002cf4 <vTaskInternalSetTimeOutState+0x28>)
 8002cde:	681a      	ldr	r2, [r3, #0]
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	605a      	str	r2, [r3, #4]
}
 8002ce4:	bf00      	nop
 8002ce6:	370c      	adds	r7, #12
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cee:	4770      	bx	lr
 8002cf0:	20000c38 	.word	0x20000c38
 8002cf4:	20000c24 	.word	0x20000c24

08002cf8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b088      	sub	sp, #32
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
 8002d00:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d109      	bne.n	8002d1c <xTaskCheckForTimeOut+0x24>
 8002d08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d0c:	f383 8811 	msr	BASEPRI, r3
 8002d10:	f3bf 8f6f 	isb	sy
 8002d14:	f3bf 8f4f 	dsb	sy
 8002d18:	613b      	str	r3, [r7, #16]
 8002d1a:	e7fe      	b.n	8002d1a <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d109      	bne.n	8002d36 <xTaskCheckForTimeOut+0x3e>
 8002d22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d26:	f383 8811 	msr	BASEPRI, r3
 8002d2a:	f3bf 8f6f 	isb	sy
 8002d2e:	f3bf 8f4f 	dsb	sy
 8002d32:	60fb      	str	r3, [r7, #12]
 8002d34:	e7fe      	b.n	8002d34 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8002d36:	f000 fe31 	bl	800399c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8002d3a:	4b1d      	ldr	r3, [pc, #116]	; (8002db0 <xTaskCheckForTimeOut+0xb8>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	685b      	ldr	r3, [r3, #4]
 8002d44:	69ba      	ldr	r2, [r7, #24]
 8002d46:	1ad3      	subs	r3, r2, r3
 8002d48:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d52:	d102      	bne.n	8002d5a <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8002d54:	2300      	movs	r3, #0
 8002d56:	61fb      	str	r3, [r7, #28]
 8002d58:	e023      	b.n	8002da2 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681a      	ldr	r2, [r3, #0]
 8002d5e:	4b15      	ldr	r3, [pc, #84]	; (8002db4 <xTaskCheckForTimeOut+0xbc>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	429a      	cmp	r2, r3
 8002d64:	d007      	beq.n	8002d76 <xTaskCheckForTimeOut+0x7e>
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	685b      	ldr	r3, [r3, #4]
 8002d6a:	69ba      	ldr	r2, [r7, #24]
 8002d6c:	429a      	cmp	r2, r3
 8002d6e:	d302      	bcc.n	8002d76 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8002d70:	2301      	movs	r3, #1
 8002d72:	61fb      	str	r3, [r7, #28]
 8002d74:	e015      	b.n	8002da2 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	697a      	ldr	r2, [r7, #20]
 8002d7c:	429a      	cmp	r2, r3
 8002d7e:	d20b      	bcs.n	8002d98 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	681a      	ldr	r2, [r3, #0]
 8002d84:	697b      	ldr	r3, [r7, #20]
 8002d86:	1ad2      	subs	r2, r2, r3
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8002d8c:	6878      	ldr	r0, [r7, #4]
 8002d8e:	f7ff ff9d 	bl	8002ccc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8002d92:	2300      	movs	r3, #0
 8002d94:	61fb      	str	r3, [r7, #28]
 8002d96:	e004      	b.n	8002da2 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8002d9e:	2301      	movs	r3, #1
 8002da0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8002da2:	f000 fe29 	bl	80039f8 <vPortExitCritical>

	return xReturn;
 8002da6:	69fb      	ldr	r3, [r7, #28]
}
 8002da8:	4618      	mov	r0, r3
 8002daa:	3720      	adds	r7, #32
 8002dac:	46bd      	mov	sp, r7
 8002dae:	bd80      	pop	{r7, pc}
 8002db0:	20000c24 	.word	0x20000c24
 8002db4:	20000c38 	.word	0x20000c38

08002db8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8002db8:	b480      	push	{r7}
 8002dba:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8002dbc:	4b03      	ldr	r3, [pc, #12]	; (8002dcc <vTaskMissedYield+0x14>)
 8002dbe:	2201      	movs	r2, #1
 8002dc0:	601a      	str	r2, [r3, #0]
}
 8002dc2:	bf00      	nop
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dca:	4770      	bx	lr
 8002dcc:	20000c34 	.word	0x20000c34

08002dd0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b082      	sub	sp, #8
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8002dd8:	f000 f852 	bl	8002e80 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002ddc:	4b06      	ldr	r3, [pc, #24]	; (8002df8 <prvIdleTask+0x28>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	2b01      	cmp	r3, #1
 8002de2:	d9f9      	bls.n	8002dd8 <prvIdleTask+0x8>
			{
				taskYIELD();
 8002de4:	4b05      	ldr	r3, [pc, #20]	; (8002dfc <prvIdleTask+0x2c>)
 8002de6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002dea:	601a      	str	r2, [r3, #0]
 8002dec:	f3bf 8f4f 	dsb	sy
 8002df0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8002df4:	e7f0      	b.n	8002dd8 <prvIdleTask+0x8>
 8002df6:	bf00      	nop
 8002df8:	20000750 	.word	0x20000750
 8002dfc:	e000ed04 	.word	0xe000ed04

08002e00 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b082      	sub	sp, #8
 8002e04:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002e06:	2300      	movs	r3, #0
 8002e08:	607b      	str	r3, [r7, #4]
 8002e0a:	e00c      	b.n	8002e26 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002e0c:	687a      	ldr	r2, [r7, #4]
 8002e0e:	4613      	mov	r3, r2
 8002e10:	009b      	lsls	r3, r3, #2
 8002e12:	4413      	add	r3, r2
 8002e14:	009b      	lsls	r3, r3, #2
 8002e16:	4a12      	ldr	r2, [pc, #72]	; (8002e60 <prvInitialiseTaskLists+0x60>)
 8002e18:	4413      	add	r3, r2
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	f7fe fcb0 	bl	8001780 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	3301      	adds	r3, #1
 8002e24:	607b      	str	r3, [r7, #4]
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	2b37      	cmp	r3, #55	; 0x37
 8002e2a:	d9ef      	bls.n	8002e0c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8002e2c:	480d      	ldr	r0, [pc, #52]	; (8002e64 <prvInitialiseTaskLists+0x64>)
 8002e2e:	f7fe fca7 	bl	8001780 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8002e32:	480d      	ldr	r0, [pc, #52]	; (8002e68 <prvInitialiseTaskLists+0x68>)
 8002e34:	f7fe fca4 	bl	8001780 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8002e38:	480c      	ldr	r0, [pc, #48]	; (8002e6c <prvInitialiseTaskLists+0x6c>)
 8002e3a:	f7fe fca1 	bl	8001780 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8002e3e:	480c      	ldr	r0, [pc, #48]	; (8002e70 <prvInitialiseTaskLists+0x70>)
 8002e40:	f7fe fc9e 	bl	8001780 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8002e44:	480b      	ldr	r0, [pc, #44]	; (8002e74 <prvInitialiseTaskLists+0x74>)
 8002e46:	f7fe fc9b 	bl	8001780 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8002e4a:	4b0b      	ldr	r3, [pc, #44]	; (8002e78 <prvInitialiseTaskLists+0x78>)
 8002e4c:	4a05      	ldr	r2, [pc, #20]	; (8002e64 <prvInitialiseTaskLists+0x64>)
 8002e4e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002e50:	4b0a      	ldr	r3, [pc, #40]	; (8002e7c <prvInitialiseTaskLists+0x7c>)
 8002e52:	4a05      	ldr	r2, [pc, #20]	; (8002e68 <prvInitialiseTaskLists+0x68>)
 8002e54:	601a      	str	r2, [r3, #0]
}
 8002e56:	bf00      	nop
 8002e58:	3708      	adds	r7, #8
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	bd80      	pop	{r7, pc}
 8002e5e:	bf00      	nop
 8002e60:	20000750 	.word	0x20000750
 8002e64:	20000bb0 	.word	0x20000bb0
 8002e68:	20000bc4 	.word	0x20000bc4
 8002e6c:	20000be0 	.word	0x20000be0
 8002e70:	20000bf4 	.word	0x20000bf4
 8002e74:	20000c0c 	.word	0x20000c0c
 8002e78:	20000bd8 	.word	0x20000bd8
 8002e7c:	20000bdc 	.word	0x20000bdc

08002e80 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b082      	sub	sp, #8
 8002e84:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002e86:	e019      	b.n	8002ebc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8002e88:	f000 fd88 	bl	800399c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8002e8c:	4b0f      	ldr	r3, [pc, #60]	; (8002ecc <prvCheckTasksWaitingTermination+0x4c>)
 8002e8e:	68db      	ldr	r3, [r3, #12]
 8002e90:	68db      	ldr	r3, [r3, #12]
 8002e92:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	3304      	adds	r3, #4
 8002e98:	4618      	mov	r0, r3
 8002e9a:	f7fe fcfb 	bl	8001894 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8002e9e:	4b0c      	ldr	r3, [pc, #48]	; (8002ed0 <prvCheckTasksWaitingTermination+0x50>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	3b01      	subs	r3, #1
 8002ea4:	4a0a      	ldr	r2, [pc, #40]	; (8002ed0 <prvCheckTasksWaitingTermination+0x50>)
 8002ea6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8002ea8:	4b0a      	ldr	r3, [pc, #40]	; (8002ed4 <prvCheckTasksWaitingTermination+0x54>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	3b01      	subs	r3, #1
 8002eae:	4a09      	ldr	r2, [pc, #36]	; (8002ed4 <prvCheckTasksWaitingTermination+0x54>)
 8002eb0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8002eb2:	f000 fda1 	bl	80039f8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8002eb6:	6878      	ldr	r0, [r7, #4]
 8002eb8:	f000 f80e 	bl	8002ed8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002ebc:	4b05      	ldr	r3, [pc, #20]	; (8002ed4 <prvCheckTasksWaitingTermination+0x54>)
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d1e1      	bne.n	8002e88 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8002ec4:	bf00      	nop
 8002ec6:	3708      	adds	r7, #8
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	bd80      	pop	{r7, pc}
 8002ecc:	20000bf4 	.word	0x20000bf4
 8002ed0:	20000c20 	.word	0x20000c20
 8002ed4:	20000c08 	.word	0x20000c08

08002ed8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b084      	sub	sp, #16
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d108      	bne.n	8002efc <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eee:	4618      	mov	r0, r3
 8002ef0:	f000 ff30 	bl	8003d54 <vPortFree>
				vPortFree( pxTCB );
 8002ef4:	6878      	ldr	r0, [r7, #4]
 8002ef6:	f000 ff2d 	bl	8003d54 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8002efa:	e017      	b.n	8002f2c <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8002f02:	2b01      	cmp	r3, #1
 8002f04:	d103      	bne.n	8002f0e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8002f06:	6878      	ldr	r0, [r7, #4]
 8002f08:	f000 ff24 	bl	8003d54 <vPortFree>
	}
 8002f0c:	e00e      	b.n	8002f2c <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8002f14:	2b02      	cmp	r3, #2
 8002f16:	d009      	beq.n	8002f2c <prvDeleteTCB+0x54>
 8002f18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f1c:	f383 8811 	msr	BASEPRI, r3
 8002f20:	f3bf 8f6f 	isb	sy
 8002f24:	f3bf 8f4f 	dsb	sy
 8002f28:	60fb      	str	r3, [r7, #12]
 8002f2a:	e7fe      	b.n	8002f2a <prvDeleteTCB+0x52>
	}
 8002f2c:	bf00      	nop
 8002f2e:	3710      	adds	r7, #16
 8002f30:	46bd      	mov	sp, r7
 8002f32:	bd80      	pop	{r7, pc}

08002f34 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002f34:	b480      	push	{r7}
 8002f36:	b083      	sub	sp, #12
 8002f38:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002f3a:	4b0f      	ldr	r3, [pc, #60]	; (8002f78 <prvResetNextTaskUnblockTime+0x44>)
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d101      	bne.n	8002f48 <prvResetNextTaskUnblockTime+0x14>
 8002f44:	2301      	movs	r3, #1
 8002f46:	e000      	b.n	8002f4a <prvResetNextTaskUnblockTime+0x16>
 8002f48:	2300      	movs	r3, #0
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d004      	beq.n	8002f58 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8002f4e:	4b0b      	ldr	r3, [pc, #44]	; (8002f7c <prvResetNextTaskUnblockTime+0x48>)
 8002f50:	f04f 32ff 	mov.w	r2, #4294967295
 8002f54:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8002f56:	e008      	b.n	8002f6a <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002f58:	4b07      	ldr	r3, [pc, #28]	; (8002f78 <prvResetNextTaskUnblockTime+0x44>)
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	68db      	ldr	r3, [r3, #12]
 8002f5e:	68db      	ldr	r3, [r3, #12]
 8002f60:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	685b      	ldr	r3, [r3, #4]
 8002f66:	4a05      	ldr	r2, [pc, #20]	; (8002f7c <prvResetNextTaskUnblockTime+0x48>)
 8002f68:	6013      	str	r3, [r2, #0]
}
 8002f6a:	bf00      	nop
 8002f6c:	370c      	adds	r7, #12
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f74:	4770      	bx	lr
 8002f76:	bf00      	nop
 8002f78:	20000bd8 	.word	0x20000bd8
 8002f7c:	20000c40 	.word	0x20000c40

08002f80 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8002f80:	b480      	push	{r7}
 8002f82:	b083      	sub	sp, #12
 8002f84:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8002f86:	4b0b      	ldr	r3, [pc, #44]	; (8002fb4 <xTaskGetSchedulerState+0x34>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d102      	bne.n	8002f94 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8002f8e:	2301      	movs	r3, #1
 8002f90:	607b      	str	r3, [r7, #4]
 8002f92:	e008      	b.n	8002fa6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002f94:	4b08      	ldr	r3, [pc, #32]	; (8002fb8 <xTaskGetSchedulerState+0x38>)
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d102      	bne.n	8002fa2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8002f9c:	2302      	movs	r3, #2
 8002f9e:	607b      	str	r3, [r7, #4]
 8002fa0:	e001      	b.n	8002fa6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8002fa6:	687b      	ldr	r3, [r7, #4]
	}
 8002fa8:	4618      	mov	r0, r3
 8002faa:	370c      	adds	r7, #12
 8002fac:	46bd      	mov	sp, r7
 8002fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb2:	4770      	bx	lr
 8002fb4:	20000c2c 	.word	0x20000c2c
 8002fb8:	20000c48 	.word	0x20000c48

08002fbc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b086      	sub	sp, #24
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8002fc8:	2300      	movs	r3, #0
 8002fca:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d054      	beq.n	800307c <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8002fd2:	4b2d      	ldr	r3, [pc, #180]	; (8003088 <xTaskPriorityDisinherit+0xcc>)
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	693a      	ldr	r2, [r7, #16]
 8002fd8:	429a      	cmp	r2, r3
 8002fda:	d009      	beq.n	8002ff0 <xTaskPriorityDisinherit+0x34>
 8002fdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fe0:	f383 8811 	msr	BASEPRI, r3
 8002fe4:	f3bf 8f6f 	isb	sy
 8002fe8:	f3bf 8f4f 	dsb	sy
 8002fec:	60fb      	str	r3, [r7, #12]
 8002fee:	e7fe      	b.n	8002fee <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8002ff0:	693b      	ldr	r3, [r7, #16]
 8002ff2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d109      	bne.n	800300c <xTaskPriorityDisinherit+0x50>
 8002ff8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ffc:	f383 8811 	msr	BASEPRI, r3
 8003000:	f3bf 8f6f 	isb	sy
 8003004:	f3bf 8f4f 	dsb	sy
 8003008:	60bb      	str	r3, [r7, #8]
 800300a:	e7fe      	b.n	800300a <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 800300c:	693b      	ldr	r3, [r7, #16]
 800300e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003010:	1e5a      	subs	r2, r3, #1
 8003012:	693b      	ldr	r3, [r7, #16]
 8003014:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003016:	693b      	ldr	r3, [r7, #16]
 8003018:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800301a:	693b      	ldr	r3, [r7, #16]
 800301c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800301e:	429a      	cmp	r2, r3
 8003020:	d02c      	beq.n	800307c <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003022:	693b      	ldr	r3, [r7, #16]
 8003024:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003026:	2b00      	cmp	r3, #0
 8003028:	d128      	bne.n	800307c <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800302a:	693b      	ldr	r3, [r7, #16]
 800302c:	3304      	adds	r3, #4
 800302e:	4618      	mov	r0, r3
 8003030:	f7fe fc30 	bl	8001894 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003034:	693b      	ldr	r3, [r7, #16]
 8003036:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003038:	693b      	ldr	r3, [r7, #16]
 800303a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800303c:	693b      	ldr	r3, [r7, #16]
 800303e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003040:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003044:	693b      	ldr	r3, [r7, #16]
 8003046:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8003048:	693b      	ldr	r3, [r7, #16]
 800304a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800304c:	4b0f      	ldr	r3, [pc, #60]	; (800308c <xTaskPriorityDisinherit+0xd0>)
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	429a      	cmp	r2, r3
 8003052:	d903      	bls.n	800305c <xTaskPriorityDisinherit+0xa0>
 8003054:	693b      	ldr	r3, [r7, #16]
 8003056:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003058:	4a0c      	ldr	r2, [pc, #48]	; (800308c <xTaskPriorityDisinherit+0xd0>)
 800305a:	6013      	str	r3, [r2, #0]
 800305c:	693b      	ldr	r3, [r7, #16]
 800305e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003060:	4613      	mov	r3, r2
 8003062:	009b      	lsls	r3, r3, #2
 8003064:	4413      	add	r3, r2
 8003066:	009b      	lsls	r3, r3, #2
 8003068:	4a09      	ldr	r2, [pc, #36]	; (8003090 <xTaskPriorityDisinherit+0xd4>)
 800306a:	441a      	add	r2, r3
 800306c:	693b      	ldr	r3, [r7, #16]
 800306e:	3304      	adds	r3, #4
 8003070:	4619      	mov	r1, r3
 8003072:	4610      	mov	r0, r2
 8003074:	f7fe fbb1 	bl	80017da <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8003078:	2301      	movs	r3, #1
 800307a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800307c:	697b      	ldr	r3, [r7, #20]
	}
 800307e:	4618      	mov	r0, r3
 8003080:	3718      	adds	r7, #24
 8003082:	46bd      	mov	sp, r7
 8003084:	bd80      	pop	{r7, pc}
 8003086:	bf00      	nop
 8003088:	2000074c 	.word	0x2000074c
 800308c:	20000c28 	.word	0x20000c28
 8003090:	20000750 	.word	0x20000750

08003094 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003094:	b580      	push	{r7, lr}
 8003096:	b084      	sub	sp, #16
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
 800309c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800309e:	4b21      	ldr	r3, [pc, #132]	; (8003124 <prvAddCurrentTaskToDelayedList+0x90>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80030a4:	4b20      	ldr	r3, [pc, #128]	; (8003128 <prvAddCurrentTaskToDelayedList+0x94>)
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	3304      	adds	r3, #4
 80030aa:	4618      	mov	r0, r3
 80030ac:	f7fe fbf2 	bl	8001894 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030b6:	d10a      	bne.n	80030ce <prvAddCurrentTaskToDelayedList+0x3a>
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d007      	beq.n	80030ce <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80030be:	4b1a      	ldr	r3, [pc, #104]	; (8003128 <prvAddCurrentTaskToDelayedList+0x94>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	3304      	adds	r3, #4
 80030c4:	4619      	mov	r1, r3
 80030c6:	4819      	ldr	r0, [pc, #100]	; (800312c <prvAddCurrentTaskToDelayedList+0x98>)
 80030c8:	f7fe fb87 	bl	80017da <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80030cc:	e026      	b.n	800311c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80030ce:	68fa      	ldr	r2, [r7, #12]
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	4413      	add	r3, r2
 80030d4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80030d6:	4b14      	ldr	r3, [pc, #80]	; (8003128 <prvAddCurrentTaskToDelayedList+0x94>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	68ba      	ldr	r2, [r7, #8]
 80030dc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80030de:	68ba      	ldr	r2, [r7, #8]
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	429a      	cmp	r2, r3
 80030e4:	d209      	bcs.n	80030fa <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80030e6:	4b12      	ldr	r3, [pc, #72]	; (8003130 <prvAddCurrentTaskToDelayedList+0x9c>)
 80030e8:	681a      	ldr	r2, [r3, #0]
 80030ea:	4b0f      	ldr	r3, [pc, #60]	; (8003128 <prvAddCurrentTaskToDelayedList+0x94>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	3304      	adds	r3, #4
 80030f0:	4619      	mov	r1, r3
 80030f2:	4610      	mov	r0, r2
 80030f4:	f7fe fb95 	bl	8001822 <vListInsert>
}
 80030f8:	e010      	b.n	800311c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80030fa:	4b0e      	ldr	r3, [pc, #56]	; (8003134 <prvAddCurrentTaskToDelayedList+0xa0>)
 80030fc:	681a      	ldr	r2, [r3, #0]
 80030fe:	4b0a      	ldr	r3, [pc, #40]	; (8003128 <prvAddCurrentTaskToDelayedList+0x94>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	3304      	adds	r3, #4
 8003104:	4619      	mov	r1, r3
 8003106:	4610      	mov	r0, r2
 8003108:	f7fe fb8b 	bl	8001822 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800310c:	4b0a      	ldr	r3, [pc, #40]	; (8003138 <prvAddCurrentTaskToDelayedList+0xa4>)
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	68ba      	ldr	r2, [r7, #8]
 8003112:	429a      	cmp	r2, r3
 8003114:	d202      	bcs.n	800311c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8003116:	4a08      	ldr	r2, [pc, #32]	; (8003138 <prvAddCurrentTaskToDelayedList+0xa4>)
 8003118:	68bb      	ldr	r3, [r7, #8]
 800311a:	6013      	str	r3, [r2, #0]
}
 800311c:	bf00      	nop
 800311e:	3710      	adds	r7, #16
 8003120:	46bd      	mov	sp, r7
 8003122:	bd80      	pop	{r7, pc}
 8003124:	20000c24 	.word	0x20000c24
 8003128:	2000074c 	.word	0x2000074c
 800312c:	20000c0c 	.word	0x20000c0c
 8003130:	20000bdc 	.word	0x20000bdc
 8003134:	20000bd8 	.word	0x20000bd8
 8003138:	20000c40 	.word	0x20000c40

0800313c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b08a      	sub	sp, #40	; 0x28
 8003140:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8003142:	2300      	movs	r3, #0
 8003144:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8003146:	f000 fac3 	bl	80036d0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800314a:	4b1c      	ldr	r3, [pc, #112]	; (80031bc <xTimerCreateTimerTask+0x80>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	2b00      	cmp	r3, #0
 8003150:	d021      	beq.n	8003196 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8003152:	2300      	movs	r3, #0
 8003154:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8003156:	2300      	movs	r3, #0
 8003158:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800315a:	1d3a      	adds	r2, r7, #4
 800315c:	f107 0108 	add.w	r1, r7, #8
 8003160:	f107 030c 	add.w	r3, r7, #12
 8003164:	4618      	mov	r0, r3
 8003166:	f7fe faf1 	bl	800174c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800316a:	6879      	ldr	r1, [r7, #4]
 800316c:	68bb      	ldr	r3, [r7, #8]
 800316e:	68fa      	ldr	r2, [r7, #12]
 8003170:	9202      	str	r2, [sp, #8]
 8003172:	9301      	str	r3, [sp, #4]
 8003174:	2302      	movs	r3, #2
 8003176:	9300      	str	r3, [sp, #0]
 8003178:	2300      	movs	r3, #0
 800317a:	460a      	mov	r2, r1
 800317c:	4910      	ldr	r1, [pc, #64]	; (80031c0 <xTimerCreateTimerTask+0x84>)
 800317e:	4811      	ldr	r0, [pc, #68]	; (80031c4 <xTimerCreateTimerTask+0x88>)
 8003180:	f7ff f8f4 	bl	800236c <xTaskCreateStatic>
 8003184:	4602      	mov	r2, r0
 8003186:	4b10      	ldr	r3, [pc, #64]	; (80031c8 <xTimerCreateTimerTask+0x8c>)
 8003188:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800318a:	4b0f      	ldr	r3, [pc, #60]	; (80031c8 <xTimerCreateTimerTask+0x8c>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	2b00      	cmp	r3, #0
 8003190:	d001      	beq.n	8003196 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8003192:	2301      	movs	r3, #1
 8003194:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8003196:	697b      	ldr	r3, [r7, #20]
 8003198:	2b00      	cmp	r3, #0
 800319a:	d109      	bne.n	80031b0 <xTimerCreateTimerTask+0x74>
 800319c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031a0:	f383 8811 	msr	BASEPRI, r3
 80031a4:	f3bf 8f6f 	isb	sy
 80031a8:	f3bf 8f4f 	dsb	sy
 80031ac:	613b      	str	r3, [r7, #16]
 80031ae:	e7fe      	b.n	80031ae <xTimerCreateTimerTask+0x72>
	return xReturn;
 80031b0:	697b      	ldr	r3, [r7, #20]
}
 80031b2:	4618      	mov	r0, r3
 80031b4:	3718      	adds	r7, #24
 80031b6:	46bd      	mov	sp, r7
 80031b8:	bd80      	pop	{r7, pc}
 80031ba:	bf00      	nop
 80031bc:	20000c7c 	.word	0x20000c7c
 80031c0:	080045c8 	.word	0x080045c8
 80031c4:	080032e5 	.word	0x080032e5
 80031c8:	20000c80 	.word	0x20000c80

080031cc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b08a      	sub	sp, #40	; 0x28
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	60f8      	str	r0, [r7, #12]
 80031d4:	60b9      	str	r1, [r7, #8]
 80031d6:	607a      	str	r2, [r7, #4]
 80031d8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80031da:	2300      	movs	r3, #0
 80031dc:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d109      	bne.n	80031f8 <xTimerGenericCommand+0x2c>
 80031e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031e8:	f383 8811 	msr	BASEPRI, r3
 80031ec:	f3bf 8f6f 	isb	sy
 80031f0:	f3bf 8f4f 	dsb	sy
 80031f4:	623b      	str	r3, [r7, #32]
 80031f6:	e7fe      	b.n	80031f6 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80031f8:	4b19      	ldr	r3, [pc, #100]	; (8003260 <xTimerGenericCommand+0x94>)
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d02a      	beq.n	8003256 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8003200:	68bb      	ldr	r3, [r7, #8]
 8003202:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800320c:	68bb      	ldr	r3, [r7, #8]
 800320e:	2b05      	cmp	r3, #5
 8003210:	dc18      	bgt.n	8003244 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8003212:	f7ff feb5 	bl	8002f80 <xTaskGetSchedulerState>
 8003216:	4603      	mov	r3, r0
 8003218:	2b02      	cmp	r3, #2
 800321a:	d109      	bne.n	8003230 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800321c:	4b10      	ldr	r3, [pc, #64]	; (8003260 <xTimerGenericCommand+0x94>)
 800321e:	6818      	ldr	r0, [r3, #0]
 8003220:	f107 0110 	add.w	r1, r7, #16
 8003224:	2300      	movs	r3, #0
 8003226:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003228:	f7fe fcca 	bl	8001bc0 <xQueueGenericSend>
 800322c:	6278      	str	r0, [r7, #36]	; 0x24
 800322e:	e012      	b.n	8003256 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8003230:	4b0b      	ldr	r3, [pc, #44]	; (8003260 <xTimerGenericCommand+0x94>)
 8003232:	6818      	ldr	r0, [r3, #0]
 8003234:	f107 0110 	add.w	r1, r7, #16
 8003238:	2300      	movs	r3, #0
 800323a:	2200      	movs	r2, #0
 800323c:	f7fe fcc0 	bl	8001bc0 <xQueueGenericSend>
 8003240:	6278      	str	r0, [r7, #36]	; 0x24
 8003242:	e008      	b.n	8003256 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8003244:	4b06      	ldr	r3, [pc, #24]	; (8003260 <xTimerGenericCommand+0x94>)
 8003246:	6818      	ldr	r0, [r3, #0]
 8003248:	f107 0110 	add.w	r1, r7, #16
 800324c:	2300      	movs	r3, #0
 800324e:	683a      	ldr	r2, [r7, #0]
 8003250:	f7fe fdb0 	bl	8001db4 <xQueueGenericSendFromISR>
 8003254:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8003256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003258:	4618      	mov	r0, r3
 800325a:	3728      	adds	r7, #40	; 0x28
 800325c:	46bd      	mov	sp, r7
 800325e:	bd80      	pop	{r7, pc}
 8003260:	20000c7c 	.word	0x20000c7c

08003264 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8003264:	b580      	push	{r7, lr}
 8003266:	b088      	sub	sp, #32
 8003268:	af02      	add	r7, sp, #8
 800326a:	6078      	str	r0, [r7, #4]
 800326c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800326e:	4b1c      	ldr	r3, [pc, #112]	; (80032e0 <prvProcessExpiredTimer+0x7c>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	68db      	ldr	r3, [r3, #12]
 8003274:	68db      	ldr	r3, [r3, #12]
 8003276:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003278:	697b      	ldr	r3, [r7, #20]
 800327a:	3304      	adds	r3, #4
 800327c:	4618      	mov	r0, r3
 800327e:	f7fe fb09 	bl	8001894 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8003282:	697b      	ldr	r3, [r7, #20]
 8003284:	69db      	ldr	r3, [r3, #28]
 8003286:	2b01      	cmp	r3, #1
 8003288:	d121      	bne.n	80032ce <prvProcessExpiredTimer+0x6a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800328a:	697b      	ldr	r3, [r7, #20]
 800328c:	699a      	ldr	r2, [r3, #24]
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	18d1      	adds	r1, r2, r3
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	683a      	ldr	r2, [r7, #0]
 8003296:	6978      	ldr	r0, [r7, #20]
 8003298:	f000 f8c8 	bl	800342c <prvInsertTimerInActiveList>
 800329c:	4603      	mov	r3, r0
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d015      	beq.n	80032ce <prvProcessExpiredTimer+0x6a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80032a2:	2300      	movs	r3, #0
 80032a4:	9300      	str	r3, [sp, #0]
 80032a6:	2300      	movs	r3, #0
 80032a8:	687a      	ldr	r2, [r7, #4]
 80032aa:	2100      	movs	r1, #0
 80032ac:	6978      	ldr	r0, [r7, #20]
 80032ae:	f7ff ff8d 	bl	80031cc <xTimerGenericCommand>
 80032b2:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80032b4:	693b      	ldr	r3, [r7, #16]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d109      	bne.n	80032ce <prvProcessExpiredTimer+0x6a>
 80032ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032be:	f383 8811 	msr	BASEPRI, r3
 80032c2:	f3bf 8f6f 	isb	sy
 80032c6:	f3bf 8f4f 	dsb	sy
 80032ca:	60fb      	str	r3, [r7, #12]
 80032cc:	e7fe      	b.n	80032cc <prvProcessExpiredTimer+0x68>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80032ce:	697b      	ldr	r3, [r7, #20]
 80032d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032d2:	6978      	ldr	r0, [r7, #20]
 80032d4:	4798      	blx	r3
}
 80032d6:	bf00      	nop
 80032d8:	3718      	adds	r7, #24
 80032da:	46bd      	mov	sp, r7
 80032dc:	bd80      	pop	{r7, pc}
 80032de:	bf00      	nop
 80032e0:	20000c74 	.word	0x20000c74

080032e4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b084      	sub	sp, #16
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80032ec:	f107 0308 	add.w	r3, r7, #8
 80032f0:	4618      	mov	r0, r3
 80032f2:	f000 f857 	bl	80033a4 <prvGetNextExpireTime>
 80032f6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80032f8:	68bb      	ldr	r3, [r7, #8]
 80032fa:	4619      	mov	r1, r3
 80032fc:	68f8      	ldr	r0, [r7, #12]
 80032fe:	f000 f803 	bl	8003308 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8003302:	f000 f8d5 	bl	80034b0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003306:	e7f1      	b.n	80032ec <prvTimerTask+0x8>

08003308 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b084      	sub	sp, #16
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
 8003310:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8003312:	f7ff fa57 	bl	80027c4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003316:	f107 0308 	add.w	r3, r7, #8
 800331a:	4618      	mov	r0, r3
 800331c:	f000 f866 	bl	80033ec <prvSampleTimeNow>
 8003320:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8003322:	68bb      	ldr	r3, [r7, #8]
 8003324:	2b00      	cmp	r3, #0
 8003326:	d130      	bne.n	800338a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	2b00      	cmp	r3, #0
 800332c:	d10a      	bne.n	8003344 <prvProcessTimerOrBlockTask+0x3c>
 800332e:	687a      	ldr	r2, [r7, #4]
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	429a      	cmp	r2, r3
 8003334:	d806      	bhi.n	8003344 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8003336:	f7ff fa53 	bl	80027e0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800333a:	68f9      	ldr	r1, [r7, #12]
 800333c:	6878      	ldr	r0, [r7, #4]
 800333e:	f7ff ff91 	bl	8003264 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8003342:	e024      	b.n	800338e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	2b00      	cmp	r3, #0
 8003348:	d008      	beq.n	800335c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800334a:	4b13      	ldr	r3, [pc, #76]	; (8003398 <prvProcessTimerOrBlockTask+0x90>)
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	2b00      	cmp	r3, #0
 8003352:	bf0c      	ite	eq
 8003354:	2301      	moveq	r3, #1
 8003356:	2300      	movne	r3, #0
 8003358:	b2db      	uxtb	r3, r3
 800335a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800335c:	4b0f      	ldr	r3, [pc, #60]	; (800339c <prvProcessTimerOrBlockTask+0x94>)
 800335e:	6818      	ldr	r0, [r3, #0]
 8003360:	687a      	ldr	r2, [r7, #4]
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	1ad3      	subs	r3, r2, r3
 8003366:	683a      	ldr	r2, [r7, #0]
 8003368:	4619      	mov	r1, r3
 800336a:	f7fe ffcb 	bl	8002304 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800336e:	f7ff fa37 	bl	80027e0 <xTaskResumeAll>
 8003372:	4603      	mov	r3, r0
 8003374:	2b00      	cmp	r3, #0
 8003376:	d10a      	bne.n	800338e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8003378:	4b09      	ldr	r3, [pc, #36]	; (80033a0 <prvProcessTimerOrBlockTask+0x98>)
 800337a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800337e:	601a      	str	r2, [r3, #0]
 8003380:	f3bf 8f4f 	dsb	sy
 8003384:	f3bf 8f6f 	isb	sy
}
 8003388:	e001      	b.n	800338e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800338a:	f7ff fa29 	bl	80027e0 <xTaskResumeAll>
}
 800338e:	bf00      	nop
 8003390:	3710      	adds	r7, #16
 8003392:	46bd      	mov	sp, r7
 8003394:	bd80      	pop	{r7, pc}
 8003396:	bf00      	nop
 8003398:	20000c78 	.word	0x20000c78
 800339c:	20000c7c 	.word	0x20000c7c
 80033a0:	e000ed04 	.word	0xe000ed04

080033a4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80033a4:	b480      	push	{r7}
 80033a6:	b085      	sub	sp, #20
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80033ac:	4b0e      	ldr	r3, [pc, #56]	; (80033e8 <prvGetNextExpireTime+0x44>)
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	bf0c      	ite	eq
 80033b6:	2301      	moveq	r3, #1
 80033b8:	2300      	movne	r3, #0
 80033ba:	b2db      	uxtb	r3, r3
 80033bc:	461a      	mov	r2, r3
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d105      	bne.n	80033d6 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80033ca:	4b07      	ldr	r3, [pc, #28]	; (80033e8 <prvGetNextExpireTime+0x44>)
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	68db      	ldr	r3, [r3, #12]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	60fb      	str	r3, [r7, #12]
 80033d4:	e001      	b.n	80033da <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80033d6:	2300      	movs	r3, #0
 80033d8:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80033da:	68fb      	ldr	r3, [r7, #12]
}
 80033dc:	4618      	mov	r0, r3
 80033de:	3714      	adds	r7, #20
 80033e0:	46bd      	mov	sp, r7
 80033e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e6:	4770      	bx	lr
 80033e8:	20000c74 	.word	0x20000c74

080033ec <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b084      	sub	sp, #16
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80033f4:	f7ff fa90 	bl	8002918 <xTaskGetTickCount>
 80033f8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80033fa:	4b0b      	ldr	r3, [pc, #44]	; (8003428 <prvSampleTimeNow+0x3c>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	68fa      	ldr	r2, [r7, #12]
 8003400:	429a      	cmp	r2, r3
 8003402:	d205      	bcs.n	8003410 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8003404:	f000 f904 	bl	8003610 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2201      	movs	r2, #1
 800340c:	601a      	str	r2, [r3, #0]
 800340e:	e002      	b.n	8003416 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2200      	movs	r2, #0
 8003414:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8003416:	4a04      	ldr	r2, [pc, #16]	; (8003428 <prvSampleTimeNow+0x3c>)
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800341c:	68fb      	ldr	r3, [r7, #12]
}
 800341e:	4618      	mov	r0, r3
 8003420:	3710      	adds	r7, #16
 8003422:	46bd      	mov	sp, r7
 8003424:	bd80      	pop	{r7, pc}
 8003426:	bf00      	nop
 8003428:	20000c84 	.word	0x20000c84

0800342c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800342c:	b580      	push	{r7, lr}
 800342e:	b086      	sub	sp, #24
 8003430:	af00      	add	r7, sp, #0
 8003432:	60f8      	str	r0, [r7, #12]
 8003434:	60b9      	str	r1, [r7, #8]
 8003436:	607a      	str	r2, [r7, #4]
 8003438:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800343a:	2300      	movs	r3, #0
 800343c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	68ba      	ldr	r2, [r7, #8]
 8003442:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	68fa      	ldr	r2, [r7, #12]
 8003448:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800344a:	68ba      	ldr	r2, [r7, #8]
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	429a      	cmp	r2, r3
 8003450:	d812      	bhi.n	8003478 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003452:	687a      	ldr	r2, [r7, #4]
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	1ad2      	subs	r2, r2, r3
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	699b      	ldr	r3, [r3, #24]
 800345c:	429a      	cmp	r2, r3
 800345e:	d302      	bcc.n	8003466 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8003460:	2301      	movs	r3, #1
 8003462:	617b      	str	r3, [r7, #20]
 8003464:	e01b      	b.n	800349e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8003466:	4b10      	ldr	r3, [pc, #64]	; (80034a8 <prvInsertTimerInActiveList+0x7c>)
 8003468:	681a      	ldr	r2, [r3, #0]
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	3304      	adds	r3, #4
 800346e:	4619      	mov	r1, r3
 8003470:	4610      	mov	r0, r2
 8003472:	f7fe f9d6 	bl	8001822 <vListInsert>
 8003476:	e012      	b.n	800349e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003478:	687a      	ldr	r2, [r7, #4]
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	429a      	cmp	r2, r3
 800347e:	d206      	bcs.n	800348e <prvInsertTimerInActiveList+0x62>
 8003480:	68ba      	ldr	r2, [r7, #8]
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	429a      	cmp	r2, r3
 8003486:	d302      	bcc.n	800348e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8003488:	2301      	movs	r3, #1
 800348a:	617b      	str	r3, [r7, #20]
 800348c:	e007      	b.n	800349e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800348e:	4b07      	ldr	r3, [pc, #28]	; (80034ac <prvInsertTimerInActiveList+0x80>)
 8003490:	681a      	ldr	r2, [r3, #0]
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	3304      	adds	r3, #4
 8003496:	4619      	mov	r1, r3
 8003498:	4610      	mov	r0, r2
 800349a:	f7fe f9c2 	bl	8001822 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800349e:	697b      	ldr	r3, [r7, #20]
}
 80034a0:	4618      	mov	r0, r3
 80034a2:	3718      	adds	r7, #24
 80034a4:	46bd      	mov	sp, r7
 80034a6:	bd80      	pop	{r7, pc}
 80034a8:	20000c78 	.word	0x20000c78
 80034ac:	20000c74 	.word	0x20000c74

080034b0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b08e      	sub	sp, #56	; 0x38
 80034b4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80034b6:	e099      	b.n	80035ec <prvProcessReceivedCommands+0x13c>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	da17      	bge.n	80034ee <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80034be:	1d3b      	adds	r3, r7, #4
 80034c0:	3304      	adds	r3, #4
 80034c2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80034c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d109      	bne.n	80034de <prvProcessReceivedCommands+0x2e>
 80034ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034ce:	f383 8811 	msr	BASEPRI, r3
 80034d2:	f3bf 8f6f 	isb	sy
 80034d6:	f3bf 8f4f 	dsb	sy
 80034da:	61fb      	str	r3, [r7, #28]
 80034dc:	e7fe      	b.n	80034dc <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80034de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80034e4:	6850      	ldr	r0, [r2, #4]
 80034e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80034e8:	6892      	ldr	r2, [r2, #8]
 80034ea:	4611      	mov	r1, r2
 80034ec:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	db7a      	blt.n	80035ea <prvProcessReceivedCommands+0x13a>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80034f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034fa:	695b      	ldr	r3, [r3, #20]
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d004      	beq.n	800350a <prvProcessReceivedCommands+0x5a>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003500:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003502:	3304      	adds	r3, #4
 8003504:	4618      	mov	r0, r3
 8003506:	f7fe f9c5 	bl	8001894 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800350a:	463b      	mov	r3, r7
 800350c:	4618      	mov	r0, r3
 800350e:	f7ff ff6d 	bl	80033ec <prvSampleTimeNow>
 8003512:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2b09      	cmp	r3, #9
 8003518:	d868      	bhi.n	80035ec <prvProcessReceivedCommands+0x13c>
 800351a:	a201      	add	r2, pc, #4	; (adr r2, 8003520 <prvProcessReceivedCommands+0x70>)
 800351c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003520:	08003549 	.word	0x08003549
 8003524:	08003549 	.word	0x08003549
 8003528:	08003549 	.word	0x08003549
 800352c:	080035ed 	.word	0x080035ed
 8003530:	080035a3 	.word	0x080035a3
 8003534:	080035d9 	.word	0x080035d9
 8003538:	08003549 	.word	0x08003549
 800353c:	08003549 	.word	0x08003549
 8003540:	080035ed 	.word	0x080035ed
 8003544:	080035a3 	.word	0x080035a3
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8003548:	68ba      	ldr	r2, [r7, #8]
 800354a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800354c:	699b      	ldr	r3, [r3, #24]
 800354e:	18d1      	adds	r1, r2, r3
 8003550:	68bb      	ldr	r3, [r7, #8]
 8003552:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003554:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003556:	f7ff ff69 	bl	800342c <prvInsertTimerInActiveList>
 800355a:	4603      	mov	r3, r0
 800355c:	2b00      	cmp	r3, #0
 800355e:	d045      	beq.n	80035ec <prvProcessReceivedCommands+0x13c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003560:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003564:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003566:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8003568:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800356a:	69db      	ldr	r3, [r3, #28]
 800356c:	2b01      	cmp	r3, #1
 800356e:	d13d      	bne.n	80035ec <prvProcessReceivedCommands+0x13c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8003570:	68ba      	ldr	r2, [r7, #8]
 8003572:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003574:	699b      	ldr	r3, [r3, #24]
 8003576:	441a      	add	r2, r3
 8003578:	2300      	movs	r3, #0
 800357a:	9300      	str	r3, [sp, #0]
 800357c:	2300      	movs	r3, #0
 800357e:	2100      	movs	r1, #0
 8003580:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003582:	f7ff fe23 	bl	80031cc <xTimerGenericCommand>
 8003586:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8003588:	6a3b      	ldr	r3, [r7, #32]
 800358a:	2b00      	cmp	r3, #0
 800358c:	d12e      	bne.n	80035ec <prvProcessReceivedCommands+0x13c>
 800358e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003592:	f383 8811 	msr	BASEPRI, r3
 8003596:	f3bf 8f6f 	isb	sy
 800359a:	f3bf 8f4f 	dsb	sy
 800359e:	61bb      	str	r3, [r7, #24]
 80035a0:	e7fe      	b.n	80035a0 <prvProcessReceivedCommands+0xf0>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80035a2:	68ba      	ldr	r2, [r7, #8]
 80035a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035a6:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80035a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035aa:	699b      	ldr	r3, [r3, #24]
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d109      	bne.n	80035c4 <prvProcessReceivedCommands+0x114>
 80035b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035b4:	f383 8811 	msr	BASEPRI, r3
 80035b8:	f3bf 8f6f 	isb	sy
 80035bc:	f3bf 8f4f 	dsb	sy
 80035c0:	617b      	str	r3, [r7, #20]
 80035c2:	e7fe      	b.n	80035c2 <prvProcessReceivedCommands+0x112>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80035c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035c6:	699a      	ldr	r2, [r3, #24]
 80035c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ca:	18d1      	adds	r1, r2, r3
 80035cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80035d2:	f7ff ff2b 	bl	800342c <prvInsertTimerInActiveList>
					break;
 80035d6:	e009      	b.n	80035ec <prvProcessReceivedCommands+0x13c>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80035d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035da:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d104      	bne.n	80035ec <prvProcessReceivedCommands+0x13c>
						{
							vPortFree( pxTimer );
 80035e2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80035e4:	f000 fbb6 	bl	8003d54 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80035e8:	e000      	b.n	80035ec <prvProcessReceivedCommands+0x13c>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80035ea:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80035ec:	4b07      	ldr	r3, [pc, #28]	; (800360c <prvProcessReceivedCommands+0x15c>)
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	1d39      	adds	r1, r7, #4
 80035f2:	2200      	movs	r2, #0
 80035f4:	4618      	mov	r0, r3
 80035f6:	f7fe fc71 	bl	8001edc <xQueueReceive>
 80035fa:	4603      	mov	r3, r0
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	f47f af5b 	bne.w	80034b8 <prvProcessReceivedCommands+0x8>
	}
}
 8003602:	bf00      	nop
 8003604:	3730      	adds	r7, #48	; 0x30
 8003606:	46bd      	mov	sp, r7
 8003608:	bd80      	pop	{r7, pc}
 800360a:	bf00      	nop
 800360c:	20000c7c 	.word	0x20000c7c

08003610 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8003610:	b580      	push	{r7, lr}
 8003612:	b088      	sub	sp, #32
 8003614:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003616:	e044      	b.n	80036a2 <prvSwitchTimerLists+0x92>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003618:	4b2b      	ldr	r3, [pc, #172]	; (80036c8 <prvSwitchTimerLists+0xb8>)
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	68db      	ldr	r3, [r3, #12]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003622:	4b29      	ldr	r3, [pc, #164]	; (80036c8 <prvSwitchTimerLists+0xb8>)
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	68db      	ldr	r3, [r3, #12]
 8003628:	68db      	ldr	r3, [r3, #12]
 800362a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	3304      	adds	r3, #4
 8003630:	4618      	mov	r0, r3
 8003632:	f7fe f92f 	bl	8001894 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800363a:	68f8      	ldr	r0, [r7, #12]
 800363c:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	69db      	ldr	r3, [r3, #28]
 8003642:	2b01      	cmp	r3, #1
 8003644:	d12d      	bne.n	80036a2 <prvSwitchTimerLists+0x92>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	699b      	ldr	r3, [r3, #24]
 800364a:	693a      	ldr	r2, [r7, #16]
 800364c:	4413      	add	r3, r2
 800364e:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8003650:	68ba      	ldr	r2, [r7, #8]
 8003652:	693b      	ldr	r3, [r7, #16]
 8003654:	429a      	cmp	r2, r3
 8003656:	d90e      	bls.n	8003676 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	68ba      	ldr	r2, [r7, #8]
 800365c:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	68fa      	ldr	r2, [r7, #12]
 8003662:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003664:	4b18      	ldr	r3, [pc, #96]	; (80036c8 <prvSwitchTimerLists+0xb8>)
 8003666:	681a      	ldr	r2, [r3, #0]
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	3304      	adds	r3, #4
 800366c:	4619      	mov	r1, r3
 800366e:	4610      	mov	r0, r2
 8003670:	f7fe f8d7 	bl	8001822 <vListInsert>
 8003674:	e015      	b.n	80036a2 <prvSwitchTimerLists+0x92>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003676:	2300      	movs	r3, #0
 8003678:	9300      	str	r3, [sp, #0]
 800367a:	2300      	movs	r3, #0
 800367c:	693a      	ldr	r2, [r7, #16]
 800367e:	2100      	movs	r1, #0
 8003680:	68f8      	ldr	r0, [r7, #12]
 8003682:	f7ff fda3 	bl	80031cc <xTimerGenericCommand>
 8003686:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2b00      	cmp	r3, #0
 800368c:	d109      	bne.n	80036a2 <prvSwitchTimerLists+0x92>
 800368e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003692:	f383 8811 	msr	BASEPRI, r3
 8003696:	f3bf 8f6f 	isb	sy
 800369a:	f3bf 8f4f 	dsb	sy
 800369e:	603b      	str	r3, [r7, #0]
 80036a0:	e7fe      	b.n	80036a0 <prvSwitchTimerLists+0x90>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80036a2:	4b09      	ldr	r3, [pc, #36]	; (80036c8 <prvSwitchTimerLists+0xb8>)
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d1b5      	bne.n	8003618 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80036ac:	4b06      	ldr	r3, [pc, #24]	; (80036c8 <prvSwitchTimerLists+0xb8>)
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80036b2:	4b06      	ldr	r3, [pc, #24]	; (80036cc <prvSwitchTimerLists+0xbc>)
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	4a04      	ldr	r2, [pc, #16]	; (80036c8 <prvSwitchTimerLists+0xb8>)
 80036b8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80036ba:	4a04      	ldr	r2, [pc, #16]	; (80036cc <prvSwitchTimerLists+0xbc>)
 80036bc:	697b      	ldr	r3, [r7, #20]
 80036be:	6013      	str	r3, [r2, #0]
}
 80036c0:	bf00      	nop
 80036c2:	3718      	adds	r7, #24
 80036c4:	46bd      	mov	sp, r7
 80036c6:	bd80      	pop	{r7, pc}
 80036c8:	20000c74 	.word	0x20000c74
 80036cc:	20000c78 	.word	0x20000c78

080036d0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b082      	sub	sp, #8
 80036d4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80036d6:	f000 f961 	bl	800399c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80036da:	4b15      	ldr	r3, [pc, #84]	; (8003730 <prvCheckForValidListAndQueue+0x60>)
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d120      	bne.n	8003724 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80036e2:	4814      	ldr	r0, [pc, #80]	; (8003734 <prvCheckForValidListAndQueue+0x64>)
 80036e4:	f7fe f84c 	bl	8001780 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80036e8:	4813      	ldr	r0, [pc, #76]	; (8003738 <prvCheckForValidListAndQueue+0x68>)
 80036ea:	f7fe f849 	bl	8001780 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80036ee:	4b13      	ldr	r3, [pc, #76]	; (800373c <prvCheckForValidListAndQueue+0x6c>)
 80036f0:	4a10      	ldr	r2, [pc, #64]	; (8003734 <prvCheckForValidListAndQueue+0x64>)
 80036f2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80036f4:	4b12      	ldr	r3, [pc, #72]	; (8003740 <prvCheckForValidListAndQueue+0x70>)
 80036f6:	4a10      	ldr	r2, [pc, #64]	; (8003738 <prvCheckForValidListAndQueue+0x68>)
 80036f8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80036fa:	2300      	movs	r3, #0
 80036fc:	9300      	str	r3, [sp, #0]
 80036fe:	4b11      	ldr	r3, [pc, #68]	; (8003744 <prvCheckForValidListAndQueue+0x74>)
 8003700:	4a11      	ldr	r2, [pc, #68]	; (8003748 <prvCheckForValidListAndQueue+0x78>)
 8003702:	2110      	movs	r1, #16
 8003704:	200a      	movs	r0, #10
 8003706:	f7fe f957 	bl	80019b8 <xQueueGenericCreateStatic>
 800370a:	4602      	mov	r2, r0
 800370c:	4b08      	ldr	r3, [pc, #32]	; (8003730 <prvCheckForValidListAndQueue+0x60>)
 800370e:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8003710:	4b07      	ldr	r3, [pc, #28]	; (8003730 <prvCheckForValidListAndQueue+0x60>)
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	2b00      	cmp	r3, #0
 8003716:	d005      	beq.n	8003724 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8003718:	4b05      	ldr	r3, [pc, #20]	; (8003730 <prvCheckForValidListAndQueue+0x60>)
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	490b      	ldr	r1, [pc, #44]	; (800374c <prvCheckForValidListAndQueue+0x7c>)
 800371e:	4618      	mov	r0, r3
 8003720:	f7fe fdc8 	bl	80022b4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003724:	f000 f968 	bl	80039f8 <vPortExitCritical>
}
 8003728:	bf00      	nop
 800372a:	46bd      	mov	sp, r7
 800372c:	bd80      	pop	{r7, pc}
 800372e:	bf00      	nop
 8003730:	20000c7c 	.word	0x20000c7c
 8003734:	20000c4c 	.word	0x20000c4c
 8003738:	20000c60 	.word	0x20000c60
 800373c:	20000c74 	.word	0x20000c74
 8003740:	20000c78 	.word	0x20000c78
 8003744:	20000d28 	.word	0x20000d28
 8003748:	20000c88 	.word	0x20000c88
 800374c:	080045d0 	.word	0x080045d0

08003750 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8003750:	b480      	push	{r7}
 8003752:	b085      	sub	sp, #20
 8003754:	af00      	add	r7, sp, #0
 8003756:	60f8      	str	r0, [r7, #12]
 8003758:	60b9      	str	r1, [r7, #8]
 800375a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	3b04      	subs	r3, #4
 8003760:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003768:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	3b04      	subs	r3, #4
 800376e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003770:	68bb      	ldr	r3, [r7, #8]
 8003772:	f023 0201 	bic.w	r2, r3, #1
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	3b04      	subs	r3, #4
 800377e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003780:	4a0c      	ldr	r2, [pc, #48]	; (80037b4 <pxPortInitialiseStack+0x64>)
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	3b14      	subs	r3, #20
 800378a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800378c:	687a      	ldr	r2, [r7, #4]
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	3b04      	subs	r3, #4
 8003796:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	f06f 0202 	mvn.w	r2, #2
 800379e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	3b20      	subs	r3, #32
 80037a4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80037a6:	68fb      	ldr	r3, [r7, #12]
}
 80037a8:	4618      	mov	r0, r3
 80037aa:	3714      	adds	r7, #20
 80037ac:	46bd      	mov	sp, r7
 80037ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b2:	4770      	bx	lr
 80037b4:	080037b9 	.word	0x080037b9

080037b8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80037b8:	b480      	push	{r7}
 80037ba:	b085      	sub	sp, #20
 80037bc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80037be:	2300      	movs	r3, #0
 80037c0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80037c2:	4b11      	ldr	r3, [pc, #68]	; (8003808 <prvTaskExitError+0x50>)
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037ca:	d009      	beq.n	80037e0 <prvTaskExitError+0x28>
 80037cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037d0:	f383 8811 	msr	BASEPRI, r3
 80037d4:	f3bf 8f6f 	isb	sy
 80037d8:	f3bf 8f4f 	dsb	sy
 80037dc:	60fb      	str	r3, [r7, #12]
 80037de:	e7fe      	b.n	80037de <prvTaskExitError+0x26>
 80037e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037e4:	f383 8811 	msr	BASEPRI, r3
 80037e8:	f3bf 8f6f 	isb	sy
 80037ec:	f3bf 8f4f 	dsb	sy
 80037f0:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80037f2:	bf00      	nop
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d0fc      	beq.n	80037f4 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80037fa:	bf00      	nop
 80037fc:	3714      	adds	r7, #20
 80037fe:	46bd      	mov	sp, r7
 8003800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003804:	4770      	bx	lr
 8003806:	bf00      	nop
 8003808:	20000008 	.word	0x20000008
 800380c:	00000000 	.word	0x00000000

08003810 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003810:	4b07      	ldr	r3, [pc, #28]	; (8003830 <pxCurrentTCBConst2>)
 8003812:	6819      	ldr	r1, [r3, #0]
 8003814:	6808      	ldr	r0, [r1, #0]
 8003816:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800381a:	f380 8809 	msr	PSP, r0
 800381e:	f3bf 8f6f 	isb	sy
 8003822:	f04f 0000 	mov.w	r0, #0
 8003826:	f380 8811 	msr	BASEPRI, r0
 800382a:	4770      	bx	lr
 800382c:	f3af 8000 	nop.w

08003830 <pxCurrentTCBConst2>:
 8003830:	2000074c 	.word	0x2000074c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8003834:	bf00      	nop
 8003836:	bf00      	nop

08003838 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8003838:	4808      	ldr	r0, [pc, #32]	; (800385c <prvPortStartFirstTask+0x24>)
 800383a:	6800      	ldr	r0, [r0, #0]
 800383c:	6800      	ldr	r0, [r0, #0]
 800383e:	f380 8808 	msr	MSP, r0
 8003842:	f04f 0000 	mov.w	r0, #0
 8003846:	f380 8814 	msr	CONTROL, r0
 800384a:	b662      	cpsie	i
 800384c:	b661      	cpsie	f
 800384e:	f3bf 8f4f 	dsb	sy
 8003852:	f3bf 8f6f 	isb	sy
 8003856:	df00      	svc	0
 8003858:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800385a:	bf00      	nop
 800385c:	e000ed08 	.word	0xe000ed08

08003860 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b086      	sub	sp, #24
 8003864:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003866:	4b44      	ldr	r3, [pc, #272]	; (8003978 <xPortStartScheduler+0x118>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	4a44      	ldr	r2, [pc, #272]	; (800397c <xPortStartScheduler+0x11c>)
 800386c:	4293      	cmp	r3, r2
 800386e:	d109      	bne.n	8003884 <xPortStartScheduler+0x24>
 8003870:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003874:	f383 8811 	msr	BASEPRI, r3
 8003878:	f3bf 8f6f 	isb	sy
 800387c:	f3bf 8f4f 	dsb	sy
 8003880:	613b      	str	r3, [r7, #16]
 8003882:	e7fe      	b.n	8003882 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003884:	4b3c      	ldr	r3, [pc, #240]	; (8003978 <xPortStartScheduler+0x118>)
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	4a3d      	ldr	r2, [pc, #244]	; (8003980 <xPortStartScheduler+0x120>)
 800388a:	4293      	cmp	r3, r2
 800388c:	d109      	bne.n	80038a2 <xPortStartScheduler+0x42>
 800388e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003892:	f383 8811 	msr	BASEPRI, r3
 8003896:	f3bf 8f6f 	isb	sy
 800389a:	f3bf 8f4f 	dsb	sy
 800389e:	60fb      	str	r3, [r7, #12]
 80038a0:	e7fe      	b.n	80038a0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80038a2:	4b38      	ldr	r3, [pc, #224]	; (8003984 <xPortStartScheduler+0x124>)
 80038a4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80038a6:	697b      	ldr	r3, [r7, #20]
 80038a8:	781b      	ldrb	r3, [r3, #0]
 80038aa:	b2db      	uxtb	r3, r3
 80038ac:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80038ae:	697b      	ldr	r3, [r7, #20]
 80038b0:	22ff      	movs	r2, #255	; 0xff
 80038b2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80038b4:	697b      	ldr	r3, [r7, #20]
 80038b6:	781b      	ldrb	r3, [r3, #0]
 80038b8:	b2db      	uxtb	r3, r3
 80038ba:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80038bc:	78fb      	ldrb	r3, [r7, #3]
 80038be:	b2db      	uxtb	r3, r3
 80038c0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80038c4:	b2da      	uxtb	r2, r3
 80038c6:	4b30      	ldr	r3, [pc, #192]	; (8003988 <xPortStartScheduler+0x128>)
 80038c8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80038ca:	4b30      	ldr	r3, [pc, #192]	; (800398c <xPortStartScheduler+0x12c>)
 80038cc:	2207      	movs	r2, #7
 80038ce:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80038d0:	e009      	b.n	80038e6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 80038d2:	4b2e      	ldr	r3, [pc, #184]	; (800398c <xPortStartScheduler+0x12c>)
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	3b01      	subs	r3, #1
 80038d8:	4a2c      	ldr	r2, [pc, #176]	; (800398c <xPortStartScheduler+0x12c>)
 80038da:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80038dc:	78fb      	ldrb	r3, [r7, #3]
 80038de:	b2db      	uxtb	r3, r3
 80038e0:	005b      	lsls	r3, r3, #1
 80038e2:	b2db      	uxtb	r3, r3
 80038e4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80038e6:	78fb      	ldrb	r3, [r7, #3]
 80038e8:	b2db      	uxtb	r3, r3
 80038ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038ee:	2b80      	cmp	r3, #128	; 0x80
 80038f0:	d0ef      	beq.n	80038d2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80038f2:	4b26      	ldr	r3, [pc, #152]	; (800398c <xPortStartScheduler+0x12c>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f1c3 0307 	rsb	r3, r3, #7
 80038fa:	2b04      	cmp	r3, #4
 80038fc:	d009      	beq.n	8003912 <xPortStartScheduler+0xb2>
 80038fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003902:	f383 8811 	msr	BASEPRI, r3
 8003906:	f3bf 8f6f 	isb	sy
 800390a:	f3bf 8f4f 	dsb	sy
 800390e:	60bb      	str	r3, [r7, #8]
 8003910:	e7fe      	b.n	8003910 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003912:	4b1e      	ldr	r3, [pc, #120]	; (800398c <xPortStartScheduler+0x12c>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	021b      	lsls	r3, r3, #8
 8003918:	4a1c      	ldr	r2, [pc, #112]	; (800398c <xPortStartScheduler+0x12c>)
 800391a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800391c:	4b1b      	ldr	r3, [pc, #108]	; (800398c <xPortStartScheduler+0x12c>)
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003924:	4a19      	ldr	r2, [pc, #100]	; (800398c <xPortStartScheduler+0x12c>)
 8003926:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	b2da      	uxtb	r2, r3
 800392c:	697b      	ldr	r3, [r7, #20]
 800392e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8003930:	4b17      	ldr	r3, [pc, #92]	; (8003990 <xPortStartScheduler+0x130>)
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	4a16      	ldr	r2, [pc, #88]	; (8003990 <xPortStartScheduler+0x130>)
 8003936:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800393a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800393c:	4b14      	ldr	r3, [pc, #80]	; (8003990 <xPortStartScheduler+0x130>)
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	4a13      	ldr	r2, [pc, #76]	; (8003990 <xPortStartScheduler+0x130>)
 8003942:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8003946:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8003948:	f000 f8d6 	bl	8003af8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800394c:	4b11      	ldr	r3, [pc, #68]	; (8003994 <xPortStartScheduler+0x134>)
 800394e:	2200      	movs	r2, #0
 8003950:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8003952:	f000 f8f5 	bl	8003b40 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8003956:	4b10      	ldr	r3, [pc, #64]	; (8003998 <xPortStartScheduler+0x138>)
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	4a0f      	ldr	r2, [pc, #60]	; (8003998 <xPortStartScheduler+0x138>)
 800395c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8003960:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8003962:	f7ff ff69 	bl	8003838 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8003966:	f7ff f8a5 	bl	8002ab4 <vTaskSwitchContext>
	prvTaskExitError();
 800396a:	f7ff ff25 	bl	80037b8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800396e:	2300      	movs	r3, #0
}
 8003970:	4618      	mov	r0, r3
 8003972:	3718      	adds	r7, #24
 8003974:	46bd      	mov	sp, r7
 8003976:	bd80      	pop	{r7, pc}
 8003978:	e000ed00 	.word	0xe000ed00
 800397c:	410fc271 	.word	0x410fc271
 8003980:	410fc270 	.word	0x410fc270
 8003984:	e000e400 	.word	0xe000e400
 8003988:	20000d78 	.word	0x20000d78
 800398c:	20000d7c 	.word	0x20000d7c
 8003990:	e000ed20 	.word	0xe000ed20
 8003994:	20000008 	.word	0x20000008
 8003998:	e000ef34 	.word	0xe000ef34

0800399c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800399c:	b480      	push	{r7}
 800399e:	b083      	sub	sp, #12
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039a6:	f383 8811 	msr	BASEPRI, r3
 80039aa:	f3bf 8f6f 	isb	sy
 80039ae:	f3bf 8f4f 	dsb	sy
 80039b2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80039b4:	4b0e      	ldr	r3, [pc, #56]	; (80039f0 <vPortEnterCritical+0x54>)
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	3301      	adds	r3, #1
 80039ba:	4a0d      	ldr	r2, [pc, #52]	; (80039f0 <vPortEnterCritical+0x54>)
 80039bc:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80039be:	4b0c      	ldr	r3, [pc, #48]	; (80039f0 <vPortEnterCritical+0x54>)
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	2b01      	cmp	r3, #1
 80039c4:	d10e      	bne.n	80039e4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80039c6:	4b0b      	ldr	r3, [pc, #44]	; (80039f4 <vPortEnterCritical+0x58>)
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	b2db      	uxtb	r3, r3
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d009      	beq.n	80039e4 <vPortEnterCritical+0x48>
 80039d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039d4:	f383 8811 	msr	BASEPRI, r3
 80039d8:	f3bf 8f6f 	isb	sy
 80039dc:	f3bf 8f4f 	dsb	sy
 80039e0:	603b      	str	r3, [r7, #0]
 80039e2:	e7fe      	b.n	80039e2 <vPortEnterCritical+0x46>
	}
}
 80039e4:	bf00      	nop
 80039e6:	370c      	adds	r7, #12
 80039e8:	46bd      	mov	sp, r7
 80039ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ee:	4770      	bx	lr
 80039f0:	20000008 	.word	0x20000008
 80039f4:	e000ed04 	.word	0xe000ed04

080039f8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80039f8:	b480      	push	{r7}
 80039fa:	b083      	sub	sp, #12
 80039fc:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80039fe:	4b11      	ldr	r3, [pc, #68]	; (8003a44 <vPortExitCritical+0x4c>)
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d109      	bne.n	8003a1a <vPortExitCritical+0x22>
 8003a06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a0a:	f383 8811 	msr	BASEPRI, r3
 8003a0e:	f3bf 8f6f 	isb	sy
 8003a12:	f3bf 8f4f 	dsb	sy
 8003a16:	607b      	str	r3, [r7, #4]
 8003a18:	e7fe      	b.n	8003a18 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8003a1a:	4b0a      	ldr	r3, [pc, #40]	; (8003a44 <vPortExitCritical+0x4c>)
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	3b01      	subs	r3, #1
 8003a20:	4a08      	ldr	r2, [pc, #32]	; (8003a44 <vPortExitCritical+0x4c>)
 8003a22:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8003a24:	4b07      	ldr	r3, [pc, #28]	; (8003a44 <vPortExitCritical+0x4c>)
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d104      	bne.n	8003a36 <vPortExitCritical+0x3e>
 8003a2c:	2300      	movs	r3, #0
 8003a2e:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003a30:	683b      	ldr	r3, [r7, #0]
 8003a32:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8003a36:	bf00      	nop
 8003a38:	370c      	adds	r7, #12
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a40:	4770      	bx	lr
 8003a42:	bf00      	nop
 8003a44:	20000008 	.word	0x20000008
	...

08003a50 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003a50:	f3ef 8009 	mrs	r0, PSP
 8003a54:	f3bf 8f6f 	isb	sy
 8003a58:	4b15      	ldr	r3, [pc, #84]	; (8003ab0 <pxCurrentTCBConst>)
 8003a5a:	681a      	ldr	r2, [r3, #0]
 8003a5c:	f01e 0f10 	tst.w	lr, #16
 8003a60:	bf08      	it	eq
 8003a62:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003a66:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a6a:	6010      	str	r0, [r2, #0]
 8003a6c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003a70:	f04f 0050 	mov.w	r0, #80	; 0x50
 8003a74:	f380 8811 	msr	BASEPRI, r0
 8003a78:	f3bf 8f4f 	dsb	sy
 8003a7c:	f3bf 8f6f 	isb	sy
 8003a80:	f7ff f818 	bl	8002ab4 <vTaskSwitchContext>
 8003a84:	f04f 0000 	mov.w	r0, #0
 8003a88:	f380 8811 	msr	BASEPRI, r0
 8003a8c:	bc09      	pop	{r0, r3}
 8003a8e:	6819      	ldr	r1, [r3, #0]
 8003a90:	6808      	ldr	r0, [r1, #0]
 8003a92:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a96:	f01e 0f10 	tst.w	lr, #16
 8003a9a:	bf08      	it	eq
 8003a9c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003aa0:	f380 8809 	msr	PSP, r0
 8003aa4:	f3bf 8f6f 	isb	sy
 8003aa8:	4770      	bx	lr
 8003aaa:	bf00      	nop
 8003aac:	f3af 8000 	nop.w

08003ab0 <pxCurrentTCBConst>:
 8003ab0:	2000074c 	.word	0x2000074c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8003ab4:	bf00      	nop
 8003ab6:	bf00      	nop

08003ab8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	b082      	sub	sp, #8
 8003abc:	af00      	add	r7, sp, #0
	__asm volatile
 8003abe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ac2:	f383 8811 	msr	BASEPRI, r3
 8003ac6:	f3bf 8f6f 	isb	sy
 8003aca:	f3bf 8f4f 	dsb	sy
 8003ace:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8003ad0:	f7fe ff32 	bl	8002938 <xTaskIncrementTick>
 8003ad4:	4603      	mov	r3, r0
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d003      	beq.n	8003ae2 <xPortSysTickHandler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003ada:	4b06      	ldr	r3, [pc, #24]	; (8003af4 <xPortSysTickHandler+0x3c>)
 8003adc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ae0:	601a      	str	r2, [r3, #0]
 8003ae2:	2300      	movs	r3, #0
 8003ae4:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8003aec:	bf00      	nop
 8003aee:	3708      	adds	r7, #8
 8003af0:	46bd      	mov	sp, r7
 8003af2:	bd80      	pop	{r7, pc}
 8003af4:	e000ed04 	.word	0xe000ed04

08003af8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8003af8:	b480      	push	{r7}
 8003afa:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003afc:	4b0b      	ldr	r3, [pc, #44]	; (8003b2c <vPortSetupTimerInterrupt+0x34>)
 8003afe:	2200      	movs	r2, #0
 8003b00:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003b02:	4b0b      	ldr	r3, [pc, #44]	; (8003b30 <vPortSetupTimerInterrupt+0x38>)
 8003b04:	2200      	movs	r2, #0
 8003b06:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003b08:	4b0a      	ldr	r3, [pc, #40]	; (8003b34 <vPortSetupTimerInterrupt+0x3c>)
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	4a0a      	ldr	r2, [pc, #40]	; (8003b38 <vPortSetupTimerInterrupt+0x40>)
 8003b0e:	fba2 2303 	umull	r2, r3, r2, r3
 8003b12:	099b      	lsrs	r3, r3, #6
 8003b14:	4a09      	ldr	r2, [pc, #36]	; (8003b3c <vPortSetupTimerInterrupt+0x44>)
 8003b16:	3b01      	subs	r3, #1
 8003b18:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8003b1a:	4b04      	ldr	r3, [pc, #16]	; (8003b2c <vPortSetupTimerInterrupt+0x34>)
 8003b1c:	2207      	movs	r2, #7
 8003b1e:	601a      	str	r2, [r3, #0]
}
 8003b20:	bf00      	nop
 8003b22:	46bd      	mov	sp, r7
 8003b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b28:	4770      	bx	lr
 8003b2a:	bf00      	nop
 8003b2c:	e000e010 	.word	0xe000e010
 8003b30:	e000e018 	.word	0xe000e018
 8003b34:	2000000c 	.word	0x2000000c
 8003b38:	10624dd3 	.word	0x10624dd3
 8003b3c:	e000e014 	.word	0xe000e014

08003b40 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8003b40:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8003b50 <vPortEnableVFP+0x10>
 8003b44:	6801      	ldr	r1, [r0, #0]
 8003b46:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8003b4a:	6001      	str	r1, [r0, #0]
 8003b4c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8003b4e:	bf00      	nop
 8003b50:	e000ed88 	.word	0xe000ed88

08003b54 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8003b54:	b480      	push	{r7}
 8003b56:	b085      	sub	sp, #20
 8003b58:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8003b5a:	f3ef 8305 	mrs	r3, IPSR
 8003b5e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	2b0f      	cmp	r3, #15
 8003b64:	d913      	bls.n	8003b8e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8003b66:	4a16      	ldr	r2, [pc, #88]	; (8003bc0 <vPortValidateInterruptPriority+0x6c>)
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	4413      	add	r3, r2
 8003b6c:	781b      	ldrb	r3, [r3, #0]
 8003b6e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8003b70:	4b14      	ldr	r3, [pc, #80]	; (8003bc4 <vPortValidateInterruptPriority+0x70>)
 8003b72:	781b      	ldrb	r3, [r3, #0]
 8003b74:	7afa      	ldrb	r2, [r7, #11]
 8003b76:	429a      	cmp	r2, r3
 8003b78:	d209      	bcs.n	8003b8e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8003b7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b7e:	f383 8811 	msr	BASEPRI, r3
 8003b82:	f3bf 8f6f 	isb	sy
 8003b86:	f3bf 8f4f 	dsb	sy
 8003b8a:	607b      	str	r3, [r7, #4]
 8003b8c:	e7fe      	b.n	8003b8c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8003b8e:	4b0e      	ldr	r3, [pc, #56]	; (8003bc8 <vPortValidateInterruptPriority+0x74>)
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003b96:	4b0d      	ldr	r3, [pc, #52]	; (8003bcc <vPortValidateInterruptPriority+0x78>)
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	429a      	cmp	r2, r3
 8003b9c:	d909      	bls.n	8003bb2 <vPortValidateInterruptPriority+0x5e>
 8003b9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ba2:	f383 8811 	msr	BASEPRI, r3
 8003ba6:	f3bf 8f6f 	isb	sy
 8003baa:	f3bf 8f4f 	dsb	sy
 8003bae:	603b      	str	r3, [r7, #0]
 8003bb0:	e7fe      	b.n	8003bb0 <vPortValidateInterruptPriority+0x5c>
	}
 8003bb2:	bf00      	nop
 8003bb4:	3714      	adds	r7, #20
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bbc:	4770      	bx	lr
 8003bbe:	bf00      	nop
 8003bc0:	e000e3f0 	.word	0xe000e3f0
 8003bc4:	20000d78 	.word	0x20000d78
 8003bc8:	e000ed0c 	.word	0xe000ed0c
 8003bcc:	20000d7c 	.word	0x20000d7c

08003bd0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b08a      	sub	sp, #40	; 0x28
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8003bd8:	2300      	movs	r3, #0
 8003bda:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8003bdc:	f7fe fdf2 	bl	80027c4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8003be0:	4b57      	ldr	r3, [pc, #348]	; (8003d40 <pvPortMalloc+0x170>)
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d101      	bne.n	8003bec <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8003be8:	f000 f90c 	bl	8003e04 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003bec:	4b55      	ldr	r3, [pc, #340]	; (8003d44 <pvPortMalloc+0x174>)
 8003bee:	681a      	ldr	r2, [r3, #0]
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	4013      	ands	r3, r2
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	f040 808c 	bne.w	8003d12 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d01c      	beq.n	8003c3a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8003c00:	2208      	movs	r2, #8
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	4413      	add	r3, r2
 8003c06:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	f003 0307 	and.w	r3, r3, #7
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d013      	beq.n	8003c3a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	f023 0307 	bic.w	r3, r3, #7
 8003c18:	3308      	adds	r3, #8
 8003c1a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	f003 0307 	and.w	r3, r3, #7
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d009      	beq.n	8003c3a <pvPortMalloc+0x6a>
 8003c26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c2a:	f383 8811 	msr	BASEPRI, r3
 8003c2e:	f3bf 8f6f 	isb	sy
 8003c32:	f3bf 8f4f 	dsb	sy
 8003c36:	617b      	str	r3, [r7, #20]
 8003c38:	e7fe      	b.n	8003c38 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d068      	beq.n	8003d12 <pvPortMalloc+0x142>
 8003c40:	4b41      	ldr	r3, [pc, #260]	; (8003d48 <pvPortMalloc+0x178>)
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	687a      	ldr	r2, [r7, #4]
 8003c46:	429a      	cmp	r2, r3
 8003c48:	d863      	bhi.n	8003d12 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8003c4a:	4b40      	ldr	r3, [pc, #256]	; (8003d4c <pvPortMalloc+0x17c>)
 8003c4c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8003c4e:	4b3f      	ldr	r3, [pc, #252]	; (8003d4c <pvPortMalloc+0x17c>)
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003c54:	e004      	b.n	8003c60 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8003c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c58:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8003c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c62:	685b      	ldr	r3, [r3, #4]
 8003c64:	687a      	ldr	r2, [r7, #4]
 8003c66:	429a      	cmp	r2, r3
 8003c68:	d903      	bls.n	8003c72 <pvPortMalloc+0xa2>
 8003c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d1f1      	bne.n	8003c56 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8003c72:	4b33      	ldr	r3, [pc, #204]	; (8003d40 <pvPortMalloc+0x170>)
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c78:	429a      	cmp	r2, r3
 8003c7a:	d04a      	beq.n	8003d12 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003c7c:	6a3b      	ldr	r3, [r7, #32]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	2208      	movs	r2, #8
 8003c82:	4413      	add	r3, r2
 8003c84:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c88:	681a      	ldr	r2, [r3, #0]
 8003c8a:	6a3b      	ldr	r3, [r7, #32]
 8003c8c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c90:	685a      	ldr	r2, [r3, #4]
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	1ad2      	subs	r2, r2, r3
 8003c96:	2308      	movs	r3, #8
 8003c98:	005b      	lsls	r3, r3, #1
 8003c9a:	429a      	cmp	r2, r3
 8003c9c:	d91e      	bls.n	8003cdc <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003c9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	4413      	add	r3, r2
 8003ca4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003ca6:	69bb      	ldr	r3, [r7, #24]
 8003ca8:	f003 0307 	and.w	r3, r3, #7
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d009      	beq.n	8003cc4 <pvPortMalloc+0xf4>
 8003cb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cb4:	f383 8811 	msr	BASEPRI, r3
 8003cb8:	f3bf 8f6f 	isb	sy
 8003cbc:	f3bf 8f4f 	dsb	sy
 8003cc0:	613b      	str	r3, [r7, #16]
 8003cc2:	e7fe      	b.n	8003cc2 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cc6:	685a      	ldr	r2, [r3, #4]
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	1ad2      	subs	r2, r2, r3
 8003ccc:	69bb      	ldr	r3, [r7, #24]
 8003cce:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8003cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cd2:	687a      	ldr	r2, [r7, #4]
 8003cd4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8003cd6:	69b8      	ldr	r0, [r7, #24]
 8003cd8:	f000 f8f6 	bl	8003ec8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003cdc:	4b1a      	ldr	r3, [pc, #104]	; (8003d48 <pvPortMalloc+0x178>)
 8003cde:	681a      	ldr	r2, [r3, #0]
 8003ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ce2:	685b      	ldr	r3, [r3, #4]
 8003ce4:	1ad3      	subs	r3, r2, r3
 8003ce6:	4a18      	ldr	r2, [pc, #96]	; (8003d48 <pvPortMalloc+0x178>)
 8003ce8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003cea:	4b17      	ldr	r3, [pc, #92]	; (8003d48 <pvPortMalloc+0x178>)
 8003cec:	681a      	ldr	r2, [r3, #0]
 8003cee:	4b18      	ldr	r3, [pc, #96]	; (8003d50 <pvPortMalloc+0x180>)
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	429a      	cmp	r2, r3
 8003cf4:	d203      	bcs.n	8003cfe <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003cf6:	4b14      	ldr	r3, [pc, #80]	; (8003d48 <pvPortMalloc+0x178>)
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	4a15      	ldr	r2, [pc, #84]	; (8003d50 <pvPortMalloc+0x180>)
 8003cfc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d00:	685a      	ldr	r2, [r3, #4]
 8003d02:	4b10      	ldr	r3, [pc, #64]	; (8003d44 <pvPortMalloc+0x174>)
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	431a      	orrs	r2, r3
 8003d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d0a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8003d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d0e:	2200      	movs	r2, #0
 8003d10:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8003d12:	f7fe fd65 	bl	80027e0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003d16:	69fb      	ldr	r3, [r7, #28]
 8003d18:	f003 0307 	and.w	r3, r3, #7
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d009      	beq.n	8003d34 <pvPortMalloc+0x164>
 8003d20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d24:	f383 8811 	msr	BASEPRI, r3
 8003d28:	f3bf 8f6f 	isb	sy
 8003d2c:	f3bf 8f4f 	dsb	sy
 8003d30:	60fb      	str	r3, [r7, #12]
 8003d32:	e7fe      	b.n	8003d32 <pvPortMalloc+0x162>
	return pvReturn;
 8003d34:	69fb      	ldr	r3, [r7, #28]
}
 8003d36:	4618      	mov	r0, r3
 8003d38:	3728      	adds	r7, #40	; 0x28
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	bd80      	pop	{r7, pc}
 8003d3e:	bf00      	nop
 8003d40:	20001940 	.word	0x20001940
 8003d44:	2000194c 	.word	0x2000194c
 8003d48:	20001944 	.word	0x20001944
 8003d4c:	20001938 	.word	0x20001938
 8003d50:	20001948 	.word	0x20001948

08003d54 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	b086      	sub	sp, #24
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d046      	beq.n	8003df4 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8003d66:	2308      	movs	r3, #8
 8003d68:	425b      	negs	r3, r3
 8003d6a:	697a      	ldr	r2, [r7, #20]
 8003d6c:	4413      	add	r3, r2
 8003d6e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8003d70:	697b      	ldr	r3, [r7, #20]
 8003d72:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8003d74:	693b      	ldr	r3, [r7, #16]
 8003d76:	685a      	ldr	r2, [r3, #4]
 8003d78:	4b20      	ldr	r3, [pc, #128]	; (8003dfc <vPortFree+0xa8>)
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	4013      	ands	r3, r2
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d109      	bne.n	8003d96 <vPortFree+0x42>
 8003d82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d86:	f383 8811 	msr	BASEPRI, r3
 8003d8a:	f3bf 8f6f 	isb	sy
 8003d8e:	f3bf 8f4f 	dsb	sy
 8003d92:	60fb      	str	r3, [r7, #12]
 8003d94:	e7fe      	b.n	8003d94 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003d96:	693b      	ldr	r3, [r7, #16]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d009      	beq.n	8003db2 <vPortFree+0x5e>
 8003d9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003da2:	f383 8811 	msr	BASEPRI, r3
 8003da6:	f3bf 8f6f 	isb	sy
 8003daa:	f3bf 8f4f 	dsb	sy
 8003dae:	60bb      	str	r3, [r7, #8]
 8003db0:	e7fe      	b.n	8003db0 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8003db2:	693b      	ldr	r3, [r7, #16]
 8003db4:	685a      	ldr	r2, [r3, #4]
 8003db6:	4b11      	ldr	r3, [pc, #68]	; (8003dfc <vPortFree+0xa8>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	4013      	ands	r3, r2
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d019      	beq.n	8003df4 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8003dc0:	693b      	ldr	r3, [r7, #16]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d115      	bne.n	8003df4 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003dc8:	693b      	ldr	r3, [r7, #16]
 8003dca:	685a      	ldr	r2, [r3, #4]
 8003dcc:	4b0b      	ldr	r3, [pc, #44]	; (8003dfc <vPortFree+0xa8>)
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	43db      	mvns	r3, r3
 8003dd2:	401a      	ands	r2, r3
 8003dd4:	693b      	ldr	r3, [r7, #16]
 8003dd6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8003dd8:	f7fe fcf4 	bl	80027c4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8003ddc:	693b      	ldr	r3, [r7, #16]
 8003dde:	685a      	ldr	r2, [r3, #4]
 8003de0:	4b07      	ldr	r3, [pc, #28]	; (8003e00 <vPortFree+0xac>)
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	4413      	add	r3, r2
 8003de6:	4a06      	ldr	r2, [pc, #24]	; (8003e00 <vPortFree+0xac>)
 8003de8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003dea:	6938      	ldr	r0, [r7, #16]
 8003dec:	f000 f86c 	bl	8003ec8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8003df0:	f7fe fcf6 	bl	80027e0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8003df4:	bf00      	nop
 8003df6:	3718      	adds	r7, #24
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	bd80      	pop	{r7, pc}
 8003dfc:	2000194c 	.word	0x2000194c
 8003e00:	20001944 	.word	0x20001944

08003e04 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8003e04:	b480      	push	{r7}
 8003e06:	b085      	sub	sp, #20
 8003e08:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003e0a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8003e0e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8003e10:	4b27      	ldr	r3, [pc, #156]	; (8003eb0 <prvHeapInit+0xac>)
 8003e12:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	f003 0307 	and.w	r3, r3, #7
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d00c      	beq.n	8003e38 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	3307      	adds	r3, #7
 8003e22:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	f023 0307 	bic.w	r3, r3, #7
 8003e2a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003e2c:	68ba      	ldr	r2, [r7, #8]
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	1ad3      	subs	r3, r2, r3
 8003e32:	4a1f      	ldr	r2, [pc, #124]	; (8003eb0 <prvHeapInit+0xac>)
 8003e34:	4413      	add	r3, r2
 8003e36:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003e3c:	4a1d      	ldr	r2, [pc, #116]	; (8003eb4 <prvHeapInit+0xb0>)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8003e42:	4b1c      	ldr	r3, [pc, #112]	; (8003eb4 <prvHeapInit+0xb0>)
 8003e44:	2200      	movs	r2, #0
 8003e46:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	68ba      	ldr	r2, [r7, #8]
 8003e4c:	4413      	add	r3, r2
 8003e4e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8003e50:	2208      	movs	r2, #8
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	1a9b      	subs	r3, r3, r2
 8003e56:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	f023 0307 	bic.w	r3, r3, #7
 8003e5e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	4a15      	ldr	r2, [pc, #84]	; (8003eb8 <prvHeapInit+0xb4>)
 8003e64:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8003e66:	4b14      	ldr	r3, [pc, #80]	; (8003eb8 <prvHeapInit+0xb4>)
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8003e6e:	4b12      	ldr	r3, [pc, #72]	; (8003eb8 <prvHeapInit+0xb4>)
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	2200      	movs	r2, #0
 8003e74:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003e7a:	683b      	ldr	r3, [r7, #0]
 8003e7c:	68fa      	ldr	r2, [r7, #12]
 8003e7e:	1ad2      	subs	r2, r2, r3
 8003e80:	683b      	ldr	r3, [r7, #0]
 8003e82:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003e84:	4b0c      	ldr	r3, [pc, #48]	; (8003eb8 <prvHeapInit+0xb4>)
 8003e86:	681a      	ldr	r2, [r3, #0]
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003e8c:	683b      	ldr	r3, [r7, #0]
 8003e8e:	685b      	ldr	r3, [r3, #4]
 8003e90:	4a0a      	ldr	r2, [pc, #40]	; (8003ebc <prvHeapInit+0xb8>)
 8003e92:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	685b      	ldr	r3, [r3, #4]
 8003e98:	4a09      	ldr	r2, [pc, #36]	; (8003ec0 <prvHeapInit+0xbc>)
 8003e9a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003e9c:	4b09      	ldr	r3, [pc, #36]	; (8003ec4 <prvHeapInit+0xc0>)
 8003e9e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003ea2:	601a      	str	r2, [r3, #0]
}
 8003ea4:	bf00      	nop
 8003ea6:	3714      	adds	r7, #20
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eae:	4770      	bx	lr
 8003eb0:	20000d80 	.word	0x20000d80
 8003eb4:	20001938 	.word	0x20001938
 8003eb8:	20001940 	.word	0x20001940
 8003ebc:	20001948 	.word	0x20001948
 8003ec0:	20001944 	.word	0x20001944
 8003ec4:	2000194c 	.word	0x2000194c

08003ec8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8003ec8:	b480      	push	{r7}
 8003eca:	b085      	sub	sp, #20
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003ed0:	4b28      	ldr	r3, [pc, #160]	; (8003f74 <prvInsertBlockIntoFreeList+0xac>)
 8003ed2:	60fb      	str	r3, [r7, #12]
 8003ed4:	e002      	b.n	8003edc <prvInsertBlockIntoFreeList+0x14>
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	60fb      	str	r3, [r7, #12]
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	687a      	ldr	r2, [r7, #4]
 8003ee2:	429a      	cmp	r2, r3
 8003ee4:	d8f7      	bhi.n	8003ed6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	685b      	ldr	r3, [r3, #4]
 8003eee:	68ba      	ldr	r2, [r7, #8]
 8003ef0:	4413      	add	r3, r2
 8003ef2:	687a      	ldr	r2, [r7, #4]
 8003ef4:	429a      	cmp	r2, r3
 8003ef6:	d108      	bne.n	8003f0a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	685a      	ldr	r2, [r3, #4]
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	685b      	ldr	r3, [r3, #4]
 8003f00:	441a      	add	r2, r3
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	685b      	ldr	r3, [r3, #4]
 8003f12:	68ba      	ldr	r2, [r7, #8]
 8003f14:	441a      	add	r2, r3
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	429a      	cmp	r2, r3
 8003f1c:	d118      	bne.n	8003f50 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	681a      	ldr	r2, [r3, #0]
 8003f22:	4b15      	ldr	r3, [pc, #84]	; (8003f78 <prvInsertBlockIntoFreeList+0xb0>)
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	429a      	cmp	r2, r3
 8003f28:	d00d      	beq.n	8003f46 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	685a      	ldr	r2, [r3, #4]
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	685b      	ldr	r3, [r3, #4]
 8003f34:	441a      	add	r2, r3
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	681a      	ldr	r2, [r3, #0]
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	601a      	str	r2, [r3, #0]
 8003f44:	e008      	b.n	8003f58 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8003f46:	4b0c      	ldr	r3, [pc, #48]	; (8003f78 <prvInsertBlockIntoFreeList+0xb0>)
 8003f48:	681a      	ldr	r2, [r3, #0]
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	601a      	str	r2, [r3, #0]
 8003f4e:	e003      	b.n	8003f58 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	681a      	ldr	r2, [r3, #0]
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8003f58:	68fa      	ldr	r2, [r7, #12]
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	429a      	cmp	r2, r3
 8003f5e:	d002      	beq.n	8003f66 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	687a      	ldr	r2, [r7, #4]
 8003f64:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003f66:	bf00      	nop
 8003f68:	3714      	adds	r7, #20
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f70:	4770      	bx	lr
 8003f72:	bf00      	nop
 8003f74:	20001938 	.word	0x20001938
 8003f78:	20001940 	.word	0x20001940

08003f7c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	b08a      	sub	sp, #40	; 0x28
 8003f80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */
       
  /* USER CODE END Init */
osKernelInitialize();
 8003f82:	f7fd fa89 	bl	8001498 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  const osThreadAttr_t defaultTask_attributes = {
 8003f86:	1d3b      	adds	r3, r7, #4
 8003f88:	2224      	movs	r2, #36	; 0x24
 8003f8a:	2100      	movs	r1, #0
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	f000 fa3e 	bl	800440e <memset>
 8003f92:	4b09      	ldr	r3, [pc, #36]	; (8003fb8 <MX_FREERTOS_Init+0x3c>)
 8003f94:	607b      	str	r3, [r7, #4]
 8003f96:	2380      	movs	r3, #128	; 0x80
 8003f98:	61bb      	str	r3, [r7, #24]
 8003f9a:	2318      	movs	r3, #24
 8003f9c:	61fb      	str	r3, [r7, #28]
    .name = "defaultTask",
    .priority = (osPriority_t) osPriorityNormal,
    .stack_size = 128
  };
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8003f9e:	1d3b      	adds	r3, r7, #4
 8003fa0:	461a      	mov	r2, r3
 8003fa2:	2100      	movs	r1, #0
 8003fa4:	4805      	ldr	r0, [pc, #20]	; (8003fbc <MX_FREERTOS_Init+0x40>)
 8003fa6:	f7fd fadf 	bl	8001568 <osThreadNew>
 8003faa:	4602      	mov	r2, r0
 8003fac:	4b04      	ldr	r3, [pc, #16]	; (8003fc0 <MX_FREERTOS_Init+0x44>)
 8003fae:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8003fb0:	bf00      	nop
 8003fb2:	3728      	adds	r7, #40	; 0x28
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	bd80      	pop	{r7, pc}
 8003fb8:	080045d8 	.word	0x080045d8
 8003fbc:	08003fc5 	.word	0x08003fc5
 8003fc0:	200019a8 	.word	0x200019a8

08003fc4 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	b082      	sub	sp, #8
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8003fcc:	2001      	movs	r0, #1
 8003fce:	f7fd fb75 	bl	80016bc <osDelay>
 8003fd2:	e7fb      	b.n	8003fcc <StartDefaultTask+0x8>

08003fd4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8003fd4:	b480      	push	{r7}
 8003fd6:	b083      	sub	sp, #12
 8003fd8:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003fda:	4b0f      	ldr	r3, [pc, #60]	; (8004018 <MX_GPIO_Init+0x44>)
 8003fdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fde:	4a0e      	ldr	r2, [pc, #56]	; (8004018 <MX_GPIO_Init+0x44>)
 8003fe0:	f043 0304 	orr.w	r3, r3, #4
 8003fe4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003fe6:	4b0c      	ldr	r3, [pc, #48]	; (8004018 <MX_GPIO_Init+0x44>)
 8003fe8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fea:	f003 0304 	and.w	r3, r3, #4
 8003fee:	607b      	str	r3, [r7, #4]
 8003ff0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003ff2:	4b09      	ldr	r3, [pc, #36]	; (8004018 <MX_GPIO_Init+0x44>)
 8003ff4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ff6:	4a08      	ldr	r2, [pc, #32]	; (8004018 <MX_GPIO_Init+0x44>)
 8003ff8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ffc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003ffe:	4b06      	ldr	r3, [pc, #24]	; (8004018 <MX_GPIO_Init+0x44>)
 8004000:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004002:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004006:	603b      	str	r3, [r7, #0]
 8004008:	683b      	ldr	r3, [r7, #0]

}
 800400a:	bf00      	nop
 800400c:	370c      	adds	r7, #12
 800400e:	46bd      	mov	sp, r7
 8004010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004014:	4770      	bx	lr
 8004016:	bf00      	nop
 8004018:	40021000 	.word	0x40021000

0800401c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800401c:	b580      	push	{r7, lr}
 800401e:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004020:	f7fc f8d6 	bl	80001d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004024:	f000 f808 	bl	8004038 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004028:	f7ff ffd4 	bl	8003fd4 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init(); 
 800402c:	f7ff ffa6 	bl	8003f7c <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8004030:	f7fd fa66 	bl	8001500 <osKernelStart>
  
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8004034:	e7fe      	b.n	8004034 <main+0x18>
	...

08004038 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004038:	b580      	push	{r7, lr}
 800403a:	b096      	sub	sp, #88	; 0x58
 800403c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800403e:	f107 0314 	add.w	r3, r7, #20
 8004042:	2244      	movs	r2, #68	; 0x44
 8004044:	2100      	movs	r1, #0
 8004046:	4618      	mov	r0, r3
 8004048:	f000 f9e1 	bl	800440e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800404c:	463b      	mov	r3, r7
 800404e:	2200      	movs	r2, #0
 8004050:	601a      	str	r2, [r3, #0]
 8004052:	605a      	str	r2, [r3, #4]
 8004054:	609a      	str	r2, [r3, #8]
 8004056:	60da      	str	r2, [r3, #12]
 8004058:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability 
  */
  HAL_PWR_EnableBkUpAccess();
 800405a:	f7fc fa33 	bl	80004c4 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800405e:	4b20      	ldr	r3, [pc, #128]	; (80040e0 <SystemClock_Config+0xa8>)
 8004060:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004064:	4a1e      	ldr	r2, [pc, #120]	; (80040e0 <SystemClock_Config+0xa8>)
 8004066:	f023 0318 	bic.w	r3, r3, #24
 800406a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 800406e:	2314      	movs	r3, #20
 8004070:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8004072:	2301      	movs	r3, #1
 8004074:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8004076:	2301      	movs	r3, #1
 8004078:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800407a:	2300      	movs	r3, #0
 800407c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800407e:	2360      	movs	r3, #96	; 0x60
 8004080:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8004082:	2300      	movs	r3, #0
 8004084:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004086:	f107 0314 	add.w	r3, r7, #20
 800408a:	4618      	mov	r0, r3
 800408c:	f7fc fa9a 	bl	80005c4 <HAL_RCC_OscConfig>
 8004090:	4603      	mov	r3, r0
 8004092:	2b00      	cmp	r3, #0
 8004094:	d001      	beq.n	800409a <SystemClock_Config+0x62>
  {
    Error_Handler();
 8004096:	f000 f825 	bl	80040e4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800409a:	230f      	movs	r3, #15
 800409c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 800409e:	2300      	movs	r3, #0
 80040a0:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80040a2:	2300      	movs	r3, #0
 80040a4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80040a6:	2300      	movs	r3, #0
 80040a8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80040aa:	2300      	movs	r3, #0
 80040ac:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80040ae:	463b      	mov	r3, r7
 80040b0:	2100      	movs	r1, #0
 80040b2:	4618      	mov	r0, r3
 80040b4:	f7fc ff74 	bl	8000fa0 <HAL_RCC_ClockConfig>
 80040b8:	4603      	mov	r3, r0
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d001      	beq.n	80040c2 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80040be:	f000 f811 	bl	80040e4 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80040c2:	f44f 7000 	mov.w	r0, #512	; 0x200
 80040c6:	f7fc fa1b 	bl	8000500 <HAL_PWREx_ControlVoltageScaling>
 80040ca:	4603      	mov	r3, r0
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d001      	beq.n	80040d4 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80040d0:	f000 f808 	bl	80040e4 <Error_Handler>
  }
  /** Enable MSI Auto calibration 
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80040d4:	f7fd f9d0 	bl	8001478 <HAL_RCCEx_EnableMSIPLLMode>
}
 80040d8:	bf00      	nop
 80040da:	3758      	adds	r7, #88	; 0x58
 80040dc:	46bd      	mov	sp, r7
 80040de:	bd80      	pop	{r7, pc}
 80040e0:	40021000 	.word	0x40021000

080040e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80040e4:	b480      	push	{r7}
 80040e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80040e8:	bf00      	nop
 80040ea:	46bd      	mov	sp, r7
 80040ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f0:	4770      	bx	lr

080040f2 <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(char *file, uint32_t line)
{ 
 80040f2:	b480      	push	{r7}
 80040f4:	b083      	sub	sp, #12
 80040f6:	af00      	add	r7, sp, #0
 80040f8:	6078      	str	r0, [r7, #4]
 80040fa:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     tex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 80040fc:	bf00      	nop
 80040fe:	370c      	adds	r7, #12
 8004100:	46bd      	mov	sp, r7
 8004102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004106:	4770      	bx	lr

08004108 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004108:	b580      	push	{r7, lr}
 800410a:	b082      	sub	sp, #8
 800410c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800410e:	4b11      	ldr	r3, [pc, #68]	; (8004154 <HAL_MspInit+0x4c>)
 8004110:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004112:	4a10      	ldr	r2, [pc, #64]	; (8004154 <HAL_MspInit+0x4c>)
 8004114:	f043 0301 	orr.w	r3, r3, #1
 8004118:	6613      	str	r3, [r2, #96]	; 0x60
 800411a:	4b0e      	ldr	r3, [pc, #56]	; (8004154 <HAL_MspInit+0x4c>)
 800411c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800411e:	f003 0301 	and.w	r3, r3, #1
 8004122:	607b      	str	r3, [r7, #4]
 8004124:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004126:	4b0b      	ldr	r3, [pc, #44]	; (8004154 <HAL_MspInit+0x4c>)
 8004128:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800412a:	4a0a      	ldr	r2, [pc, #40]	; (8004154 <HAL_MspInit+0x4c>)
 800412c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004130:	6593      	str	r3, [r2, #88]	; 0x58
 8004132:	4b08      	ldr	r3, [pc, #32]	; (8004154 <HAL_MspInit+0x4c>)
 8004134:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004136:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800413a:	603b      	str	r3, [r7, #0]
 800413c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800413e:	2200      	movs	r2, #0
 8004140:	210f      	movs	r1, #15
 8004142:	f06f 0001 	mvn.w	r0, #1
 8004146:	f7fc f985 	bl	8000454 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800414a:	bf00      	nop
 800414c:	3708      	adds	r7, #8
 800414e:	46bd      	mov	sp, r7
 8004150:	bd80      	pop	{r7, pc}
 8004152:	bf00      	nop
 8004154:	40021000 	.word	0x40021000

08004158 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004158:	b480      	push	{r7}
 800415a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800415c:	bf00      	nop
 800415e:	46bd      	mov	sp, r7
 8004160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004164:	4770      	bx	lr

08004166 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004166:	b480      	push	{r7}
 8004168:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800416a:	e7fe      	b.n	800416a <HardFault_Handler+0x4>

0800416c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800416c:	b480      	push	{r7}
 800416e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004170:	e7fe      	b.n	8004170 <MemManage_Handler+0x4>

08004172 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004172:	b480      	push	{r7}
 8004174:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004176:	e7fe      	b.n	8004176 <BusFault_Handler+0x4>

08004178 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004178:	b480      	push	{r7}
 800417a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800417c:	e7fe      	b.n	800417c <UsageFault_Handler+0x4>

0800417e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800417e:	b480      	push	{r7}
 8004180:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004182:	bf00      	nop
 8004184:	46bd      	mov	sp, r7
 8004186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418a:	4770      	bx	lr

0800418c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800418c:	b580      	push	{r7, lr}
 800418e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004190:	f7fc f870 	bl	8000274 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8004194:	f7fe fef4 	bl	8002f80 <xTaskGetSchedulerState>
 8004198:	4603      	mov	r3, r0
 800419a:	2b01      	cmp	r3, #1
 800419c:	d001      	beq.n	80041a2 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 800419e:	f7ff fc8b 	bl	8003ab8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80041a2:	bf00      	nop
 80041a4:	bd80      	pop	{r7, pc}
	...

080041a8 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80041a8:	b580      	push	{r7, lr}
 80041aa:	b084      	sub	sp, #16
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80041b0:	4b11      	ldr	r3, [pc, #68]	; (80041f8 <_sbrk+0x50>)
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d102      	bne.n	80041be <_sbrk+0x16>
		heap_end = &end;
 80041b8:	4b0f      	ldr	r3, [pc, #60]	; (80041f8 <_sbrk+0x50>)
 80041ba:	4a10      	ldr	r2, [pc, #64]	; (80041fc <_sbrk+0x54>)
 80041bc:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80041be:	4b0e      	ldr	r3, [pc, #56]	; (80041f8 <_sbrk+0x50>)
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80041c4:	4b0c      	ldr	r3, [pc, #48]	; (80041f8 <_sbrk+0x50>)
 80041c6:	681a      	ldr	r2, [r3, #0]
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	4413      	add	r3, r2
 80041cc:	466a      	mov	r2, sp
 80041ce:	4293      	cmp	r3, r2
 80041d0:	d907      	bls.n	80041e2 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80041d2:	f000 f8df 	bl	8004394 <__errno>
 80041d6:	4602      	mov	r2, r0
 80041d8:	230c      	movs	r3, #12
 80041da:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80041dc:	f04f 33ff 	mov.w	r3, #4294967295
 80041e0:	e006      	b.n	80041f0 <_sbrk+0x48>
	}

	heap_end += incr;
 80041e2:	4b05      	ldr	r3, [pc, #20]	; (80041f8 <_sbrk+0x50>)
 80041e4:	681a      	ldr	r2, [r3, #0]
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	4413      	add	r3, r2
 80041ea:	4a03      	ldr	r2, [pc, #12]	; (80041f8 <_sbrk+0x50>)
 80041ec:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80041ee:	68fb      	ldr	r3, [r7, #12]
}
 80041f0:	4618      	mov	r0, r3
 80041f2:	3710      	adds	r7, #16
 80041f4:	46bd      	mov	sp, r7
 80041f6:	bd80      	pop	{r7, pc}
 80041f8:	20001950 	.word	0x20001950
 80041fc:	10000000 	.word	0x10000000

08004200 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8004200:	b480      	push	{r7}
 8004202:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004204:	4b17      	ldr	r3, [pc, #92]	; (8004264 <SystemInit+0x64>)
 8004206:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800420a:	4a16      	ldr	r2, [pc, #88]	; (8004264 <SystemInit+0x64>)
 800420c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004210:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8004214:	4b14      	ldr	r3, [pc, #80]	; (8004268 <SystemInit+0x68>)
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	4a13      	ldr	r2, [pc, #76]	; (8004268 <SystemInit+0x68>)
 800421a:	f043 0301 	orr.w	r3, r3, #1
 800421e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8004220:	4b11      	ldr	r3, [pc, #68]	; (8004268 <SystemInit+0x68>)
 8004222:	2200      	movs	r2, #0
 8004224:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8004226:	4b10      	ldr	r3, [pc, #64]	; (8004268 <SystemInit+0x68>)
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	4a0f      	ldr	r2, [pc, #60]	; (8004268 <SystemInit+0x68>)
 800422c:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8004230:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8004234:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8004236:	4b0c      	ldr	r3, [pc, #48]	; (8004268 <SystemInit+0x68>)
 8004238:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800423c:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800423e:	4b0a      	ldr	r3, [pc, #40]	; (8004268 <SystemInit+0x68>)
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	4a09      	ldr	r2, [pc, #36]	; (8004268 <SystemInit+0x68>)
 8004244:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004248:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800424a:	4b07      	ldr	r3, [pc, #28]	; (8004268 <SystemInit+0x68>)
 800424c:	2200      	movs	r2, #0
 800424e:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004250:	4b04      	ldr	r3, [pc, #16]	; (8004264 <SystemInit+0x64>)
 8004252:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004256:	609a      	str	r2, [r3, #8]
#endif
}
 8004258:	bf00      	nop
 800425a:	46bd      	mov	sp, r7
 800425c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004260:	4770      	bx	lr
 8004262:	bf00      	nop
 8004264:	e000ed00 	.word	0xe000ed00
 8004268:	40021000 	.word	0x40021000

0800426c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800426c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80042a4 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8004270:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8004272:	e003      	b.n	800427c <LoopCopyDataInit>

08004274 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8004274:	4b0c      	ldr	r3, [pc, #48]	; (80042a8 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8004276:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8004278:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800427a:	3104      	adds	r1, #4

0800427c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800427c:	480b      	ldr	r0, [pc, #44]	; (80042ac <LoopForever+0xa>)
	ldr	r3, =_edata
 800427e:	4b0c      	ldr	r3, [pc, #48]	; (80042b0 <LoopForever+0xe>)
	adds	r2, r0, r1
 8004280:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8004282:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8004284:	d3f6      	bcc.n	8004274 <CopyDataInit>
	ldr	r2, =_sbss
 8004286:	4a0b      	ldr	r2, [pc, #44]	; (80042b4 <LoopForever+0x12>)
	b	LoopFillZerobss
 8004288:	e002      	b.n	8004290 <LoopFillZerobss>

0800428a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800428a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800428c:	f842 3b04 	str.w	r3, [r2], #4

08004290 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8004290:	4b09      	ldr	r3, [pc, #36]	; (80042b8 <LoopForever+0x16>)
	cmp	r2, r3
 8004292:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8004294:	d3f9      	bcc.n	800428a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8004296:	f7ff ffb3 	bl	8004200 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800429a:	f000 f881 	bl	80043a0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800429e:	f7ff febd 	bl	800401c <main>

080042a2 <LoopForever>:

LoopForever:
    b LoopForever
 80042a2:	e7fe      	b.n	80042a2 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80042a4:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 80042a8:	08004690 	.word	0x08004690
	ldr	r0, =_sdata
 80042ac:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80042b0:	20000074 	.word	0x20000074
	ldr	r2, =_sbss
 80042b4:	20000074 	.word	0x20000074
	ldr	r3, = _ebss
 80042b8:	200019b4 	.word	0x200019b4

080042bc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80042bc:	e7fe      	b.n	80042bc <ADC1_2_IRQHandler>

080042be <list_create>:
 * list_release(), but private value of every node need to be freed
 * by the user before to call list_release().
 *
 * On error, NULL is returned. otherwise the pointer to the new list. */
list *list_create(void)
{
 80042be:	b580      	push	{r7, lr}
 80042c0:	b082      	sub	sp, #8
 80042c2:	af00      	add	r7, sp, #0
    struct list *list;

    if ((list = malloc(sizeof(*list))) == NULL)
 80042c4:	2018      	movs	r0, #24
 80042c6:	f000 f88f 	bl	80043e8 <malloc>
 80042ca:	4603      	mov	r3, r0
 80042cc:	607b      	str	r3, [r7, #4]
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d101      	bne.n	80042d8 <list_create+0x1a>
        return NULL;
 80042d4:	2300      	movs	r3, #0
 80042d6:	e013      	b.n	8004300 <list_create+0x42>
    list->head = list->tail = NULL;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2200      	movs	r2, #0
 80042dc:	605a      	str	r2, [r3, #4]
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	685a      	ldr	r2, [r3, #4]
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	601a      	str	r2, [r3, #0]
    list->len = 0;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	2200      	movs	r2, #0
 80042ea:	615a      	str	r2, [r3, #20]
    list->dup = NULL;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2200      	movs	r2, #0
 80042f0:	609a      	str	r2, [r3, #8]
    list->free = NULL;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	2200      	movs	r2, #0
 80042f6:	60da      	str	r2, [r3, #12]
    list->match = NULL;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2200      	movs	r2, #0
 80042fc:	611a      	str	r2, [r3, #16]
    return list;
 80042fe:	687b      	ldr	r3, [r7, #4]
}
 8004300:	4618      	mov	r0, r3
 8004302:	3708      	adds	r7, #8
 8004304:	46bd      	mov	sp, r7
 8004306:	bd80      	pop	{r7, pc}

08004308 <list_get_iterator>:
/* Returns a list iterator 'iter'. After the initialization every
 * call to list_next() will return the next element of the list.
 *
 * This function can't fail. */
list_iter *list_get_iterator(list *list, int direction)
{
 8004308:	b580      	push	{r7, lr}
 800430a:	b084      	sub	sp, #16
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]
 8004310:	6039      	str	r1, [r7, #0]
    list_iter *iter;

    if ((iter = malloc(sizeof(*iter))) == NULL) return NULL;
 8004312:	2008      	movs	r0, #8
 8004314:	f000 f868 	bl	80043e8 <malloc>
 8004318:	4603      	mov	r3, r0
 800431a:	60fb      	str	r3, [r7, #12]
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	2b00      	cmp	r3, #0
 8004320:	d101      	bne.n	8004326 <list_get_iterator+0x1e>
 8004322:	2300      	movs	r3, #0
 8004324:	e00f      	b.n	8004346 <list_get_iterator+0x3e>
    if (direction == START_FROM_HEAD)
 8004326:	683b      	ldr	r3, [r7, #0]
 8004328:	2b00      	cmp	r3, #0
 800432a:	d104      	bne.n	8004336 <list_get_iterator+0x2e>
        iter->next = list->head;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681a      	ldr	r2, [r3, #0]
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	601a      	str	r2, [r3, #0]
 8004334:	e003      	b.n	800433e <list_get_iterator+0x36>
    else
        iter->next = list->tail;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	685a      	ldr	r2, [r3, #4]
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	601a      	str	r2, [r3, #0]
    iter->direction = direction;
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	683a      	ldr	r2, [r7, #0]
 8004342:	605a      	str	r2, [r3, #4]
    return iter;
 8004344:	68fb      	ldr	r3, [r7, #12]
}
 8004346:	4618      	mov	r0, r3
 8004348:	3710      	adds	r7, #16
 800434a:	46bd      	mov	sp, r7
 800434c:	bd80      	pop	{r7, pc}
	...

08004350 <misc_init>:
static list_iter *msicdev_list_iter;
static uint8_t DYNAMIC_MINORS = DYNAMIC_MINORS_MAX + 1;
sc_mutex_t misc_mtx;

int misc_init(void)
{
 8004350:	b580      	push	{r7, lr}
 8004352:	af00      	add	r7, sp, #0
	msicdev_list = list_create();
 8004354:	f7ff ffb3 	bl	80042be <list_create>
 8004358:	4602      	mov	r2, r0
 800435a:	4b0b      	ldr	r3, [pc, #44]	; (8004388 <misc_init+0x38>)
 800435c:	601a      	str	r2, [r3, #0]
	msicdev_list_iter = list_get_iterator(msicdev_list, START_FROM_HEAD);
 800435e:	4b0a      	ldr	r3, [pc, #40]	; (8004388 <misc_init+0x38>)
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	2100      	movs	r1, #0
 8004364:	4618      	mov	r0, r3
 8004366:	f7ff ffcf 	bl	8004308 <list_get_iterator>
 800436a:	4602      	mov	r2, r0
 800436c:	4b07      	ldr	r3, [pc, #28]	; (800438c <misc_init+0x3c>)
 800436e:	601a      	str	r2, [r3, #0]

	if ((msicdev_list == NULL) || (msicdev_list_iter == NULL))
 8004370:	4b05      	ldr	r3, [pc, #20]	; (8004388 <misc_init+0x38>)
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	2b00      	cmp	r3, #0
	{
		/*msicdev列表初始化失败,系统重启*/
		//soft_system_resert(__func__);
	}
    
    misc_mtx = creat_mutex();
 8004376:	2001      	movs	r0, #1
 8004378:	f7fd fc0a 	bl	8001b90 <xQueueCreateMutex>
 800437c:	4602      	mov	r2, r0
 800437e:	4b04      	ldr	r3, [pc, #16]	; (8004390 <misc_init+0x40>)
 8004380:	601a      	str	r2, [r3, #0]
    
    return 0;
 8004382:	2300      	movs	r3, #0
}
 8004384:	4618      	mov	r0, r3
 8004386:	bd80      	pop	{r7, pc}
 8004388:	20001954 	.word	0x20001954
 800438c:	20001958 	.word	0x20001958
 8004390:	200019ac 	.word	0x200019ac

08004394 <__errno>:
 8004394:	4b01      	ldr	r3, [pc, #4]	; (800439c <__errno+0x8>)
 8004396:	6818      	ldr	r0, [r3, #0]
 8004398:	4770      	bx	lr
 800439a:	bf00      	nop
 800439c:	20000010 	.word	0x20000010

080043a0 <__libc_init_array>:
 80043a0:	b570      	push	{r4, r5, r6, lr}
 80043a2:	4e0d      	ldr	r6, [pc, #52]	; (80043d8 <__libc_init_array+0x38>)
 80043a4:	4c0d      	ldr	r4, [pc, #52]	; (80043dc <__libc_init_array+0x3c>)
 80043a6:	1ba4      	subs	r4, r4, r6
 80043a8:	10a4      	asrs	r4, r4, #2
 80043aa:	2500      	movs	r5, #0
 80043ac:	42a5      	cmp	r5, r4
 80043ae:	d109      	bne.n	80043c4 <__libc_init_array+0x24>
 80043b0:	4e0b      	ldr	r6, [pc, #44]	; (80043e0 <__libc_init_array+0x40>)
 80043b2:	4c0c      	ldr	r4, [pc, #48]	; (80043e4 <__libc_init_array+0x44>)
 80043b4:	f000 f8a0 	bl	80044f8 <_init>
 80043b8:	1ba4      	subs	r4, r4, r6
 80043ba:	10a4      	asrs	r4, r4, #2
 80043bc:	2500      	movs	r5, #0
 80043be:	42a5      	cmp	r5, r4
 80043c0:	d105      	bne.n	80043ce <__libc_init_array+0x2e>
 80043c2:	bd70      	pop	{r4, r5, r6, pc}
 80043c4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80043c8:	4798      	blx	r3
 80043ca:	3501      	adds	r5, #1
 80043cc:	e7ee      	b.n	80043ac <__libc_init_array+0xc>
 80043ce:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80043d2:	4798      	blx	r3
 80043d4:	3501      	adds	r5, #1
 80043d6:	e7f2      	b.n	80043be <__libc_init_array+0x1e>
 80043d8:	08004684 	.word	0x08004684
 80043dc:	08004684 	.word	0x08004684
 80043e0:	08004684 	.word	0x08004684
 80043e4:	08004688 	.word	0x08004688

080043e8 <malloc>:
 80043e8:	4b02      	ldr	r3, [pc, #8]	; (80043f4 <malloc+0xc>)
 80043ea:	4601      	mov	r1, r0
 80043ec:	6818      	ldr	r0, [r3, #0]
 80043ee:	f000 b817 	b.w	8004420 <_malloc_r>
 80043f2:	bf00      	nop
 80043f4:	20000010 	.word	0x20000010

080043f8 <memcpy>:
 80043f8:	b510      	push	{r4, lr}
 80043fa:	1e43      	subs	r3, r0, #1
 80043fc:	440a      	add	r2, r1
 80043fe:	4291      	cmp	r1, r2
 8004400:	d100      	bne.n	8004404 <memcpy+0xc>
 8004402:	bd10      	pop	{r4, pc}
 8004404:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004408:	f803 4f01 	strb.w	r4, [r3, #1]!
 800440c:	e7f7      	b.n	80043fe <memcpy+0x6>

0800440e <memset>:
 800440e:	4402      	add	r2, r0
 8004410:	4603      	mov	r3, r0
 8004412:	4293      	cmp	r3, r2
 8004414:	d100      	bne.n	8004418 <memset+0xa>
 8004416:	4770      	bx	lr
 8004418:	f803 1b01 	strb.w	r1, [r3], #1
 800441c:	e7f9      	b.n	8004412 <memset+0x4>
	...

08004420 <_malloc_r>:
 8004420:	b570      	push	{r4, r5, r6, lr}
 8004422:	1ccd      	adds	r5, r1, #3
 8004424:	f025 0503 	bic.w	r5, r5, #3
 8004428:	3508      	adds	r5, #8
 800442a:	2d0c      	cmp	r5, #12
 800442c:	bf38      	it	cc
 800442e:	250c      	movcc	r5, #12
 8004430:	2d00      	cmp	r5, #0
 8004432:	4606      	mov	r6, r0
 8004434:	db01      	blt.n	800443a <_malloc_r+0x1a>
 8004436:	42a9      	cmp	r1, r5
 8004438:	d903      	bls.n	8004442 <_malloc_r+0x22>
 800443a:	230c      	movs	r3, #12
 800443c:	6033      	str	r3, [r6, #0]
 800443e:	2000      	movs	r0, #0
 8004440:	bd70      	pop	{r4, r5, r6, pc}
 8004442:	f000 f857 	bl	80044f4 <__malloc_lock>
 8004446:	4a21      	ldr	r2, [pc, #132]	; (80044cc <_malloc_r+0xac>)
 8004448:	6814      	ldr	r4, [r2, #0]
 800444a:	4621      	mov	r1, r4
 800444c:	b991      	cbnz	r1, 8004474 <_malloc_r+0x54>
 800444e:	4c20      	ldr	r4, [pc, #128]	; (80044d0 <_malloc_r+0xb0>)
 8004450:	6823      	ldr	r3, [r4, #0]
 8004452:	b91b      	cbnz	r3, 800445c <_malloc_r+0x3c>
 8004454:	4630      	mov	r0, r6
 8004456:	f000 f83d 	bl	80044d4 <_sbrk_r>
 800445a:	6020      	str	r0, [r4, #0]
 800445c:	4629      	mov	r1, r5
 800445e:	4630      	mov	r0, r6
 8004460:	f000 f838 	bl	80044d4 <_sbrk_r>
 8004464:	1c43      	adds	r3, r0, #1
 8004466:	d124      	bne.n	80044b2 <_malloc_r+0x92>
 8004468:	230c      	movs	r3, #12
 800446a:	6033      	str	r3, [r6, #0]
 800446c:	4630      	mov	r0, r6
 800446e:	f000 f842 	bl	80044f6 <__malloc_unlock>
 8004472:	e7e4      	b.n	800443e <_malloc_r+0x1e>
 8004474:	680b      	ldr	r3, [r1, #0]
 8004476:	1b5b      	subs	r3, r3, r5
 8004478:	d418      	bmi.n	80044ac <_malloc_r+0x8c>
 800447a:	2b0b      	cmp	r3, #11
 800447c:	d90f      	bls.n	800449e <_malloc_r+0x7e>
 800447e:	600b      	str	r3, [r1, #0]
 8004480:	50cd      	str	r5, [r1, r3]
 8004482:	18cc      	adds	r4, r1, r3
 8004484:	4630      	mov	r0, r6
 8004486:	f000 f836 	bl	80044f6 <__malloc_unlock>
 800448a:	f104 000b 	add.w	r0, r4, #11
 800448e:	1d23      	adds	r3, r4, #4
 8004490:	f020 0007 	bic.w	r0, r0, #7
 8004494:	1ac3      	subs	r3, r0, r3
 8004496:	d0d3      	beq.n	8004440 <_malloc_r+0x20>
 8004498:	425a      	negs	r2, r3
 800449a:	50e2      	str	r2, [r4, r3]
 800449c:	e7d0      	b.n	8004440 <_malloc_r+0x20>
 800449e:	428c      	cmp	r4, r1
 80044a0:	684b      	ldr	r3, [r1, #4]
 80044a2:	bf16      	itet	ne
 80044a4:	6063      	strne	r3, [r4, #4]
 80044a6:	6013      	streq	r3, [r2, #0]
 80044a8:	460c      	movne	r4, r1
 80044aa:	e7eb      	b.n	8004484 <_malloc_r+0x64>
 80044ac:	460c      	mov	r4, r1
 80044ae:	6849      	ldr	r1, [r1, #4]
 80044b0:	e7cc      	b.n	800444c <_malloc_r+0x2c>
 80044b2:	1cc4      	adds	r4, r0, #3
 80044b4:	f024 0403 	bic.w	r4, r4, #3
 80044b8:	42a0      	cmp	r0, r4
 80044ba:	d005      	beq.n	80044c8 <_malloc_r+0xa8>
 80044bc:	1a21      	subs	r1, r4, r0
 80044be:	4630      	mov	r0, r6
 80044c0:	f000 f808 	bl	80044d4 <_sbrk_r>
 80044c4:	3001      	adds	r0, #1
 80044c6:	d0cf      	beq.n	8004468 <_malloc_r+0x48>
 80044c8:	6025      	str	r5, [r4, #0]
 80044ca:	e7db      	b.n	8004484 <_malloc_r+0x64>
 80044cc:	2000195c 	.word	0x2000195c
 80044d0:	20001960 	.word	0x20001960

080044d4 <_sbrk_r>:
 80044d4:	b538      	push	{r3, r4, r5, lr}
 80044d6:	4c06      	ldr	r4, [pc, #24]	; (80044f0 <_sbrk_r+0x1c>)
 80044d8:	2300      	movs	r3, #0
 80044da:	4605      	mov	r5, r0
 80044dc:	4608      	mov	r0, r1
 80044de:	6023      	str	r3, [r4, #0]
 80044e0:	f7ff fe62 	bl	80041a8 <_sbrk>
 80044e4:	1c43      	adds	r3, r0, #1
 80044e6:	d102      	bne.n	80044ee <_sbrk_r+0x1a>
 80044e8:	6823      	ldr	r3, [r4, #0]
 80044ea:	b103      	cbz	r3, 80044ee <_sbrk_r+0x1a>
 80044ec:	602b      	str	r3, [r5, #0]
 80044ee:	bd38      	pop	{r3, r4, r5, pc}
 80044f0:	200019b0 	.word	0x200019b0

080044f4 <__malloc_lock>:
 80044f4:	4770      	bx	lr

080044f6 <__malloc_unlock>:
 80044f6:	4770      	bx	lr

080044f8 <_init>:
 80044f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044fa:	bf00      	nop
 80044fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80044fe:	bc08      	pop	{r3}
 8004500:	469e      	mov	lr, r3
 8004502:	4770      	bx	lr

08004504 <_fini>:
 8004504:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004506:	bf00      	nop
 8004508:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800450a:	bc08      	pop	{r3}
 800450c:	469e      	mov	lr, r3
 800450e:	4770      	bx	lr
