
test1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a3b8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004ac  0800a548  0800a548  0001a548  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a9f4  0800a9f4  0002aab4  2**0
                  CONTENTS
  4 .ARM          00000008  0800a9f4  0800a9f4  0001a9f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a9fc  0800a9fc  0002aab4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a9fc  0800a9fc  0001a9fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800aa00  0800aa00  0001aa00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a8  20000000  0800aa04  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .fn1          00000004  0800aaac  0800aaac  0002aaac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .fn2          00000004  0800aab0  0800aab0  0002aab0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .fn3          00000000  0800aab4  0800aab4  0002aab4  2**0
                  CONTENTS
 12 .fn4          00000000  0800aab4  0800aab4  0002aab4  2**0
                  CONTENTS
 13 .fn5          00000000  0800aab4  0800aab4  0002aab4  2**0
                  CONTENTS
 14 .fn6          00000000  0800aab4  0800aab4  0002aab4  2**0
                  CONTENTS
 15 .fn7          00000000  0800aab4  0800aab4  0002aab4  2**0
                  CONTENTS
 16 .bss          0000d728  200000a8  200000a8  000300a8  2**2
                  ALLOC
 17 ._user_heap_stack 00003000  10000000  10000000  00030000  2**0
                  ALLOC
 18 .ARM.attributes 00000030  00000000  00000000  0002aab4  2**0
                  CONTENTS, READONLY
 19 .debug_info   00021f67  00000000  00000000  0002aae4  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_abbrev 00004553  00000000  00000000  0004ca4b  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_aranges 00001998  00000000  00000000  00050fa0  2**3
                  CONTENTS, READONLY, DEBUGGING
 22 .debug_ranges 00001790  00000000  00000000  00052938  2**3
                  CONTENTS, READONLY, DEBUGGING
 23 .debug_macro  00006dc1  00000000  00000000  000540c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 24 .debug_line   00019b1d  00000000  00000000  0005ae89  2**0
                  CONTENTS, READONLY, DEBUGGING
 25 .debug_str    000ed72c  00000000  00000000  000749a6  2**0
                  CONTENTS, READONLY, DEBUGGING
 26 .comment      0000007b  00000000  00000000  001620d2  2**0
                  CONTENTS, READONLY
 27 .debug_frame  000072c4  00000000  00000000  00162150  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000a8 	.word	0x200000a8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a530 	.word	0x0800a530

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000ac 	.word	0x200000ac
 80001cc:	0800a530 	.word	0x0800a530

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b972 	b.w	800057c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	4688      	mov	r8, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14b      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4615      	mov	r5, r2
 80002c2:	d967      	bls.n	8000394 <__udivmoddi4+0xe4>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0720 	rsb	r7, r2, #32
 80002ce:	fa01 f302 	lsl.w	r3, r1, r2
 80002d2:	fa20 f707 	lsr.w	r7, r0, r7
 80002d6:	4095      	lsls	r5, r2
 80002d8:	ea47 0803 	orr.w	r8, r7, r3
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002e8:	fa1f fc85 	uxth.w	ip, r5
 80002ec:	fb0e 8817 	mls	r8, lr, r7, r8
 80002f0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f4:	fb07 f10c 	mul.w	r1, r7, ip
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18eb      	adds	r3, r5, r3
 80002fe:	f107 30ff 	add.w	r0, r7, #4294967295
 8000302:	f080 811b 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8118 	bls.w	800053c <__udivmoddi4+0x28c>
 800030c:	3f02      	subs	r7, #2
 800030e:	442b      	add	r3, r5
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0fe 	udiv	r0, r3, lr
 8000318:	fb0e 3310 	mls	r3, lr, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fc0c 	mul.w	ip, r0, ip
 8000324:	45a4      	cmp	ip, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	192c      	adds	r4, r5, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8107 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000332:	45a4      	cmp	ip, r4
 8000334:	f240 8104 	bls.w	8000540 <__udivmoddi4+0x290>
 8000338:	3802      	subs	r0, #2
 800033a:	442c      	add	r4, r5
 800033c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000340:	eba4 040c 	sub.w	r4, r4, ip
 8000344:	2700      	movs	r7, #0
 8000346:	b11e      	cbz	r6, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c6 4300 	strd	r4, r3, [r6]
 8000350:	4639      	mov	r1, r7
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0xbe>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80eb 	beq.w	8000536 <__udivmoddi4+0x286>
 8000360:	2700      	movs	r7, #0
 8000362:	e9c6 0100 	strd	r0, r1, [r6]
 8000366:	4638      	mov	r0, r7
 8000368:	4639      	mov	r1, r7
 800036a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036e:	fab3 f783 	clz	r7, r3
 8000372:	2f00      	cmp	r7, #0
 8000374:	d147      	bne.n	8000406 <__udivmoddi4+0x156>
 8000376:	428b      	cmp	r3, r1
 8000378:	d302      	bcc.n	8000380 <__udivmoddi4+0xd0>
 800037a:	4282      	cmp	r2, r0
 800037c:	f200 80fa 	bhi.w	8000574 <__udivmoddi4+0x2c4>
 8000380:	1a84      	subs	r4, r0, r2
 8000382:	eb61 0303 	sbc.w	r3, r1, r3
 8000386:	2001      	movs	r0, #1
 8000388:	4698      	mov	r8, r3
 800038a:	2e00      	cmp	r6, #0
 800038c:	d0e0      	beq.n	8000350 <__udivmoddi4+0xa0>
 800038e:	e9c6 4800 	strd	r4, r8, [r6]
 8000392:	e7dd      	b.n	8000350 <__udivmoddi4+0xa0>
 8000394:	b902      	cbnz	r2, 8000398 <__udivmoddi4+0xe8>
 8000396:	deff      	udf	#255	; 0xff
 8000398:	fab2 f282 	clz	r2, r2
 800039c:	2a00      	cmp	r2, #0
 800039e:	f040 808f 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a2:	1b49      	subs	r1, r1, r5
 80003a4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003a8:	fa1f f885 	uxth.w	r8, r5
 80003ac:	2701      	movs	r7, #1
 80003ae:	fbb1 fcfe 	udiv	ip, r1, lr
 80003b2:	0c23      	lsrs	r3, r4, #16
 80003b4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003bc:	fb08 f10c 	mul.w	r1, r8, ip
 80003c0:	4299      	cmp	r1, r3
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c4:	18eb      	adds	r3, r5, r3
 80003c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4299      	cmp	r1, r3
 80003ce:	f200 80cd 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003d2:	4684      	mov	ip, r0
 80003d4:	1a59      	subs	r1, r3, r1
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003dc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003e0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003e4:	fb08 f800 	mul.w	r8, r8, r0
 80003e8:	45a0      	cmp	r8, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x14c>
 80003ec:	192c      	adds	r4, r5, r4
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x14a>
 80003f4:	45a0      	cmp	r8, r4
 80003f6:	f200 80b6 	bhi.w	8000566 <__udivmoddi4+0x2b6>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 0408 	sub.w	r4, r4, r8
 8000400:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000404:	e79f      	b.n	8000346 <__udivmoddi4+0x96>
 8000406:	f1c7 0c20 	rsb	ip, r7, #32
 800040a:	40bb      	lsls	r3, r7
 800040c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000410:	ea4e 0e03 	orr.w	lr, lr, r3
 8000414:	fa01 f407 	lsl.w	r4, r1, r7
 8000418:	fa20 f50c 	lsr.w	r5, r0, ip
 800041c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000420:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000424:	4325      	orrs	r5, r4
 8000426:	fbb3 f9f8 	udiv	r9, r3, r8
 800042a:	0c2c      	lsrs	r4, r5, #16
 800042c:	fb08 3319 	mls	r3, r8, r9, r3
 8000430:	fa1f fa8e 	uxth.w	sl, lr
 8000434:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000438:	fb09 f40a 	mul.w	r4, r9, sl
 800043c:	429c      	cmp	r4, r3
 800043e:	fa02 f207 	lsl.w	r2, r2, r7
 8000442:	fa00 f107 	lsl.w	r1, r0, r7
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1e 0303 	adds.w	r3, lr, r3
 800044c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000450:	f080 8087 	bcs.w	8000562 <__udivmoddi4+0x2b2>
 8000454:	429c      	cmp	r4, r3
 8000456:	f240 8084 	bls.w	8000562 <__udivmoddi4+0x2b2>
 800045a:	f1a9 0902 	sub.w	r9, r9, #2
 800045e:	4473      	add	r3, lr
 8000460:	1b1b      	subs	r3, r3, r4
 8000462:	b2ad      	uxth	r5, r5
 8000464:	fbb3 f0f8 	udiv	r0, r3, r8
 8000468:	fb08 3310 	mls	r3, r8, r0, r3
 800046c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000470:	fb00 fa0a 	mul.w	sl, r0, sl
 8000474:	45a2      	cmp	sl, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1e 0404 	adds.w	r4, lr, r4
 800047c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000480:	d26b      	bcs.n	800055a <__udivmoddi4+0x2aa>
 8000482:	45a2      	cmp	sl, r4
 8000484:	d969      	bls.n	800055a <__udivmoddi4+0x2aa>
 8000486:	3802      	subs	r0, #2
 8000488:	4474      	add	r4, lr
 800048a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800048e:	fba0 8902 	umull	r8, r9, r0, r2
 8000492:	eba4 040a 	sub.w	r4, r4, sl
 8000496:	454c      	cmp	r4, r9
 8000498:	46c2      	mov	sl, r8
 800049a:	464b      	mov	r3, r9
 800049c:	d354      	bcc.n	8000548 <__udivmoddi4+0x298>
 800049e:	d051      	beq.n	8000544 <__udivmoddi4+0x294>
 80004a0:	2e00      	cmp	r6, #0
 80004a2:	d069      	beq.n	8000578 <__udivmoddi4+0x2c8>
 80004a4:	ebb1 050a 	subs.w	r5, r1, sl
 80004a8:	eb64 0403 	sbc.w	r4, r4, r3
 80004ac:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004b0:	40fd      	lsrs	r5, r7
 80004b2:	40fc      	lsrs	r4, r7
 80004b4:	ea4c 0505 	orr.w	r5, ip, r5
 80004b8:	e9c6 5400 	strd	r5, r4, [r6]
 80004bc:	2700      	movs	r7, #0
 80004be:	e747      	b.n	8000350 <__udivmoddi4+0xa0>
 80004c0:	f1c2 0320 	rsb	r3, r2, #32
 80004c4:	fa20 f703 	lsr.w	r7, r0, r3
 80004c8:	4095      	lsls	r5, r2
 80004ca:	fa01 f002 	lsl.w	r0, r1, r2
 80004ce:	fa21 f303 	lsr.w	r3, r1, r3
 80004d2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004d6:	4338      	orrs	r0, r7
 80004d8:	0c01      	lsrs	r1, r0, #16
 80004da:	fbb3 f7fe 	udiv	r7, r3, lr
 80004de:	fa1f f885 	uxth.w	r8, r5
 80004e2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004e6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ea:	fb07 f308 	mul.w	r3, r7, r8
 80004ee:	428b      	cmp	r3, r1
 80004f0:	fa04 f402 	lsl.w	r4, r4, r2
 80004f4:	d907      	bls.n	8000506 <__udivmoddi4+0x256>
 80004f6:	1869      	adds	r1, r5, r1
 80004f8:	f107 3cff 	add.w	ip, r7, #4294967295
 80004fc:	d22f      	bcs.n	800055e <__udivmoddi4+0x2ae>
 80004fe:	428b      	cmp	r3, r1
 8000500:	d92d      	bls.n	800055e <__udivmoddi4+0x2ae>
 8000502:	3f02      	subs	r7, #2
 8000504:	4429      	add	r1, r5
 8000506:	1acb      	subs	r3, r1, r3
 8000508:	b281      	uxth	r1, r0
 800050a:	fbb3 f0fe 	udiv	r0, r3, lr
 800050e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000512:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000516:	fb00 f308 	mul.w	r3, r0, r8
 800051a:	428b      	cmp	r3, r1
 800051c:	d907      	bls.n	800052e <__udivmoddi4+0x27e>
 800051e:	1869      	adds	r1, r5, r1
 8000520:	f100 3cff 	add.w	ip, r0, #4294967295
 8000524:	d217      	bcs.n	8000556 <__udivmoddi4+0x2a6>
 8000526:	428b      	cmp	r3, r1
 8000528:	d915      	bls.n	8000556 <__udivmoddi4+0x2a6>
 800052a:	3802      	subs	r0, #2
 800052c:	4429      	add	r1, r5
 800052e:	1ac9      	subs	r1, r1, r3
 8000530:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000534:	e73b      	b.n	80003ae <__udivmoddi4+0xfe>
 8000536:	4637      	mov	r7, r6
 8000538:	4630      	mov	r0, r6
 800053a:	e709      	b.n	8000350 <__udivmoddi4+0xa0>
 800053c:	4607      	mov	r7, r0
 800053e:	e6e7      	b.n	8000310 <__udivmoddi4+0x60>
 8000540:	4618      	mov	r0, r3
 8000542:	e6fb      	b.n	800033c <__udivmoddi4+0x8c>
 8000544:	4541      	cmp	r1, r8
 8000546:	d2ab      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 8000548:	ebb8 0a02 	subs.w	sl, r8, r2
 800054c:	eb69 020e 	sbc.w	r2, r9, lr
 8000550:	3801      	subs	r0, #1
 8000552:	4613      	mov	r3, r2
 8000554:	e7a4      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000556:	4660      	mov	r0, ip
 8000558:	e7e9      	b.n	800052e <__udivmoddi4+0x27e>
 800055a:	4618      	mov	r0, r3
 800055c:	e795      	b.n	800048a <__udivmoddi4+0x1da>
 800055e:	4667      	mov	r7, ip
 8000560:	e7d1      	b.n	8000506 <__udivmoddi4+0x256>
 8000562:	4681      	mov	r9, r0
 8000564:	e77c      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000566:	3802      	subs	r0, #2
 8000568:	442c      	add	r4, r5
 800056a:	e747      	b.n	80003fc <__udivmoddi4+0x14c>
 800056c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000570:	442b      	add	r3, r5
 8000572:	e72f      	b.n	80003d4 <__udivmoddi4+0x124>
 8000574:	4638      	mov	r0, r7
 8000576:	e708      	b.n	800038a <__udivmoddi4+0xda>
 8000578:	4637      	mov	r7, r6
 800057a:	e6e9      	b.n	8000350 <__udivmoddi4+0xa0>

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b082      	sub	sp, #8
 8000584:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000586:	2300      	movs	r3, #0
 8000588:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800058a:	2003      	movs	r0, #3
 800058c:	f000 f902 	bl	8000794 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000590:	200f      	movs	r0, #15
 8000592:	f003 f9af 	bl	80038f4 <HAL_InitTick>
 8000596:	4603      	mov	r3, r0
 8000598:	2b00      	cmp	r3, #0
 800059a:	d002      	beq.n	80005a2 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800059c:	2301      	movs	r3, #1
 800059e:	71fb      	strb	r3, [r7, #7]
 80005a0:	e001      	b.n	80005a6 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80005a2:	f007 ff17 	bl	80083d4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80005a6:	79fb      	ldrb	r3, [r7, #7]
}
 80005a8:	4618      	mov	r0, r3
 80005aa:	3708      	adds	r7, #8
 80005ac:	46bd      	mov	sp, r7
 80005ae:	bd80      	pop	{r7, pc}

080005b0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80005b0:	b480      	push	{r7}
 80005b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80005b4:	4b05      	ldr	r3, [pc, #20]	; (80005cc <HAL_IncTick+0x1c>)
 80005b6:	681a      	ldr	r2, [r3, #0]
 80005b8:	4b05      	ldr	r3, [pc, #20]	; (80005d0 <HAL_IncTick+0x20>)
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	4413      	add	r3, r2
 80005be:	4a03      	ldr	r2, [pc, #12]	; (80005cc <HAL_IncTick+0x1c>)
 80005c0:	6013      	str	r3, [r2, #0]
}
 80005c2:	bf00      	nop
 80005c4:	46bd      	mov	sp, r7
 80005c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ca:	4770      	bx	lr
 80005cc:	2000d63c 	.word	0x2000d63c
 80005d0:	20000004 	.word	0x20000004

080005d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005d4:	b480      	push	{r7}
 80005d6:	af00      	add	r7, sp, #0
  return uwTick;
 80005d8:	4b03      	ldr	r3, [pc, #12]	; (80005e8 <HAL_GetTick+0x14>)
 80005da:	681b      	ldr	r3, [r3, #0]
}
 80005dc:	4618      	mov	r0, r3
 80005de:	46bd      	mov	sp, r7
 80005e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e4:	4770      	bx	lr
 80005e6:	bf00      	nop
 80005e8:	2000d63c 	.word	0x2000d63c

080005ec <HAL_GetHalVersion>:
/**
  * @brief  Return the HAL revision.
  * @retval version : 0xXYZR (8bits for each decimal, R for RC)
  */
uint32_t HAL_GetHalVersion(void)
{
 80005ec:	b480      	push	{r7}
 80005ee:	af00      	add	r7, sp, #0
  return STM32L4XX_HAL_VERSION;
 80005f0:	f04f 7385 	mov.w	r3, #17432576	; 0x10a0000
}
 80005f4:	4618      	mov	r0, r3
 80005f6:	46bd      	mov	sp, r7
 80005f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fc:	4770      	bx	lr
	...

08000600 <HAL_GetREVID>:
/**
  * @brief  Return the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000600:	b480      	push	{r7}
 8000602:	af00      	add	r7, sp, #0
  return((DBGMCU->IDCODE & DBGMCU_IDCODE_REV_ID) >> 16);
 8000604:	4b04      	ldr	r3, [pc, #16]	; (8000618 <HAL_GetREVID+0x18>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	0c1b      	lsrs	r3, r3, #16
 800060a:	b29b      	uxth	r3, r3
}
 800060c:	4618      	mov	r0, r3
 800060e:	46bd      	mov	sp, r7
 8000610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000614:	4770      	bx	lr
 8000616:	bf00      	nop
 8000618:	e0042000 	.word	0xe0042000

0800061c <HAL_GetDEVID>:
/**
  * @brief  Return the device identifier.
  * @retval Device identifier
  */
uint32_t HAL_GetDEVID(void)
{
 800061c:	b480      	push	{r7}
 800061e:	af00      	add	r7, sp, #0
  return(DBGMCU->IDCODE & DBGMCU_IDCODE_DEV_ID);
 8000620:	4b04      	ldr	r3, [pc, #16]	; (8000634 <HAL_GetDEVID+0x18>)
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
 8000628:	4618      	mov	r0, r3
 800062a:	46bd      	mov	sp, r7
 800062c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000630:	4770      	bx	lr
 8000632:	bf00      	nop
 8000634:	e0042000 	.word	0xe0042000

08000638 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000638:	b480      	push	{r7}
 800063a:	b085      	sub	sp, #20
 800063c:	af00      	add	r7, sp, #0
 800063e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	f003 0307 	and.w	r3, r3, #7
 8000646:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000648:	4b0c      	ldr	r3, [pc, #48]	; (800067c <__NVIC_SetPriorityGrouping+0x44>)
 800064a:	68db      	ldr	r3, [r3, #12]
 800064c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800064e:	68ba      	ldr	r2, [r7, #8]
 8000650:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000654:	4013      	ands	r3, r2
 8000656:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000658:	68fb      	ldr	r3, [r7, #12]
 800065a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800065c:	68bb      	ldr	r3, [r7, #8]
 800065e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000660:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000664:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000668:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800066a:	4a04      	ldr	r2, [pc, #16]	; (800067c <__NVIC_SetPriorityGrouping+0x44>)
 800066c:	68bb      	ldr	r3, [r7, #8]
 800066e:	60d3      	str	r3, [r2, #12]
}
 8000670:	bf00      	nop
 8000672:	3714      	adds	r7, #20
 8000674:	46bd      	mov	sp, r7
 8000676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800067a:	4770      	bx	lr
 800067c:	e000ed00 	.word	0xe000ed00

08000680 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000680:	b480      	push	{r7}
 8000682:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000684:	4b04      	ldr	r3, [pc, #16]	; (8000698 <__NVIC_GetPriorityGrouping+0x18>)
 8000686:	68db      	ldr	r3, [r3, #12]
 8000688:	0a1b      	lsrs	r3, r3, #8
 800068a:	f003 0307 	and.w	r3, r3, #7
}
 800068e:	4618      	mov	r0, r3
 8000690:	46bd      	mov	sp, r7
 8000692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000696:	4770      	bx	lr
 8000698:	e000ed00 	.word	0xe000ed00

0800069c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800069c:	b480      	push	{r7}
 800069e:	b083      	sub	sp, #12
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	4603      	mov	r3, r0
 80006a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	db0b      	blt.n	80006c6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80006ae:	79fb      	ldrb	r3, [r7, #7]
 80006b0:	f003 021f 	and.w	r2, r3, #31
 80006b4:	4907      	ldr	r1, [pc, #28]	; (80006d4 <__NVIC_EnableIRQ+0x38>)
 80006b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006ba:	095b      	lsrs	r3, r3, #5
 80006bc:	2001      	movs	r0, #1
 80006be:	fa00 f202 	lsl.w	r2, r0, r2
 80006c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80006c6:	bf00      	nop
 80006c8:	370c      	adds	r7, #12
 80006ca:	46bd      	mov	sp, r7
 80006cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d0:	4770      	bx	lr
 80006d2:	bf00      	nop
 80006d4:	e000e100 	.word	0xe000e100

080006d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80006d8:	b480      	push	{r7}
 80006da:	b083      	sub	sp, #12
 80006dc:	af00      	add	r7, sp, #0
 80006de:	4603      	mov	r3, r0
 80006e0:	6039      	str	r1, [r7, #0]
 80006e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	db0a      	blt.n	8000702 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006ec:	683b      	ldr	r3, [r7, #0]
 80006ee:	b2da      	uxtb	r2, r3
 80006f0:	490c      	ldr	r1, [pc, #48]	; (8000724 <__NVIC_SetPriority+0x4c>)
 80006f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006f6:	0112      	lsls	r2, r2, #4
 80006f8:	b2d2      	uxtb	r2, r2
 80006fa:	440b      	add	r3, r1
 80006fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000700:	e00a      	b.n	8000718 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000702:	683b      	ldr	r3, [r7, #0]
 8000704:	b2da      	uxtb	r2, r3
 8000706:	4908      	ldr	r1, [pc, #32]	; (8000728 <__NVIC_SetPriority+0x50>)
 8000708:	79fb      	ldrb	r3, [r7, #7]
 800070a:	f003 030f 	and.w	r3, r3, #15
 800070e:	3b04      	subs	r3, #4
 8000710:	0112      	lsls	r2, r2, #4
 8000712:	b2d2      	uxtb	r2, r2
 8000714:	440b      	add	r3, r1
 8000716:	761a      	strb	r2, [r3, #24]
}
 8000718:	bf00      	nop
 800071a:	370c      	adds	r7, #12
 800071c:	46bd      	mov	sp, r7
 800071e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000722:	4770      	bx	lr
 8000724:	e000e100 	.word	0xe000e100
 8000728:	e000ed00 	.word	0xe000ed00

0800072c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800072c:	b480      	push	{r7}
 800072e:	b089      	sub	sp, #36	; 0x24
 8000730:	af00      	add	r7, sp, #0
 8000732:	60f8      	str	r0, [r7, #12]
 8000734:	60b9      	str	r1, [r7, #8]
 8000736:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000738:	68fb      	ldr	r3, [r7, #12]
 800073a:	f003 0307 	and.w	r3, r3, #7
 800073e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000740:	69fb      	ldr	r3, [r7, #28]
 8000742:	f1c3 0307 	rsb	r3, r3, #7
 8000746:	2b04      	cmp	r3, #4
 8000748:	bf28      	it	cs
 800074a:	2304      	movcs	r3, #4
 800074c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800074e:	69fb      	ldr	r3, [r7, #28]
 8000750:	3304      	adds	r3, #4
 8000752:	2b06      	cmp	r3, #6
 8000754:	d902      	bls.n	800075c <NVIC_EncodePriority+0x30>
 8000756:	69fb      	ldr	r3, [r7, #28]
 8000758:	3b03      	subs	r3, #3
 800075a:	e000      	b.n	800075e <NVIC_EncodePriority+0x32>
 800075c:	2300      	movs	r3, #0
 800075e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000760:	f04f 32ff 	mov.w	r2, #4294967295
 8000764:	69bb      	ldr	r3, [r7, #24]
 8000766:	fa02 f303 	lsl.w	r3, r2, r3
 800076a:	43da      	mvns	r2, r3
 800076c:	68bb      	ldr	r3, [r7, #8]
 800076e:	401a      	ands	r2, r3
 8000770:	697b      	ldr	r3, [r7, #20]
 8000772:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000774:	f04f 31ff 	mov.w	r1, #4294967295
 8000778:	697b      	ldr	r3, [r7, #20]
 800077a:	fa01 f303 	lsl.w	r3, r1, r3
 800077e:	43d9      	mvns	r1, r3
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000784:	4313      	orrs	r3, r2
         );
}
 8000786:	4618      	mov	r0, r3
 8000788:	3724      	adds	r7, #36	; 0x24
 800078a:	46bd      	mov	sp, r7
 800078c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000790:	4770      	bx	lr
	...

08000794 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b082      	sub	sp, #8
 8000798:	af00      	add	r7, sp, #0
 800079a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	2b07      	cmp	r3, #7
 80007a0:	d00f      	beq.n	80007c2 <HAL_NVIC_SetPriorityGrouping+0x2e>
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	2b06      	cmp	r3, #6
 80007a6:	d00c      	beq.n	80007c2 <HAL_NVIC_SetPriorityGrouping+0x2e>
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	2b05      	cmp	r3, #5
 80007ac:	d009      	beq.n	80007c2 <HAL_NVIC_SetPriorityGrouping+0x2e>
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	2b04      	cmp	r3, #4
 80007b2:	d006      	beq.n	80007c2 <HAL_NVIC_SetPriorityGrouping+0x2e>
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	2b03      	cmp	r3, #3
 80007b8:	d003      	beq.n	80007c2 <HAL_NVIC_SetPriorityGrouping+0x2e>
 80007ba:	21a7      	movs	r1, #167	; 0xa7
 80007bc:	4804      	ldr	r0, [pc, #16]	; (80007d0 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 80007be:	f007 fd32 	bl	8008226 <assert_failed>

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80007c2:	6878      	ldr	r0, [r7, #4]
 80007c4:	f7ff ff38 	bl	8000638 <__NVIC_SetPriorityGrouping>
}
 80007c8:	bf00      	nop
 80007ca:	3708      	adds	r7, #8
 80007cc:	46bd      	mov	sp, r7
 80007ce:	bd80      	pop	{r7, pc}
 80007d0:	0800a548 	.word	0x0800a548

080007d4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b086      	sub	sp, #24
 80007d8:	af00      	add	r7, sp, #0
 80007da:	4603      	mov	r3, r0
 80007dc:	60b9      	str	r1, [r7, #8]
 80007de:	607a      	str	r2, [r7, #4]
 80007e0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80007e2:	2300      	movs	r3, #0
 80007e4:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	2b0f      	cmp	r3, #15
 80007ea:	d903      	bls.n	80007f4 <HAL_NVIC_SetPriority+0x20>
 80007ec:	21bf      	movs	r1, #191	; 0xbf
 80007ee:	480e      	ldr	r0, [pc, #56]	; (8000828 <HAL_NVIC_SetPriority+0x54>)
 80007f0:	f007 fd19 	bl	8008226 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 80007f4:	68bb      	ldr	r3, [r7, #8]
 80007f6:	2b0f      	cmp	r3, #15
 80007f8:	d903      	bls.n	8000802 <HAL_NVIC_SetPriority+0x2e>
 80007fa:	21c0      	movs	r1, #192	; 0xc0
 80007fc:	480a      	ldr	r0, [pc, #40]	; (8000828 <HAL_NVIC_SetPriority+0x54>)
 80007fe:	f007 fd12 	bl	8008226 <assert_failed>

  prioritygroup = NVIC_GetPriorityGrouping();
 8000802:	f7ff ff3d 	bl	8000680 <__NVIC_GetPriorityGrouping>
 8000806:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000808:	687a      	ldr	r2, [r7, #4]
 800080a:	68b9      	ldr	r1, [r7, #8]
 800080c:	6978      	ldr	r0, [r7, #20]
 800080e:	f7ff ff8d 	bl	800072c <NVIC_EncodePriority>
 8000812:	4602      	mov	r2, r0
 8000814:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000818:	4611      	mov	r1, r2
 800081a:	4618      	mov	r0, r3
 800081c:	f7ff ff5c 	bl	80006d8 <__NVIC_SetPriority>
}
 8000820:	bf00      	nop
 8000822:	3718      	adds	r7, #24
 8000824:	46bd      	mov	sp, r7
 8000826:	bd80      	pop	{r7, pc}
 8000828:	0800a548 	.word	0x0800a548

0800082c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b082      	sub	sp, #8
 8000830:	af00      	add	r7, sp, #0
 8000832:	4603      	mov	r3, r0
 8000834:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8000836:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800083a:	2b00      	cmp	r3, #0
 800083c:	da03      	bge.n	8000846 <HAL_NVIC_EnableIRQ+0x1a>
 800083e:	21d3      	movs	r1, #211	; 0xd3
 8000840:	4805      	ldr	r0, [pc, #20]	; (8000858 <HAL_NVIC_EnableIRQ+0x2c>)
 8000842:	f007 fcf0 	bl	8008226 <assert_failed>

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000846:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800084a:	4618      	mov	r0, r3
 800084c:	f7ff ff26 	bl	800069c <__NVIC_EnableIRQ>
}
 8000850:	bf00      	nop
 8000852:	3708      	adds	r7, #8
 8000854:	46bd      	mov	sp, r7
 8000856:	bd80      	pop	{r7, pc}
 8000858:	0800a548 	.word	0x0800a548

0800085c <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b084      	sub	sp, #16
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	2b00      	cmp	r3, #0
 8000868:	d101      	bne.n	800086e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800086a:	2301      	movs	r3, #1
 800086c:	e19d      	b.n	8000baa <HAL_DMA_Init+0x34e>
  }

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	4a79      	ldr	r2, [pc, #484]	; (8000a58 <HAL_DMA_Init+0x1fc>)
 8000874:	4293      	cmp	r3, r2
 8000876:	d044      	beq.n	8000902 <HAL_DMA_Init+0xa6>
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	4a77      	ldr	r2, [pc, #476]	; (8000a5c <HAL_DMA_Init+0x200>)
 800087e:	4293      	cmp	r3, r2
 8000880:	d03f      	beq.n	8000902 <HAL_DMA_Init+0xa6>
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	681b      	ldr	r3, [r3, #0]
 8000886:	4a76      	ldr	r2, [pc, #472]	; (8000a60 <HAL_DMA_Init+0x204>)
 8000888:	4293      	cmp	r3, r2
 800088a:	d03a      	beq.n	8000902 <HAL_DMA_Init+0xa6>
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	4a74      	ldr	r2, [pc, #464]	; (8000a64 <HAL_DMA_Init+0x208>)
 8000892:	4293      	cmp	r3, r2
 8000894:	d035      	beq.n	8000902 <HAL_DMA_Init+0xa6>
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	4a73      	ldr	r2, [pc, #460]	; (8000a68 <HAL_DMA_Init+0x20c>)
 800089c:	4293      	cmp	r3, r2
 800089e:	d030      	beq.n	8000902 <HAL_DMA_Init+0xa6>
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	4a71      	ldr	r2, [pc, #452]	; (8000a6c <HAL_DMA_Init+0x210>)
 80008a6:	4293      	cmp	r3, r2
 80008a8:	d02b      	beq.n	8000902 <HAL_DMA_Init+0xa6>
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	4a70      	ldr	r2, [pc, #448]	; (8000a70 <HAL_DMA_Init+0x214>)
 80008b0:	4293      	cmp	r3, r2
 80008b2:	d026      	beq.n	8000902 <HAL_DMA_Init+0xa6>
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	4a6e      	ldr	r2, [pc, #440]	; (8000a74 <HAL_DMA_Init+0x218>)
 80008ba:	4293      	cmp	r3, r2
 80008bc:	d021      	beq.n	8000902 <HAL_DMA_Init+0xa6>
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	4a6d      	ldr	r2, [pc, #436]	; (8000a78 <HAL_DMA_Init+0x21c>)
 80008c4:	4293      	cmp	r3, r2
 80008c6:	d01c      	beq.n	8000902 <HAL_DMA_Init+0xa6>
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	4a6b      	ldr	r2, [pc, #428]	; (8000a7c <HAL_DMA_Init+0x220>)
 80008ce:	4293      	cmp	r3, r2
 80008d0:	d017      	beq.n	8000902 <HAL_DMA_Init+0xa6>
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	4a6a      	ldr	r2, [pc, #424]	; (8000a80 <HAL_DMA_Init+0x224>)
 80008d8:	4293      	cmp	r3, r2
 80008da:	d012      	beq.n	8000902 <HAL_DMA_Init+0xa6>
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	4a68      	ldr	r2, [pc, #416]	; (8000a84 <HAL_DMA_Init+0x228>)
 80008e2:	4293      	cmp	r3, r2
 80008e4:	d00d      	beq.n	8000902 <HAL_DMA_Init+0xa6>
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	4a67      	ldr	r2, [pc, #412]	; (8000a88 <HAL_DMA_Init+0x22c>)
 80008ec:	4293      	cmp	r3, r2
 80008ee:	d008      	beq.n	8000902 <HAL_DMA_Init+0xa6>
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	4a65      	ldr	r2, [pc, #404]	; (8000a8c <HAL_DMA_Init+0x230>)
 80008f6:	4293      	cmp	r3, r2
 80008f8:	d003      	beq.n	8000902 <HAL_DMA_Init+0xa6>
 80008fa:	21a4      	movs	r1, #164	; 0xa4
 80008fc:	4864      	ldr	r0, [pc, #400]	; (8000a90 <HAL_DMA_Init+0x234>)
 80008fe:	f007 fc92 	bl	8008226 <assert_failed>
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	689b      	ldr	r3, [r3, #8]
 8000906:	2b00      	cmp	r3, #0
 8000908:	d00c      	beq.n	8000924 <HAL_DMA_Init+0xc8>
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	689b      	ldr	r3, [r3, #8]
 800090e:	2b10      	cmp	r3, #16
 8000910:	d008      	beq.n	8000924 <HAL_DMA_Init+0xc8>
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	689b      	ldr	r3, [r3, #8]
 8000916:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800091a:	d003      	beq.n	8000924 <HAL_DMA_Init+0xc8>
 800091c:	21a5      	movs	r1, #165	; 0xa5
 800091e:	485c      	ldr	r0, [pc, #368]	; (8000a90 <HAL_DMA_Init+0x234>)
 8000920:	f007 fc81 	bl	8008226 <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	68db      	ldr	r3, [r3, #12]
 8000928:	2b40      	cmp	r3, #64	; 0x40
 800092a:	d007      	beq.n	800093c <HAL_DMA_Init+0xe0>
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	68db      	ldr	r3, [r3, #12]
 8000930:	2b00      	cmp	r3, #0
 8000932:	d003      	beq.n	800093c <HAL_DMA_Init+0xe0>
 8000934:	21a6      	movs	r1, #166	; 0xa6
 8000936:	4856      	ldr	r0, [pc, #344]	; (8000a90 <HAL_DMA_Init+0x234>)
 8000938:	f007 fc75 	bl	8008226 <assert_failed>
  assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	691b      	ldr	r3, [r3, #16]
 8000940:	2b80      	cmp	r3, #128	; 0x80
 8000942:	d007      	beq.n	8000954 <HAL_DMA_Init+0xf8>
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	691b      	ldr	r3, [r3, #16]
 8000948:	2b00      	cmp	r3, #0
 800094a:	d003      	beq.n	8000954 <HAL_DMA_Init+0xf8>
 800094c:	21a7      	movs	r1, #167	; 0xa7
 800094e:	4850      	ldr	r0, [pc, #320]	; (8000a90 <HAL_DMA_Init+0x234>)
 8000950:	f007 fc69 	bl	8008226 <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	695b      	ldr	r3, [r3, #20]
 8000958:	2b00      	cmp	r3, #0
 800095a:	d00d      	beq.n	8000978 <HAL_DMA_Init+0x11c>
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	695b      	ldr	r3, [r3, #20]
 8000960:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000964:	d008      	beq.n	8000978 <HAL_DMA_Init+0x11c>
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	695b      	ldr	r3, [r3, #20]
 800096a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800096e:	d003      	beq.n	8000978 <HAL_DMA_Init+0x11c>
 8000970:	21a8      	movs	r1, #168	; 0xa8
 8000972:	4847      	ldr	r0, [pc, #284]	; (8000a90 <HAL_DMA_Init+0x234>)
 8000974:	f007 fc57 	bl	8008226 <assert_failed>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	699b      	ldr	r3, [r3, #24]
 800097c:	2b00      	cmp	r3, #0
 800097e:	d00d      	beq.n	800099c <HAL_DMA_Init+0x140>
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	699b      	ldr	r3, [r3, #24]
 8000984:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000988:	d008      	beq.n	800099c <HAL_DMA_Init+0x140>
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	699b      	ldr	r3, [r3, #24]
 800098e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000992:	d003      	beq.n	800099c <HAL_DMA_Init+0x140>
 8000994:	21a9      	movs	r1, #169	; 0xa9
 8000996:	483e      	ldr	r0, [pc, #248]	; (8000a90 <HAL_DMA_Init+0x234>)
 8000998:	f007 fc45 	bl	8008226 <assert_failed>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	69db      	ldr	r3, [r3, #28]
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d007      	beq.n	80009b4 <HAL_DMA_Init+0x158>
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	69db      	ldr	r3, [r3, #28]
 80009a8:	2b20      	cmp	r3, #32
 80009aa:	d003      	beq.n	80009b4 <HAL_DMA_Init+0x158>
 80009ac:	21aa      	movs	r1, #170	; 0xaa
 80009ae:	4838      	ldr	r0, [pc, #224]	; (8000a90 <HAL_DMA_Init+0x234>)
 80009b0:	f007 fc39 	bl	8008226 <assert_failed>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	6a1b      	ldr	r3, [r3, #32]
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d012      	beq.n	80009e2 <HAL_DMA_Init+0x186>
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	6a1b      	ldr	r3, [r3, #32]
 80009c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80009c4:	d00d      	beq.n	80009e2 <HAL_DMA_Init+0x186>
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	6a1b      	ldr	r3, [r3, #32]
 80009ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80009ce:	d008      	beq.n	80009e2 <HAL_DMA_Init+0x186>
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	6a1b      	ldr	r3, [r3, #32]
 80009d4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80009d8:	d003      	beq.n	80009e2 <HAL_DMA_Init+0x186>
 80009da:	21ab      	movs	r1, #171	; 0xab
 80009dc:	482c      	ldr	r0, [pc, #176]	; (8000a90 <HAL_DMA_Init+0x234>)
 80009de:	f007 fc22 	bl	8008226 <assert_failed>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	685b      	ldr	r3, [r3, #4]
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d01f      	beq.n	8000a2a <HAL_DMA_Init+0x1ce>
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	685b      	ldr	r3, [r3, #4]
 80009ee:	2b01      	cmp	r3, #1
 80009f0:	d01b      	beq.n	8000a2a <HAL_DMA_Init+0x1ce>
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	685b      	ldr	r3, [r3, #4]
 80009f6:	2b02      	cmp	r3, #2
 80009f8:	d017      	beq.n	8000a2a <HAL_DMA_Init+0x1ce>
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	685b      	ldr	r3, [r3, #4]
 80009fe:	2b03      	cmp	r3, #3
 8000a00:	d013      	beq.n	8000a2a <HAL_DMA_Init+0x1ce>
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	685b      	ldr	r3, [r3, #4]
 8000a06:	2b04      	cmp	r3, #4
 8000a08:	d00f      	beq.n	8000a2a <HAL_DMA_Init+0x1ce>
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	685b      	ldr	r3, [r3, #4]
 8000a0e:	2b05      	cmp	r3, #5
 8000a10:	d00b      	beq.n	8000a2a <HAL_DMA_Init+0x1ce>
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	685b      	ldr	r3, [r3, #4]
 8000a16:	2b06      	cmp	r3, #6
 8000a18:	d007      	beq.n	8000a2a <HAL_DMA_Init+0x1ce>
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	685b      	ldr	r3, [r3, #4]
 8000a1e:	2b07      	cmp	r3, #7
 8000a20:	d003      	beq.n	8000a2a <HAL_DMA_Init+0x1ce>
 8000a22:	21ad      	movs	r1, #173	; 0xad
 8000a24:	481a      	ldr	r0, [pc, #104]	; (8000a90 <HAL_DMA_Init+0x234>)
 8000a26:	f007 fbfe 	bl	8008226 <assert_failed>

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	461a      	mov	r2, r3
 8000a30:	4b18      	ldr	r3, [pc, #96]	; (8000a94 <HAL_DMA_Init+0x238>)
 8000a32:	429a      	cmp	r2, r3
 8000a34:	d836      	bhi.n	8000aa4 <HAL_DMA_Init+0x248>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	461a      	mov	r2, r3
 8000a3c:	4b16      	ldr	r3, [pc, #88]	; (8000a98 <HAL_DMA_Init+0x23c>)
 8000a3e:	4413      	add	r3, r2
 8000a40:	4a16      	ldr	r2, [pc, #88]	; (8000a9c <HAL_DMA_Init+0x240>)
 8000a42:	fba2 2303 	umull	r2, r3, r2, r3
 8000a46:	091b      	lsrs	r3, r3, #4
 8000a48:	009a      	lsls	r2, r3, #2
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	4a13      	ldr	r2, [pc, #76]	; (8000aa0 <HAL_DMA_Init+0x244>)
 8000a52:	641a      	str	r2, [r3, #64]	; 0x40
 8000a54:	e035      	b.n	8000ac2 <HAL_DMA_Init+0x266>
 8000a56:	bf00      	nop
 8000a58:	40020008 	.word	0x40020008
 8000a5c:	4002001c 	.word	0x4002001c
 8000a60:	40020030 	.word	0x40020030
 8000a64:	40020044 	.word	0x40020044
 8000a68:	40020058 	.word	0x40020058
 8000a6c:	4002006c 	.word	0x4002006c
 8000a70:	40020080 	.word	0x40020080
 8000a74:	40020408 	.word	0x40020408
 8000a78:	4002041c 	.word	0x4002041c
 8000a7c:	40020430 	.word	0x40020430
 8000a80:	40020444 	.word	0x40020444
 8000a84:	40020458 	.word	0x40020458
 8000a88:	4002046c 	.word	0x4002046c
 8000a8c:	40020480 	.word	0x40020480
 8000a90:	0800a584 	.word	0x0800a584
 8000a94:	40020407 	.word	0x40020407
 8000a98:	bffdfff8 	.word	0xbffdfff8
 8000a9c:	cccccccd 	.word	0xcccccccd
 8000aa0:	40020000 	.word	0x40020000
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	461a      	mov	r2, r3
 8000aaa:	4b42      	ldr	r3, [pc, #264]	; (8000bb4 <HAL_DMA_Init+0x358>)
 8000aac:	4413      	add	r3, r2
 8000aae:	4a42      	ldr	r2, [pc, #264]	; (8000bb8 <HAL_DMA_Init+0x35c>)
 8000ab0:	fba2 2303 	umull	r2, r3, r2, r3
 8000ab4:	091b      	lsrs	r3, r3, #4
 8000ab6:	009a      	lsls	r2, r3, #2
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	4a3f      	ldr	r2, [pc, #252]	; (8000bbc <HAL_DMA_Init+0x360>)
 8000ac0:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	2202      	movs	r2, #2
 8000ac6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8000ad2:	68fb      	ldr	r3, [r7, #12]
 8000ad4:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8000ad8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000adc:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8000ae6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	691b      	ldr	r3, [r3, #16]
 8000aec:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000af2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	699b      	ldr	r3, [r3, #24]
 8000af8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000afe:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	6a1b      	ldr	r3, [r3, #32]
 8000b04:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000b06:	68fa      	ldr	r2, [r7, #12]
 8000b08:	4313      	orrs	r3, r2
 8000b0a:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	68fa      	ldr	r2, [r7, #12]
 8000b12:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	689b      	ldr	r3, [r3, #8]
 8000b18:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000b1c:	d039      	beq.n	8000b92 <HAL_DMA_Init+0x336>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b22:	4a27      	ldr	r2, [pc, #156]	; (8000bc0 <HAL_DMA_Init+0x364>)
 8000b24:	4293      	cmp	r3, r2
 8000b26:	d11a      	bne.n	8000b5e <HAL_DMA_Init+0x302>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8000b28:	4b26      	ldr	r3, [pc, #152]	; (8000bc4 <HAL_DMA_Init+0x368>)
 8000b2a:	681a      	ldr	r2, [r3, #0]
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b30:	f003 031c 	and.w	r3, r3, #28
 8000b34:	210f      	movs	r1, #15
 8000b36:	fa01 f303 	lsl.w	r3, r1, r3
 8000b3a:	43db      	mvns	r3, r3
 8000b3c:	4921      	ldr	r1, [pc, #132]	; (8000bc4 <HAL_DMA_Init+0x368>)
 8000b3e:	4013      	ands	r3, r2
 8000b40:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8000b42:	4b20      	ldr	r3, [pc, #128]	; (8000bc4 <HAL_DMA_Init+0x368>)
 8000b44:	681a      	ldr	r2, [r3, #0]
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	6859      	ldr	r1, [r3, #4]
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b4e:	f003 031c 	and.w	r3, r3, #28
 8000b52:	fa01 f303 	lsl.w	r3, r1, r3
 8000b56:	491b      	ldr	r1, [pc, #108]	; (8000bc4 <HAL_DMA_Init+0x368>)
 8000b58:	4313      	orrs	r3, r2
 8000b5a:	600b      	str	r3, [r1, #0]
 8000b5c:	e019      	b.n	8000b92 <HAL_DMA_Init+0x336>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8000b5e:	4b1a      	ldr	r3, [pc, #104]	; (8000bc8 <HAL_DMA_Init+0x36c>)
 8000b60:	681a      	ldr	r2, [r3, #0]
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b66:	f003 031c 	and.w	r3, r3, #28
 8000b6a:	210f      	movs	r1, #15
 8000b6c:	fa01 f303 	lsl.w	r3, r1, r3
 8000b70:	43db      	mvns	r3, r3
 8000b72:	4915      	ldr	r1, [pc, #84]	; (8000bc8 <HAL_DMA_Init+0x36c>)
 8000b74:	4013      	ands	r3, r2
 8000b76:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8000b78:	4b13      	ldr	r3, [pc, #76]	; (8000bc8 <HAL_DMA_Init+0x36c>)
 8000b7a:	681a      	ldr	r2, [r3, #0]
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	6859      	ldr	r1, [r3, #4]
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b84:	f003 031c 	and.w	r3, r3, #28
 8000b88:	fa01 f303 	lsl.w	r3, r1, r3
 8000b8c:	490e      	ldr	r1, [pc, #56]	; (8000bc8 <HAL_DMA_Init+0x36c>)
 8000b8e:	4313      	orrs	r3, r2
 8000b90:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	2200      	movs	r2, #0
 8000b96:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	2201      	movs	r2, #1
 8000b9c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8000ba8:	2300      	movs	r3, #0
}
 8000baa:	4618      	mov	r0, r3
 8000bac:	3710      	adds	r7, #16
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bd80      	pop	{r7, pc}
 8000bb2:	bf00      	nop
 8000bb4:	bffdfbf8 	.word	0xbffdfbf8
 8000bb8:	cccccccd 	.word	0xcccccccd
 8000bbc:	40020400 	.word	0x40020400
 8000bc0:	40020000 	.word	0x40020000
 8000bc4:	400200a8 	.word	0x400200a8
 8000bc8:	400204a8 	.word	0x400204a8

08000bcc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b086      	sub	sp, #24
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	60f8      	str	r0, [r7, #12]
 8000bd4:	60b9      	str	r1, [r7, #8]
 8000bd6:	607a      	str	r2, [r7, #4]
 8000bd8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 8000bde:	683b      	ldr	r3, [r7, #0]
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d003      	beq.n	8000bec <HAL_DMA_Start_IT+0x20>
 8000be4:	683b      	ldr	r3, [r7, #0]
 8000be6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000bea:	d304      	bcc.n	8000bf6 <HAL_DMA_Start_IT+0x2a>
 8000bec:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8000bf0:	482c      	ldr	r0, [pc, #176]	; (8000ca4 <HAL_DMA_Start_IT+0xd8>)
 8000bf2:	f007 fb18 	bl	8008226 <assert_failed>

  /* Process locked */
  __HAL_LOCK(hdma);
 8000bf6:	68fb      	ldr	r3, [r7, #12]
 8000bf8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000bfc:	2b01      	cmp	r3, #1
 8000bfe:	d101      	bne.n	8000c04 <HAL_DMA_Start_IT+0x38>
 8000c00:	2302      	movs	r3, #2
 8000c02:	e04b      	b.n	8000c9c <HAL_DMA_Start_IT+0xd0>
 8000c04:	68fb      	ldr	r3, [r7, #12]
 8000c06:	2201      	movs	r2, #1
 8000c08:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8000c0c:	68fb      	ldr	r3, [r7, #12]
 8000c0e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000c12:	b2db      	uxtb	r3, r3
 8000c14:	2b01      	cmp	r3, #1
 8000c16:	d13a      	bne.n	8000c8e <HAL_DMA_Start_IT+0xc2>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000c18:	68fb      	ldr	r3, [r7, #12]
 8000c1a:	2202      	movs	r2, #2
 8000c1c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000c20:	68fb      	ldr	r3, [r7, #12]
 8000c22:	2200      	movs	r2, #0
 8000c24:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8000c26:	68fb      	ldr	r3, [r7, #12]
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	681a      	ldr	r2, [r3, #0]
 8000c2c:	68fb      	ldr	r3, [r7, #12]
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	f022 0201 	bic.w	r2, r2, #1
 8000c34:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000c36:	683b      	ldr	r3, [r7, #0]
 8000c38:	687a      	ldr	r2, [r7, #4]
 8000c3a:	68b9      	ldr	r1, [r7, #8]
 8000c3c:	68f8      	ldr	r0, [r7, #12]
 8000c3e:	f000 f874 	bl	8000d2a <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8000c42:	68fb      	ldr	r3, [r7, #12]
 8000c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d008      	beq.n	8000c5c <HAL_DMA_Start_IT+0x90>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000c4a:	68fb      	ldr	r3, [r7, #12]
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	681a      	ldr	r2, [r3, #0]
 8000c50:	68fb      	ldr	r3, [r7, #12]
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	f042 020e 	orr.w	r2, r2, #14
 8000c58:	601a      	str	r2, [r3, #0]
 8000c5a:	e00f      	b.n	8000c7c <HAL_DMA_Start_IT+0xb0>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000c5c:	68fb      	ldr	r3, [r7, #12]
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	681a      	ldr	r2, [r3, #0]
 8000c62:	68fb      	ldr	r3, [r7, #12]
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	f022 0204 	bic.w	r2, r2, #4
 8000c6a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8000c6c:	68fb      	ldr	r3, [r7, #12]
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	681a      	ldr	r2, [r3, #0]
 8000c72:	68fb      	ldr	r3, [r7, #12]
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	f042 020a 	orr.w	r2, r2, #10
 8000c7a:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000c7c:	68fb      	ldr	r3, [r7, #12]
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	681a      	ldr	r2, [r3, #0]
 8000c82:	68fb      	ldr	r3, [r7, #12]
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	f042 0201 	orr.w	r2, r2, #1
 8000c8a:	601a      	str	r2, [r3, #0]
 8000c8c:	e005      	b.n	8000c9a <HAL_DMA_Start_IT+0xce>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000c8e:	68fb      	ldr	r3, [r7, #12]
 8000c90:	2200      	movs	r2, #0
 8000c92:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8000c96:	2302      	movs	r3, #2
 8000c98:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8000c9a:	7dfb      	ldrb	r3, [r7, #23]
}
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	3718      	adds	r7, #24
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	bd80      	pop	{r7, pc}
 8000ca4:	0800a584 	.word	0x0800a584

08000ca8 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b084      	sub	sp, #16
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000cba:	b2db      	uxtb	r3, r3
 8000cbc:	2b02      	cmp	r3, #2
 8000cbe:	d005      	beq.n	8000ccc <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	2204      	movs	r2, #4
 8000cc4:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8000cc6:	2301      	movs	r3, #1
 8000cc8:	73fb      	strb	r3, [r7, #15]
 8000cca:	e029      	b.n	8000d20 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	681a      	ldr	r2, [r3, #0]
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	f022 020e 	bic.w	r2, r2, #14
 8000cda:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	681a      	ldr	r2, [r3, #0]
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	f022 0201 	bic.w	r2, r2, #1
 8000cea:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cf0:	f003 021c 	and.w	r2, r3, #28
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cf8:	2101      	movs	r1, #1
 8000cfa:	fa01 f202 	lsl.w	r2, r1, r2
 8000cfe:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	2201      	movs	r2, #1
 8000d04:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d003      	beq.n	8000d20 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000d1c:	6878      	ldr	r0, [r7, #4]
 8000d1e:	4798      	blx	r3
    }
  }
  return status;
 8000d20:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d22:	4618      	mov	r0, r3
 8000d24:	3710      	adds	r7, #16
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bd80      	pop	{r7, pc}

08000d2a <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000d2a:	b480      	push	{r7}
 8000d2c:	b085      	sub	sp, #20
 8000d2e:	af00      	add	r7, sp, #0
 8000d30:	60f8      	str	r0, [r7, #12]
 8000d32:	60b9      	str	r1, [r7, #8]
 8000d34:	607a      	str	r2, [r7, #4]
 8000d36:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000d38:	68fb      	ldr	r3, [r7, #12]
 8000d3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d3c:	f003 021c 	and.w	r2, r3, #28
 8000d40:	68fb      	ldr	r3, [r7, #12]
 8000d42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d44:	2101      	movs	r1, #1
 8000d46:	fa01 f202 	lsl.w	r2, r1, r2
 8000d4a:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8000d4c:	68fb      	ldr	r3, [r7, #12]
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	683a      	ldr	r2, [r7, #0]
 8000d52:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000d54:	68fb      	ldr	r3, [r7, #12]
 8000d56:	689b      	ldr	r3, [r3, #8]
 8000d58:	2b10      	cmp	r3, #16
 8000d5a:	d108      	bne.n	8000d6e <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8000d5c:	68fb      	ldr	r3, [r7, #12]
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	687a      	ldr	r2, [r7, #4]
 8000d62:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8000d64:	68fb      	ldr	r3, [r7, #12]
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	68ba      	ldr	r2, [r7, #8]
 8000d6a:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8000d6c:	e007      	b.n	8000d7e <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8000d6e:	68fb      	ldr	r3, [r7, #12]
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	68ba      	ldr	r2, [r7, #8]
 8000d74:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8000d76:	68fb      	ldr	r3, [r7, #12]
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	687a      	ldr	r2, [r7, #4]
 8000d7c:	60da      	str	r2, [r3, #12]
}
 8000d7e:	bf00      	nop
 8000d80:	3714      	adds	r7, #20
 8000d82:	46bd      	mov	sp, r7
 8000d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d88:	4770      	bx	lr
	...

08000d8c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b086      	sub	sp, #24
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
 8000d94:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000d96:	2300      	movs	r3, #0
 8000d98:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent;
  uint32_t temp;

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000da0:	d01f      	beq.n	8000de2 <HAL_GPIO_Init+0x56>
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	4a3f      	ldr	r2, [pc, #252]	; (8000ea4 <HAL_GPIO_Init+0x118>)
 8000da6:	4293      	cmp	r3, r2
 8000da8:	d01b      	beq.n	8000de2 <HAL_GPIO_Init+0x56>
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	4a3e      	ldr	r2, [pc, #248]	; (8000ea8 <HAL_GPIO_Init+0x11c>)
 8000dae:	4293      	cmp	r3, r2
 8000db0:	d017      	beq.n	8000de2 <HAL_GPIO_Init+0x56>
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	4a3d      	ldr	r2, [pc, #244]	; (8000eac <HAL_GPIO_Init+0x120>)
 8000db6:	4293      	cmp	r3, r2
 8000db8:	d013      	beq.n	8000de2 <HAL_GPIO_Init+0x56>
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	4a3c      	ldr	r2, [pc, #240]	; (8000eb0 <HAL_GPIO_Init+0x124>)
 8000dbe:	4293      	cmp	r3, r2
 8000dc0:	d00f      	beq.n	8000de2 <HAL_GPIO_Init+0x56>
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	4a3b      	ldr	r2, [pc, #236]	; (8000eb4 <HAL_GPIO_Init+0x128>)
 8000dc6:	4293      	cmp	r3, r2
 8000dc8:	d00b      	beq.n	8000de2 <HAL_GPIO_Init+0x56>
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	4a3a      	ldr	r2, [pc, #232]	; (8000eb8 <HAL_GPIO_Init+0x12c>)
 8000dce:	4293      	cmp	r3, r2
 8000dd0:	d007      	beq.n	8000de2 <HAL_GPIO_Init+0x56>
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	4a39      	ldr	r2, [pc, #228]	; (8000ebc <HAL_GPIO_Init+0x130>)
 8000dd6:	4293      	cmp	r3, r2
 8000dd8:	d003      	beq.n	8000de2 <HAL_GPIO_Init+0x56>
 8000dda:	21b3      	movs	r1, #179	; 0xb3
 8000ddc:	4838      	ldr	r0, [pc, #224]	; (8000ec0 <HAL_GPIO_Init+0x134>)
 8000dde:	f007 fa22 	bl	8008226 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8000de2:	683b      	ldr	r3, [r7, #0]
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	b29b      	uxth	r3, r3
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d005      	beq.n	8000df8 <HAL_GPIO_Init+0x6c>
 8000dec:	683b      	ldr	r3, [r7, #0]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	0c1b      	lsrs	r3, r3, #16
 8000df2:	041b      	lsls	r3, r3, #16
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d003      	beq.n	8000e00 <HAL_GPIO_Init+0x74>
 8000df8:	21b4      	movs	r1, #180	; 0xb4
 8000dfa:	4831      	ldr	r0, [pc, #196]	; (8000ec0 <HAL_GPIO_Init+0x134>)
 8000dfc:	f007 fa13 	bl	8008226 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8000e00:	683b      	ldr	r3, [r7, #0]
 8000e02:	685b      	ldr	r3, [r3, #4]
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d039      	beq.n	8000e7c <HAL_GPIO_Init+0xf0>
 8000e08:	683b      	ldr	r3, [r7, #0]
 8000e0a:	685b      	ldr	r3, [r3, #4]
 8000e0c:	2b01      	cmp	r3, #1
 8000e0e:	d035      	beq.n	8000e7c <HAL_GPIO_Init+0xf0>
 8000e10:	683b      	ldr	r3, [r7, #0]
 8000e12:	685b      	ldr	r3, [r3, #4]
 8000e14:	2b11      	cmp	r3, #17
 8000e16:	d031      	beq.n	8000e7c <HAL_GPIO_Init+0xf0>
 8000e18:	683b      	ldr	r3, [r7, #0]
 8000e1a:	685b      	ldr	r3, [r3, #4]
 8000e1c:	2b02      	cmp	r3, #2
 8000e1e:	d02d      	beq.n	8000e7c <HAL_GPIO_Init+0xf0>
 8000e20:	683b      	ldr	r3, [r7, #0]
 8000e22:	685b      	ldr	r3, [r3, #4]
 8000e24:	2b12      	cmp	r3, #18
 8000e26:	d029      	beq.n	8000e7c <HAL_GPIO_Init+0xf0>
 8000e28:	683b      	ldr	r3, [r7, #0]
 8000e2a:	685b      	ldr	r3, [r3, #4]
 8000e2c:	4a25      	ldr	r2, [pc, #148]	; (8000ec4 <HAL_GPIO_Init+0x138>)
 8000e2e:	4293      	cmp	r3, r2
 8000e30:	d024      	beq.n	8000e7c <HAL_GPIO_Init+0xf0>
 8000e32:	683b      	ldr	r3, [r7, #0]
 8000e34:	685b      	ldr	r3, [r3, #4]
 8000e36:	4a24      	ldr	r2, [pc, #144]	; (8000ec8 <HAL_GPIO_Init+0x13c>)
 8000e38:	4293      	cmp	r3, r2
 8000e3a:	d01f      	beq.n	8000e7c <HAL_GPIO_Init+0xf0>
 8000e3c:	683b      	ldr	r3, [r7, #0]
 8000e3e:	685b      	ldr	r3, [r3, #4]
 8000e40:	4a22      	ldr	r2, [pc, #136]	; (8000ecc <HAL_GPIO_Init+0x140>)
 8000e42:	4293      	cmp	r3, r2
 8000e44:	d01a      	beq.n	8000e7c <HAL_GPIO_Init+0xf0>
 8000e46:	683b      	ldr	r3, [r7, #0]
 8000e48:	685b      	ldr	r3, [r3, #4]
 8000e4a:	4a21      	ldr	r2, [pc, #132]	; (8000ed0 <HAL_GPIO_Init+0x144>)
 8000e4c:	4293      	cmp	r3, r2
 8000e4e:	d015      	beq.n	8000e7c <HAL_GPIO_Init+0xf0>
 8000e50:	683b      	ldr	r3, [r7, #0]
 8000e52:	685b      	ldr	r3, [r3, #4]
 8000e54:	4a1f      	ldr	r2, [pc, #124]	; (8000ed4 <HAL_GPIO_Init+0x148>)
 8000e56:	4293      	cmp	r3, r2
 8000e58:	d010      	beq.n	8000e7c <HAL_GPIO_Init+0xf0>
 8000e5a:	683b      	ldr	r3, [r7, #0]
 8000e5c:	685b      	ldr	r3, [r3, #4]
 8000e5e:	4a1e      	ldr	r2, [pc, #120]	; (8000ed8 <HAL_GPIO_Init+0x14c>)
 8000e60:	4293      	cmp	r3, r2
 8000e62:	d00b      	beq.n	8000e7c <HAL_GPIO_Init+0xf0>
 8000e64:	683b      	ldr	r3, [r7, #0]
 8000e66:	685b      	ldr	r3, [r3, #4]
 8000e68:	2b03      	cmp	r3, #3
 8000e6a:	d007      	beq.n	8000e7c <HAL_GPIO_Init+0xf0>
 8000e6c:	683b      	ldr	r3, [r7, #0]
 8000e6e:	685b      	ldr	r3, [r3, #4]
 8000e70:	2b0b      	cmp	r3, #11
 8000e72:	d003      	beq.n	8000e7c <HAL_GPIO_Init+0xf0>
 8000e74:	21b5      	movs	r1, #181	; 0xb5
 8000e76:	4812      	ldr	r0, [pc, #72]	; (8000ec0 <HAL_GPIO_Init+0x134>)
 8000e78:	f007 f9d5 	bl	8008226 <assert_failed>
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8000e7c:	683b      	ldr	r3, [r7, #0]
 8000e7e:	689b      	ldr	r3, [r3, #8]
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	f000 8200 	beq.w	8001286 <HAL_GPIO_Init+0x4fa>
 8000e86:	683b      	ldr	r3, [r7, #0]
 8000e88:	689b      	ldr	r3, [r3, #8]
 8000e8a:	2b01      	cmp	r3, #1
 8000e8c:	f000 81fb 	beq.w	8001286 <HAL_GPIO_Init+0x4fa>
 8000e90:	683b      	ldr	r3, [r7, #0]
 8000e92:	689b      	ldr	r3, [r3, #8]
 8000e94:	2b02      	cmp	r3, #2
 8000e96:	f000 81f6 	beq.w	8001286 <HAL_GPIO_Init+0x4fa>
 8000e9a:	21b6      	movs	r1, #182	; 0xb6
 8000e9c:	4808      	ldr	r0, [pc, #32]	; (8000ec0 <HAL_GPIO_Init+0x134>)
 8000e9e:	f007 f9c2 	bl	8008226 <assert_failed>

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ea2:	e1f0      	b.n	8001286 <HAL_GPIO_Init+0x4fa>
 8000ea4:	48000400 	.word	0x48000400
 8000ea8:	48000800 	.word	0x48000800
 8000eac:	48000c00 	.word	0x48000c00
 8000eb0:	48001000 	.word	0x48001000
 8000eb4:	48001400 	.word	0x48001400
 8000eb8:	48001800 	.word	0x48001800
 8000ebc:	48001c00 	.word	0x48001c00
 8000ec0:	0800a5bc 	.word	0x0800a5bc
 8000ec4:	10110000 	.word	0x10110000
 8000ec8:	10210000 	.word	0x10210000
 8000ecc:	10310000 	.word	0x10310000
 8000ed0:	10120000 	.word	0x10120000
 8000ed4:	10220000 	.word	0x10220000
 8000ed8:	10320000 	.word	0x10320000
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000edc:	683b      	ldr	r3, [r7, #0]
 8000ede:	681a      	ldr	r2, [r3, #0]
 8000ee0:	2101      	movs	r1, #1
 8000ee2:	697b      	ldr	r3, [r7, #20]
 8000ee4:	fa01 f303 	lsl.w	r3, r1, r3
 8000ee8:	4013      	ands	r3, r2
 8000eea:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	f000 81c6 	beq.w	8001280 <HAL_GPIO_Init+0x4f4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ef4:	683b      	ldr	r3, [r7, #0]
 8000ef6:	685b      	ldr	r3, [r3, #4]
 8000ef8:	2b02      	cmp	r3, #2
 8000efa:	d003      	beq.n	8000f04 <HAL_GPIO_Init+0x178>
 8000efc:	683b      	ldr	r3, [r7, #0]
 8000efe:	685b      	ldr	r3, [r3, #4]
 8000f00:	2b12      	cmp	r3, #18
 8000f02:	d14f      	bne.n	8000fa4 <HAL_GPIO_Init+0x218>
      {
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000f0a:	d01f      	beq.n	8000f4c <HAL_GPIO_Init+0x1c0>
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	4aa0      	ldr	r2, [pc, #640]	; (8001190 <HAL_GPIO_Init+0x404>)
 8000f10:	4293      	cmp	r3, r2
 8000f12:	d01b      	beq.n	8000f4c <HAL_GPIO_Init+0x1c0>
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	4a9f      	ldr	r2, [pc, #636]	; (8001194 <HAL_GPIO_Init+0x408>)
 8000f18:	4293      	cmp	r3, r2
 8000f1a:	d017      	beq.n	8000f4c <HAL_GPIO_Init+0x1c0>
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	4a9e      	ldr	r2, [pc, #632]	; (8001198 <HAL_GPIO_Init+0x40c>)
 8000f20:	4293      	cmp	r3, r2
 8000f22:	d013      	beq.n	8000f4c <HAL_GPIO_Init+0x1c0>
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	4a9d      	ldr	r2, [pc, #628]	; (800119c <HAL_GPIO_Init+0x410>)
 8000f28:	4293      	cmp	r3, r2
 8000f2a:	d00f      	beq.n	8000f4c <HAL_GPIO_Init+0x1c0>
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	4a9c      	ldr	r2, [pc, #624]	; (80011a0 <HAL_GPIO_Init+0x414>)
 8000f30:	4293      	cmp	r3, r2
 8000f32:	d00b      	beq.n	8000f4c <HAL_GPIO_Init+0x1c0>
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	4a9b      	ldr	r2, [pc, #620]	; (80011a4 <HAL_GPIO_Init+0x418>)
 8000f38:	4293      	cmp	r3, r2
 8000f3a:	d007      	beq.n	8000f4c <HAL_GPIO_Init+0x1c0>
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	4a9a      	ldr	r2, [pc, #616]	; (80011a8 <HAL_GPIO_Init+0x41c>)
 8000f40:	4293      	cmp	r3, r2
 8000f42:	d003      	beq.n	8000f4c <HAL_GPIO_Init+0x1c0>
 8000f44:	21c5      	movs	r1, #197	; 0xc5
 8000f46:	4899      	ldr	r0, [pc, #612]	; (80011ac <HAL_GPIO_Init+0x420>)
 8000f48:	f007 f96d 	bl	8008226 <assert_failed>
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 8000f4c:	683b      	ldr	r3, [r7, #0]
 8000f4e:	691b      	ldr	r3, [r3, #16]
 8000f50:	2b0f      	cmp	r3, #15
 8000f52:	d903      	bls.n	8000f5c <HAL_GPIO_Init+0x1d0>
 8000f54:	21c6      	movs	r1, #198	; 0xc6
 8000f56:	4895      	ldr	r0, [pc, #596]	; (80011ac <HAL_GPIO_Init+0x420>)
 8000f58:	f007 f965 	bl	8008226 <assert_failed>

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000f5c:	697b      	ldr	r3, [r7, #20]
 8000f5e:	08da      	lsrs	r2, r3, #3
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	3208      	adds	r2, #8
 8000f64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f68:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000f6a:	697b      	ldr	r3, [r7, #20]
 8000f6c:	f003 0307 	and.w	r3, r3, #7
 8000f70:	009b      	lsls	r3, r3, #2
 8000f72:	220f      	movs	r2, #15
 8000f74:	fa02 f303 	lsl.w	r3, r2, r3
 8000f78:	43db      	mvns	r3, r3
 8000f7a:	693a      	ldr	r2, [r7, #16]
 8000f7c:	4013      	ands	r3, r2
 8000f7e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000f80:	683b      	ldr	r3, [r7, #0]
 8000f82:	691a      	ldr	r2, [r3, #16]
 8000f84:	697b      	ldr	r3, [r7, #20]
 8000f86:	f003 0307 	and.w	r3, r3, #7
 8000f8a:	009b      	lsls	r3, r3, #2
 8000f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f90:	693a      	ldr	r2, [r7, #16]
 8000f92:	4313      	orrs	r3, r2
 8000f94:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000f96:	697b      	ldr	r3, [r7, #20]
 8000f98:	08da      	lsrs	r2, r3, #3
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	3208      	adds	r2, #8
 8000f9e:	6939      	ldr	r1, [r7, #16]
 8000fa0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000faa:	697b      	ldr	r3, [r7, #20]
 8000fac:	005b      	lsls	r3, r3, #1
 8000fae:	2203      	movs	r2, #3
 8000fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb4:	43db      	mvns	r3, r3
 8000fb6:	693a      	ldr	r2, [r7, #16]
 8000fb8:	4013      	ands	r3, r2
 8000fba:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000fbc:	683b      	ldr	r3, [r7, #0]
 8000fbe:	685b      	ldr	r3, [r3, #4]
 8000fc0:	f003 0203 	and.w	r2, r3, #3
 8000fc4:	697b      	ldr	r3, [r7, #20]
 8000fc6:	005b      	lsls	r3, r3, #1
 8000fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fcc:	693a      	ldr	r2, [r7, #16]
 8000fce:	4313      	orrs	r3, r2
 8000fd0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	693a      	ldr	r2, [r7, #16]
 8000fd6:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000fd8:	683b      	ldr	r3, [r7, #0]
 8000fda:	685b      	ldr	r3, [r3, #4]
 8000fdc:	2b01      	cmp	r3, #1
 8000fde:	d00b      	beq.n	8000ff8 <HAL_GPIO_Init+0x26c>
 8000fe0:	683b      	ldr	r3, [r7, #0]
 8000fe2:	685b      	ldr	r3, [r3, #4]
 8000fe4:	2b02      	cmp	r3, #2
 8000fe6:	d007      	beq.n	8000ff8 <HAL_GPIO_Init+0x26c>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000fec:	2b11      	cmp	r3, #17
 8000fee:	d003      	beq.n	8000ff8 <HAL_GPIO_Init+0x26c>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	685b      	ldr	r3, [r3, #4]
 8000ff4:	2b12      	cmp	r3, #18
 8000ff6:	d144      	bne.n	8001082 <HAL_GPIO_Init+0x2f6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8000ff8:	683b      	ldr	r3, [r7, #0]
 8000ffa:	68db      	ldr	r3, [r3, #12]
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d00f      	beq.n	8001020 <HAL_GPIO_Init+0x294>
 8001000:	683b      	ldr	r3, [r7, #0]
 8001002:	68db      	ldr	r3, [r3, #12]
 8001004:	2b01      	cmp	r3, #1
 8001006:	d00b      	beq.n	8001020 <HAL_GPIO_Init+0x294>
 8001008:	683b      	ldr	r3, [r7, #0]
 800100a:	68db      	ldr	r3, [r3, #12]
 800100c:	2b02      	cmp	r3, #2
 800100e:	d007      	beq.n	8001020 <HAL_GPIO_Init+0x294>
 8001010:	683b      	ldr	r3, [r7, #0]
 8001012:	68db      	ldr	r3, [r3, #12]
 8001014:	2b03      	cmp	r3, #3
 8001016:	d003      	beq.n	8001020 <HAL_GPIO_Init+0x294>
 8001018:	21da      	movs	r1, #218	; 0xda
 800101a:	4864      	ldr	r0, [pc, #400]	; (80011ac <HAL_GPIO_Init+0x420>)
 800101c:	f007 f903 	bl	8008226 <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	689b      	ldr	r3, [r3, #8]
 8001024:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001026:	697b      	ldr	r3, [r7, #20]
 8001028:	005b      	lsls	r3, r3, #1
 800102a:	2203      	movs	r2, #3
 800102c:	fa02 f303 	lsl.w	r3, r2, r3
 8001030:	43db      	mvns	r3, r3
 8001032:	693a      	ldr	r2, [r7, #16]
 8001034:	4013      	ands	r3, r2
 8001036:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	68da      	ldr	r2, [r3, #12]
 800103c:	697b      	ldr	r3, [r7, #20]
 800103e:	005b      	lsls	r3, r3, #1
 8001040:	fa02 f303 	lsl.w	r3, r2, r3
 8001044:	693a      	ldr	r2, [r7, #16]
 8001046:	4313      	orrs	r3, r2
 8001048:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	693a      	ldr	r2, [r7, #16]
 800104e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	685b      	ldr	r3, [r3, #4]
 8001054:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001056:	2201      	movs	r2, #1
 8001058:	697b      	ldr	r3, [r7, #20]
 800105a:	fa02 f303 	lsl.w	r3, r2, r3
 800105e:	43db      	mvns	r3, r3
 8001060:	693a      	ldr	r2, [r7, #16]
 8001062:	4013      	ands	r3, r2
 8001064:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001066:	683b      	ldr	r3, [r7, #0]
 8001068:	685b      	ldr	r3, [r3, #4]
 800106a:	091b      	lsrs	r3, r3, #4
 800106c:	f003 0201 	and.w	r2, r3, #1
 8001070:	697b      	ldr	r3, [r7, #20]
 8001072:	fa02 f303 	lsl.w	r3, r2, r3
 8001076:	693a      	ldr	r2, [r7, #16]
 8001078:	4313      	orrs	r3, r2
 800107a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	693a      	ldr	r2, [r7, #16]
 8001080:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001082:	683b      	ldr	r3, [r7, #0]
 8001084:	685b      	ldr	r3, [r3, #4]
 8001086:	f003 0303 	and.w	r3, r3, #3
 800108a:	2b03      	cmp	r3, #3
 800108c:	d118      	bne.n	80010c0 <HAL_GPIO_Init+0x334>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001092:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001094:	2201      	movs	r2, #1
 8001096:	697b      	ldr	r3, [r7, #20]
 8001098:	fa02 f303 	lsl.w	r3, r2, r3
 800109c:	43db      	mvns	r3, r3
 800109e:	693a      	ldr	r2, [r7, #16]
 80010a0:	4013      	ands	r3, r2
 80010a2:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	685b      	ldr	r3, [r3, #4]
 80010a8:	08db      	lsrs	r3, r3, #3
 80010aa:	f003 0201 	and.w	r2, r3, #1
 80010ae:	697b      	ldr	r3, [r7, #20]
 80010b0:	fa02 f303 	lsl.w	r3, r2, r3
 80010b4:	693a      	ldr	r2, [r7, #16]
 80010b6:	4313      	orrs	r3, r2
 80010b8:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	693a      	ldr	r2, [r7, #16]
 80010be:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	68db      	ldr	r3, [r3, #12]
 80010c4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80010c6:	697b      	ldr	r3, [r7, #20]
 80010c8:	005b      	lsls	r3, r3, #1
 80010ca:	2203      	movs	r2, #3
 80010cc:	fa02 f303 	lsl.w	r3, r2, r3
 80010d0:	43db      	mvns	r3, r3
 80010d2:	693a      	ldr	r2, [r7, #16]
 80010d4:	4013      	ands	r3, r2
 80010d6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	689a      	ldr	r2, [r3, #8]
 80010dc:	697b      	ldr	r3, [r7, #20]
 80010de:	005b      	lsls	r3, r3, #1
 80010e0:	fa02 f303 	lsl.w	r3, r2, r3
 80010e4:	693a      	ldr	r2, [r7, #16]
 80010e6:	4313      	orrs	r3, r2
 80010e8:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	693a      	ldr	r2, [r7, #16]
 80010ee:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80010f0:	683b      	ldr	r3, [r7, #0]
 80010f2:	685b      	ldr	r3, [r3, #4]
 80010f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	f000 80c1 	beq.w	8001280 <HAL_GPIO_Init+0x4f4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010fe:	4b2c      	ldr	r3, [pc, #176]	; (80011b0 <HAL_GPIO_Init+0x424>)
 8001100:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001102:	4a2b      	ldr	r2, [pc, #172]	; (80011b0 <HAL_GPIO_Init+0x424>)
 8001104:	f043 0301 	orr.w	r3, r3, #1
 8001108:	6613      	str	r3, [r2, #96]	; 0x60
 800110a:	4b29      	ldr	r3, [pc, #164]	; (80011b0 <HAL_GPIO_Init+0x424>)
 800110c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800110e:	f003 0301 	and.w	r3, r3, #1
 8001112:	60bb      	str	r3, [r7, #8]
 8001114:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001116:	4a27      	ldr	r2, [pc, #156]	; (80011b4 <HAL_GPIO_Init+0x428>)
 8001118:	697b      	ldr	r3, [r7, #20]
 800111a:	089b      	lsrs	r3, r3, #2
 800111c:	3302      	adds	r3, #2
 800111e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001122:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001124:	697b      	ldr	r3, [r7, #20]
 8001126:	f003 0303 	and.w	r3, r3, #3
 800112a:	009b      	lsls	r3, r3, #2
 800112c:	220f      	movs	r2, #15
 800112e:	fa02 f303 	lsl.w	r3, r2, r3
 8001132:	43db      	mvns	r3, r3
 8001134:	693a      	ldr	r2, [r7, #16]
 8001136:	4013      	ands	r3, r2
 8001138:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001140:	d03a      	beq.n	80011b8 <HAL_GPIO_Init+0x42c>
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	4a12      	ldr	r2, [pc, #72]	; (8001190 <HAL_GPIO_Init+0x404>)
 8001146:	4293      	cmp	r3, r2
 8001148:	d01f      	beq.n	800118a <HAL_GPIO_Init+0x3fe>
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	4a11      	ldr	r2, [pc, #68]	; (8001194 <HAL_GPIO_Init+0x408>)
 800114e:	4293      	cmp	r3, r2
 8001150:	d019      	beq.n	8001186 <HAL_GPIO_Init+0x3fa>
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	4a10      	ldr	r2, [pc, #64]	; (8001198 <HAL_GPIO_Init+0x40c>)
 8001156:	4293      	cmp	r3, r2
 8001158:	d013      	beq.n	8001182 <HAL_GPIO_Init+0x3f6>
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	4a0f      	ldr	r2, [pc, #60]	; (800119c <HAL_GPIO_Init+0x410>)
 800115e:	4293      	cmp	r3, r2
 8001160:	d00d      	beq.n	800117e <HAL_GPIO_Init+0x3f2>
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	4a0e      	ldr	r2, [pc, #56]	; (80011a0 <HAL_GPIO_Init+0x414>)
 8001166:	4293      	cmp	r3, r2
 8001168:	d007      	beq.n	800117a <HAL_GPIO_Init+0x3ee>
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	4a0d      	ldr	r2, [pc, #52]	; (80011a4 <HAL_GPIO_Init+0x418>)
 800116e:	4293      	cmp	r3, r2
 8001170:	d101      	bne.n	8001176 <HAL_GPIO_Init+0x3ea>
 8001172:	2306      	movs	r3, #6
 8001174:	e021      	b.n	80011ba <HAL_GPIO_Init+0x42e>
 8001176:	2307      	movs	r3, #7
 8001178:	e01f      	b.n	80011ba <HAL_GPIO_Init+0x42e>
 800117a:	2305      	movs	r3, #5
 800117c:	e01d      	b.n	80011ba <HAL_GPIO_Init+0x42e>
 800117e:	2304      	movs	r3, #4
 8001180:	e01b      	b.n	80011ba <HAL_GPIO_Init+0x42e>
 8001182:	2303      	movs	r3, #3
 8001184:	e019      	b.n	80011ba <HAL_GPIO_Init+0x42e>
 8001186:	2302      	movs	r3, #2
 8001188:	e017      	b.n	80011ba <HAL_GPIO_Init+0x42e>
 800118a:	2301      	movs	r3, #1
 800118c:	e015      	b.n	80011ba <HAL_GPIO_Init+0x42e>
 800118e:	bf00      	nop
 8001190:	48000400 	.word	0x48000400
 8001194:	48000800 	.word	0x48000800
 8001198:	48000c00 	.word	0x48000c00
 800119c:	48001000 	.word	0x48001000
 80011a0:	48001400 	.word	0x48001400
 80011a4:	48001800 	.word	0x48001800
 80011a8:	48001c00 	.word	0x48001c00
 80011ac:	0800a5bc 	.word	0x0800a5bc
 80011b0:	40021000 	.word	0x40021000
 80011b4:	40010000 	.word	0x40010000
 80011b8:	2300      	movs	r3, #0
 80011ba:	697a      	ldr	r2, [r7, #20]
 80011bc:	f002 0203 	and.w	r2, r2, #3
 80011c0:	0092      	lsls	r2, r2, #2
 80011c2:	4093      	lsls	r3, r2
 80011c4:	693a      	ldr	r2, [r7, #16]
 80011c6:	4313      	orrs	r3, r2
 80011c8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80011ca:	4935      	ldr	r1, [pc, #212]	; (80012a0 <HAL_GPIO_Init+0x514>)
 80011cc:	697b      	ldr	r3, [r7, #20]
 80011ce:	089b      	lsrs	r3, r3, #2
 80011d0:	3302      	adds	r3, #2
 80011d2:	693a      	ldr	r2, [r7, #16]
 80011d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80011d8:	4b32      	ldr	r3, [pc, #200]	; (80012a4 <HAL_GPIO_Init+0x518>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	43db      	mvns	r3, r3
 80011e2:	693a      	ldr	r2, [r7, #16]
 80011e4:	4013      	ands	r3, r2
 80011e6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	685b      	ldr	r3, [r3, #4]
 80011ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d003      	beq.n	80011fc <HAL_GPIO_Init+0x470>
        {
          temp |= iocurrent;
 80011f4:	693a      	ldr	r2, [r7, #16]
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	4313      	orrs	r3, r2
 80011fa:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80011fc:	4a29      	ldr	r2, [pc, #164]	; (80012a4 <HAL_GPIO_Init+0x518>)
 80011fe:	693b      	ldr	r3, [r7, #16]
 8001200:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001202:	4b28      	ldr	r3, [pc, #160]	; (80012a4 <HAL_GPIO_Init+0x518>)
 8001204:	685b      	ldr	r3, [r3, #4]
 8001206:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	43db      	mvns	r3, r3
 800120c:	693a      	ldr	r2, [r7, #16]
 800120e:	4013      	ands	r3, r2
 8001210:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001212:	683b      	ldr	r3, [r7, #0]
 8001214:	685b      	ldr	r3, [r3, #4]
 8001216:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800121a:	2b00      	cmp	r3, #0
 800121c:	d003      	beq.n	8001226 <HAL_GPIO_Init+0x49a>
        {
          temp |= iocurrent;
 800121e:	693a      	ldr	r2, [r7, #16]
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	4313      	orrs	r3, r2
 8001224:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001226:	4a1f      	ldr	r2, [pc, #124]	; (80012a4 <HAL_GPIO_Init+0x518>)
 8001228:	693b      	ldr	r3, [r7, #16]
 800122a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800122c:	4b1d      	ldr	r3, [pc, #116]	; (80012a4 <HAL_GPIO_Init+0x518>)
 800122e:	689b      	ldr	r3, [r3, #8]
 8001230:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	43db      	mvns	r3, r3
 8001236:	693a      	ldr	r2, [r7, #16]
 8001238:	4013      	ands	r3, r2
 800123a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800123c:	683b      	ldr	r3, [r7, #0]
 800123e:	685b      	ldr	r3, [r3, #4]
 8001240:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001244:	2b00      	cmp	r3, #0
 8001246:	d003      	beq.n	8001250 <HAL_GPIO_Init+0x4c4>
        {
          temp |= iocurrent;
 8001248:	693a      	ldr	r2, [r7, #16]
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	4313      	orrs	r3, r2
 800124e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001250:	4a14      	ldr	r2, [pc, #80]	; (80012a4 <HAL_GPIO_Init+0x518>)
 8001252:	693b      	ldr	r3, [r7, #16]
 8001254:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001256:	4b13      	ldr	r3, [pc, #76]	; (80012a4 <HAL_GPIO_Init+0x518>)
 8001258:	68db      	ldr	r3, [r3, #12]
 800125a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	43db      	mvns	r3, r3
 8001260:	693a      	ldr	r2, [r7, #16]
 8001262:	4013      	ands	r3, r2
 8001264:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001266:	683b      	ldr	r3, [r7, #0]
 8001268:	685b      	ldr	r3, [r3, #4]
 800126a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800126e:	2b00      	cmp	r3, #0
 8001270:	d003      	beq.n	800127a <HAL_GPIO_Init+0x4ee>
        {
          temp |= iocurrent;
 8001272:	693a      	ldr	r2, [r7, #16]
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	4313      	orrs	r3, r2
 8001278:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800127a:	4a0a      	ldr	r2, [pc, #40]	; (80012a4 <HAL_GPIO_Init+0x518>)
 800127c:	693b      	ldr	r3, [r7, #16]
 800127e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001280:	697b      	ldr	r3, [r7, #20]
 8001282:	3301      	adds	r3, #1
 8001284:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001286:	683b      	ldr	r3, [r7, #0]
 8001288:	681a      	ldr	r2, [r3, #0]
 800128a:	697b      	ldr	r3, [r7, #20]
 800128c:	fa22 f303 	lsr.w	r3, r2, r3
 8001290:	2b00      	cmp	r3, #0
 8001292:	f47f ae23 	bne.w	8000edc <HAL_GPIO_Init+0x150>
  }
}
 8001296:	bf00      	nop
 8001298:	3718      	adds	r7, #24
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}
 800129e:	bf00      	nop
 80012a0:	40010000 	.word	0x40010000
 80012a4:	40010400 	.word	0x40010400

080012a8 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80012a8:	b480      	push	{r7}
 80012aa:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80012ac:	4b05      	ldr	r3, [pc, #20]	; (80012c4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	4a04      	ldr	r2, [pc, #16]	; (80012c4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80012b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012b6:	6013      	str	r3, [r2, #0]
}
 80012b8:	bf00      	nop
 80012ba:	46bd      	mov	sp, r7
 80012bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c0:	4770      	bx	lr
 80012c2:	bf00      	nop
 80012c4:	40007000 	.word	0x40007000

080012c8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80012c8:	b480      	push	{r7}
 80012ca:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80012cc:	4b04      	ldr	r3, [pc, #16]	; (80012e0 <HAL_PWREx_GetVoltageRange+0x18>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80012d4:	4618      	mov	r0, r3
 80012d6:	46bd      	mov	sp, r7
 80012d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012dc:	4770      	bx	lr
 80012de:	bf00      	nop
 80012e0:	40007000 	.word	0x40007000

080012e4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b084      	sub	sp, #16
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80012f2:	d007      	beq.n	8001304 <HAL_PWREx_ControlVoltageScaling+0x20>
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80012fa:	d003      	beq.n	8001304 <HAL_PWREx_ControlVoltageScaling+0x20>
 80012fc:	21a8      	movs	r1, #168	; 0xa8
 80012fe:	4826      	ldr	r0, [pc, #152]	; (8001398 <HAL_PWREx_ControlVoltageScaling+0xb4>)
 8001300:	f006 ff91 	bl	8008226 <assert_failed>
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800130a:	d130      	bne.n	800136e <HAL_PWREx_ControlVoltageScaling+0x8a>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800130c:	4b23      	ldr	r3, [pc, #140]	; (800139c <HAL_PWREx_ControlVoltageScaling+0xb8>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001314:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001318:	d038      	beq.n	800138c <HAL_PWREx_ControlVoltageScaling+0xa8>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800131a:	4b20      	ldr	r3, [pc, #128]	; (800139c <HAL_PWREx_ControlVoltageScaling+0xb8>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001322:	4a1e      	ldr	r2, [pc, #120]	; (800139c <HAL_PWREx_ControlVoltageScaling+0xb8>)
 8001324:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001328:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800132a:	4b1d      	ldr	r3, [pc, #116]	; (80013a0 <HAL_PWREx_ControlVoltageScaling+0xbc>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	2232      	movs	r2, #50	; 0x32
 8001330:	fb02 f303 	mul.w	r3, r2, r3
 8001334:	4a1b      	ldr	r2, [pc, #108]	; (80013a4 <HAL_PWREx_ControlVoltageScaling+0xc0>)
 8001336:	fba2 2303 	umull	r2, r3, r2, r3
 800133a:	0c9b      	lsrs	r3, r3, #18
 800133c:	3301      	adds	r3, #1
 800133e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001340:	e002      	b.n	8001348 <HAL_PWREx_ControlVoltageScaling+0x64>
      {
        wait_loop_index--;
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	3b01      	subs	r3, #1
 8001346:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001348:	4b14      	ldr	r3, [pc, #80]	; (800139c <HAL_PWREx_ControlVoltageScaling+0xb8>)
 800134a:	695b      	ldr	r3, [r3, #20]
 800134c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001350:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001354:	d102      	bne.n	800135c <HAL_PWREx_ControlVoltageScaling+0x78>
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	2b00      	cmp	r3, #0
 800135a:	d1f2      	bne.n	8001342 <HAL_PWREx_ControlVoltageScaling+0x5e>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800135c:	4b0f      	ldr	r3, [pc, #60]	; (800139c <HAL_PWREx_ControlVoltageScaling+0xb8>)
 800135e:	695b      	ldr	r3, [r3, #20]
 8001360:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001364:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001368:	d110      	bne.n	800138c <HAL_PWREx_ControlVoltageScaling+0xa8>
      {
        return HAL_TIMEOUT;
 800136a:	2303      	movs	r3, #3
 800136c:	e00f      	b.n	800138e <HAL_PWREx_ControlVoltageScaling+0xaa>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800136e:	4b0b      	ldr	r3, [pc, #44]	; (800139c <HAL_PWREx_ControlVoltageScaling+0xb8>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001376:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800137a:	d007      	beq.n	800138c <HAL_PWREx_ControlVoltageScaling+0xa8>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800137c:	4b07      	ldr	r3, [pc, #28]	; (800139c <HAL_PWREx_ControlVoltageScaling+0xb8>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001384:	4a05      	ldr	r2, [pc, #20]	; (800139c <HAL_PWREx_ControlVoltageScaling+0xb8>)
 8001386:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800138a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800138c:	2300      	movs	r3, #0
}
 800138e:	4618      	mov	r0, r3
 8001390:	3710      	adds	r7, #16
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}
 8001396:	bf00      	nop
 8001398:	0800a5f8 	.word	0x0800a5f8
 800139c:	40007000 	.word	0x40007000
 80013a0:	2000000c 	.word	0x2000000c
 80013a4:	431bde83 	.word	0x431bde83

080013a8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b088      	sub	sp, #32
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d102      	bne.n	80013bc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80013b6:	2301      	movs	r3, #1
 80013b8:	f000 bcdc 	b.w	8001d74 <HAL_RCC_OscConfig+0x9cc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d022      	beq.n	800140a <HAL_RCC_OscConfig+0x62>
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	f003 0301 	and.w	r3, r3, #1
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d11c      	bne.n	800140a <HAL_RCC_OscConfig+0x62>
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	f003 0302 	and.w	r3, r3, #2
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d116      	bne.n	800140a <HAL_RCC_OscConfig+0x62>
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	f003 0310 	and.w	r3, r3, #16
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d110      	bne.n	800140a <HAL_RCC_OscConfig+0x62>
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	f003 0308 	and.w	r3, r3, #8
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d10a      	bne.n	800140a <HAL_RCC_OscConfig+0x62>
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	f003 0304 	and.w	r3, r3, #4
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d104      	bne.n	800140a <HAL_RCC_OscConfig+0x62>
 8001400:	f44f 71cf 	mov.w	r1, #414	; 0x19e
 8001404:	48a0      	ldr	r0, [pc, #640]	; (8001688 <HAL_RCC_OscConfig+0x2e0>)
 8001406:	f006 ff0e 	bl	8008226 <assert_failed>

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800140a:	4ba0      	ldr	r3, [pc, #640]	; (800168c <HAL_RCC_OscConfig+0x2e4>)
 800140c:	689b      	ldr	r3, [r3, #8]
 800140e:	f003 030c 	and.w	r3, r3, #12
 8001412:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001414:	4b9d      	ldr	r3, [pc, #628]	; (800168c <HAL_RCC_OscConfig+0x2e4>)
 8001416:	68db      	ldr	r3, [r3, #12]
 8001418:	f003 0303 	and.w	r3, r3, #3
 800141c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	f003 0310 	and.w	r3, r3, #16
 8001426:	2b00      	cmp	r3, #0
 8001428:	f000 8139 	beq.w	800169e <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	699b      	ldr	r3, [r3, #24]
 8001430:	2b00      	cmp	r3, #0
 8001432:	d008      	beq.n	8001446 <HAL_RCC_OscConfig+0x9e>
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	699b      	ldr	r3, [r3, #24]
 8001438:	2b01      	cmp	r3, #1
 800143a:	d004      	beq.n	8001446 <HAL_RCC_OscConfig+0x9e>
 800143c:	f240 11a7 	movw	r1, #423	; 0x1a7
 8001440:	4891      	ldr	r0, [pc, #580]	; (8001688 <HAL_RCC_OscConfig+0x2e0>)
 8001442:	f006 fef0 	bl	8008226 <assert_failed>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	69db      	ldr	r3, [r3, #28]
 800144a:	2bff      	cmp	r3, #255	; 0xff
 800144c:	d904      	bls.n	8001458 <HAL_RCC_OscConfig+0xb0>
 800144e:	f44f 71d4 	mov.w	r1, #424	; 0x1a8
 8001452:	488d      	ldr	r0, [pc, #564]	; (8001688 <HAL_RCC_OscConfig+0x2e0>)
 8001454:	f006 fee7 	bl	8008226 <assert_failed>
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	6a1b      	ldr	r3, [r3, #32]
 800145c:	2b00      	cmp	r3, #0
 800145e:	d030      	beq.n	80014c2 <HAL_RCC_OscConfig+0x11a>
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	6a1b      	ldr	r3, [r3, #32]
 8001464:	2b10      	cmp	r3, #16
 8001466:	d02c      	beq.n	80014c2 <HAL_RCC_OscConfig+0x11a>
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	6a1b      	ldr	r3, [r3, #32]
 800146c:	2b20      	cmp	r3, #32
 800146e:	d028      	beq.n	80014c2 <HAL_RCC_OscConfig+0x11a>
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	6a1b      	ldr	r3, [r3, #32]
 8001474:	2b30      	cmp	r3, #48	; 0x30
 8001476:	d024      	beq.n	80014c2 <HAL_RCC_OscConfig+0x11a>
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	6a1b      	ldr	r3, [r3, #32]
 800147c:	2b40      	cmp	r3, #64	; 0x40
 800147e:	d020      	beq.n	80014c2 <HAL_RCC_OscConfig+0x11a>
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	6a1b      	ldr	r3, [r3, #32]
 8001484:	2b50      	cmp	r3, #80	; 0x50
 8001486:	d01c      	beq.n	80014c2 <HAL_RCC_OscConfig+0x11a>
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	6a1b      	ldr	r3, [r3, #32]
 800148c:	2b60      	cmp	r3, #96	; 0x60
 800148e:	d018      	beq.n	80014c2 <HAL_RCC_OscConfig+0x11a>
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	6a1b      	ldr	r3, [r3, #32]
 8001494:	2b70      	cmp	r3, #112	; 0x70
 8001496:	d014      	beq.n	80014c2 <HAL_RCC_OscConfig+0x11a>
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	6a1b      	ldr	r3, [r3, #32]
 800149c:	2b80      	cmp	r3, #128	; 0x80
 800149e:	d010      	beq.n	80014c2 <HAL_RCC_OscConfig+0x11a>
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	6a1b      	ldr	r3, [r3, #32]
 80014a4:	2b90      	cmp	r3, #144	; 0x90
 80014a6:	d00c      	beq.n	80014c2 <HAL_RCC_OscConfig+0x11a>
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	6a1b      	ldr	r3, [r3, #32]
 80014ac:	2ba0      	cmp	r3, #160	; 0xa0
 80014ae:	d008      	beq.n	80014c2 <HAL_RCC_OscConfig+0x11a>
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	6a1b      	ldr	r3, [r3, #32]
 80014b4:	2bb0      	cmp	r3, #176	; 0xb0
 80014b6:	d004      	beq.n	80014c2 <HAL_RCC_OscConfig+0x11a>
 80014b8:	f240 11a9 	movw	r1, #425	; 0x1a9
 80014bc:	4872      	ldr	r0, [pc, #456]	; (8001688 <HAL_RCC_OscConfig+0x2e0>)
 80014be:	f006 feb2 	bl	8008226 <assert_failed>

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80014c2:	69bb      	ldr	r3, [r7, #24]
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d007      	beq.n	80014d8 <HAL_RCC_OscConfig+0x130>
 80014c8:	69bb      	ldr	r3, [r7, #24]
 80014ca:	2b0c      	cmp	r3, #12
 80014cc:	f040 808a 	bne.w	80015e4 <HAL_RCC_OscConfig+0x23c>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80014d0:	697b      	ldr	r3, [r7, #20]
 80014d2:	2b01      	cmp	r3, #1
 80014d4:	f040 8086 	bne.w	80015e4 <HAL_RCC_OscConfig+0x23c>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80014d8:	4b6c      	ldr	r3, [pc, #432]	; (800168c <HAL_RCC_OscConfig+0x2e4>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	f003 0302 	and.w	r3, r3, #2
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d006      	beq.n	80014f2 <HAL_RCC_OscConfig+0x14a>
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	699b      	ldr	r3, [r3, #24]
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d102      	bne.n	80014f2 <HAL_RCC_OscConfig+0x14a>
      {
        return HAL_ERROR;
 80014ec:	2301      	movs	r3, #1
 80014ee:	f000 bc41 	b.w	8001d74 <HAL_RCC_OscConfig+0x9cc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	6a1a      	ldr	r2, [r3, #32]
 80014f6:	4b65      	ldr	r3, [pc, #404]	; (800168c <HAL_RCC_OscConfig+0x2e4>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f003 0308 	and.w	r3, r3, #8
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d004      	beq.n	800150c <HAL_RCC_OscConfig+0x164>
 8001502:	4b62      	ldr	r3, [pc, #392]	; (800168c <HAL_RCC_OscConfig+0x2e4>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800150a:	e005      	b.n	8001518 <HAL_RCC_OscConfig+0x170>
 800150c:	4b5f      	ldr	r3, [pc, #380]	; (800168c <HAL_RCC_OscConfig+0x2e4>)
 800150e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001512:	091b      	lsrs	r3, r3, #4
 8001514:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001518:	4293      	cmp	r3, r2
 800151a:	d224      	bcs.n	8001566 <HAL_RCC_OscConfig+0x1be>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	6a1b      	ldr	r3, [r3, #32]
 8001520:	4618      	mov	r0, r3
 8001522:	f000 feb5 	bl	8002290 <RCC_SetFlashLatencyFromMSIRange>
 8001526:	4603      	mov	r3, r0
 8001528:	2b00      	cmp	r3, #0
 800152a:	d002      	beq.n	8001532 <HAL_RCC_OscConfig+0x18a>
          {
            return HAL_ERROR;
 800152c:	2301      	movs	r3, #1
 800152e:	f000 bc21 	b.w	8001d74 <HAL_RCC_OscConfig+0x9cc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001532:	4b56      	ldr	r3, [pc, #344]	; (800168c <HAL_RCC_OscConfig+0x2e4>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	4a55      	ldr	r2, [pc, #340]	; (800168c <HAL_RCC_OscConfig+0x2e4>)
 8001538:	f043 0308 	orr.w	r3, r3, #8
 800153c:	6013      	str	r3, [r2, #0]
 800153e:	4b53      	ldr	r3, [pc, #332]	; (800168c <HAL_RCC_OscConfig+0x2e4>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	6a1b      	ldr	r3, [r3, #32]
 800154a:	4950      	ldr	r1, [pc, #320]	; (800168c <HAL_RCC_OscConfig+0x2e4>)
 800154c:	4313      	orrs	r3, r2
 800154e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001550:	4b4e      	ldr	r3, [pc, #312]	; (800168c <HAL_RCC_OscConfig+0x2e4>)
 8001552:	685b      	ldr	r3, [r3, #4]
 8001554:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	69db      	ldr	r3, [r3, #28]
 800155c:	021b      	lsls	r3, r3, #8
 800155e:	494b      	ldr	r1, [pc, #300]	; (800168c <HAL_RCC_OscConfig+0x2e4>)
 8001560:	4313      	orrs	r3, r2
 8001562:	604b      	str	r3, [r1, #4]
 8001564:	e022      	b.n	80015ac <HAL_RCC_OscConfig+0x204>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001566:	4b49      	ldr	r3, [pc, #292]	; (800168c <HAL_RCC_OscConfig+0x2e4>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	4a48      	ldr	r2, [pc, #288]	; (800168c <HAL_RCC_OscConfig+0x2e4>)
 800156c:	f043 0308 	orr.w	r3, r3, #8
 8001570:	6013      	str	r3, [r2, #0]
 8001572:	4b46      	ldr	r3, [pc, #280]	; (800168c <HAL_RCC_OscConfig+0x2e4>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	6a1b      	ldr	r3, [r3, #32]
 800157e:	4943      	ldr	r1, [pc, #268]	; (800168c <HAL_RCC_OscConfig+0x2e4>)
 8001580:	4313      	orrs	r3, r2
 8001582:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001584:	4b41      	ldr	r3, [pc, #260]	; (800168c <HAL_RCC_OscConfig+0x2e4>)
 8001586:	685b      	ldr	r3, [r3, #4]
 8001588:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	69db      	ldr	r3, [r3, #28]
 8001590:	021b      	lsls	r3, r3, #8
 8001592:	493e      	ldr	r1, [pc, #248]	; (800168c <HAL_RCC_OscConfig+0x2e4>)
 8001594:	4313      	orrs	r3, r2
 8001596:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	6a1b      	ldr	r3, [r3, #32]
 800159c:	4618      	mov	r0, r3
 800159e:	f000 fe77 	bl	8002290 <RCC_SetFlashLatencyFromMSIRange>
 80015a2:	4603      	mov	r3, r0
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d001      	beq.n	80015ac <HAL_RCC_OscConfig+0x204>
          {
            return HAL_ERROR;
 80015a8:	2301      	movs	r3, #1
 80015aa:	e3e3      	b.n	8001d74 <HAL_RCC_OscConfig+0x9cc>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80015ac:	f000 fd6c 	bl	8002088 <HAL_RCC_GetSysClockFreq>
 80015b0:	4601      	mov	r1, r0
 80015b2:	4b36      	ldr	r3, [pc, #216]	; (800168c <HAL_RCC_OscConfig+0x2e4>)
 80015b4:	689b      	ldr	r3, [r3, #8]
 80015b6:	091b      	lsrs	r3, r3, #4
 80015b8:	f003 030f 	and.w	r3, r3, #15
 80015bc:	4a34      	ldr	r2, [pc, #208]	; (8001690 <HAL_RCC_OscConfig+0x2e8>)
 80015be:	5cd3      	ldrb	r3, [r2, r3]
 80015c0:	f003 031f 	and.w	r3, r3, #31
 80015c4:	fa21 f303 	lsr.w	r3, r1, r3
 80015c8:	4a32      	ldr	r2, [pc, #200]	; (8001694 <HAL_RCC_OscConfig+0x2ec>)
 80015ca:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80015cc:	4b32      	ldr	r3, [pc, #200]	; (8001698 <HAL_RCC_OscConfig+0x2f0>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	4618      	mov	r0, r3
 80015d2:	f002 f98f 	bl	80038f4 <HAL_InitTick>
 80015d6:	4603      	mov	r3, r0
 80015d8:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80015da:	7bfb      	ldrb	r3, [r7, #15]
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d05d      	beq.n	800169c <HAL_RCC_OscConfig+0x2f4>
        {
          return status;
 80015e0:	7bfb      	ldrb	r3, [r7, #15]
 80015e2:	e3c7      	b.n	8001d74 <HAL_RCC_OscConfig+0x9cc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	699b      	ldr	r3, [r3, #24]
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d032      	beq.n	8001652 <HAL_RCC_OscConfig+0x2aa>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80015ec:	4b27      	ldr	r3, [pc, #156]	; (800168c <HAL_RCC_OscConfig+0x2e4>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	4a26      	ldr	r2, [pc, #152]	; (800168c <HAL_RCC_OscConfig+0x2e4>)
 80015f2:	f043 0301 	orr.w	r3, r3, #1
 80015f6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80015f8:	f7fe ffec 	bl	80005d4 <HAL_GetTick>
 80015fc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80015fe:	e008      	b.n	8001612 <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001600:	f7fe ffe8 	bl	80005d4 <HAL_GetTick>
 8001604:	4602      	mov	r2, r0
 8001606:	693b      	ldr	r3, [r7, #16]
 8001608:	1ad3      	subs	r3, r2, r3
 800160a:	2b02      	cmp	r3, #2
 800160c:	d901      	bls.n	8001612 <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 800160e:	2303      	movs	r3, #3
 8001610:	e3b0      	b.n	8001d74 <HAL_RCC_OscConfig+0x9cc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001612:	4b1e      	ldr	r3, [pc, #120]	; (800168c <HAL_RCC_OscConfig+0x2e4>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f003 0302 	and.w	r3, r3, #2
 800161a:	2b00      	cmp	r3, #0
 800161c:	d0f0      	beq.n	8001600 <HAL_RCC_OscConfig+0x258>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800161e:	4b1b      	ldr	r3, [pc, #108]	; (800168c <HAL_RCC_OscConfig+0x2e4>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	4a1a      	ldr	r2, [pc, #104]	; (800168c <HAL_RCC_OscConfig+0x2e4>)
 8001624:	f043 0308 	orr.w	r3, r3, #8
 8001628:	6013      	str	r3, [r2, #0]
 800162a:	4b18      	ldr	r3, [pc, #96]	; (800168c <HAL_RCC_OscConfig+0x2e4>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	6a1b      	ldr	r3, [r3, #32]
 8001636:	4915      	ldr	r1, [pc, #84]	; (800168c <HAL_RCC_OscConfig+0x2e4>)
 8001638:	4313      	orrs	r3, r2
 800163a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800163c:	4b13      	ldr	r3, [pc, #76]	; (800168c <HAL_RCC_OscConfig+0x2e4>)
 800163e:	685b      	ldr	r3, [r3, #4]
 8001640:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	69db      	ldr	r3, [r3, #28]
 8001648:	021b      	lsls	r3, r3, #8
 800164a:	4910      	ldr	r1, [pc, #64]	; (800168c <HAL_RCC_OscConfig+0x2e4>)
 800164c:	4313      	orrs	r3, r2
 800164e:	604b      	str	r3, [r1, #4]
 8001650:	e025      	b.n	800169e <HAL_RCC_OscConfig+0x2f6>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001652:	4b0e      	ldr	r3, [pc, #56]	; (800168c <HAL_RCC_OscConfig+0x2e4>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	4a0d      	ldr	r2, [pc, #52]	; (800168c <HAL_RCC_OscConfig+0x2e4>)
 8001658:	f023 0301 	bic.w	r3, r3, #1
 800165c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800165e:	f7fe ffb9 	bl	80005d4 <HAL_GetTick>
 8001662:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001664:	e008      	b.n	8001678 <HAL_RCC_OscConfig+0x2d0>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001666:	f7fe ffb5 	bl	80005d4 <HAL_GetTick>
 800166a:	4602      	mov	r2, r0
 800166c:	693b      	ldr	r3, [r7, #16]
 800166e:	1ad3      	subs	r3, r2, r3
 8001670:	2b02      	cmp	r3, #2
 8001672:	d901      	bls.n	8001678 <HAL_RCC_OscConfig+0x2d0>
          {
            return HAL_TIMEOUT;
 8001674:	2303      	movs	r3, #3
 8001676:	e37d      	b.n	8001d74 <HAL_RCC_OscConfig+0x9cc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001678:	4b04      	ldr	r3, [pc, #16]	; (800168c <HAL_RCC_OscConfig+0x2e4>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f003 0302 	and.w	r3, r3, #2
 8001680:	2b00      	cmp	r3, #0
 8001682:	d1f0      	bne.n	8001666 <HAL_RCC_OscConfig+0x2be>
 8001684:	e00b      	b.n	800169e <HAL_RCC_OscConfig+0x2f6>
 8001686:	bf00      	nop
 8001688:	0800a634 	.word	0x0800a634
 800168c:	40021000 	.word	0x40021000
 8001690:	0800a90c 	.word	0x0800a90c
 8001694:	2000000c 	.word	0x2000000c
 8001698:	20000000 	.word	0x20000000
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800169c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f003 0301 	and.w	r3, r3, #1
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d07e      	beq.n	80017a8 <HAL_RCC_OscConfig+0x400>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	685b      	ldr	r3, [r3, #4]
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d00e      	beq.n	80016d0 <HAL_RCC_OscConfig+0x328>
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	685b      	ldr	r3, [r3, #4]
 80016b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016ba:	d009      	beq.n	80016d0 <HAL_RCC_OscConfig+0x328>
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	685b      	ldr	r3, [r3, #4]
 80016c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80016c4:	d004      	beq.n	80016d0 <HAL_RCC_OscConfig+0x328>
 80016c6:	f240 2111 	movw	r1, #529	; 0x211
 80016ca:	489b      	ldr	r0, [pc, #620]	; (8001938 <HAL_RCC_OscConfig+0x590>)
 80016cc:	f006 fdab 	bl	8008226 <assert_failed>

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80016d0:	69bb      	ldr	r3, [r7, #24]
 80016d2:	2b08      	cmp	r3, #8
 80016d4:	d005      	beq.n	80016e2 <HAL_RCC_OscConfig+0x33a>
 80016d6:	69bb      	ldr	r3, [r7, #24]
 80016d8:	2b0c      	cmp	r3, #12
 80016da:	d10e      	bne.n	80016fa <HAL_RCC_OscConfig+0x352>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80016dc:	697b      	ldr	r3, [r7, #20]
 80016de:	2b03      	cmp	r3, #3
 80016e0:	d10b      	bne.n	80016fa <HAL_RCC_OscConfig+0x352>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016e2:	4b96      	ldr	r3, [pc, #600]	; (800193c <HAL_RCC_OscConfig+0x594>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d05b      	beq.n	80017a6 <HAL_RCC_OscConfig+0x3fe>
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	685b      	ldr	r3, [r3, #4]
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d157      	bne.n	80017a6 <HAL_RCC_OscConfig+0x3fe>
      {
        return HAL_ERROR;
 80016f6:	2301      	movs	r3, #1
 80016f8:	e33c      	b.n	8001d74 <HAL_RCC_OscConfig+0x9cc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	685b      	ldr	r3, [r3, #4]
 80016fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001702:	d106      	bne.n	8001712 <HAL_RCC_OscConfig+0x36a>
 8001704:	4b8d      	ldr	r3, [pc, #564]	; (800193c <HAL_RCC_OscConfig+0x594>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	4a8c      	ldr	r2, [pc, #560]	; (800193c <HAL_RCC_OscConfig+0x594>)
 800170a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800170e:	6013      	str	r3, [r2, #0]
 8001710:	e01d      	b.n	800174e <HAL_RCC_OscConfig+0x3a6>
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	685b      	ldr	r3, [r3, #4]
 8001716:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800171a:	d10c      	bne.n	8001736 <HAL_RCC_OscConfig+0x38e>
 800171c:	4b87      	ldr	r3, [pc, #540]	; (800193c <HAL_RCC_OscConfig+0x594>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	4a86      	ldr	r2, [pc, #536]	; (800193c <HAL_RCC_OscConfig+0x594>)
 8001722:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001726:	6013      	str	r3, [r2, #0]
 8001728:	4b84      	ldr	r3, [pc, #528]	; (800193c <HAL_RCC_OscConfig+0x594>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	4a83      	ldr	r2, [pc, #524]	; (800193c <HAL_RCC_OscConfig+0x594>)
 800172e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001732:	6013      	str	r3, [r2, #0]
 8001734:	e00b      	b.n	800174e <HAL_RCC_OscConfig+0x3a6>
 8001736:	4b81      	ldr	r3, [pc, #516]	; (800193c <HAL_RCC_OscConfig+0x594>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	4a80      	ldr	r2, [pc, #512]	; (800193c <HAL_RCC_OscConfig+0x594>)
 800173c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001740:	6013      	str	r3, [r2, #0]
 8001742:	4b7e      	ldr	r3, [pc, #504]	; (800193c <HAL_RCC_OscConfig+0x594>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	4a7d      	ldr	r2, [pc, #500]	; (800193c <HAL_RCC_OscConfig+0x594>)
 8001748:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800174c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	685b      	ldr	r3, [r3, #4]
 8001752:	2b00      	cmp	r3, #0
 8001754:	d013      	beq.n	800177e <HAL_RCC_OscConfig+0x3d6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001756:	f7fe ff3d 	bl	80005d4 <HAL_GetTick>
 800175a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800175c:	e008      	b.n	8001770 <HAL_RCC_OscConfig+0x3c8>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800175e:	f7fe ff39 	bl	80005d4 <HAL_GetTick>
 8001762:	4602      	mov	r2, r0
 8001764:	693b      	ldr	r3, [r7, #16]
 8001766:	1ad3      	subs	r3, r2, r3
 8001768:	2b64      	cmp	r3, #100	; 0x64
 800176a:	d901      	bls.n	8001770 <HAL_RCC_OscConfig+0x3c8>
          {
            return HAL_TIMEOUT;
 800176c:	2303      	movs	r3, #3
 800176e:	e301      	b.n	8001d74 <HAL_RCC_OscConfig+0x9cc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001770:	4b72      	ldr	r3, [pc, #456]	; (800193c <HAL_RCC_OscConfig+0x594>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001778:	2b00      	cmp	r3, #0
 800177a:	d0f0      	beq.n	800175e <HAL_RCC_OscConfig+0x3b6>
 800177c:	e014      	b.n	80017a8 <HAL_RCC_OscConfig+0x400>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800177e:	f7fe ff29 	bl	80005d4 <HAL_GetTick>
 8001782:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001784:	e008      	b.n	8001798 <HAL_RCC_OscConfig+0x3f0>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001786:	f7fe ff25 	bl	80005d4 <HAL_GetTick>
 800178a:	4602      	mov	r2, r0
 800178c:	693b      	ldr	r3, [r7, #16]
 800178e:	1ad3      	subs	r3, r2, r3
 8001790:	2b64      	cmp	r3, #100	; 0x64
 8001792:	d901      	bls.n	8001798 <HAL_RCC_OscConfig+0x3f0>
          {
            return HAL_TIMEOUT;
 8001794:	2303      	movs	r3, #3
 8001796:	e2ed      	b.n	8001d74 <HAL_RCC_OscConfig+0x9cc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001798:	4b68      	ldr	r3, [pc, #416]	; (800193c <HAL_RCC_OscConfig+0x594>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d1f0      	bne.n	8001786 <HAL_RCC_OscConfig+0x3de>
 80017a4:	e000      	b.n	80017a8 <HAL_RCC_OscConfig+0x400>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017a6:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f003 0302 	and.w	r3, r3, #2
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d077      	beq.n	80018a4 <HAL_RCC_OscConfig+0x4fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	68db      	ldr	r3, [r3, #12]
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d009      	beq.n	80017d0 <HAL_RCC_OscConfig+0x428>
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	68db      	ldr	r3, [r3, #12]
 80017c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80017c4:	d004      	beq.n	80017d0 <HAL_RCC_OscConfig+0x428>
 80017c6:	f44f 7111 	mov.w	r1, #580	; 0x244
 80017ca:	485b      	ldr	r0, [pc, #364]	; (8001938 <HAL_RCC_OscConfig+0x590>)
 80017cc:	f006 fd2b 	bl	8008226 <assert_failed>
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	691b      	ldr	r3, [r3, #16]
 80017d4:	2b1f      	cmp	r3, #31
 80017d6:	d904      	bls.n	80017e2 <HAL_RCC_OscConfig+0x43a>
 80017d8:	f240 2145 	movw	r1, #581	; 0x245
 80017dc:	4856      	ldr	r0, [pc, #344]	; (8001938 <HAL_RCC_OscConfig+0x590>)
 80017de:	f006 fd22 	bl	8008226 <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80017e2:	69bb      	ldr	r3, [r7, #24]
 80017e4:	2b04      	cmp	r3, #4
 80017e6:	d005      	beq.n	80017f4 <HAL_RCC_OscConfig+0x44c>
 80017e8:	69bb      	ldr	r3, [r7, #24]
 80017ea:	2b0c      	cmp	r3, #12
 80017ec:	d119      	bne.n	8001822 <HAL_RCC_OscConfig+0x47a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80017ee:	697b      	ldr	r3, [r7, #20]
 80017f0:	2b02      	cmp	r3, #2
 80017f2:	d116      	bne.n	8001822 <HAL_RCC_OscConfig+0x47a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80017f4:	4b51      	ldr	r3, [pc, #324]	; (800193c <HAL_RCC_OscConfig+0x594>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d005      	beq.n	800180c <HAL_RCC_OscConfig+0x464>
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	68db      	ldr	r3, [r3, #12]
 8001804:	2b00      	cmp	r3, #0
 8001806:	d101      	bne.n	800180c <HAL_RCC_OscConfig+0x464>
      {
        return HAL_ERROR;
 8001808:	2301      	movs	r3, #1
 800180a:	e2b3      	b.n	8001d74 <HAL_RCC_OscConfig+0x9cc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800180c:	4b4b      	ldr	r3, [pc, #300]	; (800193c <HAL_RCC_OscConfig+0x594>)
 800180e:	685b      	ldr	r3, [r3, #4]
 8001810:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	691b      	ldr	r3, [r3, #16]
 8001818:	061b      	lsls	r3, r3, #24
 800181a:	4948      	ldr	r1, [pc, #288]	; (800193c <HAL_RCC_OscConfig+0x594>)
 800181c:	4313      	orrs	r3, r2
 800181e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001820:	e040      	b.n	80018a4 <HAL_RCC_OscConfig+0x4fc>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	68db      	ldr	r3, [r3, #12]
 8001826:	2b00      	cmp	r3, #0
 8001828:	d023      	beq.n	8001872 <HAL_RCC_OscConfig+0x4ca>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800182a:	4b44      	ldr	r3, [pc, #272]	; (800193c <HAL_RCC_OscConfig+0x594>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	4a43      	ldr	r2, [pc, #268]	; (800193c <HAL_RCC_OscConfig+0x594>)
 8001830:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001834:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001836:	f7fe fecd 	bl	80005d4 <HAL_GetTick>
 800183a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800183c:	e008      	b.n	8001850 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800183e:	f7fe fec9 	bl	80005d4 <HAL_GetTick>
 8001842:	4602      	mov	r2, r0
 8001844:	693b      	ldr	r3, [r7, #16]
 8001846:	1ad3      	subs	r3, r2, r3
 8001848:	2b02      	cmp	r3, #2
 800184a:	d901      	bls.n	8001850 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 800184c:	2303      	movs	r3, #3
 800184e:	e291      	b.n	8001d74 <HAL_RCC_OscConfig+0x9cc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001850:	4b3a      	ldr	r3, [pc, #232]	; (800193c <HAL_RCC_OscConfig+0x594>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001858:	2b00      	cmp	r3, #0
 800185a:	d0f0      	beq.n	800183e <HAL_RCC_OscConfig+0x496>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800185c:	4b37      	ldr	r3, [pc, #220]	; (800193c <HAL_RCC_OscConfig+0x594>)
 800185e:	685b      	ldr	r3, [r3, #4]
 8001860:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	691b      	ldr	r3, [r3, #16]
 8001868:	061b      	lsls	r3, r3, #24
 800186a:	4934      	ldr	r1, [pc, #208]	; (800193c <HAL_RCC_OscConfig+0x594>)
 800186c:	4313      	orrs	r3, r2
 800186e:	604b      	str	r3, [r1, #4]
 8001870:	e018      	b.n	80018a4 <HAL_RCC_OscConfig+0x4fc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001872:	4b32      	ldr	r3, [pc, #200]	; (800193c <HAL_RCC_OscConfig+0x594>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	4a31      	ldr	r2, [pc, #196]	; (800193c <HAL_RCC_OscConfig+0x594>)
 8001878:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800187c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800187e:	f7fe fea9 	bl	80005d4 <HAL_GetTick>
 8001882:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001884:	e008      	b.n	8001898 <HAL_RCC_OscConfig+0x4f0>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001886:	f7fe fea5 	bl	80005d4 <HAL_GetTick>
 800188a:	4602      	mov	r2, r0
 800188c:	693b      	ldr	r3, [r7, #16]
 800188e:	1ad3      	subs	r3, r2, r3
 8001890:	2b02      	cmp	r3, #2
 8001892:	d901      	bls.n	8001898 <HAL_RCC_OscConfig+0x4f0>
          {
            return HAL_TIMEOUT;
 8001894:	2303      	movs	r3, #3
 8001896:	e26d      	b.n	8001d74 <HAL_RCC_OscConfig+0x9cc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001898:	4b28      	ldr	r3, [pc, #160]	; (800193c <HAL_RCC_OscConfig+0x594>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d1f0      	bne.n	8001886 <HAL_RCC_OscConfig+0x4de>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f003 0308 	and.w	r3, r3, #8
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d04e      	beq.n	800194e <HAL_RCC_OscConfig+0x5a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	695b      	ldr	r3, [r3, #20]
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d008      	beq.n	80018ca <HAL_RCC_OscConfig+0x522>
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	695b      	ldr	r3, [r3, #20]
 80018bc:	2b01      	cmp	r3, #1
 80018be:	d004      	beq.n	80018ca <HAL_RCC_OscConfig+0x522>
 80018c0:	f240 2185 	movw	r1, #645	; 0x285
 80018c4:	481c      	ldr	r0, [pc, #112]	; (8001938 <HAL_RCC_OscConfig+0x590>)
 80018c6:	f006 fcae 	bl	8008226 <assert_failed>

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	695b      	ldr	r3, [r3, #20]
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d01c      	beq.n	800190c <HAL_RCC_OscConfig+0x564>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80018d2:	4b1a      	ldr	r3, [pc, #104]	; (800193c <HAL_RCC_OscConfig+0x594>)
 80018d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80018d8:	4a18      	ldr	r2, [pc, #96]	; (800193c <HAL_RCC_OscConfig+0x594>)
 80018da:	f043 0301 	orr.w	r3, r3, #1
 80018de:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018e2:	f7fe fe77 	bl	80005d4 <HAL_GetTick>
 80018e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80018e8:	e008      	b.n	80018fc <HAL_RCC_OscConfig+0x554>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018ea:	f7fe fe73 	bl	80005d4 <HAL_GetTick>
 80018ee:	4602      	mov	r2, r0
 80018f0:	693b      	ldr	r3, [r7, #16]
 80018f2:	1ad3      	subs	r3, r2, r3
 80018f4:	2b02      	cmp	r3, #2
 80018f6:	d901      	bls.n	80018fc <HAL_RCC_OscConfig+0x554>
        {
          return HAL_TIMEOUT;
 80018f8:	2303      	movs	r3, #3
 80018fa:	e23b      	b.n	8001d74 <HAL_RCC_OscConfig+0x9cc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80018fc:	4b0f      	ldr	r3, [pc, #60]	; (800193c <HAL_RCC_OscConfig+0x594>)
 80018fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001902:	f003 0302 	and.w	r3, r3, #2
 8001906:	2b00      	cmp	r3, #0
 8001908:	d0ef      	beq.n	80018ea <HAL_RCC_OscConfig+0x542>
 800190a:	e020      	b.n	800194e <HAL_RCC_OscConfig+0x5a6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800190c:	4b0b      	ldr	r3, [pc, #44]	; (800193c <HAL_RCC_OscConfig+0x594>)
 800190e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001912:	4a0a      	ldr	r2, [pc, #40]	; (800193c <HAL_RCC_OscConfig+0x594>)
 8001914:	f023 0301 	bic.w	r3, r3, #1
 8001918:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800191c:	f7fe fe5a 	bl	80005d4 <HAL_GetTick>
 8001920:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001922:	e00d      	b.n	8001940 <HAL_RCC_OscConfig+0x598>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001924:	f7fe fe56 	bl	80005d4 <HAL_GetTick>
 8001928:	4602      	mov	r2, r0
 800192a:	693b      	ldr	r3, [r7, #16]
 800192c:	1ad3      	subs	r3, r2, r3
 800192e:	2b02      	cmp	r3, #2
 8001930:	d906      	bls.n	8001940 <HAL_RCC_OscConfig+0x598>
        {
          return HAL_TIMEOUT;
 8001932:	2303      	movs	r3, #3
 8001934:	e21e      	b.n	8001d74 <HAL_RCC_OscConfig+0x9cc>
 8001936:	bf00      	nop
 8001938:	0800a634 	.word	0x0800a634
 800193c:	40021000 	.word	0x40021000
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001940:	4ba7      	ldr	r3, [pc, #668]	; (8001be0 <HAL_RCC_OscConfig+0x838>)
 8001942:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001946:	f003 0302 	and.w	r3, r3, #2
 800194a:	2b00      	cmp	r3, #0
 800194c:	d1ea      	bne.n	8001924 <HAL_RCC_OscConfig+0x57c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f003 0304 	and.w	r3, r3, #4
 8001956:	2b00      	cmp	r3, #0
 8001958:	f000 80b2 	beq.w	8001ac0 <HAL_RCC_OscConfig+0x718>
  {
    FlagStatus       pwrclkchanged = RESET;
 800195c:	2300      	movs	r3, #0
 800195e:	77fb      	strb	r3, [r7, #31]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	689b      	ldr	r3, [r3, #8]
 8001964:	2b00      	cmp	r3, #0
 8001966:	d00c      	beq.n	8001982 <HAL_RCC_OscConfig+0x5da>
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	689b      	ldr	r3, [r3, #8]
 800196c:	2b01      	cmp	r3, #1
 800196e:	d008      	beq.n	8001982 <HAL_RCC_OscConfig+0x5da>
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	689b      	ldr	r3, [r3, #8]
 8001974:	2b05      	cmp	r3, #5
 8001976:	d004      	beq.n	8001982 <HAL_RCC_OscConfig+0x5da>
 8001978:	f44f 7136 	mov.w	r1, #728	; 0x2d8
 800197c:	4899      	ldr	r0, [pc, #612]	; (8001be4 <HAL_RCC_OscConfig+0x83c>)
 800197e:	f006 fc52 	bl	8008226 <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001982:	4b97      	ldr	r3, [pc, #604]	; (8001be0 <HAL_RCC_OscConfig+0x838>)
 8001984:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001986:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800198a:	2b00      	cmp	r3, #0
 800198c:	d10d      	bne.n	80019aa <HAL_RCC_OscConfig+0x602>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800198e:	4b94      	ldr	r3, [pc, #592]	; (8001be0 <HAL_RCC_OscConfig+0x838>)
 8001990:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001992:	4a93      	ldr	r2, [pc, #588]	; (8001be0 <HAL_RCC_OscConfig+0x838>)
 8001994:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001998:	6593      	str	r3, [r2, #88]	; 0x58
 800199a:	4b91      	ldr	r3, [pc, #580]	; (8001be0 <HAL_RCC_OscConfig+0x838>)
 800199c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800199e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019a2:	60bb      	str	r3, [r7, #8]
 80019a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80019a6:	2301      	movs	r3, #1
 80019a8:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80019aa:	4b8f      	ldr	r3, [pc, #572]	; (8001be8 <HAL_RCC_OscConfig+0x840>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d118      	bne.n	80019e8 <HAL_RCC_OscConfig+0x640>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80019b6:	4b8c      	ldr	r3, [pc, #560]	; (8001be8 <HAL_RCC_OscConfig+0x840>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	4a8b      	ldr	r2, [pc, #556]	; (8001be8 <HAL_RCC_OscConfig+0x840>)
 80019bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019c0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80019c2:	f7fe fe07 	bl	80005d4 <HAL_GetTick>
 80019c6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80019c8:	e008      	b.n	80019dc <HAL_RCC_OscConfig+0x634>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019ca:	f7fe fe03 	bl	80005d4 <HAL_GetTick>
 80019ce:	4602      	mov	r2, r0
 80019d0:	693b      	ldr	r3, [r7, #16]
 80019d2:	1ad3      	subs	r3, r2, r3
 80019d4:	2b02      	cmp	r3, #2
 80019d6:	d901      	bls.n	80019dc <HAL_RCC_OscConfig+0x634>
        {
          return HAL_TIMEOUT;
 80019d8:	2303      	movs	r3, #3
 80019da:	e1cb      	b.n	8001d74 <HAL_RCC_OscConfig+0x9cc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80019dc:	4b82      	ldr	r3, [pc, #520]	; (8001be8 <HAL_RCC_OscConfig+0x840>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d0f0      	beq.n	80019ca <HAL_RCC_OscConfig+0x622>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	689b      	ldr	r3, [r3, #8]
 80019ec:	2b01      	cmp	r3, #1
 80019ee:	d108      	bne.n	8001a02 <HAL_RCC_OscConfig+0x65a>
 80019f0:	4b7b      	ldr	r3, [pc, #492]	; (8001be0 <HAL_RCC_OscConfig+0x838>)
 80019f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019f6:	4a7a      	ldr	r2, [pc, #488]	; (8001be0 <HAL_RCC_OscConfig+0x838>)
 80019f8:	f043 0301 	orr.w	r3, r3, #1
 80019fc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001a00:	e024      	b.n	8001a4c <HAL_RCC_OscConfig+0x6a4>
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	689b      	ldr	r3, [r3, #8]
 8001a06:	2b05      	cmp	r3, #5
 8001a08:	d110      	bne.n	8001a2c <HAL_RCC_OscConfig+0x684>
 8001a0a:	4b75      	ldr	r3, [pc, #468]	; (8001be0 <HAL_RCC_OscConfig+0x838>)
 8001a0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a10:	4a73      	ldr	r2, [pc, #460]	; (8001be0 <HAL_RCC_OscConfig+0x838>)
 8001a12:	f043 0304 	orr.w	r3, r3, #4
 8001a16:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001a1a:	4b71      	ldr	r3, [pc, #452]	; (8001be0 <HAL_RCC_OscConfig+0x838>)
 8001a1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a20:	4a6f      	ldr	r2, [pc, #444]	; (8001be0 <HAL_RCC_OscConfig+0x838>)
 8001a22:	f043 0301 	orr.w	r3, r3, #1
 8001a26:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001a2a:	e00f      	b.n	8001a4c <HAL_RCC_OscConfig+0x6a4>
 8001a2c:	4b6c      	ldr	r3, [pc, #432]	; (8001be0 <HAL_RCC_OscConfig+0x838>)
 8001a2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a32:	4a6b      	ldr	r2, [pc, #428]	; (8001be0 <HAL_RCC_OscConfig+0x838>)
 8001a34:	f023 0301 	bic.w	r3, r3, #1
 8001a38:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001a3c:	4b68      	ldr	r3, [pc, #416]	; (8001be0 <HAL_RCC_OscConfig+0x838>)
 8001a3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a42:	4a67      	ldr	r2, [pc, #412]	; (8001be0 <HAL_RCC_OscConfig+0x838>)
 8001a44:	f023 0304 	bic.w	r3, r3, #4
 8001a48:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	689b      	ldr	r3, [r3, #8]
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d016      	beq.n	8001a82 <HAL_RCC_OscConfig+0x6da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a54:	f7fe fdbe 	bl	80005d4 <HAL_GetTick>
 8001a58:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001a5a:	e00a      	b.n	8001a72 <HAL_RCC_OscConfig+0x6ca>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a5c:	f7fe fdba 	bl	80005d4 <HAL_GetTick>
 8001a60:	4602      	mov	r2, r0
 8001a62:	693b      	ldr	r3, [r7, #16]
 8001a64:	1ad3      	subs	r3, r2, r3
 8001a66:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a6a:	4293      	cmp	r3, r2
 8001a6c:	d901      	bls.n	8001a72 <HAL_RCC_OscConfig+0x6ca>
        {
          return HAL_TIMEOUT;
 8001a6e:	2303      	movs	r3, #3
 8001a70:	e180      	b.n	8001d74 <HAL_RCC_OscConfig+0x9cc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001a72:	4b5b      	ldr	r3, [pc, #364]	; (8001be0 <HAL_RCC_OscConfig+0x838>)
 8001a74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a78:	f003 0302 	and.w	r3, r3, #2
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d0ed      	beq.n	8001a5c <HAL_RCC_OscConfig+0x6b4>
 8001a80:	e015      	b.n	8001aae <HAL_RCC_OscConfig+0x706>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a82:	f7fe fda7 	bl	80005d4 <HAL_GetTick>
 8001a86:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001a88:	e00a      	b.n	8001aa0 <HAL_RCC_OscConfig+0x6f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a8a:	f7fe fda3 	bl	80005d4 <HAL_GetTick>
 8001a8e:	4602      	mov	r2, r0
 8001a90:	693b      	ldr	r3, [r7, #16]
 8001a92:	1ad3      	subs	r3, r2, r3
 8001a94:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a98:	4293      	cmp	r3, r2
 8001a9a:	d901      	bls.n	8001aa0 <HAL_RCC_OscConfig+0x6f8>
        {
          return HAL_TIMEOUT;
 8001a9c:	2303      	movs	r3, #3
 8001a9e:	e169      	b.n	8001d74 <HAL_RCC_OscConfig+0x9cc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001aa0:	4b4f      	ldr	r3, [pc, #316]	; (8001be0 <HAL_RCC_OscConfig+0x838>)
 8001aa2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001aa6:	f003 0302 	and.w	r3, r3, #2
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d1ed      	bne.n	8001a8a <HAL_RCC_OscConfig+0x6e2>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001aae:	7ffb      	ldrb	r3, [r7, #31]
 8001ab0:	2b01      	cmp	r3, #1
 8001ab2:	d105      	bne.n	8001ac0 <HAL_RCC_OscConfig+0x718>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ab4:	4b4a      	ldr	r3, [pc, #296]	; (8001be0 <HAL_RCC_OscConfig+0x838>)
 8001ab6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ab8:	4a49      	ldr	r2, [pc, #292]	; (8001be0 <HAL_RCC_OscConfig+0x838>)
 8001aba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001abe:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d00c      	beq.n	8001ae2 <HAL_RCC_OscConfig+0x73a>
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001acc:	2b01      	cmp	r3, #1
 8001ace:	d008      	beq.n	8001ae2 <HAL_RCC_OscConfig+0x73a>
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ad4:	2b02      	cmp	r3, #2
 8001ad6:	d004      	beq.n	8001ae2 <HAL_RCC_OscConfig+0x73a>
 8001ad8:	f240 3166 	movw	r1, #870	; 0x366
 8001adc:	4841      	ldr	r0, [pc, #260]	; (8001be4 <HAL_RCC_OscConfig+0x83c>)
 8001ade:	f006 fba2 	bl	8008226 <assert_failed>

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	f000 8143 	beq.w	8001d72 <HAL_RCC_OscConfig+0x9ca>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001aec:	69bb      	ldr	r3, [r7, #24]
 8001aee:	2b0c      	cmp	r3, #12
 8001af0:	f000 80fc 	beq.w	8001cec <HAL_RCC_OscConfig+0x944>
    {
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001af8:	2b02      	cmp	r3, #2
 8001afa:	f040 80c9 	bne.w	8001c90 <HAL_RCC_OscConfig+0x8e8>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d010      	beq.n	8001b28 <HAL_RCC_OscConfig+0x780>
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b0a:	2b01      	cmp	r3, #1
 8001b0c:	d00c      	beq.n	8001b28 <HAL_RCC_OscConfig+0x780>
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b12:	2b02      	cmp	r3, #2
 8001b14:	d008      	beq.n	8001b28 <HAL_RCC_OscConfig+0x780>
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b1a:	2b03      	cmp	r3, #3
 8001b1c:	d004      	beq.n	8001b28 <HAL_RCC_OscConfig+0x780>
 8001b1e:	f44f 715c 	mov.w	r1, #880	; 0x370
 8001b22:	4830      	ldr	r0, [pc, #192]	; (8001be4 <HAL_RCC_OscConfig+0x83c>)
 8001b24:	f006 fb7f 	bl	8008226 <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d003      	beq.n	8001b38 <HAL_RCC_OscConfig+0x790>
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b34:	2b08      	cmp	r3, #8
 8001b36:	d904      	bls.n	8001b42 <HAL_RCC_OscConfig+0x79a>
 8001b38:	f240 3171 	movw	r1, #881	; 0x371
 8001b3c:	4829      	ldr	r0, [pc, #164]	; (8001be4 <HAL_RCC_OscConfig+0x83c>)
 8001b3e:	f006 fb72 	bl	8008226 <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b46:	2b07      	cmp	r3, #7
 8001b48:	d903      	bls.n	8001b52 <HAL_RCC_OscConfig+0x7aa>
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b4e:	2b56      	cmp	r3, #86	; 0x56
 8001b50:	d904      	bls.n	8001b5c <HAL_RCC_OscConfig+0x7b4>
 8001b52:	f240 3172 	movw	r1, #882	; 0x372
 8001b56:	4823      	ldr	r0, [pc, #140]	; (8001be4 <HAL_RCC_OscConfig+0x83c>)
 8001b58:	f006 fb65 	bl	8008226 <assert_failed>
#if defined(RCC_PLLP_SUPPORT)
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b60:	2b07      	cmp	r3, #7
 8001b62:	d008      	beq.n	8001b76 <HAL_RCC_OscConfig+0x7ce>
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b68:	2b11      	cmp	r3, #17
 8001b6a:	d004      	beq.n	8001b76 <HAL_RCC_OscConfig+0x7ce>
 8001b6c:	f44f 715d 	mov.w	r1, #884	; 0x374
 8001b70:	481c      	ldr	r0, [pc, #112]	; (8001be4 <HAL_RCC_OscConfig+0x83c>)
 8001b72:	f006 fb58 	bl	8008226 <assert_failed>
#endif /* RCC_PLLP_SUPPORT */
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b7a:	2b02      	cmp	r3, #2
 8001b7c:	d010      	beq.n	8001ba0 <HAL_RCC_OscConfig+0x7f8>
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b82:	2b04      	cmp	r3, #4
 8001b84:	d00c      	beq.n	8001ba0 <HAL_RCC_OscConfig+0x7f8>
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b8a:	2b06      	cmp	r3, #6
 8001b8c:	d008      	beq.n	8001ba0 <HAL_RCC_OscConfig+0x7f8>
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b92:	2b08      	cmp	r3, #8
 8001b94:	d004      	beq.n	8001ba0 <HAL_RCC_OscConfig+0x7f8>
 8001b96:	f240 3176 	movw	r1, #886	; 0x376
 8001b9a:	4812      	ldr	r0, [pc, #72]	; (8001be4 <HAL_RCC_OscConfig+0x83c>)
 8001b9c:	f006 fb43 	bl	8008226 <assert_failed>
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ba4:	2b02      	cmp	r3, #2
 8001ba6:	d010      	beq.n	8001bca <HAL_RCC_OscConfig+0x822>
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bac:	2b04      	cmp	r3, #4
 8001bae:	d00c      	beq.n	8001bca <HAL_RCC_OscConfig+0x822>
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bb4:	2b06      	cmp	r3, #6
 8001bb6:	d008      	beq.n	8001bca <HAL_RCC_OscConfig+0x822>
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bbc:	2b08      	cmp	r3, #8
 8001bbe:	d004      	beq.n	8001bca <HAL_RCC_OscConfig+0x822>
 8001bc0:	f240 3177 	movw	r1, #887	; 0x377
 8001bc4:	4807      	ldr	r0, [pc, #28]	; (8001be4 <HAL_RCC_OscConfig+0x83c>)
 8001bc6:	f006 fb2e 	bl	8008226 <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bca:	4b05      	ldr	r3, [pc, #20]	; (8001be0 <HAL_RCC_OscConfig+0x838>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	4a04      	ldr	r2, [pc, #16]	; (8001be0 <HAL_RCC_OscConfig+0x838>)
 8001bd0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001bd4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bd6:	f7fe fcfd 	bl	80005d4 <HAL_GetTick>
 8001bda:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001bdc:	e00f      	b.n	8001bfe <HAL_RCC_OscConfig+0x856>
 8001bde:	bf00      	nop
 8001be0:	40021000 	.word	0x40021000
 8001be4:	0800a634 	.word	0x0800a634
 8001be8:	40007000 	.word	0x40007000
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bec:	f7fe fcf2 	bl	80005d4 <HAL_GetTick>
 8001bf0:	4602      	mov	r2, r0
 8001bf2:	693b      	ldr	r3, [r7, #16]
 8001bf4:	1ad3      	subs	r3, r2, r3
 8001bf6:	2b02      	cmp	r3, #2
 8001bf8:	d901      	bls.n	8001bfe <HAL_RCC_OscConfig+0x856>
          {
            return HAL_TIMEOUT;
 8001bfa:	2303      	movs	r3, #3
 8001bfc:	e0ba      	b.n	8001d74 <HAL_RCC_OscConfig+0x9cc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001bfe:	4b5f      	ldr	r3, [pc, #380]	; (8001d7c <HAL_RCC_OscConfig+0x9d4>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d1f0      	bne.n	8001bec <HAL_RCC_OscConfig+0x844>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c0a:	4b5c      	ldr	r3, [pc, #368]	; (8001d7c <HAL_RCC_OscConfig+0x9d4>)
 8001c0c:	68da      	ldr	r2, [r3, #12]
 8001c0e:	4b5c      	ldr	r3, [pc, #368]	; (8001d80 <HAL_RCC_OscConfig+0x9d8>)
 8001c10:	4013      	ands	r3, r2
 8001c12:	687a      	ldr	r2, [r7, #4]
 8001c14:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001c16:	687a      	ldr	r2, [r7, #4]
 8001c18:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001c1a:	3a01      	subs	r2, #1
 8001c1c:	0112      	lsls	r2, r2, #4
 8001c1e:	4311      	orrs	r1, r2
 8001c20:	687a      	ldr	r2, [r7, #4]
 8001c22:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001c24:	0212      	lsls	r2, r2, #8
 8001c26:	4311      	orrs	r1, r2
 8001c28:	687a      	ldr	r2, [r7, #4]
 8001c2a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001c2c:	0852      	lsrs	r2, r2, #1
 8001c2e:	3a01      	subs	r2, #1
 8001c30:	0552      	lsls	r2, r2, #21
 8001c32:	4311      	orrs	r1, r2
 8001c34:	687a      	ldr	r2, [r7, #4]
 8001c36:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001c38:	0852      	lsrs	r2, r2, #1
 8001c3a:	3a01      	subs	r2, #1
 8001c3c:	0652      	lsls	r2, r2, #25
 8001c3e:	4311      	orrs	r1, r2
 8001c40:	687a      	ldr	r2, [r7, #4]
 8001c42:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001c44:	0912      	lsrs	r2, r2, #4
 8001c46:	0452      	lsls	r2, r2, #17
 8001c48:	430a      	orrs	r2, r1
 8001c4a:	494c      	ldr	r1, [pc, #304]	; (8001d7c <HAL_RCC_OscConfig+0x9d4>)
 8001c4c:	4313      	orrs	r3, r2
 8001c4e:	60cb      	str	r3, [r1, #12]
#endif
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c50:	4b4a      	ldr	r3, [pc, #296]	; (8001d7c <HAL_RCC_OscConfig+0x9d4>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	4a49      	ldr	r2, [pc, #292]	; (8001d7c <HAL_RCC_OscConfig+0x9d4>)
 8001c56:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c5a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001c5c:	4b47      	ldr	r3, [pc, #284]	; (8001d7c <HAL_RCC_OscConfig+0x9d4>)
 8001c5e:	68db      	ldr	r3, [r3, #12]
 8001c60:	4a46      	ldr	r2, [pc, #280]	; (8001d7c <HAL_RCC_OscConfig+0x9d4>)
 8001c62:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c66:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c68:	f7fe fcb4 	bl	80005d4 <HAL_GetTick>
 8001c6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c6e:	e008      	b.n	8001c82 <HAL_RCC_OscConfig+0x8da>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c70:	f7fe fcb0 	bl	80005d4 <HAL_GetTick>
 8001c74:	4602      	mov	r2, r0
 8001c76:	693b      	ldr	r3, [r7, #16]
 8001c78:	1ad3      	subs	r3, r2, r3
 8001c7a:	2b02      	cmp	r3, #2
 8001c7c:	d901      	bls.n	8001c82 <HAL_RCC_OscConfig+0x8da>
          {
            return HAL_TIMEOUT;
 8001c7e:	2303      	movs	r3, #3
 8001c80:	e078      	b.n	8001d74 <HAL_RCC_OscConfig+0x9cc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c82:	4b3e      	ldr	r3, [pc, #248]	; (8001d7c <HAL_RCC_OscConfig+0x9d4>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d0f0      	beq.n	8001c70 <HAL_RCC_OscConfig+0x8c8>
 8001c8e:	e070      	b.n	8001d72 <HAL_RCC_OscConfig+0x9ca>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c90:	4b3a      	ldr	r3, [pc, #232]	; (8001d7c <HAL_RCC_OscConfig+0x9d4>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	4a39      	ldr	r2, [pc, #228]	; (8001d7c <HAL_RCC_OscConfig+0x9d4>)
 8001c96:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001c9a:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8001c9c:	4b37      	ldr	r3, [pc, #220]	; (8001d7c <HAL_RCC_OscConfig+0x9d4>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d105      	bne.n	8001cb4 <HAL_RCC_OscConfig+0x90c>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001ca8:	4b34      	ldr	r3, [pc, #208]	; (8001d7c <HAL_RCC_OscConfig+0x9d4>)
 8001caa:	68db      	ldr	r3, [r3, #12]
 8001cac:	4a33      	ldr	r2, [pc, #204]	; (8001d7c <HAL_RCC_OscConfig+0x9d4>)
 8001cae:	f023 0303 	bic.w	r3, r3, #3
 8001cb2:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001cb4:	4b31      	ldr	r3, [pc, #196]	; (8001d7c <HAL_RCC_OscConfig+0x9d4>)
 8001cb6:	68db      	ldr	r3, [r3, #12]
 8001cb8:	4a30      	ldr	r2, [pc, #192]	; (8001d7c <HAL_RCC_OscConfig+0x9d4>)
 8001cba:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001cbe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001cc2:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cc4:	f7fe fc86 	bl	80005d4 <HAL_GetTick>
 8001cc8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001cca:	e008      	b.n	8001cde <HAL_RCC_OscConfig+0x936>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ccc:	f7fe fc82 	bl	80005d4 <HAL_GetTick>
 8001cd0:	4602      	mov	r2, r0
 8001cd2:	693b      	ldr	r3, [r7, #16]
 8001cd4:	1ad3      	subs	r3, r2, r3
 8001cd6:	2b02      	cmp	r3, #2
 8001cd8:	d901      	bls.n	8001cde <HAL_RCC_OscConfig+0x936>
          {
            return HAL_TIMEOUT;
 8001cda:	2303      	movs	r3, #3
 8001cdc:	e04a      	b.n	8001d74 <HAL_RCC_OscConfig+0x9cc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001cde:	4b27      	ldr	r3, [pc, #156]	; (8001d7c <HAL_RCC_OscConfig+0x9d4>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d1f0      	bne.n	8001ccc <HAL_RCC_OscConfig+0x924>
 8001cea:	e042      	b.n	8001d72 <HAL_RCC_OscConfig+0x9ca>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cf0:	2b01      	cmp	r3, #1
 8001cf2:	d101      	bne.n	8001cf8 <HAL_RCC_OscConfig+0x950>
      {
        return HAL_ERROR;
 8001cf4:	2301      	movs	r3, #1
 8001cf6:	e03d      	b.n	8001d74 <HAL_RCC_OscConfig+0x9cc>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 8001cf8:	4b20      	ldr	r3, [pc, #128]	; (8001d7c <HAL_RCC_OscConfig+0x9d4>)
 8001cfa:	68db      	ldr	r3, [r3, #12]
 8001cfc:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cfe:	697b      	ldr	r3, [r7, #20]
 8001d00:	f003 0203 	and.w	r2, r3, #3
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d08:	429a      	cmp	r2, r3
 8001d0a:	d130      	bne.n	8001d6e <HAL_RCC_OscConfig+0x9c6>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001d0c:	697b      	ldr	r3, [r7, #20]
 8001d0e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d16:	3b01      	subs	r3, #1
 8001d18:	011b      	lsls	r3, r3, #4
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d1a:	429a      	cmp	r2, r3
 8001d1c:	d127      	bne.n	8001d6e <HAL_RCC_OscConfig+0x9c6>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001d1e:	697b      	ldr	r3, [r7, #20]
 8001d20:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d28:	021b      	lsls	r3, r3, #8
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001d2a:	429a      	cmp	r2, r3
 8001d2c:	d11f      	bne.n	8001d6e <HAL_RCC_OscConfig+0x9c6>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001d2e:	697b      	ldr	r3, [r7, #20]
 8001d30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d34:	687a      	ldr	r2, [r7, #4]
 8001d36:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001d38:	2a07      	cmp	r2, #7
 8001d3a:	bf14      	ite	ne
 8001d3c:	2201      	movne	r2, #1
 8001d3e:	2200      	moveq	r2, #0
 8001d40:	b2d2      	uxtb	r2, r2
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001d42:	4293      	cmp	r3, r2
 8001d44:	d113      	bne.n	8001d6e <HAL_RCC_OscConfig+0x9c6>
#endif
#endif
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001d46:	697b      	ldr	r3, [r7, #20]
 8001d48:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d50:	085b      	lsrs	r3, r3, #1
 8001d52:	3b01      	subs	r3, #1
 8001d54:	055b      	lsls	r3, r3, #21
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001d56:	429a      	cmp	r2, r3
 8001d58:	d109      	bne.n	8001d6e <HAL_RCC_OscConfig+0x9c6>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001d5a:	697b      	ldr	r3, [r7, #20]
 8001d5c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d64:	085b      	lsrs	r3, r3, #1
 8001d66:	3b01      	subs	r3, #1
 8001d68:	065b      	lsls	r3, r3, #25
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001d6a:	429a      	cmp	r2, r3
 8001d6c:	d001      	beq.n	8001d72 <HAL_RCC_OscConfig+0x9ca>
        {
          return HAL_ERROR;
 8001d6e:	2301      	movs	r3, #1
 8001d70:	e000      	b.n	8001d74 <HAL_RCC_OscConfig+0x9cc>
        }
      }
    }
  }
  return HAL_OK;
 8001d72:	2300      	movs	r3, #0
}
 8001d74:	4618      	mov	r0, r3
 8001d76:	3720      	adds	r7, #32
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	bd80      	pop	{r7, pc}
 8001d7c:	40021000 	.word	0x40021000
 8001d80:	f99d808c 	.word	0xf99d808c

08001d84 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b084      	sub	sp, #16
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
 8001d8c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d101      	bne.n	8001d98 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d94:	2301      	movs	r3, #1
 8001d96:	e168      	b.n	800206a <HAL_RCC_ClockConfig+0x2e6>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d003      	beq.n	8001da8 <HAL_RCC_ClockConfig+0x24>
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	2b0f      	cmp	r3, #15
 8001da6:	d904      	bls.n	8001db2 <HAL_RCC_ClockConfig+0x2e>
 8001da8:	f240 412e 	movw	r1, #1070	; 0x42e
 8001dac:	4873      	ldr	r0, [pc, #460]	; (8001f7c <HAL_RCC_ClockConfig+0x1f8>)
 8001dae:	f006 fa3a 	bl	8008226 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8001db2:	683b      	ldr	r3, [r7, #0]
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d010      	beq.n	8001dda <HAL_RCC_ClockConfig+0x56>
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	2b01      	cmp	r3, #1
 8001dbc:	d00d      	beq.n	8001dda <HAL_RCC_ClockConfig+0x56>
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	2b02      	cmp	r3, #2
 8001dc2:	d00a      	beq.n	8001dda <HAL_RCC_ClockConfig+0x56>
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	2b03      	cmp	r3, #3
 8001dc8:	d007      	beq.n	8001dda <HAL_RCC_ClockConfig+0x56>
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	2b04      	cmp	r3, #4
 8001dce:	d004      	beq.n	8001dda <HAL_RCC_ClockConfig+0x56>
 8001dd0:	f240 412f 	movw	r1, #1071	; 0x42f
 8001dd4:	4869      	ldr	r0, [pc, #420]	; (8001f7c <HAL_RCC_ClockConfig+0x1f8>)
 8001dd6:	f006 fa26 	bl	8008226 <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001dda:	4b69      	ldr	r3, [pc, #420]	; (8001f80 <HAL_RCC_ClockConfig+0x1fc>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f003 0307 	and.w	r3, r3, #7
 8001de2:	683a      	ldr	r2, [r7, #0]
 8001de4:	429a      	cmp	r2, r3
 8001de6:	d910      	bls.n	8001e0a <HAL_RCC_ClockConfig+0x86>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001de8:	4b65      	ldr	r3, [pc, #404]	; (8001f80 <HAL_RCC_ClockConfig+0x1fc>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f023 0207 	bic.w	r2, r3, #7
 8001df0:	4963      	ldr	r1, [pc, #396]	; (8001f80 <HAL_RCC_ClockConfig+0x1fc>)
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	4313      	orrs	r3, r2
 8001df6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001df8:	4b61      	ldr	r3, [pc, #388]	; (8001f80 <HAL_RCC_ClockConfig+0x1fc>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f003 0307 	and.w	r3, r3, #7
 8001e00:	683a      	ldr	r2, [r7, #0]
 8001e02:	429a      	cmp	r2, r3
 8001e04:	d001      	beq.n	8001e0a <HAL_RCC_ClockConfig+0x86>
    {
      return HAL_ERROR;
 8001e06:	2301      	movs	r3, #1
 8001e08:	e12f      	b.n	800206a <HAL_RCC_ClockConfig+0x2e6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f003 0301 	and.w	r3, r3, #1
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d061      	beq.n	8001eda <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	685b      	ldr	r3, [r3, #4]
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d010      	beq.n	8001e40 <HAL_RCC_ClockConfig+0xbc>
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	685b      	ldr	r3, [r3, #4]
 8001e22:	2b01      	cmp	r3, #1
 8001e24:	d00c      	beq.n	8001e40 <HAL_RCC_ClockConfig+0xbc>
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	685b      	ldr	r3, [r3, #4]
 8001e2a:	2b02      	cmp	r3, #2
 8001e2c:	d008      	beq.n	8001e40 <HAL_RCC_ClockConfig+0xbc>
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	685b      	ldr	r3, [r3, #4]
 8001e32:	2b03      	cmp	r3, #3
 8001e34:	d004      	beq.n	8001e40 <HAL_RCC_ClockConfig+0xbc>
 8001e36:	f240 4146 	movw	r1, #1094	; 0x446
 8001e3a:	4850      	ldr	r0, [pc, #320]	; (8001f7c <HAL_RCC_ClockConfig+0x1f8>)
 8001e3c:	f006 f9f3 	bl	8008226 <assert_failed>

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	685b      	ldr	r3, [r3, #4]
 8001e44:	2b03      	cmp	r3, #3
 8001e46:	d107      	bne.n	8001e58 <HAL_RCC_ClockConfig+0xd4>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e48:	4b4e      	ldr	r3, [pc, #312]	; (8001f84 <HAL_RCC_ClockConfig+0x200>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d121      	bne.n	8001e98 <HAL_RCC_ClockConfig+0x114>
      {
        return HAL_ERROR;
 8001e54:	2301      	movs	r3, #1
 8001e56:	e108      	b.n	800206a <HAL_RCC_ClockConfig+0x2e6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	685b      	ldr	r3, [r3, #4]
 8001e5c:	2b02      	cmp	r3, #2
 8001e5e:	d107      	bne.n	8001e70 <HAL_RCC_ClockConfig+0xec>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e60:	4b48      	ldr	r3, [pc, #288]	; (8001f84 <HAL_RCC_ClockConfig+0x200>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d115      	bne.n	8001e98 <HAL_RCC_ClockConfig+0x114>
        {
          return HAL_ERROR;
 8001e6c:	2301      	movs	r3, #1
 8001e6e:	e0fc      	b.n	800206a <HAL_RCC_ClockConfig+0x2e6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	685b      	ldr	r3, [r3, #4]
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d107      	bne.n	8001e88 <HAL_RCC_ClockConfig+0x104>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001e78:	4b42      	ldr	r3, [pc, #264]	; (8001f84 <HAL_RCC_ClockConfig+0x200>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f003 0302 	and.w	r3, r3, #2
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d109      	bne.n	8001e98 <HAL_RCC_ClockConfig+0x114>
        {
          return HAL_ERROR;
 8001e84:	2301      	movs	r3, #1
 8001e86:	e0f0      	b.n	800206a <HAL_RCC_ClockConfig+0x2e6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e88:	4b3e      	ldr	r3, [pc, #248]	; (8001f84 <HAL_RCC_ClockConfig+0x200>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d101      	bne.n	8001e98 <HAL_RCC_ClockConfig+0x114>
        {
          return HAL_ERROR;
 8001e94:	2301      	movs	r3, #1
 8001e96:	e0e8      	b.n	800206a <HAL_RCC_ClockConfig+0x2e6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001e98:	4b3a      	ldr	r3, [pc, #232]	; (8001f84 <HAL_RCC_ClockConfig+0x200>)
 8001e9a:	689b      	ldr	r3, [r3, #8]
 8001e9c:	f023 0203 	bic.w	r2, r3, #3
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	4937      	ldr	r1, [pc, #220]	; (8001f84 <HAL_RCC_ClockConfig+0x200>)
 8001ea6:	4313      	orrs	r3, r2
 8001ea8:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001eaa:	f7fe fb93 	bl	80005d4 <HAL_GetTick>
 8001eae:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001eb0:	e00a      	b.n	8001ec8 <HAL_RCC_ClockConfig+0x144>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001eb2:	f7fe fb8f 	bl	80005d4 <HAL_GetTick>
 8001eb6:	4602      	mov	r2, r0
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	1ad3      	subs	r3, r2, r3
 8001ebc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ec0:	4293      	cmp	r3, r2
 8001ec2:	d901      	bls.n	8001ec8 <HAL_RCC_ClockConfig+0x144>
      {
        return HAL_TIMEOUT;
 8001ec4:	2303      	movs	r3, #3
 8001ec6:	e0d0      	b.n	800206a <HAL_RCC_ClockConfig+0x2e6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ec8:	4b2e      	ldr	r3, [pc, #184]	; (8001f84 <HAL_RCC_ClockConfig+0x200>)
 8001eca:	689b      	ldr	r3, [r3, #8]
 8001ecc:	f003 020c 	and.w	r2, r3, #12
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	685b      	ldr	r3, [r3, #4]
 8001ed4:	009b      	lsls	r3, r3, #2
 8001ed6:	429a      	cmp	r2, r3
 8001ed8:	d1eb      	bne.n	8001eb2 <HAL_RCC_ClockConfig+0x12e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f003 0302 	and.w	r3, r3, #2
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d031      	beq.n	8001f4a <HAL_RCC_ClockConfig+0x1c6>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	689b      	ldr	r3, [r3, #8]
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d024      	beq.n	8001f38 <HAL_RCC_ClockConfig+0x1b4>
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	689b      	ldr	r3, [r3, #8]
 8001ef2:	2b80      	cmp	r3, #128	; 0x80
 8001ef4:	d020      	beq.n	8001f38 <HAL_RCC_ClockConfig+0x1b4>
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	689b      	ldr	r3, [r3, #8]
 8001efa:	2b90      	cmp	r3, #144	; 0x90
 8001efc:	d01c      	beq.n	8001f38 <HAL_RCC_ClockConfig+0x1b4>
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	689b      	ldr	r3, [r3, #8]
 8001f02:	2ba0      	cmp	r3, #160	; 0xa0
 8001f04:	d018      	beq.n	8001f38 <HAL_RCC_ClockConfig+0x1b4>
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	689b      	ldr	r3, [r3, #8]
 8001f0a:	2bb0      	cmp	r3, #176	; 0xb0
 8001f0c:	d014      	beq.n	8001f38 <HAL_RCC_ClockConfig+0x1b4>
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	689b      	ldr	r3, [r3, #8]
 8001f12:	2bc0      	cmp	r3, #192	; 0xc0
 8001f14:	d010      	beq.n	8001f38 <HAL_RCC_ClockConfig+0x1b4>
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	689b      	ldr	r3, [r3, #8]
 8001f1a:	2bd0      	cmp	r3, #208	; 0xd0
 8001f1c:	d00c      	beq.n	8001f38 <HAL_RCC_ClockConfig+0x1b4>
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	689b      	ldr	r3, [r3, #8]
 8001f22:	2be0      	cmp	r3, #224	; 0xe0
 8001f24:	d008      	beq.n	8001f38 <HAL_RCC_ClockConfig+0x1b4>
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	689b      	ldr	r3, [r3, #8]
 8001f2a:	2bf0      	cmp	r3, #240	; 0xf0
 8001f2c:	d004      	beq.n	8001f38 <HAL_RCC_ClockConfig+0x1b4>
 8001f2e:	f240 41a2 	movw	r1, #1186	; 0x4a2
 8001f32:	4812      	ldr	r0, [pc, #72]	; (8001f7c <HAL_RCC_ClockConfig+0x1f8>)
 8001f34:	f006 f977 	bl	8008226 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f38:	4b12      	ldr	r3, [pc, #72]	; (8001f84 <HAL_RCC_ClockConfig+0x200>)
 8001f3a:	689b      	ldr	r3, [r3, #8]
 8001f3c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	689b      	ldr	r3, [r3, #8]
 8001f44:	490f      	ldr	r1, [pc, #60]	; (8001f84 <HAL_RCC_ClockConfig+0x200>)
 8001f46:	4313      	orrs	r3, r2
 8001f48:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001f4a:	4b0d      	ldr	r3, [pc, #52]	; (8001f80 <HAL_RCC_ClockConfig+0x1fc>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f003 0307 	and.w	r3, r3, #7
 8001f52:	683a      	ldr	r2, [r7, #0]
 8001f54:	429a      	cmp	r2, r3
 8001f56:	d217      	bcs.n	8001f88 <HAL_RCC_ClockConfig+0x204>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f58:	4b09      	ldr	r3, [pc, #36]	; (8001f80 <HAL_RCC_ClockConfig+0x1fc>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f023 0207 	bic.w	r2, r3, #7
 8001f60:	4907      	ldr	r1, [pc, #28]	; (8001f80 <HAL_RCC_ClockConfig+0x1fc>)
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	4313      	orrs	r3, r2
 8001f66:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f68:	4b05      	ldr	r3, [pc, #20]	; (8001f80 <HAL_RCC_ClockConfig+0x1fc>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f003 0307 	and.w	r3, r3, #7
 8001f70:	683a      	ldr	r2, [r7, #0]
 8001f72:	429a      	cmp	r2, r3
 8001f74:	d008      	beq.n	8001f88 <HAL_RCC_ClockConfig+0x204>
    {
      return HAL_ERROR;
 8001f76:	2301      	movs	r3, #1
 8001f78:	e077      	b.n	800206a <HAL_RCC_ClockConfig+0x2e6>
 8001f7a:	bf00      	nop
 8001f7c:	0800a634 	.word	0x0800a634
 8001f80:	40022000 	.word	0x40022000
 8001f84:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f003 0304 	and.w	r3, r3, #4
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d025      	beq.n	8001fe0 <HAL_RCC_ClockConfig+0x25c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	68db      	ldr	r3, [r3, #12]
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d018      	beq.n	8001fce <HAL_RCC_ClockConfig+0x24a>
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	68db      	ldr	r3, [r3, #12]
 8001fa0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001fa4:	d013      	beq.n	8001fce <HAL_RCC_ClockConfig+0x24a>
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	68db      	ldr	r3, [r3, #12]
 8001faa:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8001fae:	d00e      	beq.n	8001fce <HAL_RCC_ClockConfig+0x24a>
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	68db      	ldr	r3, [r3, #12]
 8001fb4:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8001fb8:	d009      	beq.n	8001fce <HAL_RCC_ClockConfig+0x24a>
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	68db      	ldr	r3, [r3, #12]
 8001fbe:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8001fc2:	d004      	beq.n	8001fce <HAL_RCC_ClockConfig+0x24a>
 8001fc4:	f240 41c1 	movw	r1, #1217	; 0x4c1
 8001fc8:	482a      	ldr	r0, [pc, #168]	; (8002074 <HAL_RCC_ClockConfig+0x2f0>)
 8001fca:	f006 f92c 	bl	8008226 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001fce:	4b2a      	ldr	r3, [pc, #168]	; (8002078 <HAL_RCC_ClockConfig+0x2f4>)
 8001fd0:	689b      	ldr	r3, [r3, #8]
 8001fd2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	68db      	ldr	r3, [r3, #12]
 8001fda:	4927      	ldr	r1, [pc, #156]	; (8002078 <HAL_RCC_ClockConfig+0x2f4>)
 8001fdc:	4313      	orrs	r3, r2
 8001fde:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f003 0308 	and.w	r3, r3, #8
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d026      	beq.n	800203a <HAL_RCC_ClockConfig+0x2b6>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	691b      	ldr	r3, [r3, #16]
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d018      	beq.n	8002026 <HAL_RCC_ClockConfig+0x2a2>
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	691b      	ldr	r3, [r3, #16]
 8001ff8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ffc:	d013      	beq.n	8002026 <HAL_RCC_ClockConfig+0x2a2>
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	691b      	ldr	r3, [r3, #16]
 8002002:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8002006:	d00e      	beq.n	8002026 <HAL_RCC_ClockConfig+0x2a2>
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	691b      	ldr	r3, [r3, #16]
 800200c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8002010:	d009      	beq.n	8002026 <HAL_RCC_ClockConfig+0x2a2>
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	691b      	ldr	r3, [r3, #16]
 8002016:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800201a:	d004      	beq.n	8002026 <HAL_RCC_ClockConfig+0x2a2>
 800201c:	f44f 6199 	mov.w	r1, #1224	; 0x4c8
 8002020:	4814      	ldr	r0, [pc, #80]	; (8002074 <HAL_RCC_ClockConfig+0x2f0>)
 8002022:	f006 f900 	bl	8008226 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002026:	4b14      	ldr	r3, [pc, #80]	; (8002078 <HAL_RCC_ClockConfig+0x2f4>)
 8002028:	689b      	ldr	r3, [r3, #8]
 800202a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	691b      	ldr	r3, [r3, #16]
 8002032:	00db      	lsls	r3, r3, #3
 8002034:	4910      	ldr	r1, [pc, #64]	; (8002078 <HAL_RCC_ClockConfig+0x2f4>)
 8002036:	4313      	orrs	r3, r2
 8002038:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800203a:	f000 f825 	bl	8002088 <HAL_RCC_GetSysClockFreq>
 800203e:	4601      	mov	r1, r0
 8002040:	4b0d      	ldr	r3, [pc, #52]	; (8002078 <HAL_RCC_ClockConfig+0x2f4>)
 8002042:	689b      	ldr	r3, [r3, #8]
 8002044:	091b      	lsrs	r3, r3, #4
 8002046:	f003 030f 	and.w	r3, r3, #15
 800204a:	4a0c      	ldr	r2, [pc, #48]	; (800207c <HAL_RCC_ClockConfig+0x2f8>)
 800204c:	5cd3      	ldrb	r3, [r2, r3]
 800204e:	f003 031f 	and.w	r3, r3, #31
 8002052:	fa21 f303 	lsr.w	r3, r1, r3
 8002056:	4a0a      	ldr	r2, [pc, #40]	; (8002080 <HAL_RCC_ClockConfig+0x2fc>)
 8002058:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800205a:	4b0a      	ldr	r3, [pc, #40]	; (8002084 <HAL_RCC_ClockConfig+0x300>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	4618      	mov	r0, r3
 8002060:	f001 fc48 	bl	80038f4 <HAL_InitTick>
 8002064:	4603      	mov	r3, r0
 8002066:	72fb      	strb	r3, [r7, #11]

  return status;
 8002068:	7afb      	ldrb	r3, [r7, #11]
}
 800206a:	4618      	mov	r0, r3
 800206c:	3710      	adds	r7, #16
 800206e:	46bd      	mov	sp, r7
 8002070:	bd80      	pop	{r7, pc}
 8002072:	bf00      	nop
 8002074:	0800a634 	.word	0x0800a634
 8002078:	40021000 	.word	0x40021000
 800207c:	0800a90c 	.word	0x0800a90c
 8002080:	2000000c 	.word	0x2000000c
 8002084:	20000000 	.word	0x20000000

08002088 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002088:	b480      	push	{r7}
 800208a:	b089      	sub	sp, #36	; 0x24
 800208c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800208e:	2300      	movs	r3, #0
 8002090:	61fb      	str	r3, [r7, #28]
 8002092:	2300      	movs	r3, #0
 8002094:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002096:	4b3d      	ldr	r3, [pc, #244]	; (800218c <HAL_RCC_GetSysClockFreq+0x104>)
 8002098:	689b      	ldr	r3, [r3, #8]
 800209a:	f003 030c 	and.w	r3, r3, #12
 800209e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80020a0:	4b3a      	ldr	r3, [pc, #232]	; (800218c <HAL_RCC_GetSysClockFreq+0x104>)
 80020a2:	68db      	ldr	r3, [r3, #12]
 80020a4:	f003 0303 	and.w	r3, r3, #3
 80020a8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80020aa:	693b      	ldr	r3, [r7, #16]
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d005      	beq.n	80020bc <HAL_RCC_GetSysClockFreq+0x34>
 80020b0:	693b      	ldr	r3, [r7, #16]
 80020b2:	2b0c      	cmp	r3, #12
 80020b4:	d121      	bne.n	80020fa <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	2b01      	cmp	r3, #1
 80020ba:	d11e      	bne.n	80020fa <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80020bc:	4b33      	ldr	r3, [pc, #204]	; (800218c <HAL_RCC_GetSysClockFreq+0x104>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f003 0308 	and.w	r3, r3, #8
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d107      	bne.n	80020d8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80020c8:	4b30      	ldr	r3, [pc, #192]	; (800218c <HAL_RCC_GetSysClockFreq+0x104>)
 80020ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80020ce:	0a1b      	lsrs	r3, r3, #8
 80020d0:	f003 030f 	and.w	r3, r3, #15
 80020d4:	61fb      	str	r3, [r7, #28]
 80020d6:	e005      	b.n	80020e4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80020d8:	4b2c      	ldr	r3, [pc, #176]	; (800218c <HAL_RCC_GetSysClockFreq+0x104>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	091b      	lsrs	r3, r3, #4
 80020de:	f003 030f 	and.w	r3, r3, #15
 80020e2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80020e4:	4a2a      	ldr	r2, [pc, #168]	; (8002190 <HAL_RCC_GetSysClockFreq+0x108>)
 80020e6:	69fb      	ldr	r3, [r7, #28]
 80020e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020ec:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80020ee:	693b      	ldr	r3, [r7, #16]
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d10d      	bne.n	8002110 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80020f4:	69fb      	ldr	r3, [r7, #28]
 80020f6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80020f8:	e00a      	b.n	8002110 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80020fa:	693b      	ldr	r3, [r7, #16]
 80020fc:	2b04      	cmp	r3, #4
 80020fe:	d102      	bne.n	8002106 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002100:	4b24      	ldr	r3, [pc, #144]	; (8002194 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002102:	61bb      	str	r3, [r7, #24]
 8002104:	e004      	b.n	8002110 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002106:	693b      	ldr	r3, [r7, #16]
 8002108:	2b08      	cmp	r3, #8
 800210a:	d101      	bne.n	8002110 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800210c:	4b22      	ldr	r3, [pc, #136]	; (8002198 <HAL_RCC_GetSysClockFreq+0x110>)
 800210e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002110:	693b      	ldr	r3, [r7, #16]
 8002112:	2b0c      	cmp	r3, #12
 8002114:	d133      	bne.n	800217e <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002116:	4b1d      	ldr	r3, [pc, #116]	; (800218c <HAL_RCC_GetSysClockFreq+0x104>)
 8002118:	68db      	ldr	r3, [r3, #12]
 800211a:	f003 0303 	and.w	r3, r3, #3
 800211e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002120:	68bb      	ldr	r3, [r7, #8]
 8002122:	2b02      	cmp	r3, #2
 8002124:	d002      	beq.n	800212c <HAL_RCC_GetSysClockFreq+0xa4>
 8002126:	2b03      	cmp	r3, #3
 8002128:	d003      	beq.n	8002132 <HAL_RCC_GetSysClockFreq+0xaa>
 800212a:	e005      	b.n	8002138 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800212c:	4b19      	ldr	r3, [pc, #100]	; (8002194 <HAL_RCC_GetSysClockFreq+0x10c>)
 800212e:	617b      	str	r3, [r7, #20]
      break;
 8002130:	e005      	b.n	800213e <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002132:	4b19      	ldr	r3, [pc, #100]	; (8002198 <HAL_RCC_GetSysClockFreq+0x110>)
 8002134:	617b      	str	r3, [r7, #20]
      break;
 8002136:	e002      	b.n	800213e <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002138:	69fb      	ldr	r3, [r7, #28]
 800213a:	617b      	str	r3, [r7, #20]
      break;
 800213c:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800213e:	4b13      	ldr	r3, [pc, #76]	; (800218c <HAL_RCC_GetSysClockFreq+0x104>)
 8002140:	68db      	ldr	r3, [r3, #12]
 8002142:	091b      	lsrs	r3, r3, #4
 8002144:	f003 0307 	and.w	r3, r3, #7
 8002148:	3301      	adds	r3, #1
 800214a:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800214c:	4b0f      	ldr	r3, [pc, #60]	; (800218c <HAL_RCC_GetSysClockFreq+0x104>)
 800214e:	68db      	ldr	r3, [r3, #12]
 8002150:	0a1b      	lsrs	r3, r3, #8
 8002152:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002156:	697a      	ldr	r2, [r7, #20]
 8002158:	fb02 f203 	mul.w	r2, r2, r3
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002162:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002164:	4b09      	ldr	r3, [pc, #36]	; (800218c <HAL_RCC_GetSysClockFreq+0x104>)
 8002166:	68db      	ldr	r3, [r3, #12]
 8002168:	0e5b      	lsrs	r3, r3, #25
 800216a:	f003 0303 	and.w	r3, r3, #3
 800216e:	3301      	adds	r3, #1
 8002170:	005b      	lsls	r3, r3, #1
 8002172:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002174:	697a      	ldr	r2, [r7, #20]
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	fbb2 f3f3 	udiv	r3, r2, r3
 800217c:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800217e:	69bb      	ldr	r3, [r7, #24]
}
 8002180:	4618      	mov	r0, r3
 8002182:	3724      	adds	r7, #36	; 0x24
 8002184:	46bd      	mov	sp, r7
 8002186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218a:	4770      	bx	lr
 800218c:	40021000 	.word	0x40021000
 8002190:	0800a924 	.word	0x0800a924
 8002194:	00f42400 	.word	0x00f42400
 8002198:	007a1200 	.word	0x007a1200

0800219c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800219c:	b480      	push	{r7}
 800219e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80021a0:	4b03      	ldr	r3, [pc, #12]	; (80021b0 <HAL_RCC_GetHCLKFreq+0x14>)
 80021a2:	681b      	ldr	r3, [r3, #0]
}
 80021a4:	4618      	mov	r0, r3
 80021a6:	46bd      	mov	sp, r7
 80021a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ac:	4770      	bx	lr
 80021ae:	bf00      	nop
 80021b0:	2000000c 	.word	0x2000000c

080021b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80021b8:	f7ff fff0 	bl	800219c <HAL_RCC_GetHCLKFreq>
 80021bc:	4601      	mov	r1, r0
 80021be:	4b06      	ldr	r3, [pc, #24]	; (80021d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80021c0:	689b      	ldr	r3, [r3, #8]
 80021c2:	0a1b      	lsrs	r3, r3, #8
 80021c4:	f003 0307 	and.w	r3, r3, #7
 80021c8:	4a04      	ldr	r2, [pc, #16]	; (80021dc <HAL_RCC_GetPCLK1Freq+0x28>)
 80021ca:	5cd3      	ldrb	r3, [r2, r3]
 80021cc:	f003 031f 	and.w	r3, r3, #31
 80021d0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80021d4:	4618      	mov	r0, r3
 80021d6:	bd80      	pop	{r7, pc}
 80021d8:	40021000 	.word	0x40021000
 80021dc:	0800a91c 	.word	0x0800a91c

080021e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80021e4:	f7ff ffda 	bl	800219c <HAL_RCC_GetHCLKFreq>
 80021e8:	4601      	mov	r1, r0
 80021ea:	4b06      	ldr	r3, [pc, #24]	; (8002204 <HAL_RCC_GetPCLK2Freq+0x24>)
 80021ec:	689b      	ldr	r3, [r3, #8]
 80021ee:	0adb      	lsrs	r3, r3, #11
 80021f0:	f003 0307 	and.w	r3, r3, #7
 80021f4:	4a04      	ldr	r2, [pc, #16]	; (8002208 <HAL_RCC_GetPCLK2Freq+0x28>)
 80021f6:	5cd3      	ldrb	r3, [r2, r3]
 80021f8:	f003 031f 	and.w	r3, r3, #31
 80021fc:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002200:	4618      	mov	r0, r3
 8002202:	bd80      	pop	{r7, pc}
 8002204:	40021000 	.word	0x40021000
 8002208:	0800a91c 	.word	0x0800a91c

0800220c <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b082      	sub	sp, #8
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
 8002214:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	2b00      	cmp	r3, #0
 800221a:	d104      	bne.n	8002226 <HAL_RCC_GetClockConfig+0x1a>
 800221c:	f44f 61cc 	mov.w	r1, #1632	; 0x660
 8002220:	4818      	ldr	r0, [pc, #96]	; (8002284 <HAL_RCC_GetClockConfig+0x78>)
 8002222:	f006 f800 	bl	8008226 <assert_failed>
  assert_param(pFLatency != (void *)NULL);
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	2b00      	cmp	r3, #0
 800222a:	d104      	bne.n	8002236 <HAL_RCC_GetClockConfig+0x2a>
 800222c:	f240 6161 	movw	r1, #1633	; 0x661
 8002230:	4814      	ldr	r0, [pc, #80]	; (8002284 <HAL_RCC_GetClockConfig+0x78>)
 8002232:	f005 fff8 	bl	8008226 <assert_failed>

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	220f      	movs	r2, #15
 800223a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 800223c:	4b12      	ldr	r3, [pc, #72]	; (8002288 <HAL_RCC_GetClockConfig+0x7c>)
 800223e:	689b      	ldr	r3, [r3, #8]
 8002240:	f003 0203 	and.w	r2, r3, #3
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8002248:	4b0f      	ldr	r3, [pc, #60]	; (8002288 <HAL_RCC_GetClockConfig+0x7c>)
 800224a:	689b      	ldr	r3, [r3, #8]
 800224c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8002254:	4b0c      	ldr	r3, [pc, #48]	; (8002288 <HAL_RCC_GetClockConfig+0x7c>)
 8002256:	689b      	ldr	r3, [r3, #8]
 8002258:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8002260:	4b09      	ldr	r3, [pc, #36]	; (8002288 <HAL_RCC_GetClockConfig+0x7c>)
 8002262:	689b      	ldr	r3, [r3, #8]
 8002264:	08db      	lsrs	r3, r3, #3
 8002266:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800226e:	4b07      	ldr	r3, [pc, #28]	; (800228c <HAL_RCC_GetClockConfig+0x80>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f003 0207 	and.w	r2, r3, #7
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	601a      	str	r2, [r3, #0]
}
 800227a:	bf00      	nop
 800227c:	3708      	adds	r7, #8
 800227e:	46bd      	mov	sp, r7
 8002280:	bd80      	pop	{r7, pc}
 8002282:	bf00      	nop
 8002284:	0800a634 	.word	0x0800a634
 8002288:	40021000 	.word	0x40021000
 800228c:	40022000 	.word	0x40022000

08002290 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b086      	sub	sp, #24
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002298:	2300      	movs	r3, #0
 800229a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800229c:	4b2a      	ldr	r3, [pc, #168]	; (8002348 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800229e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d003      	beq.n	80022b0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80022a8:	f7ff f80e 	bl	80012c8 <HAL_PWREx_GetVoltageRange>
 80022ac:	6178      	str	r0, [r7, #20]
 80022ae:	e014      	b.n	80022da <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80022b0:	4b25      	ldr	r3, [pc, #148]	; (8002348 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80022b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022b4:	4a24      	ldr	r2, [pc, #144]	; (8002348 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80022b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022ba:	6593      	str	r3, [r2, #88]	; 0x58
 80022bc:	4b22      	ldr	r3, [pc, #136]	; (8002348 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80022be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022c4:	60fb      	str	r3, [r7, #12]
 80022c6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80022c8:	f7fe fffe 	bl	80012c8 <HAL_PWREx_GetVoltageRange>
 80022cc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80022ce:	4b1e      	ldr	r3, [pc, #120]	; (8002348 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80022d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022d2:	4a1d      	ldr	r2, [pc, #116]	; (8002348 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80022d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80022d8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80022da:	697b      	ldr	r3, [r7, #20]
 80022dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80022e0:	d10b      	bne.n	80022fa <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	2b80      	cmp	r3, #128	; 0x80
 80022e6:	d919      	bls.n	800231c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	2ba0      	cmp	r3, #160	; 0xa0
 80022ec:	d902      	bls.n	80022f4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80022ee:	2302      	movs	r3, #2
 80022f0:	613b      	str	r3, [r7, #16]
 80022f2:	e013      	b.n	800231c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80022f4:	2301      	movs	r3, #1
 80022f6:	613b      	str	r3, [r7, #16]
 80022f8:	e010      	b.n	800231c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	2b80      	cmp	r3, #128	; 0x80
 80022fe:	d902      	bls.n	8002306 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002300:	2303      	movs	r3, #3
 8002302:	613b      	str	r3, [r7, #16]
 8002304:	e00a      	b.n	800231c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	2b80      	cmp	r3, #128	; 0x80
 800230a:	d102      	bne.n	8002312 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800230c:	2302      	movs	r3, #2
 800230e:	613b      	str	r3, [r7, #16]
 8002310:	e004      	b.n	800231c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	2b70      	cmp	r3, #112	; 0x70
 8002316:	d101      	bne.n	800231c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002318:	2301      	movs	r3, #1
 800231a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800231c:	4b0b      	ldr	r3, [pc, #44]	; (800234c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f023 0207 	bic.w	r2, r3, #7
 8002324:	4909      	ldr	r1, [pc, #36]	; (800234c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002326:	693b      	ldr	r3, [r7, #16]
 8002328:	4313      	orrs	r3, r2
 800232a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800232c:	4b07      	ldr	r3, [pc, #28]	; (800234c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f003 0307 	and.w	r3, r3, #7
 8002334:	693a      	ldr	r2, [r7, #16]
 8002336:	429a      	cmp	r2, r3
 8002338:	d001      	beq.n	800233e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800233a:	2301      	movs	r3, #1
 800233c:	e000      	b.n	8002340 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800233e:	2300      	movs	r3, #0
}
 8002340:	4618      	mov	r0, r3
 8002342:	3718      	adds	r7, #24
 8002344:	46bd      	mov	sp, r7
 8002346:	bd80      	pop	{r7, pc}
 8002348:	40021000 	.word	0x40021000
 800234c:	40022000 	.word	0x40022000

08002350 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b086      	sub	sp, #24
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002358:	2300      	movs	r3, #0
 800235a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800235c:	2300      	movs	r3, #0
 800235e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f003 0301 	and.w	r3, r3, #1
 8002368:	2b00      	cmp	r3, #0
 800236a:	d16f      	bne.n	800244c <HAL_RCCEx_PeriphCLKConfig+0xfc>
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f003 0302 	and.w	r3, r3, #2
 8002374:	2b00      	cmp	r3, #0
 8002376:	d169      	bne.n	800244c <HAL_RCCEx_PeriphCLKConfig+0xfc>
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f003 0304 	and.w	r3, r3, #4
 8002380:	2b00      	cmp	r3, #0
 8002382:	d163      	bne.n	800244c <HAL_RCCEx_PeriphCLKConfig+0xfc>
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f003 0308 	and.w	r3, r3, #8
 800238c:	2b00      	cmp	r3, #0
 800238e:	d15d      	bne.n	800244c <HAL_RCCEx_PeriphCLKConfig+0xfc>
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f003 0310 	and.w	r3, r3, #16
 8002398:	2b00      	cmp	r3, #0
 800239a:	d157      	bne.n	800244c <HAL_RCCEx_PeriphCLKConfig+0xfc>
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f003 0320 	and.w	r3, r3, #32
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d151      	bne.n	800244c <HAL_RCCEx_PeriphCLKConfig+0xfc>
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d14b      	bne.n	800244c <HAL_RCCEx_PeriphCLKConfig+0xfc>
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d145      	bne.n	800244c <HAL_RCCEx_PeriphCLKConfig+0xfc>
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d13f      	bne.n	800244c <HAL_RCCEx_PeriphCLKConfig+0xfc>
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d139      	bne.n	800244c <HAL_RCCEx_PeriphCLKConfig+0xfc>
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d133      	bne.n	800244c <HAL_RCCEx_PeriphCLKConfig+0xfc>
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d12d      	bne.n	800244c <HAL_RCCEx_PeriphCLKConfig+0xfc>
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d127      	bne.n	800244c <HAL_RCCEx_PeriphCLKConfig+0xfc>
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002404:	2b00      	cmp	r3, #0
 8002406:	d121      	bne.n	800244c <HAL_RCCEx_PeriphCLKConfig+0xfc>
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002410:	2b00      	cmp	r3, #0
 8002412:	d11b      	bne.n	800244c <HAL_RCCEx_PeriphCLKConfig+0xfc>
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800241c:	2b00      	cmp	r3, #0
 800241e:	d115      	bne.n	800244c <HAL_RCCEx_PeriphCLKConfig+0xfc>
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002428:	2b00      	cmp	r3, #0
 800242a:	d10f      	bne.n	800244c <HAL_RCCEx_PeriphCLKConfig+0xfc>
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002434:	2b00      	cmp	r3, #0
 8002436:	d109      	bne.n	800244c <HAL_RCCEx_PeriphCLKConfig+0xfc>
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002440:	2b00      	cmp	r3, #0
 8002442:	d103      	bne.n	800244c <HAL_RCCEx_PeriphCLKConfig+0xfc>
 8002444:	21cb      	movs	r1, #203	; 0xcb
 8002446:	48ab      	ldr	r0, [pc, #684]	; (80026f4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>)
 8002448:	f005 feed 	bl	8008226 <assert_failed>

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002454:	2b00      	cmp	r3, #0
 8002456:	d056      	beq.n	8002506 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800245c:	2b00      	cmp	r3, #0
 800245e:	d012      	beq.n	8002486 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002464:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002468:	d00d      	beq.n	8002486 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800246e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002472:	d008      	beq.n	8002486 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002478:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800247c:	d003      	beq.n	8002486 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800247e:	21d3      	movs	r1, #211	; 0xd3
 8002480:	489c      	ldr	r0, [pc, #624]	; (80026f4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>)
 8002482:	f005 fed0 	bl	8008226 <assert_failed>

    switch(PeriphClkInit->Sai1ClockSelection)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800248a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800248e:	d01c      	beq.n	80024ca <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8002490:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002494:	d802      	bhi.n	800249c <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8002496:	2b00      	cmp	r3, #0
 8002498:	d00e      	beq.n	80024b8 <HAL_RCCEx_PeriphCLKConfig+0x168>
 800249a:	e01f      	b.n	80024dc <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800249c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80024a0:	d003      	beq.n	80024aa <HAL_RCCEx_PeriphCLKConfig+0x15a>
 80024a2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80024a6:	d01c      	beq.n	80024e2 <HAL_RCCEx_PeriphCLKConfig+0x192>
 80024a8:	e018      	b.n	80024dc <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80024aa:	4b93      	ldr	r3, [pc, #588]	; (80026f8 <HAL_RCCEx_PeriphCLKConfig+0x3a8>)
 80024ac:	68db      	ldr	r3, [r3, #12]
 80024ae:	4a92      	ldr	r2, [pc, #584]	; (80026f8 <HAL_RCCEx_PeriphCLKConfig+0x3a8>)
 80024b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024b4:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80024b6:	e015      	b.n	80024e4 <HAL_RCCEx_PeriphCLKConfig+0x194>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	3304      	adds	r3, #4
 80024bc:	2100      	movs	r1, #0
 80024be:	4618      	mov	r0, r3
 80024c0:	f000 fc1a 	bl	8002cf8 <RCCEx_PLLSAI1_Config>
 80024c4:	4603      	mov	r3, r0
 80024c6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80024c8:	e00c      	b.n	80024e4 <HAL_RCCEx_PeriphCLKConfig+0x194>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	3320      	adds	r3, #32
 80024ce:	2100      	movs	r1, #0
 80024d0:	4618      	mov	r0, r3
 80024d2:	f000 fd8d 	bl	8002ff0 <RCCEx_PLLSAI2_Config>
 80024d6:	4603      	mov	r3, r0
 80024d8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80024da:	e003      	b.n	80024e4 <HAL_RCCEx_PeriphCLKConfig+0x194>
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80024dc:	2301      	movs	r3, #1
 80024de:	74fb      	strb	r3, [r7, #19]
      break;
 80024e0:	e000      	b.n	80024e4 <HAL_RCCEx_PeriphCLKConfig+0x194>
      break;
 80024e2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80024e4:	7cfb      	ldrb	r3, [r7, #19]
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d10b      	bne.n	8002502 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80024ea:	4b83      	ldr	r3, [pc, #524]	; (80026f8 <HAL_RCCEx_PeriphCLKConfig+0x3a8>)
 80024ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024f0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80024f8:	497f      	ldr	r1, [pc, #508]	; (80026f8 <HAL_RCCEx_PeriphCLKConfig+0x3a8>)
 80024fa:	4313      	orrs	r3, r2
 80024fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002500:	e001      	b.n	8002506 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002502:	7cfb      	ldrb	r3, [r7, #19]
 8002504:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800250e:	2b00      	cmp	r3, #0
 8002510:	d057      	beq.n	80025c2 <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002516:	2b00      	cmp	r3, #0
 8002518:	d013      	beq.n	8002542 <HAL_RCCEx_PeriphCLKConfig+0x1f2>
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800251e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002522:	d00e      	beq.n	8002542 <HAL_RCCEx_PeriphCLKConfig+0x1f2>
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002528:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800252c:	d009      	beq.n	8002542 <HAL_RCCEx_PeriphCLKConfig+0x1f2>
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002532:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002536:	d004      	beq.n	8002542 <HAL_RCCEx_PeriphCLKConfig+0x1f2>
 8002538:	f240 1111 	movw	r1, #273	; 0x111
 800253c:	486d      	ldr	r0, [pc, #436]	; (80026f4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>)
 800253e:	f005 fe72 	bl	8008226 <assert_failed>

    switch(PeriphClkInit->Sai2ClockSelection)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002546:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800254a:	d01c      	beq.n	8002586 <HAL_RCCEx_PeriphCLKConfig+0x236>
 800254c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002550:	d802      	bhi.n	8002558 <HAL_RCCEx_PeriphCLKConfig+0x208>
 8002552:	2b00      	cmp	r3, #0
 8002554:	d00e      	beq.n	8002574 <HAL_RCCEx_PeriphCLKConfig+0x224>
 8002556:	e01f      	b.n	8002598 <HAL_RCCEx_PeriphCLKConfig+0x248>
 8002558:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800255c:	d003      	beq.n	8002566 <HAL_RCCEx_PeriphCLKConfig+0x216>
 800255e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002562:	d01c      	beq.n	800259e <HAL_RCCEx_PeriphCLKConfig+0x24e>
 8002564:	e018      	b.n	8002598 <HAL_RCCEx_PeriphCLKConfig+0x248>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002566:	4b64      	ldr	r3, [pc, #400]	; (80026f8 <HAL_RCCEx_PeriphCLKConfig+0x3a8>)
 8002568:	68db      	ldr	r3, [r3, #12]
 800256a:	4a63      	ldr	r2, [pc, #396]	; (80026f8 <HAL_RCCEx_PeriphCLKConfig+0x3a8>)
 800256c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002570:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002572:	e015      	b.n	80025a0 <HAL_RCCEx_PeriphCLKConfig+0x250>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	3304      	adds	r3, #4
 8002578:	2100      	movs	r1, #0
 800257a:	4618      	mov	r0, r3
 800257c:	f000 fbbc 	bl	8002cf8 <RCCEx_PLLSAI1_Config>
 8002580:	4603      	mov	r3, r0
 8002582:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002584:	e00c      	b.n	80025a0 <HAL_RCCEx_PeriphCLKConfig+0x250>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	3320      	adds	r3, #32
 800258a:	2100      	movs	r1, #0
 800258c:	4618      	mov	r0, r3
 800258e:	f000 fd2f 	bl	8002ff0 <RCCEx_PLLSAI2_Config>
 8002592:	4603      	mov	r3, r0
 8002594:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002596:	e003      	b.n	80025a0 <HAL_RCCEx_PeriphCLKConfig+0x250>
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002598:	2301      	movs	r3, #1
 800259a:	74fb      	strb	r3, [r7, #19]
      break;
 800259c:	e000      	b.n	80025a0 <HAL_RCCEx_PeriphCLKConfig+0x250>
      break;
 800259e:	bf00      	nop
    }

    if(ret == HAL_OK)
 80025a0:	7cfb      	ldrb	r3, [r7, #19]
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d10b      	bne.n	80025be <HAL_RCCEx_PeriphCLKConfig+0x26e>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80025a6:	4b54      	ldr	r3, [pc, #336]	; (80026f8 <HAL_RCCEx_PeriphCLKConfig+0x3a8>)
 80025a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025ac:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80025b4:	4950      	ldr	r1, [pc, #320]	; (80026f8 <HAL_RCCEx_PeriphCLKConfig+0x3a8>)
 80025b6:	4313      	orrs	r3, r2
 80025b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80025bc:	e001      	b.n	80025c2 <HAL_RCCEx_PeriphCLKConfig+0x272>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80025be:	7cfb      	ldrb	r3, [r7, #19]
 80025c0:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	f000 80bf 	beq.w	800274e <HAL_RCCEx_PeriphCLKConfig+0x3fe>
  {
    FlagStatus       pwrclkchanged = RESET;
 80025d0:	2300      	movs	r3, #0
 80025d2:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d016      	beq.n	800260c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80025e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80025e8:	d010      	beq.n	800260c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80025f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80025f4:	d00a      	beq.n	800260c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80025fc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002600:	d004      	beq.n	800260c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 8002602:	f44f 71a3 	mov.w	r1, #326	; 0x146
 8002606:	483b      	ldr	r0, [pc, #236]	; (80026f4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>)
 8002608:	f005 fe0d 	bl	8008226 <assert_failed>

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800260c:	4b3a      	ldr	r3, [pc, #232]	; (80026f8 <HAL_RCCEx_PeriphCLKConfig+0x3a8>)
 800260e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002610:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002614:	2b00      	cmp	r3, #0
 8002616:	d101      	bne.n	800261c <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 8002618:	2301      	movs	r3, #1
 800261a:	e000      	b.n	800261e <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 800261c:	2300      	movs	r3, #0
 800261e:	2b00      	cmp	r3, #0
 8002620:	d00d      	beq.n	800263e <HAL_RCCEx_PeriphCLKConfig+0x2ee>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002622:	4b35      	ldr	r3, [pc, #212]	; (80026f8 <HAL_RCCEx_PeriphCLKConfig+0x3a8>)
 8002624:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002626:	4a34      	ldr	r2, [pc, #208]	; (80026f8 <HAL_RCCEx_PeriphCLKConfig+0x3a8>)
 8002628:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800262c:	6593      	str	r3, [r2, #88]	; 0x58
 800262e:	4b32      	ldr	r3, [pc, #200]	; (80026f8 <HAL_RCCEx_PeriphCLKConfig+0x3a8>)
 8002630:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002632:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002636:	60bb      	str	r3, [r7, #8]
 8002638:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800263a:	2301      	movs	r3, #1
 800263c:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800263e:	4b2f      	ldr	r3, [pc, #188]	; (80026fc <HAL_RCCEx_PeriphCLKConfig+0x3ac>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	4a2e      	ldr	r2, [pc, #184]	; (80026fc <HAL_RCCEx_PeriphCLKConfig+0x3ac>)
 8002644:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002648:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800264a:	f7fd ffc3 	bl	80005d4 <HAL_GetTick>
 800264e:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002650:	e009      	b.n	8002666 <HAL_RCCEx_PeriphCLKConfig+0x316>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002652:	f7fd ffbf 	bl	80005d4 <HAL_GetTick>
 8002656:	4602      	mov	r2, r0
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	1ad3      	subs	r3, r2, r3
 800265c:	2b02      	cmp	r3, #2
 800265e:	d902      	bls.n	8002666 <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        ret = HAL_TIMEOUT;
 8002660:	2303      	movs	r3, #3
 8002662:	74fb      	strb	r3, [r7, #19]
        break;
 8002664:	e005      	b.n	8002672 <HAL_RCCEx_PeriphCLKConfig+0x322>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002666:	4b25      	ldr	r3, [pc, #148]	; (80026fc <HAL_RCCEx_PeriphCLKConfig+0x3ac>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800266e:	2b00      	cmp	r3, #0
 8002670:	d0ef      	beq.n	8002652 <HAL_RCCEx_PeriphCLKConfig+0x302>
      }
    }

    if(ret == HAL_OK)
 8002672:	7cfb      	ldrb	r3, [r7, #19]
 8002674:	2b00      	cmp	r3, #0
 8002676:	d15f      	bne.n	8002738 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002678:	4b1f      	ldr	r3, [pc, #124]	; (80026f8 <HAL_RCCEx_PeriphCLKConfig+0x3a8>)
 800267a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800267e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002682:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002684:	697b      	ldr	r3, [r7, #20]
 8002686:	2b00      	cmp	r3, #0
 8002688:	d01f      	beq.n	80026ca <HAL_RCCEx_PeriphCLKConfig+0x37a>
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002690:	697a      	ldr	r2, [r7, #20]
 8002692:	429a      	cmp	r2, r3
 8002694:	d019      	beq.n	80026ca <HAL_RCCEx_PeriphCLKConfig+0x37a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002696:	4b18      	ldr	r3, [pc, #96]	; (80026f8 <HAL_RCCEx_PeriphCLKConfig+0x3a8>)
 8002698:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800269c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80026a0:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80026a2:	4b15      	ldr	r3, [pc, #84]	; (80026f8 <HAL_RCCEx_PeriphCLKConfig+0x3a8>)
 80026a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026a8:	4a13      	ldr	r2, [pc, #76]	; (80026f8 <HAL_RCCEx_PeriphCLKConfig+0x3a8>)
 80026aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026ae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80026b2:	4b11      	ldr	r3, [pc, #68]	; (80026f8 <HAL_RCCEx_PeriphCLKConfig+0x3a8>)
 80026b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026b8:	4a0f      	ldr	r2, [pc, #60]	; (80026f8 <HAL_RCCEx_PeriphCLKConfig+0x3a8>)
 80026ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026be:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80026c2:	4a0d      	ldr	r2, [pc, #52]	; (80026f8 <HAL_RCCEx_PeriphCLKConfig+0x3a8>)
 80026c4:	697b      	ldr	r3, [r7, #20]
 80026c6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80026ca:	697b      	ldr	r3, [r7, #20]
 80026cc:	f003 0301 	and.w	r3, r3, #1
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d01c      	beq.n	800270e <HAL_RCCEx_PeriphCLKConfig+0x3be>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026d4:	f7fd ff7e 	bl	80005d4 <HAL_GetTick>
 80026d8:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80026da:	e011      	b.n	8002700 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026dc:	f7fd ff7a 	bl	80005d4 <HAL_GetTick>
 80026e0:	4602      	mov	r2, r0
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	1ad3      	subs	r3, r2, r3
 80026e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80026ea:	4293      	cmp	r3, r2
 80026ec:	d908      	bls.n	8002700 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
          {
            ret = HAL_TIMEOUT;
 80026ee:	2303      	movs	r3, #3
 80026f0:	74fb      	strb	r3, [r7, #19]
            break;
 80026f2:	e00c      	b.n	800270e <HAL_RCCEx_PeriphCLKConfig+0x3be>
 80026f4:	0800a66c 	.word	0x0800a66c
 80026f8:	40021000 	.word	0x40021000
 80026fc:	40007000 	.word	0x40007000
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002700:	4b0c      	ldr	r3, [pc, #48]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002702:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002706:	f003 0302 	and.w	r3, r3, #2
 800270a:	2b00      	cmp	r3, #0
 800270c:	d0e6      	beq.n	80026dc <HAL_RCCEx_PeriphCLKConfig+0x38c>
          }
        }
      }

      if(ret == HAL_OK)
 800270e:	7cfb      	ldrb	r3, [r7, #19]
 8002710:	2b00      	cmp	r3, #0
 8002712:	d10c      	bne.n	800272e <HAL_RCCEx_PeriphCLKConfig+0x3de>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002714:	4b07      	ldr	r3, [pc, #28]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002716:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800271a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002724:	4903      	ldr	r1, [pc, #12]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002726:	4313      	orrs	r3, r2
 8002728:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800272c:	e006      	b.n	800273c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800272e:	7cfb      	ldrb	r3, [r7, #19]
 8002730:	74bb      	strb	r3, [r7, #18]
 8002732:	e003      	b.n	800273c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 8002734:	40021000 	.word	0x40021000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002738:	7cfb      	ldrb	r3, [r7, #19]
 800273a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800273c:	7c7b      	ldrb	r3, [r7, #17]
 800273e:	2b01      	cmp	r3, #1
 8002740:	d105      	bne.n	800274e <HAL_RCCEx_PeriphCLKConfig+0x3fe>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002742:	4ba1      	ldr	r3, [pc, #644]	; (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x678>)
 8002744:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002746:	4aa0      	ldr	r2, [pc, #640]	; (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x678>)
 8002748:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800274c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f003 0301 	and.w	r3, r3, #1
 8002756:	2b00      	cmp	r3, #0
 8002758:	d01f      	beq.n	800279a <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800275e:	2b00      	cmp	r3, #0
 8002760:	d010      	beq.n	8002784 <HAL_RCCEx_PeriphCLKConfig+0x434>
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002766:	2b01      	cmp	r3, #1
 8002768:	d00c      	beq.n	8002784 <HAL_RCCEx_PeriphCLKConfig+0x434>
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800276e:	2b03      	cmp	r3, #3
 8002770:	d008      	beq.n	8002784 <HAL_RCCEx_PeriphCLKConfig+0x434>
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002776:	2b02      	cmp	r3, #2
 8002778:	d004      	beq.n	8002784 <HAL_RCCEx_PeriphCLKConfig+0x434>
 800277a:	f240 119b 	movw	r1, #411	; 0x19b
 800277e:	4893      	ldr	r0, [pc, #588]	; (80029cc <HAL_RCCEx_PeriphCLKConfig+0x67c>)
 8002780:	f005 fd51 	bl	8008226 <assert_failed>

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002784:	4b90      	ldr	r3, [pc, #576]	; (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x678>)
 8002786:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800278a:	f023 0203 	bic.w	r2, r3, #3
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002792:	498d      	ldr	r1, [pc, #564]	; (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x678>)
 8002794:	4313      	orrs	r3, r2
 8002796:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f003 0302 	and.w	r3, r3, #2
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d01f      	beq.n	80027e6 <HAL_RCCEx_PeriphCLKConfig+0x496>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d010      	beq.n	80027d0 <HAL_RCCEx_PeriphCLKConfig+0x480>
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027b2:	2b04      	cmp	r3, #4
 80027b4:	d00c      	beq.n	80027d0 <HAL_RCCEx_PeriphCLKConfig+0x480>
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027ba:	2b0c      	cmp	r3, #12
 80027bc:	d008      	beq.n	80027d0 <HAL_RCCEx_PeriphCLKConfig+0x480>
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027c2:	2b08      	cmp	r3, #8
 80027c4:	d004      	beq.n	80027d0 <HAL_RCCEx_PeriphCLKConfig+0x480>
 80027c6:	f240 11a5 	movw	r1, #421	; 0x1a5
 80027ca:	4880      	ldr	r0, [pc, #512]	; (80029cc <HAL_RCCEx_PeriphCLKConfig+0x67c>)
 80027cc:	f005 fd2b 	bl	8008226 <assert_failed>

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80027d0:	4b7d      	ldr	r3, [pc, #500]	; (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x678>)
 80027d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027d6:	f023 020c 	bic.w	r2, r3, #12
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027de:	497a      	ldr	r1, [pc, #488]	; (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x678>)
 80027e0:	4313      	orrs	r3, r2
 80027e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f003 0304 	and.w	r3, r3, #4
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d01f      	beq.n	8002832 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d010      	beq.n	800281c <HAL_RCCEx_PeriphCLKConfig+0x4cc>
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027fe:	2b10      	cmp	r3, #16
 8002800:	d00c      	beq.n	800281c <HAL_RCCEx_PeriphCLKConfig+0x4cc>
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002806:	2b30      	cmp	r3, #48	; 0x30
 8002808:	d008      	beq.n	800281c <HAL_RCCEx_PeriphCLKConfig+0x4cc>
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800280e:	2b20      	cmp	r3, #32
 8002810:	d004      	beq.n	800281c <HAL_RCCEx_PeriphCLKConfig+0x4cc>
 8002812:	f240 11b1 	movw	r1, #433	; 0x1b1
 8002816:	486d      	ldr	r0, [pc, #436]	; (80029cc <HAL_RCCEx_PeriphCLKConfig+0x67c>)
 8002818:	f005 fd05 	bl	8008226 <assert_failed>

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800281c:	4b6a      	ldr	r3, [pc, #424]	; (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x678>)
 800281e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002822:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800282a:	4967      	ldr	r1, [pc, #412]	; (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x678>)
 800282c:	4313      	orrs	r3, r2
 800282e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f003 0308 	and.w	r3, r3, #8
 800283a:	2b00      	cmp	r3, #0
 800283c:	d01f      	beq.n	800287e <HAL_RCCEx_PeriphCLKConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002842:	2b00      	cmp	r3, #0
 8002844:	d010      	beq.n	8002868 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800284a:	2b40      	cmp	r3, #64	; 0x40
 800284c:	d00c      	beq.n	8002868 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002852:	2bc0      	cmp	r3, #192	; 0xc0
 8002854:	d008      	beq.n	8002868 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800285a:	2b80      	cmp	r3, #128	; 0x80
 800285c:	d004      	beq.n	8002868 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800285e:	f240 11bf 	movw	r1, #447	; 0x1bf
 8002862:	485a      	ldr	r0, [pc, #360]	; (80029cc <HAL_RCCEx_PeriphCLKConfig+0x67c>)
 8002864:	f005 fcdf 	bl	8008226 <assert_failed>

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002868:	4b57      	ldr	r3, [pc, #348]	; (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x678>)
 800286a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800286e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002876:	4954      	ldr	r1, [pc, #336]	; (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x678>)
 8002878:	4313      	orrs	r3, r2
 800287a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f003 0310 	and.w	r3, r3, #16
 8002886:	2b00      	cmp	r3, #0
 8002888:	d022      	beq.n	80028d0 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800288e:	2b00      	cmp	r3, #0
 8002890:	d013      	beq.n	80028ba <HAL_RCCEx_PeriphCLKConfig+0x56a>
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002896:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800289a:	d00e      	beq.n	80028ba <HAL_RCCEx_PeriphCLKConfig+0x56a>
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028a0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80028a4:	d009      	beq.n	80028ba <HAL_RCCEx_PeriphCLKConfig+0x56a>
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028aa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80028ae:	d004      	beq.n	80028ba <HAL_RCCEx_PeriphCLKConfig+0x56a>
 80028b0:	f240 11cd 	movw	r1, #461	; 0x1cd
 80028b4:	4845      	ldr	r0, [pc, #276]	; (80029cc <HAL_RCCEx_PeriphCLKConfig+0x67c>)
 80028b6:	f005 fcb6 	bl	8008226 <assert_failed>

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80028ba:	4b43      	ldr	r3, [pc, #268]	; (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x678>)
 80028bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028c0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028c8:	493f      	ldr	r1, [pc, #252]	; (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x678>)
 80028ca:	4313      	orrs	r3, r2
 80028cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f003 0320 	and.w	r3, r3, #32
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d022      	beq.n	8002922 <HAL_RCCEx_PeriphCLKConfig+0x5d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d013      	beq.n	800290c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80028ec:	d00e      	beq.n	800290c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028f2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80028f6:	d009      	beq.n	800290c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028fc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002900:	d004      	beq.n	800290c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8002902:	f240 11d9 	movw	r1, #473	; 0x1d9
 8002906:	4831      	ldr	r0, [pc, #196]	; (80029cc <HAL_RCCEx_PeriphCLKConfig+0x67c>)
 8002908:	f005 fc8d 	bl	8008226 <assert_failed>

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800290c:	4b2e      	ldr	r3, [pc, #184]	; (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x678>)
 800290e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002912:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800291a:	492b      	ldr	r1, [pc, #172]	; (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x678>)
 800291c:	4313      	orrs	r3, r2
 800291e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800292a:	2b00      	cmp	r3, #0
 800292c:	d022      	beq.n	8002974 <HAL_RCCEx_PeriphCLKConfig+0x624>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002932:	2b00      	cmp	r3, #0
 8002934:	d013      	beq.n	800295e <HAL_RCCEx_PeriphCLKConfig+0x60e>
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800293a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800293e:	d00e      	beq.n	800295e <HAL_RCCEx_PeriphCLKConfig+0x60e>
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002944:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002948:	d009      	beq.n	800295e <HAL_RCCEx_PeriphCLKConfig+0x60e>
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800294e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002952:	d004      	beq.n	800295e <HAL_RCCEx_PeriphCLKConfig+0x60e>
 8002954:	f44f 71f1 	mov.w	r1, #482	; 0x1e2
 8002958:	481c      	ldr	r0, [pc, #112]	; (80029cc <HAL_RCCEx_PeriphCLKConfig+0x67c>)
 800295a:	f005 fc64 	bl	8008226 <assert_failed>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800295e:	4b1a      	ldr	r3, [pc, #104]	; (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x678>)
 8002960:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002964:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800296c:	4916      	ldr	r1, [pc, #88]	; (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x678>)
 800296e:	4313      	orrs	r3, r2
 8002970:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800297c:	2b00      	cmp	r3, #0
 800297e:	d027      	beq.n	80029d0 <HAL_RCCEx_PeriphCLKConfig+0x680>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002984:	2b00      	cmp	r3, #0
 8002986:	d013      	beq.n	80029b0 <HAL_RCCEx_PeriphCLKConfig+0x660>
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800298c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002990:	d00e      	beq.n	80029b0 <HAL_RCCEx_PeriphCLKConfig+0x660>
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002996:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800299a:	d009      	beq.n	80029b0 <HAL_RCCEx_PeriphCLKConfig+0x660>
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029a0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80029a4:	d004      	beq.n	80029b0 <HAL_RCCEx_PeriphCLKConfig+0x660>
 80029a6:	f240 11e9 	movw	r1, #489	; 0x1e9
 80029aa:	4808      	ldr	r0, [pc, #32]	; (80029cc <HAL_RCCEx_PeriphCLKConfig+0x67c>)
 80029ac:	f005 fc3b 	bl	8008226 <assert_failed>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80029b0:	4b05      	ldr	r3, [pc, #20]	; (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x678>)
 80029b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029b6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029be:	4902      	ldr	r1, [pc, #8]	; (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x678>)
 80029c0:	4313      	orrs	r3, r2
 80029c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80029c6:	e003      	b.n	80029d0 <HAL_RCCEx_PeriphCLKConfig+0x680>
 80029c8:	40021000 	.word	0x40021000
 80029cc:	0800a66c 	.word	0x0800a66c
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d01d      	beq.n	8002a18 <HAL_RCCEx_PeriphCLKConfig+0x6c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d00e      	beq.n	8002a02 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80029e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029ec:	d009      	beq.n	8002a02 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80029f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80029f6:	d004      	beq.n	8002a02 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
 80029f8:	f240 11f1 	movw	r1, #497	; 0x1f1
 80029fc:	488f      	ldr	r0, [pc, #572]	; (8002c3c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80029fe:	f005 fc12 	bl	8008226 <assert_failed>

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002a02:	4b8f      	ldr	r3, [pc, #572]	; (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 8002a04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a08:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a10:	498b      	ldr	r1, [pc, #556]	; (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 8002a12:	4313      	orrs	r3, r2
 8002a14:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d01d      	beq.n	8002a60 <HAL_RCCEx_PeriphCLKConfig+0x710>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d00e      	beq.n	8002a4a <HAL_RCCEx_PeriphCLKConfig+0x6fa>
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a30:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002a34:	d009      	beq.n	8002a4a <HAL_RCCEx_PeriphCLKConfig+0x6fa>
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a3a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002a3e:	d004      	beq.n	8002a4a <HAL_RCCEx_PeriphCLKConfig+0x6fa>
 8002a40:	f240 11fd 	movw	r1, #509	; 0x1fd
 8002a44:	487d      	ldr	r0, [pc, #500]	; (8002c3c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8002a46:	f005 fbee 	bl	8008226 <assert_failed>

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002a4a:	4b7d      	ldr	r3, [pc, #500]	; (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 8002a4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a50:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a58:	4979      	ldr	r1, [pc, #484]	; (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 8002a5a:	4313      	orrs	r3, r2
 8002a5c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d01d      	beq.n	8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x758>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d00e      	beq.n	8002a92 <HAL_RCCEx_PeriphCLKConfig+0x742>
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a7c:	d009      	beq.n	8002a92 <HAL_RCCEx_PeriphCLKConfig+0x742>
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a82:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002a86:	d004      	beq.n	8002a92 <HAL_RCCEx_PeriphCLKConfig+0x742>
 8002a88:	f240 2109 	movw	r1, #521	; 0x209
 8002a8c:	486b      	ldr	r0, [pc, #428]	; (8002c3c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8002a8e:	f005 fbca 	bl	8008226 <assert_failed>

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002a92:	4b6b      	ldr	r3, [pc, #428]	; (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 8002a94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a98:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002aa0:	4967      	ldr	r1, [pc, #412]	; (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 8002aa2:	4313      	orrs	r3, r2
 8002aa4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d040      	beq.n	8002b36 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d013      	beq.n	8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002ac0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002ac4:	d00e      	beq.n	8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002aca:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002ace:	d009      	beq.n	8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002ad4:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8002ad8:	d004      	beq.n	8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8002ada:	f240 2143 	movw	r1, #579	; 0x243
 8002ade:	4857      	ldr	r0, [pc, #348]	; (8002c3c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8002ae0:	f005 fba1 	bl	8008226 <assert_failed>
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002ae4:	4b56      	ldr	r3, [pc, #344]	; (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 8002ae6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002aea:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002af2:	4953      	ldr	r1, [pc, #332]	; (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 8002af4:	4313      	orrs	r3, r2
 8002af6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002afe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002b02:	d106      	bne.n	8002b12 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002b04:	4b4e      	ldr	r3, [pc, #312]	; (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 8002b06:	68db      	ldr	r3, [r3, #12]
 8002b08:	4a4d      	ldr	r2, [pc, #308]	; (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 8002b0a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002b0e:	60d3      	str	r3, [r2, #12]
 8002b10:	e011      	b.n	8002b36 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b16:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002b1a:	d10c      	bne.n	8002b36 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	3304      	adds	r3, #4
 8002b20:	2101      	movs	r1, #1
 8002b22:	4618      	mov	r0, r3
 8002b24:	f000 f8e8 	bl	8002cf8 <RCCEx_PLLSAI1_Config>
 8002b28:	4603      	mov	r3, r0
 8002b2a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002b2c:	7cfb      	ldrb	r3, [r7, #19]
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d001      	beq.n	8002b36 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
      {
        /* set overall return value */
        status = ret;
 8002b32:	7cfb      	ldrb	r3, [r7, #19]
 8002b34:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d040      	beq.n	8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x874>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d013      	beq.n	8002b72 <HAL_RCCEx_PeriphCLKConfig+0x822>
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b4e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002b52:	d00e      	beq.n	8002b72 <HAL_RCCEx_PeriphCLKConfig+0x822>
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b58:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002b5c:	d009      	beq.n	8002b72 <HAL_RCCEx_PeriphCLKConfig+0x822>
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b62:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8002b66:	d004      	beq.n	8002b72 <HAL_RCCEx_PeriphCLKConfig+0x822>
 8002b68:	f44f 711a 	mov.w	r1, #616	; 0x268
 8002b6c:	4833      	ldr	r0, [pc, #204]	; (8002c3c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8002b6e:	f005 fb5a 	bl	8008226 <assert_failed>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002b72:	4b33      	ldr	r3, [pc, #204]	; (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 8002b74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b78:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b80:	492f      	ldr	r1, [pc, #188]	; (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 8002b82:	4313      	orrs	r3, r2
 8002b84:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b8c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002b90:	d106      	bne.n	8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x850>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002b92:	4b2b      	ldr	r3, [pc, #172]	; (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 8002b94:	68db      	ldr	r3, [r3, #12]
 8002b96:	4a2a      	ldr	r2, [pc, #168]	; (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 8002b98:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002b9c:	60d3      	str	r3, [r2, #12]
 8002b9e:	e011      	b.n	8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x874>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ba4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002ba8:	d10c      	bne.n	8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	3304      	adds	r3, #4
 8002bae:	2101      	movs	r1, #1
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	f000 f8a1 	bl	8002cf8 <RCCEx_PLLSAI1_Config>
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002bba:	7cfb      	ldrb	r3, [r7, #19]
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d001      	beq.n	8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x874>
      {
        /* set overall return value */
        status = ret;
 8002bc0:	7cfb      	ldrb	r3, [r7, #19]
 8002bc2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d04b      	beq.n	8002c68 <HAL_RCCEx_PeriphCLKConfig+0x918>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d013      	beq.n	8002c00 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002bdc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002be0:	d00e      	beq.n	8002c00 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002be6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002bea:	d009      	beq.n	8002c00 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002bf0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002bf4:	d004      	beq.n	8002c00 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
 8002bf6:	f44f 7122 	mov.w	r1, #648	; 0x288
 8002bfa:	4810      	ldr	r0, [pc, #64]	; (8002c3c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8002bfc:	f005 fb13 	bl	8008226 <assert_failed>

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002c00:	4b0f      	ldr	r3, [pc, #60]	; (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 8002c02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c06:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c0e:	490c      	ldr	r1, [pc, #48]	; (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 8002c10:	4313      	orrs	r3, r2
 8002c12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c1a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002c1e:	d111      	bne.n	8002c44 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	3304      	adds	r3, #4
 8002c24:	2102      	movs	r1, #2
 8002c26:	4618      	mov	r0, r3
 8002c28:	f000 f866 	bl	8002cf8 <RCCEx_PLLSAI1_Config>
 8002c2c:	4603      	mov	r3, r0
 8002c2e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002c30:	7cfb      	ldrb	r3, [r7, #19]
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d018      	beq.n	8002c68 <HAL_RCCEx_PeriphCLKConfig+0x918>
      {
        /* set overall return value */
        status = ret;
 8002c36:	7cfb      	ldrb	r3, [r7, #19]
 8002c38:	74bb      	strb	r3, [r7, #18]
 8002c3a:	e015      	b.n	8002c68 <HAL_RCCEx_PeriphCLKConfig+0x918>
 8002c3c:	0800a66c 	.word	0x0800a66c
 8002c40:	40021000 	.word	0x40021000
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c48:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002c4c:	d10c      	bne.n	8002c68 <HAL_RCCEx_PeriphCLKConfig+0x918>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	3320      	adds	r3, #32
 8002c52:	2102      	movs	r1, #2
 8002c54:	4618      	mov	r0, r3
 8002c56:	f000 f9cb 	bl	8002ff0 <RCCEx_PLLSAI2_Config>
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002c5e:	7cfb      	ldrb	r3, [r7, #19]
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d001      	beq.n	8002c68 <HAL_RCCEx_PeriphCLKConfig+0x918>
      {
        /* set overall return value */
        status = ret;
 8002c64:	7cfb      	ldrb	r3, [r7, #19]
 8002c66:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d018      	beq.n	8002ca6 <HAL_RCCEx_PeriphCLKConfig+0x956>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d009      	beq.n	8002c90 <HAL_RCCEx_PeriphCLKConfig+0x940>
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002c80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c84:	d004      	beq.n	8002c90 <HAL_RCCEx_PeriphCLKConfig+0x940>
 8002c86:	f44f 712d 	mov.w	r1, #692	; 0x2b4
 8002c8a:	4819      	ldr	r0, [pc, #100]	; (8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8002c8c:	f005 facb 	bl	8008226 <assert_failed>

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002c90:	4b18      	ldr	r3, [pc, #96]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x9a4>)
 8002c92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c96:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002c9e:	4915      	ldr	r1, [pc, #84]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x9a4>)
 8002ca0:	4313      	orrs	r3, r2
 8002ca2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d018      	beq.n	8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x994>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d009      	beq.n	8002cce <HAL_RCCEx_PeriphCLKConfig+0x97e>
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002cbe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002cc2:	d004      	beq.n	8002cce <HAL_RCCEx_PeriphCLKConfig+0x97e>
 8002cc4:	f240 21c2 	movw	r1, #706	; 0x2c2
 8002cc8:	4809      	ldr	r0, [pc, #36]	; (8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8002cca:	f005 faac 	bl	8008226 <assert_failed>

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002cce:	4b09      	ldr	r3, [pc, #36]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x9a4>)
 8002cd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cd4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002cdc:	4905      	ldr	r1, [pc, #20]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x9a4>)
 8002cde:	4313      	orrs	r3, r2
 8002ce0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002ce4:	7cbb      	ldrb	r3, [r7, #18]
}
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	3718      	adds	r7, #24
 8002cea:	46bd      	mov	sp, r7
 8002cec:	bd80      	pop	{r7, pc}
 8002cee:	bf00      	nop
 8002cf0:	0800a66c 	.word	0x0800a66c
 8002cf4:	40021000 	.word	0x40021000

08002cf8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b084      	sub	sp, #16
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
 8002d00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002d02:	2300      	movs	r3, #0
 8002d04:	73fb      	strb	r3, [r7, #15]

  /* check for PLLSAI1 Parameters used to output PLLSAI1CLK */
  /* P, Q and R dividers are verified in each specific divider case below */
  assert_param(IS_RCC_PLLSAI1SOURCE(PllSai1->PLLSAI1Source));
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d010      	beq.n	8002d30 <RCCEx_PLLSAI1_Config+0x38>
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	2b01      	cmp	r3, #1
 8002d14:	d00c      	beq.n	8002d30 <RCCEx_PLLSAI1_Config+0x38>
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	2b02      	cmp	r3, #2
 8002d1c:	d008      	beq.n	8002d30 <RCCEx_PLLSAI1_Config+0x38>
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	2b03      	cmp	r3, #3
 8002d24:	d004      	beq.n	8002d30 <RCCEx_PLLSAI1_Config+0x38>
 8002d26:	f640 314f 	movw	r1, #2895	; 0xb4f
 8002d2a:	48a3      	ldr	r0, [pc, #652]	; (8002fb8 <RCCEx_PLLSAI1_Config+0x2c0>)
 8002d2c:	f005 fa7b 	bl	8008226 <assert_failed>
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	685b      	ldr	r3, [r3, #4]
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d003      	beq.n	8002d40 <RCCEx_PLLSAI1_Config+0x48>
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	685b      	ldr	r3, [r3, #4]
 8002d3c:	2b08      	cmp	r3, #8
 8002d3e:	d904      	bls.n	8002d4a <RCCEx_PLLSAI1_Config+0x52>
 8002d40:	f44f 6135 	mov.w	r1, #2896	; 0xb50
 8002d44:	489c      	ldr	r0, [pc, #624]	; (8002fb8 <RCCEx_PLLSAI1_Config+0x2c0>)
 8002d46:	f005 fa6e 	bl	8008226 <assert_failed>
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	689b      	ldr	r3, [r3, #8]
 8002d4e:	2b07      	cmp	r3, #7
 8002d50:	d903      	bls.n	8002d5a <RCCEx_PLLSAI1_Config+0x62>
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	689b      	ldr	r3, [r3, #8]
 8002d56:	2b56      	cmp	r3, #86	; 0x56
 8002d58:	d904      	bls.n	8002d64 <RCCEx_PLLSAI1_Config+0x6c>
 8002d5a:	f640 3151 	movw	r1, #2897	; 0xb51
 8002d5e:	4896      	ldr	r0, [pc, #600]	; (8002fb8 <RCCEx_PLLSAI1_Config+0x2c0>)
 8002d60:	f005 fa61 	bl	8008226 <assert_failed>
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	699b      	ldr	r3, [r3, #24]
 8002d68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d10b      	bne.n	8002d88 <RCCEx_PLLSAI1_Config+0x90>
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	699b      	ldr	r3, [r3, #24]
 8002d74:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d105      	bne.n	8002d88 <RCCEx_PLLSAI1_Config+0x90>
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	699b      	ldr	r3, [r3, #24]
 8002d80:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d007      	beq.n	8002d98 <RCCEx_PLLSAI1_Config+0xa0>
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	699b      	ldr	r3, [r3, #24]
 8002d8c:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002d90:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d004      	beq.n	8002da2 <RCCEx_PLLSAI1_Config+0xaa>
 8002d98:	f640 3152 	movw	r1, #2898	; 0xb52
 8002d9c:	4886      	ldr	r0, [pc, #536]	; (8002fb8 <RCCEx_PLLSAI1_Config+0x2c0>)
 8002d9e:	f005 fa42 	bl	8008226 <assert_failed>

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002da2:	4b86      	ldr	r3, [pc, #536]	; (8002fbc <RCCEx_PLLSAI1_Config+0x2c4>)
 8002da4:	68db      	ldr	r3, [r3, #12]
 8002da6:	f003 0303 	and.w	r3, r3, #3
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d018      	beq.n	8002de0 <RCCEx_PLLSAI1_Config+0xe8>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002dae:	4b83      	ldr	r3, [pc, #524]	; (8002fbc <RCCEx_PLLSAI1_Config+0x2c4>)
 8002db0:	68db      	ldr	r3, [r3, #12]
 8002db2:	f003 0203 	and.w	r2, r3, #3
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	429a      	cmp	r2, r3
 8002dbc:	d10d      	bne.n	8002dda <RCCEx_PLLSAI1_Config+0xe2>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
       ||
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d009      	beq.n	8002dda <RCCEx_PLLSAI1_Config+0xe2>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002dc6:	4b7d      	ldr	r3, [pc, #500]	; (8002fbc <RCCEx_PLLSAI1_Config+0x2c4>)
 8002dc8:	68db      	ldr	r3, [r3, #12]
 8002dca:	091b      	lsrs	r3, r3, #4
 8002dcc:	f003 0307 	and.w	r3, r3, #7
 8002dd0:	1c5a      	adds	r2, r3, #1
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	685b      	ldr	r3, [r3, #4]
       ||
 8002dd6:	429a      	cmp	r2, r3
 8002dd8:	d044      	beq.n	8002e64 <RCCEx_PLLSAI1_Config+0x16c>
#endif
      )
    {
      status = HAL_ERROR;
 8002dda:	2301      	movs	r3, #1
 8002ddc:	73fb      	strb	r3, [r7, #15]
 8002dde:	e041      	b.n	8002e64 <RCCEx_PLLSAI1_Config+0x16c>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	2b02      	cmp	r3, #2
 8002de6:	d00c      	beq.n	8002e02 <RCCEx_PLLSAI1_Config+0x10a>
 8002de8:	2b03      	cmp	r3, #3
 8002dea:	d013      	beq.n	8002e14 <RCCEx_PLLSAI1_Config+0x11c>
 8002dec:	2b01      	cmp	r3, #1
 8002dee:	d120      	bne.n	8002e32 <RCCEx_PLLSAI1_Config+0x13a>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002df0:	4b72      	ldr	r3, [pc, #456]	; (8002fbc <RCCEx_PLLSAI1_Config+0x2c4>)
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f003 0302 	and.w	r3, r3, #2
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d11d      	bne.n	8002e38 <RCCEx_PLLSAI1_Config+0x140>
      {
        status = HAL_ERROR;
 8002dfc:	2301      	movs	r3, #1
 8002dfe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e00:	e01a      	b.n	8002e38 <RCCEx_PLLSAI1_Config+0x140>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002e02:	4b6e      	ldr	r3, [pc, #440]	; (8002fbc <RCCEx_PLLSAI1_Config+0x2c4>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d116      	bne.n	8002e3c <RCCEx_PLLSAI1_Config+0x144>
      {
        status = HAL_ERROR;
 8002e0e:	2301      	movs	r3, #1
 8002e10:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e12:	e013      	b.n	8002e3c <RCCEx_PLLSAI1_Config+0x144>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002e14:	4b69      	ldr	r3, [pc, #420]	; (8002fbc <RCCEx_PLLSAI1_Config+0x2c4>)
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d10f      	bne.n	8002e40 <RCCEx_PLLSAI1_Config+0x148>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002e20:	4b66      	ldr	r3, [pc, #408]	; (8002fbc <RCCEx_PLLSAI1_Config+0x2c4>)
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d109      	bne.n	8002e40 <RCCEx_PLLSAI1_Config+0x148>
        {
          status = HAL_ERROR;
 8002e2c:	2301      	movs	r3, #1
 8002e2e:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002e30:	e006      	b.n	8002e40 <RCCEx_PLLSAI1_Config+0x148>
    default:
      status = HAL_ERROR;
 8002e32:	2301      	movs	r3, #1
 8002e34:	73fb      	strb	r3, [r7, #15]
      break;
 8002e36:	e004      	b.n	8002e42 <RCCEx_PLLSAI1_Config+0x14a>
      break;
 8002e38:	bf00      	nop
 8002e3a:	e002      	b.n	8002e42 <RCCEx_PLLSAI1_Config+0x14a>
      break;
 8002e3c:	bf00      	nop
 8002e3e:	e000      	b.n	8002e42 <RCCEx_PLLSAI1_Config+0x14a>
      break;
 8002e40:	bf00      	nop
    }

    if(status == HAL_OK)
 8002e42:	7bfb      	ldrb	r3, [r7, #15]
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d10d      	bne.n	8002e64 <RCCEx_PLLSAI1_Config+0x16c>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002e48:	4b5c      	ldr	r3, [pc, #368]	; (8002fbc <RCCEx_PLLSAI1_Config+0x2c4>)
 8002e4a:	68db      	ldr	r3, [r3, #12]
 8002e4c:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6819      	ldr	r1, [r3, #0]
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	685b      	ldr	r3, [r3, #4]
 8002e58:	3b01      	subs	r3, #1
 8002e5a:	011b      	lsls	r3, r3, #4
 8002e5c:	430b      	orrs	r3, r1
 8002e5e:	4957      	ldr	r1, [pc, #348]	; (8002fbc <RCCEx_PLLSAI1_Config+0x2c4>)
 8002e60:	4313      	orrs	r3, r2
 8002e62:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002e64:	7bfb      	ldrb	r3, [r7, #15]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	f040 80ba 	bne.w	8002fe0 <RCCEx_PLLSAI1_Config+0x2e8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002e6c:	4b53      	ldr	r3, [pc, #332]	; (8002fbc <RCCEx_PLLSAI1_Config+0x2c4>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	4a52      	ldr	r2, [pc, #328]	; (8002fbc <RCCEx_PLLSAI1_Config+0x2c4>)
 8002e72:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002e76:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e78:	f7fd fbac 	bl	80005d4 <HAL_GetTick>
 8002e7c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002e7e:	e009      	b.n	8002e94 <RCCEx_PLLSAI1_Config+0x19c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002e80:	f7fd fba8 	bl	80005d4 <HAL_GetTick>
 8002e84:	4602      	mov	r2, r0
 8002e86:	68bb      	ldr	r3, [r7, #8]
 8002e88:	1ad3      	subs	r3, r2, r3
 8002e8a:	2b02      	cmp	r3, #2
 8002e8c:	d902      	bls.n	8002e94 <RCCEx_PLLSAI1_Config+0x19c>
      {
        status = HAL_TIMEOUT;
 8002e8e:	2303      	movs	r3, #3
 8002e90:	73fb      	strb	r3, [r7, #15]
        break;
 8002e92:	e005      	b.n	8002ea0 <RCCEx_PLLSAI1_Config+0x1a8>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002e94:	4b49      	ldr	r3, [pc, #292]	; (8002fbc <RCCEx_PLLSAI1_Config+0x2c4>)
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d1ef      	bne.n	8002e80 <RCCEx_PLLSAI1_Config+0x188>
      }
    }

    if(status == HAL_OK)
 8002ea0:	7bfb      	ldrb	r3, [r7, #15]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	f040 809c 	bne.w	8002fe0 <RCCEx_PLLSAI1_Config+0x2e8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d11e      	bne.n	8002eec <RCCEx_PLLSAI1_Config+0x1f4>
      {
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	68db      	ldr	r3, [r3, #12]
 8002eb2:	2b07      	cmp	r3, #7
 8002eb4:	d008      	beq.n	8002ec8 <RCCEx_PLLSAI1_Config+0x1d0>
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	68db      	ldr	r3, [r3, #12]
 8002eba:	2b11      	cmp	r3, #17
 8002ebc:	d004      	beq.n	8002ec8 <RCCEx_PLLSAI1_Config+0x1d0>
 8002ebe:	f640 31a5 	movw	r1, #2981	; 0xba5
 8002ec2:	483d      	ldr	r0, [pc, #244]	; (8002fb8 <RCCEx_PLLSAI1_Config+0x2c0>)
 8002ec4:	f005 f9af 	bl	8008226 <assert_failed>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002ec8:	4b3c      	ldr	r3, [pc, #240]	; (8002fbc <RCCEx_PLLSAI1_Config+0x2c4>)
 8002eca:	691b      	ldr	r3, [r3, #16]
 8002ecc:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002ed0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ed4:	687a      	ldr	r2, [r7, #4]
 8002ed6:	6892      	ldr	r2, [r2, #8]
 8002ed8:	0211      	lsls	r1, r2, #8
 8002eda:	687a      	ldr	r2, [r7, #4]
 8002edc:	68d2      	ldr	r2, [r2, #12]
 8002ede:	0912      	lsrs	r2, r2, #4
 8002ee0:	0452      	lsls	r2, r2, #17
 8002ee2:	430a      	orrs	r2, r1
 8002ee4:	4935      	ldr	r1, [pc, #212]	; (8002fbc <RCCEx_PLLSAI1_Config+0x2c4>)
 8002ee6:	4313      	orrs	r3, r2
 8002ee8:	610b      	str	r3, [r1, #16]
 8002eea:	e051      	b.n	8002f90 <RCCEx_PLLSAI1_Config+0x298>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	2b01      	cmp	r3, #1
 8002ef0:	d127      	bne.n	8002f42 <RCCEx_PLLSAI1_Config+0x24a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	691b      	ldr	r3, [r3, #16]
 8002ef6:	2b02      	cmp	r3, #2
 8002ef8:	d010      	beq.n	8002f1c <RCCEx_PLLSAI1_Config+0x224>
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	691b      	ldr	r3, [r3, #16]
 8002efe:	2b04      	cmp	r3, #4
 8002f00:	d00c      	beq.n	8002f1c <RCCEx_PLLSAI1_Config+0x224>
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	691b      	ldr	r3, [r3, #16]
 8002f06:	2b06      	cmp	r3, #6
 8002f08:	d008      	beq.n	8002f1c <RCCEx_PLLSAI1_Config+0x224>
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	691b      	ldr	r3, [r3, #16]
 8002f0e:	2b08      	cmp	r3, #8
 8002f10:	d004      	beq.n	8002f1c <RCCEx_PLLSAI1_Config+0x224>
 8002f12:	f640 31c9 	movw	r1, #3017	; 0xbc9
 8002f16:	4828      	ldr	r0, [pc, #160]	; (8002fb8 <RCCEx_PLLSAI1_Config+0x2c0>)
 8002f18:	f005 f985 	bl	8008226 <assert_failed>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002f1c:	4b27      	ldr	r3, [pc, #156]	; (8002fbc <RCCEx_PLLSAI1_Config+0x2c4>)
 8002f1e:	691b      	ldr	r3, [r3, #16]
 8002f20:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002f24:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002f28:	687a      	ldr	r2, [r7, #4]
 8002f2a:	6892      	ldr	r2, [r2, #8]
 8002f2c:	0211      	lsls	r1, r2, #8
 8002f2e:	687a      	ldr	r2, [r7, #4]
 8002f30:	6912      	ldr	r2, [r2, #16]
 8002f32:	0852      	lsrs	r2, r2, #1
 8002f34:	3a01      	subs	r2, #1
 8002f36:	0552      	lsls	r2, r2, #21
 8002f38:	430a      	orrs	r2, r1
 8002f3a:	4920      	ldr	r1, [pc, #128]	; (8002fbc <RCCEx_PLLSAI1_Config+0x2c4>)
 8002f3c:	4313      	orrs	r3, r2
 8002f3e:	610b      	str	r3, [r1, #16]
 8002f40:	e026      	b.n	8002f90 <RCCEx_PLLSAI1_Config+0x298>
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	695b      	ldr	r3, [r3, #20]
 8002f46:	2b02      	cmp	r3, #2
 8002f48:	d010      	beq.n	8002f6c <RCCEx_PLLSAI1_Config+0x274>
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	695b      	ldr	r3, [r3, #20]
 8002f4e:	2b04      	cmp	r3, #4
 8002f50:	d00c      	beq.n	8002f6c <RCCEx_PLLSAI1_Config+0x274>
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	695b      	ldr	r3, [r3, #20]
 8002f56:	2b06      	cmp	r3, #6
 8002f58:	d008      	beq.n	8002f6c <RCCEx_PLLSAI1_Config+0x274>
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	695b      	ldr	r3, [r3, #20]
 8002f5e:	2b08      	cmp	r3, #8
 8002f60:	d004      	beq.n	8002f6c <RCCEx_PLLSAI1_Config+0x274>
 8002f62:	f640 31db 	movw	r1, #3035	; 0xbdb
 8002f66:	4814      	ldr	r0, [pc, #80]	; (8002fb8 <RCCEx_PLLSAI1_Config+0x2c0>)
 8002f68:	f005 f95d 	bl	8008226 <assert_failed>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002f6c:	4b13      	ldr	r3, [pc, #76]	; (8002fbc <RCCEx_PLLSAI1_Config+0x2c4>)
 8002f6e:	691b      	ldr	r3, [r3, #16]
 8002f70:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002f74:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002f78:	687a      	ldr	r2, [r7, #4]
 8002f7a:	6892      	ldr	r2, [r2, #8]
 8002f7c:	0211      	lsls	r1, r2, #8
 8002f7e:	687a      	ldr	r2, [r7, #4]
 8002f80:	6952      	ldr	r2, [r2, #20]
 8002f82:	0852      	lsrs	r2, r2, #1
 8002f84:	3a01      	subs	r2, #1
 8002f86:	0652      	lsls	r2, r2, #25
 8002f88:	430a      	orrs	r2, r1
 8002f8a:	490c      	ldr	r1, [pc, #48]	; (8002fbc <RCCEx_PLLSAI1_Config+0x2c4>)
 8002f8c:	4313      	orrs	r3, r2
 8002f8e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002f90:	4b0a      	ldr	r3, [pc, #40]	; (8002fbc <RCCEx_PLLSAI1_Config+0x2c4>)
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	4a09      	ldr	r2, [pc, #36]	; (8002fbc <RCCEx_PLLSAI1_Config+0x2c4>)
 8002f96:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002f9a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f9c:	f7fd fb1a 	bl	80005d4 <HAL_GetTick>
 8002fa0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002fa2:	e00d      	b.n	8002fc0 <RCCEx_PLLSAI1_Config+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002fa4:	f7fd fb16 	bl	80005d4 <HAL_GetTick>
 8002fa8:	4602      	mov	r2, r0
 8002faa:	68bb      	ldr	r3, [r7, #8]
 8002fac:	1ad3      	subs	r3, r2, r3
 8002fae:	2b02      	cmp	r3, #2
 8002fb0:	d906      	bls.n	8002fc0 <RCCEx_PLLSAI1_Config+0x2c8>
        {
          status = HAL_TIMEOUT;
 8002fb2:	2303      	movs	r3, #3
 8002fb4:	73fb      	strb	r3, [r7, #15]
          break;
 8002fb6:	e009      	b.n	8002fcc <RCCEx_PLLSAI1_Config+0x2d4>
 8002fb8:	0800a66c 	.word	0x0800a66c
 8002fbc:	40021000 	.word	0x40021000
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002fc0:	4b0a      	ldr	r3, [pc, #40]	; (8002fec <RCCEx_PLLSAI1_Config+0x2f4>)
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d0eb      	beq.n	8002fa4 <RCCEx_PLLSAI1_Config+0x2ac>
        }
      }

      if(status == HAL_OK)
 8002fcc:	7bfb      	ldrb	r3, [r7, #15]
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d106      	bne.n	8002fe0 <RCCEx_PLLSAI1_Config+0x2e8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002fd2:	4b06      	ldr	r3, [pc, #24]	; (8002fec <RCCEx_PLLSAI1_Config+0x2f4>)
 8002fd4:	691a      	ldr	r2, [r3, #16]
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	699b      	ldr	r3, [r3, #24]
 8002fda:	4904      	ldr	r1, [pc, #16]	; (8002fec <RCCEx_PLLSAI1_Config+0x2f4>)
 8002fdc:	4313      	orrs	r3, r2
 8002fde:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002fe0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	3710      	adds	r7, #16
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	bd80      	pop	{r7, pc}
 8002fea:	bf00      	nop
 8002fec:	40021000 	.word	0x40021000

08002ff0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b084      	sub	sp, #16
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
 8002ff8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	73fb      	strb	r3, [r7, #15]

  /* check for PLLSAI2 Parameters used to output PLLSAI2CLK */
  /* P, Q and R dividers are verified in each specific divider case below */
  assert_param(IS_RCC_PLLSAI2SOURCE(PllSai2->PLLSAI2Source));
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	2b00      	cmp	r3, #0
 8003004:	d010      	beq.n	8003028 <RCCEx_PLLSAI2_Config+0x38>
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	2b01      	cmp	r3, #1
 800300c:	d00c      	beq.n	8003028 <RCCEx_PLLSAI2_Config+0x38>
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	2b02      	cmp	r3, #2
 8003014:	d008      	beq.n	8003028 <RCCEx_PLLSAI2_Config+0x38>
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	2b03      	cmp	r3, #3
 800301c:	d004      	beq.n	8003028 <RCCEx_PLLSAI2_Config+0x38>
 800301e:	f640 411c 	movw	r1, #3100	; 0xc1c
 8003022:	4895      	ldr	r0, [pc, #596]	; (8003278 <RCCEx_PLLSAI2_Config+0x288>)
 8003024:	f005 f8ff 	bl	8008226 <assert_failed>
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	685b      	ldr	r3, [r3, #4]
 800302c:	2b00      	cmp	r3, #0
 800302e:	d003      	beq.n	8003038 <RCCEx_PLLSAI2_Config+0x48>
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	685b      	ldr	r3, [r3, #4]
 8003034:	2b08      	cmp	r3, #8
 8003036:	d904      	bls.n	8003042 <RCCEx_PLLSAI2_Config+0x52>
 8003038:	f640 411d 	movw	r1, #3101	; 0xc1d
 800303c:	488e      	ldr	r0, [pc, #568]	; (8003278 <RCCEx_PLLSAI2_Config+0x288>)
 800303e:	f005 f8f2 	bl	8008226 <assert_failed>
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	689b      	ldr	r3, [r3, #8]
 8003046:	2b07      	cmp	r3, #7
 8003048:	d903      	bls.n	8003052 <RCCEx_PLLSAI2_Config+0x62>
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	689b      	ldr	r3, [r3, #8]
 800304e:	2b56      	cmp	r3, #86	; 0x56
 8003050:	d904      	bls.n	800305c <RCCEx_PLLSAI2_Config+0x6c>
 8003052:	f640 411e 	movw	r1, #3102	; 0xc1e
 8003056:	4888      	ldr	r0, [pc, #544]	; (8003278 <RCCEx_PLLSAI2_Config+0x288>)
 8003058:	f005 f8e5 	bl	8008226 <assert_failed>
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	695b      	ldr	r3, [r3, #20]
 8003060:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003064:	2b00      	cmp	r3, #0
 8003066:	d105      	bne.n	8003074 <RCCEx_PLLSAI2_Config+0x84>
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	695b      	ldr	r3, [r3, #20]
 800306c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003070:	2b00      	cmp	r3, #0
 8003072:	d007      	beq.n	8003084 <RCCEx_PLLSAI2_Config+0x94>
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	695b      	ldr	r3, [r3, #20]
 8003078:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800307c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003080:	2b00      	cmp	r3, #0
 8003082:	d004      	beq.n	800308e <RCCEx_PLLSAI2_Config+0x9e>
 8003084:	f640 411f 	movw	r1, #3103	; 0xc1f
 8003088:	487b      	ldr	r0, [pc, #492]	; (8003278 <RCCEx_PLLSAI2_Config+0x288>)
 800308a:	f005 f8cc 	bl	8008226 <assert_failed>

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800308e:	4b7b      	ldr	r3, [pc, #492]	; (800327c <RCCEx_PLLSAI2_Config+0x28c>)
 8003090:	68db      	ldr	r3, [r3, #12]
 8003092:	f003 0303 	and.w	r3, r3, #3
 8003096:	2b00      	cmp	r3, #0
 8003098:	d018      	beq.n	80030cc <RCCEx_PLLSAI2_Config+0xdc>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800309a:	4b78      	ldr	r3, [pc, #480]	; (800327c <RCCEx_PLLSAI2_Config+0x28c>)
 800309c:	68db      	ldr	r3, [r3, #12]
 800309e:	f003 0203 	and.w	r2, r3, #3
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	429a      	cmp	r2, r3
 80030a8:	d10d      	bne.n	80030c6 <RCCEx_PLLSAI2_Config+0xd6>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
       ||
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d009      	beq.n	80030c6 <RCCEx_PLLSAI2_Config+0xd6>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80030b2:	4b72      	ldr	r3, [pc, #456]	; (800327c <RCCEx_PLLSAI2_Config+0x28c>)
 80030b4:	68db      	ldr	r3, [r3, #12]
 80030b6:	091b      	lsrs	r3, r3, #4
 80030b8:	f003 0307 	and.w	r3, r3, #7
 80030bc:	1c5a      	adds	r2, r3, #1
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	685b      	ldr	r3, [r3, #4]
       ||
 80030c2:	429a      	cmp	r2, r3
 80030c4:	d044      	beq.n	8003150 <RCCEx_PLLSAI2_Config+0x160>
#endif
      )
    {
      status = HAL_ERROR;
 80030c6:	2301      	movs	r3, #1
 80030c8:	73fb      	strb	r3, [r7, #15]
 80030ca:	e041      	b.n	8003150 <RCCEx_PLLSAI2_Config+0x160>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	2b02      	cmp	r3, #2
 80030d2:	d00c      	beq.n	80030ee <RCCEx_PLLSAI2_Config+0xfe>
 80030d4:	2b03      	cmp	r3, #3
 80030d6:	d013      	beq.n	8003100 <RCCEx_PLLSAI2_Config+0x110>
 80030d8:	2b01      	cmp	r3, #1
 80030da:	d120      	bne.n	800311e <RCCEx_PLLSAI2_Config+0x12e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80030dc:	4b67      	ldr	r3, [pc, #412]	; (800327c <RCCEx_PLLSAI2_Config+0x28c>)
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f003 0302 	and.w	r3, r3, #2
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d11d      	bne.n	8003124 <RCCEx_PLLSAI2_Config+0x134>
      {
        status = HAL_ERROR;
 80030e8:	2301      	movs	r3, #1
 80030ea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80030ec:	e01a      	b.n	8003124 <RCCEx_PLLSAI2_Config+0x134>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80030ee:	4b63      	ldr	r3, [pc, #396]	; (800327c <RCCEx_PLLSAI2_Config+0x28c>)
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d116      	bne.n	8003128 <RCCEx_PLLSAI2_Config+0x138>
      {
        status = HAL_ERROR;
 80030fa:	2301      	movs	r3, #1
 80030fc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80030fe:	e013      	b.n	8003128 <RCCEx_PLLSAI2_Config+0x138>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003100:	4b5e      	ldr	r3, [pc, #376]	; (800327c <RCCEx_PLLSAI2_Config+0x28c>)
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003108:	2b00      	cmp	r3, #0
 800310a:	d10f      	bne.n	800312c <RCCEx_PLLSAI2_Config+0x13c>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800310c:	4b5b      	ldr	r3, [pc, #364]	; (800327c <RCCEx_PLLSAI2_Config+0x28c>)
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003114:	2b00      	cmp	r3, #0
 8003116:	d109      	bne.n	800312c <RCCEx_PLLSAI2_Config+0x13c>
        {
          status = HAL_ERROR;
 8003118:	2301      	movs	r3, #1
 800311a:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800311c:	e006      	b.n	800312c <RCCEx_PLLSAI2_Config+0x13c>
    default:
      status = HAL_ERROR;
 800311e:	2301      	movs	r3, #1
 8003120:	73fb      	strb	r3, [r7, #15]
      break;
 8003122:	e004      	b.n	800312e <RCCEx_PLLSAI2_Config+0x13e>
      break;
 8003124:	bf00      	nop
 8003126:	e002      	b.n	800312e <RCCEx_PLLSAI2_Config+0x13e>
      break;
 8003128:	bf00      	nop
 800312a:	e000      	b.n	800312e <RCCEx_PLLSAI2_Config+0x13e>
      break;
 800312c:	bf00      	nop
    }

    if(status == HAL_OK)
 800312e:	7bfb      	ldrb	r3, [r7, #15]
 8003130:	2b00      	cmp	r3, #0
 8003132:	d10d      	bne.n	8003150 <RCCEx_PLLSAI2_Config+0x160>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003134:	4b51      	ldr	r3, [pc, #324]	; (800327c <RCCEx_PLLSAI2_Config+0x28c>)
 8003136:	68db      	ldr	r3, [r3, #12]
 8003138:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6819      	ldr	r1, [r3, #0]
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	685b      	ldr	r3, [r3, #4]
 8003144:	3b01      	subs	r3, #1
 8003146:	011b      	lsls	r3, r3, #4
 8003148:	430b      	orrs	r3, r1
 800314a:	494c      	ldr	r1, [pc, #304]	; (800327c <RCCEx_PLLSAI2_Config+0x28c>)
 800314c:	4313      	orrs	r3, r2
 800314e:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003150:	7bfb      	ldrb	r3, [r7, #15]
 8003152:	2b00      	cmp	r3, #0
 8003154:	f040 808a 	bne.w	800326c <RCCEx_PLLSAI2_Config+0x27c>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003158:	4b48      	ldr	r3, [pc, #288]	; (800327c <RCCEx_PLLSAI2_Config+0x28c>)
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	4a47      	ldr	r2, [pc, #284]	; (800327c <RCCEx_PLLSAI2_Config+0x28c>)
 800315e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003162:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003164:	f7fd fa36 	bl	80005d4 <HAL_GetTick>
 8003168:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800316a:	e009      	b.n	8003180 <RCCEx_PLLSAI2_Config+0x190>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800316c:	f7fd fa32 	bl	80005d4 <HAL_GetTick>
 8003170:	4602      	mov	r2, r0
 8003172:	68bb      	ldr	r3, [r7, #8]
 8003174:	1ad3      	subs	r3, r2, r3
 8003176:	2b02      	cmp	r3, #2
 8003178:	d902      	bls.n	8003180 <RCCEx_PLLSAI2_Config+0x190>
      {
        status = HAL_TIMEOUT;
 800317a:	2303      	movs	r3, #3
 800317c:	73fb      	strb	r3, [r7, #15]
        break;
 800317e:	e005      	b.n	800318c <RCCEx_PLLSAI2_Config+0x19c>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003180:	4b3e      	ldr	r3, [pc, #248]	; (800327c <RCCEx_PLLSAI2_Config+0x28c>)
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003188:	2b00      	cmp	r3, #0
 800318a:	d1ef      	bne.n	800316c <RCCEx_PLLSAI2_Config+0x17c>
      }
    }

    if(status == HAL_OK)
 800318c:	7bfb      	ldrb	r3, [r7, #15]
 800318e:	2b00      	cmp	r3, #0
 8003190:	d16c      	bne.n	800326c <RCCEx_PLLSAI2_Config+0x27c>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	2b00      	cmp	r3, #0
 8003196:	d11e      	bne.n	80031d6 <RCCEx_PLLSAI2_Config+0x1e6>
      {
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	68db      	ldr	r3, [r3, #12]
 800319c:	2b07      	cmp	r3, #7
 800319e:	d008      	beq.n	80031b2 <RCCEx_PLLSAI2_Config+0x1c2>
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	68db      	ldr	r3, [r3, #12]
 80031a4:	2b11      	cmp	r3, #17
 80031a6:	d004      	beq.n	80031b2 <RCCEx_PLLSAI2_Config+0x1c2>
 80031a8:	f640 4172 	movw	r1, #3186	; 0xc72
 80031ac:	4832      	ldr	r0, [pc, #200]	; (8003278 <RCCEx_PLLSAI2_Config+0x288>)
 80031ae:	f005 f83a 	bl	8008226 <assert_failed>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80031b2:	4b32      	ldr	r3, [pc, #200]	; (800327c <RCCEx_PLLSAI2_Config+0x28c>)
 80031b4:	695b      	ldr	r3, [r3, #20]
 80031b6:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80031ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80031be:	687a      	ldr	r2, [r7, #4]
 80031c0:	6892      	ldr	r2, [r2, #8]
 80031c2:	0211      	lsls	r1, r2, #8
 80031c4:	687a      	ldr	r2, [r7, #4]
 80031c6:	68d2      	ldr	r2, [r2, #12]
 80031c8:	0912      	lsrs	r2, r2, #4
 80031ca:	0452      	lsls	r2, r2, #17
 80031cc:	430a      	orrs	r2, r1
 80031ce:	492b      	ldr	r1, [pc, #172]	; (800327c <RCCEx_PLLSAI2_Config+0x28c>)
 80031d0:	4313      	orrs	r3, r2
 80031d2:	614b      	str	r3, [r1, #20]
 80031d4:	e026      	b.n	8003224 <RCCEx_PLLSAI2_Config+0x234>
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#endif /* RCC_PLLSAI2Q_DIV_SUPPORT */
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	691b      	ldr	r3, [r3, #16]
 80031da:	2b02      	cmp	r3, #2
 80031dc:	d010      	beq.n	8003200 <RCCEx_PLLSAI2_Config+0x210>
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	691b      	ldr	r3, [r3, #16]
 80031e2:	2b04      	cmp	r3, #4
 80031e4:	d00c      	beq.n	8003200 <RCCEx_PLLSAI2_Config+0x210>
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	691b      	ldr	r3, [r3, #16]
 80031ea:	2b06      	cmp	r3, #6
 80031ec:	d008      	beq.n	8003200 <RCCEx_PLLSAI2_Config+0x210>
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	691b      	ldr	r3, [r3, #16]
 80031f2:	2b08      	cmp	r3, #8
 80031f4:	d004      	beq.n	8003200 <RCCEx_PLLSAI2_Config+0x210>
 80031f6:	f640 41aa 	movw	r1, #3242	; 0xcaa
 80031fa:	481f      	ldr	r0, [pc, #124]	; (8003278 <RCCEx_PLLSAI2_Config+0x288>)
 80031fc:	f005 f813 	bl	8008226 <assert_failed>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003200:	4b1e      	ldr	r3, [pc, #120]	; (800327c <RCCEx_PLLSAI2_Config+0x28c>)
 8003202:	695b      	ldr	r3, [r3, #20]
 8003204:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003208:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800320c:	687a      	ldr	r2, [r7, #4]
 800320e:	6892      	ldr	r2, [r2, #8]
 8003210:	0211      	lsls	r1, r2, #8
 8003212:	687a      	ldr	r2, [r7, #4]
 8003214:	6912      	ldr	r2, [r2, #16]
 8003216:	0852      	lsrs	r2, r2, #1
 8003218:	3a01      	subs	r2, #1
 800321a:	0652      	lsls	r2, r2, #25
 800321c:	430a      	orrs	r2, r1
 800321e:	4917      	ldr	r1, [pc, #92]	; (800327c <RCCEx_PLLSAI2_Config+0x28c>)
 8003220:	4313      	orrs	r3, r2
 8003222:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003224:	4b15      	ldr	r3, [pc, #84]	; (800327c <RCCEx_PLLSAI2_Config+0x28c>)
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4a14      	ldr	r2, [pc, #80]	; (800327c <RCCEx_PLLSAI2_Config+0x28c>)
 800322a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800322e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003230:	f7fd f9d0 	bl	80005d4 <HAL_GetTick>
 8003234:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003236:	e009      	b.n	800324c <RCCEx_PLLSAI2_Config+0x25c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003238:	f7fd f9cc 	bl	80005d4 <HAL_GetTick>
 800323c:	4602      	mov	r2, r0
 800323e:	68bb      	ldr	r3, [r7, #8]
 8003240:	1ad3      	subs	r3, r2, r3
 8003242:	2b02      	cmp	r3, #2
 8003244:	d902      	bls.n	800324c <RCCEx_PLLSAI2_Config+0x25c>
        {
          status = HAL_TIMEOUT;
 8003246:	2303      	movs	r3, #3
 8003248:	73fb      	strb	r3, [r7, #15]
          break;
 800324a:	e005      	b.n	8003258 <RCCEx_PLLSAI2_Config+0x268>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800324c:	4b0b      	ldr	r3, [pc, #44]	; (800327c <RCCEx_PLLSAI2_Config+0x28c>)
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003254:	2b00      	cmp	r3, #0
 8003256:	d0ef      	beq.n	8003238 <RCCEx_PLLSAI2_Config+0x248>
        }
      }

      if(status == HAL_OK)
 8003258:	7bfb      	ldrb	r3, [r7, #15]
 800325a:	2b00      	cmp	r3, #0
 800325c:	d106      	bne.n	800326c <RCCEx_PLLSAI2_Config+0x27c>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800325e:	4b07      	ldr	r3, [pc, #28]	; (800327c <RCCEx_PLLSAI2_Config+0x28c>)
 8003260:	695a      	ldr	r2, [r3, #20]
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	695b      	ldr	r3, [r3, #20]
 8003266:	4905      	ldr	r1, [pc, #20]	; (800327c <RCCEx_PLLSAI2_Config+0x28c>)
 8003268:	4313      	orrs	r3, r2
 800326a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800326c:	7bfb      	ldrb	r3, [r7, #15]
}
 800326e:	4618      	mov	r0, r3
 8003270:	3710      	adds	r7, #16
 8003272:	46bd      	mov	sp, r7
 8003274:	bd80      	pop	{r7, pc}
 8003276:	bf00      	nop
 8003278:	0800a66c 	.word	0x0800a66c
 800327c:	40021000 	.word	0x40021000

08003280 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003280:	b580      	push	{r7, lr}
 8003282:	b082      	sub	sp, #8
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2b00      	cmp	r3, #0
 800328c:	d101      	bne.n	8003292 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800328e:	2301      	movs	r3, #1
 8003290:	e092      	b.n	80033b8 <HAL_TIM_Base_Init+0x138>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	4a4a      	ldr	r2, [pc, #296]	; (80033c0 <HAL_TIM_Base_Init+0x140>)
 8003298:	4293      	cmp	r3, r2
 800329a:	d036      	beq.n	800330a <HAL_TIM_Base_Init+0x8a>
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032a4:	d031      	beq.n	800330a <HAL_TIM_Base_Init+0x8a>
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	4a46      	ldr	r2, [pc, #280]	; (80033c4 <HAL_TIM_Base_Init+0x144>)
 80032ac:	4293      	cmp	r3, r2
 80032ae:	d02c      	beq.n	800330a <HAL_TIM_Base_Init+0x8a>
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	4a44      	ldr	r2, [pc, #272]	; (80033c8 <HAL_TIM_Base_Init+0x148>)
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d027      	beq.n	800330a <HAL_TIM_Base_Init+0x8a>
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	4a43      	ldr	r2, [pc, #268]	; (80033cc <HAL_TIM_Base_Init+0x14c>)
 80032c0:	4293      	cmp	r3, r2
 80032c2:	d022      	beq.n	800330a <HAL_TIM_Base_Init+0x8a>
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	4a41      	ldr	r2, [pc, #260]	; (80033d0 <HAL_TIM_Base_Init+0x150>)
 80032ca:	4293      	cmp	r3, r2
 80032cc:	d01d      	beq.n	800330a <HAL_TIM_Base_Init+0x8a>
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	4a40      	ldr	r2, [pc, #256]	; (80033d4 <HAL_TIM_Base_Init+0x154>)
 80032d4:	4293      	cmp	r3, r2
 80032d6:	d018      	beq.n	800330a <HAL_TIM_Base_Init+0x8a>
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	4a3e      	ldr	r2, [pc, #248]	; (80033d8 <HAL_TIM_Base_Init+0x158>)
 80032de:	4293      	cmp	r3, r2
 80032e0:	d013      	beq.n	800330a <HAL_TIM_Base_Init+0x8a>
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	4a3d      	ldr	r2, [pc, #244]	; (80033dc <HAL_TIM_Base_Init+0x15c>)
 80032e8:	4293      	cmp	r3, r2
 80032ea:	d00e      	beq.n	800330a <HAL_TIM_Base_Init+0x8a>
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	4a3b      	ldr	r2, [pc, #236]	; (80033e0 <HAL_TIM_Base_Init+0x160>)
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d009      	beq.n	800330a <HAL_TIM_Base_Init+0x8a>
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	4a3a      	ldr	r2, [pc, #232]	; (80033e4 <HAL_TIM_Base_Init+0x164>)
 80032fc:	4293      	cmp	r3, r2
 80032fe:	d004      	beq.n	800330a <HAL_TIM_Base_Init+0x8a>
 8003300:	f240 1115 	movw	r1, #277	; 0x115
 8003304:	4838      	ldr	r0, [pc, #224]	; (80033e8 <HAL_TIM_Base_Init+0x168>)
 8003306:	f004 ff8e 	bl	8008226 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	689b      	ldr	r3, [r3, #8]
 800330e:	2b00      	cmp	r3, #0
 8003310:	d014      	beq.n	800333c <HAL_TIM_Base_Init+0xbc>
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	689b      	ldr	r3, [r3, #8]
 8003316:	2b10      	cmp	r3, #16
 8003318:	d010      	beq.n	800333c <HAL_TIM_Base_Init+0xbc>
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	689b      	ldr	r3, [r3, #8]
 800331e:	2b20      	cmp	r3, #32
 8003320:	d00c      	beq.n	800333c <HAL_TIM_Base_Init+0xbc>
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	689b      	ldr	r3, [r3, #8]
 8003326:	2b40      	cmp	r3, #64	; 0x40
 8003328:	d008      	beq.n	800333c <HAL_TIM_Base_Init+0xbc>
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	689b      	ldr	r3, [r3, #8]
 800332e:	2b60      	cmp	r3, #96	; 0x60
 8003330:	d004      	beq.n	800333c <HAL_TIM_Base_Init+0xbc>
 8003332:	f44f 718b 	mov.w	r1, #278	; 0x116
 8003336:	482c      	ldr	r0, [pc, #176]	; (80033e8 <HAL_TIM_Base_Init+0x168>)
 8003338:	f004 ff75 	bl	8008226 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	691b      	ldr	r3, [r3, #16]
 8003340:	2b00      	cmp	r3, #0
 8003342:	d00e      	beq.n	8003362 <HAL_TIM_Base_Init+0xe2>
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	691b      	ldr	r3, [r3, #16]
 8003348:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800334c:	d009      	beq.n	8003362 <HAL_TIM_Base_Init+0xe2>
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	691b      	ldr	r3, [r3, #16]
 8003352:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003356:	d004      	beq.n	8003362 <HAL_TIM_Base_Init+0xe2>
 8003358:	f240 1117 	movw	r1, #279	; 0x117
 800335c:	4822      	ldr	r0, [pc, #136]	; (80033e8 <HAL_TIM_Base_Init+0x168>)
 800335e:	f004 ff62 	bl	8008226 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	699b      	ldr	r3, [r3, #24]
 8003366:	2b00      	cmp	r3, #0
 8003368:	d008      	beq.n	800337c <HAL_TIM_Base_Init+0xfc>
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	699b      	ldr	r3, [r3, #24]
 800336e:	2b80      	cmp	r3, #128	; 0x80
 8003370:	d004      	beq.n	800337c <HAL_TIM_Base_Init+0xfc>
 8003372:	f44f 718c 	mov.w	r1, #280	; 0x118
 8003376:	481c      	ldr	r0, [pc, #112]	; (80033e8 <HAL_TIM_Base_Init+0x168>)
 8003378:	f004 ff55 	bl	8008226 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003382:	b2db      	uxtb	r3, r3
 8003384:	2b00      	cmp	r3, #0
 8003386:	d106      	bne.n	8003396 <HAL_TIM_Base_Init+0x116>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2200      	movs	r2, #0
 800338c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003390:	6878      	ldr	r0, [r7, #4]
 8003392:	f000 f82b 	bl	80033ec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	2202      	movs	r2, #2
 800339a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681a      	ldr	r2, [r3, #0]
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	3304      	adds	r3, #4
 80033a6:	4619      	mov	r1, r3
 80033a8:	4610      	mov	r0, r2
 80033aa:	f000 f9eb 	bl	8003784 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	2201      	movs	r2, #1
 80033b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80033b6:	2300      	movs	r3, #0
}
 80033b8:	4618      	mov	r0, r3
 80033ba:	3708      	adds	r7, #8
 80033bc:	46bd      	mov	sp, r7
 80033be:	bd80      	pop	{r7, pc}
 80033c0:	40012c00 	.word	0x40012c00
 80033c4:	40000400 	.word	0x40000400
 80033c8:	40000800 	.word	0x40000800
 80033cc:	40000c00 	.word	0x40000c00
 80033d0:	40001000 	.word	0x40001000
 80033d4:	40001400 	.word	0x40001400
 80033d8:	40013400 	.word	0x40013400
 80033dc:	40014000 	.word	0x40014000
 80033e0:	40014400 	.word	0x40014400
 80033e4:	40014800 	.word	0x40014800
 80033e8:	0800a6a8 	.word	0x0800a6a8

080033ec <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80033ec:	b480      	push	{r7}
 80033ee:	b083      	sub	sp, #12
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80033f4:	bf00      	nop
 80033f6:	370c      	adds	r7, #12
 80033f8:	46bd      	mov	sp, r7
 80033fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fe:	4770      	bx	lr

08003400 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	b084      	sub	sp, #16
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	4a2d      	ldr	r2, [pc, #180]	; (80034c4 <HAL_TIM_Base_Start_IT+0xc4>)
 800340e:	4293      	cmp	r3, r2
 8003410:	d036      	beq.n	8003480 <HAL_TIM_Base_Start_IT+0x80>
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800341a:	d031      	beq.n	8003480 <HAL_TIM_Base_Start_IT+0x80>
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	4a29      	ldr	r2, [pc, #164]	; (80034c8 <HAL_TIM_Base_Start_IT+0xc8>)
 8003422:	4293      	cmp	r3, r2
 8003424:	d02c      	beq.n	8003480 <HAL_TIM_Base_Start_IT+0x80>
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	4a28      	ldr	r2, [pc, #160]	; (80034cc <HAL_TIM_Base_Start_IT+0xcc>)
 800342c:	4293      	cmp	r3, r2
 800342e:	d027      	beq.n	8003480 <HAL_TIM_Base_Start_IT+0x80>
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	4a26      	ldr	r2, [pc, #152]	; (80034d0 <HAL_TIM_Base_Start_IT+0xd0>)
 8003436:	4293      	cmp	r3, r2
 8003438:	d022      	beq.n	8003480 <HAL_TIM_Base_Start_IT+0x80>
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	4a25      	ldr	r2, [pc, #148]	; (80034d4 <HAL_TIM_Base_Start_IT+0xd4>)
 8003440:	4293      	cmp	r3, r2
 8003442:	d01d      	beq.n	8003480 <HAL_TIM_Base_Start_IT+0x80>
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	4a23      	ldr	r2, [pc, #140]	; (80034d8 <HAL_TIM_Base_Start_IT+0xd8>)
 800344a:	4293      	cmp	r3, r2
 800344c:	d018      	beq.n	8003480 <HAL_TIM_Base_Start_IT+0x80>
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	4a22      	ldr	r2, [pc, #136]	; (80034dc <HAL_TIM_Base_Start_IT+0xdc>)
 8003454:	4293      	cmp	r3, r2
 8003456:	d013      	beq.n	8003480 <HAL_TIM_Base_Start_IT+0x80>
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	4a20      	ldr	r2, [pc, #128]	; (80034e0 <HAL_TIM_Base_Start_IT+0xe0>)
 800345e:	4293      	cmp	r3, r2
 8003460:	d00e      	beq.n	8003480 <HAL_TIM_Base_Start_IT+0x80>
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	4a1f      	ldr	r2, [pc, #124]	; (80034e4 <HAL_TIM_Base_Start_IT+0xe4>)
 8003468:	4293      	cmp	r3, r2
 800346a:	d009      	beq.n	8003480 <HAL_TIM_Base_Start_IT+0x80>
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	4a1d      	ldr	r2, [pc, #116]	; (80034e8 <HAL_TIM_Base_Start_IT+0xe8>)
 8003472:	4293      	cmp	r3, r2
 8003474:	d004      	beq.n	8003480 <HAL_TIM_Base_Start_IT+0x80>
 8003476:	f44f 71de 	mov.w	r1, #444	; 0x1bc
 800347a:	481c      	ldr	r0, [pc, #112]	; (80034ec <HAL_TIM_Base_Start_IT+0xec>)
 800347c:	f004 fed3 	bl	8008226 <assert_failed>

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	68da      	ldr	r2, [r3, #12]
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f042 0201 	orr.w	r2, r2, #1
 800348e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	689a      	ldr	r2, [r3, #8]
 8003496:	4b16      	ldr	r3, [pc, #88]	; (80034f0 <HAL_TIM_Base_Start_IT+0xf0>)
 8003498:	4013      	ands	r3, r2
 800349a:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	2b06      	cmp	r3, #6
 80034a0:	d00b      	beq.n	80034ba <HAL_TIM_Base_Start_IT+0xba>
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034a8:	d007      	beq.n	80034ba <HAL_TIM_Base_Start_IT+0xba>
  {
    __HAL_TIM_ENABLE(htim);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	681a      	ldr	r2, [r3, #0]
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f042 0201 	orr.w	r2, r2, #1
 80034b8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80034ba:	2300      	movs	r3, #0
}
 80034bc:	4618      	mov	r0, r3
 80034be:	3710      	adds	r7, #16
 80034c0:	46bd      	mov	sp, r7
 80034c2:	bd80      	pop	{r7, pc}
 80034c4:	40012c00 	.word	0x40012c00
 80034c8:	40000400 	.word	0x40000400
 80034cc:	40000800 	.word	0x40000800
 80034d0:	40000c00 	.word	0x40000c00
 80034d4:	40001000 	.word	0x40001000
 80034d8:	40001400 	.word	0x40001400
 80034dc:	40013400 	.word	0x40013400
 80034e0:	40014000 	.word	0x40014000
 80034e4:	40014400 	.word	0x40014400
 80034e8:	40014800 	.word	0x40014800
 80034ec:	0800a6a8 	.word	0x0800a6a8
 80034f0:	00010007 	.word	0x00010007

080034f4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b082      	sub	sp, #8
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	691b      	ldr	r3, [r3, #16]
 8003502:	f003 0302 	and.w	r3, r3, #2
 8003506:	2b02      	cmp	r3, #2
 8003508:	d122      	bne.n	8003550 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	68db      	ldr	r3, [r3, #12]
 8003510:	f003 0302 	and.w	r3, r3, #2
 8003514:	2b02      	cmp	r3, #2
 8003516:	d11b      	bne.n	8003550 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f06f 0202 	mvn.w	r2, #2
 8003520:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	2201      	movs	r2, #1
 8003526:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	699b      	ldr	r3, [r3, #24]
 800352e:	f003 0303 	and.w	r3, r3, #3
 8003532:	2b00      	cmp	r3, #0
 8003534:	d003      	beq.n	800353e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003536:	6878      	ldr	r0, [r7, #4]
 8003538:	f000 f905 	bl	8003746 <HAL_TIM_IC_CaptureCallback>
 800353c:	e005      	b.n	800354a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800353e:	6878      	ldr	r0, [r7, #4]
 8003540:	f000 f8f7 	bl	8003732 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003544:	6878      	ldr	r0, [r7, #4]
 8003546:	f000 f908 	bl	800375a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	2200      	movs	r2, #0
 800354e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	691b      	ldr	r3, [r3, #16]
 8003556:	f003 0304 	and.w	r3, r3, #4
 800355a:	2b04      	cmp	r3, #4
 800355c:	d122      	bne.n	80035a4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	68db      	ldr	r3, [r3, #12]
 8003564:	f003 0304 	and.w	r3, r3, #4
 8003568:	2b04      	cmp	r3, #4
 800356a:	d11b      	bne.n	80035a4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f06f 0204 	mvn.w	r2, #4
 8003574:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	2202      	movs	r2, #2
 800357a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	699b      	ldr	r3, [r3, #24]
 8003582:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003586:	2b00      	cmp	r3, #0
 8003588:	d003      	beq.n	8003592 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800358a:	6878      	ldr	r0, [r7, #4]
 800358c:	f000 f8db 	bl	8003746 <HAL_TIM_IC_CaptureCallback>
 8003590:	e005      	b.n	800359e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003592:	6878      	ldr	r0, [r7, #4]
 8003594:	f000 f8cd 	bl	8003732 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003598:	6878      	ldr	r0, [r7, #4]
 800359a:	f000 f8de 	bl	800375a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	2200      	movs	r2, #0
 80035a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	691b      	ldr	r3, [r3, #16]
 80035aa:	f003 0308 	and.w	r3, r3, #8
 80035ae:	2b08      	cmp	r3, #8
 80035b0:	d122      	bne.n	80035f8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	68db      	ldr	r3, [r3, #12]
 80035b8:	f003 0308 	and.w	r3, r3, #8
 80035bc:	2b08      	cmp	r3, #8
 80035be:	d11b      	bne.n	80035f8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f06f 0208 	mvn.w	r2, #8
 80035c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	2204      	movs	r2, #4
 80035ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	69db      	ldr	r3, [r3, #28]
 80035d6:	f003 0303 	and.w	r3, r3, #3
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d003      	beq.n	80035e6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80035de:	6878      	ldr	r0, [r7, #4]
 80035e0:	f000 f8b1 	bl	8003746 <HAL_TIM_IC_CaptureCallback>
 80035e4:	e005      	b.n	80035f2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80035e6:	6878      	ldr	r0, [r7, #4]
 80035e8:	f000 f8a3 	bl	8003732 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035ec:	6878      	ldr	r0, [r7, #4]
 80035ee:	f000 f8b4 	bl	800375a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	2200      	movs	r2, #0
 80035f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	691b      	ldr	r3, [r3, #16]
 80035fe:	f003 0310 	and.w	r3, r3, #16
 8003602:	2b10      	cmp	r3, #16
 8003604:	d122      	bne.n	800364c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	68db      	ldr	r3, [r3, #12]
 800360c:	f003 0310 	and.w	r3, r3, #16
 8003610:	2b10      	cmp	r3, #16
 8003612:	d11b      	bne.n	800364c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f06f 0210 	mvn.w	r2, #16
 800361c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	2208      	movs	r2, #8
 8003622:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	69db      	ldr	r3, [r3, #28]
 800362a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800362e:	2b00      	cmp	r3, #0
 8003630:	d003      	beq.n	800363a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003632:	6878      	ldr	r0, [r7, #4]
 8003634:	f000 f887 	bl	8003746 <HAL_TIM_IC_CaptureCallback>
 8003638:	e005      	b.n	8003646 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800363a:	6878      	ldr	r0, [r7, #4]
 800363c:	f000 f879 	bl	8003732 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003640:	6878      	ldr	r0, [r7, #4]
 8003642:	f000 f88a 	bl	800375a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2200      	movs	r2, #0
 800364a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	691b      	ldr	r3, [r3, #16]
 8003652:	f003 0301 	and.w	r3, r3, #1
 8003656:	2b01      	cmp	r3, #1
 8003658:	d10e      	bne.n	8003678 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	68db      	ldr	r3, [r3, #12]
 8003660:	f003 0301 	and.w	r3, r3, #1
 8003664:	2b01      	cmp	r3, #1
 8003666:	d107      	bne.n	8003678 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f06f 0201 	mvn.w	r2, #1
 8003670:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003672:	6878      	ldr	r0, [r7, #4]
 8003674:	f000 f9a2 	bl	80039bc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	691b      	ldr	r3, [r3, #16]
 800367e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003682:	2b80      	cmp	r3, #128	; 0x80
 8003684:	d10e      	bne.n	80036a4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	68db      	ldr	r3, [r3, #12]
 800368c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003690:	2b80      	cmp	r3, #128	; 0x80
 8003692:	d107      	bne.n	80036a4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800369c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800369e:	6878      	ldr	r0, [r7, #4]
 80036a0:	f000 f914 	bl	80038cc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	691b      	ldr	r3, [r3, #16]
 80036aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80036b2:	d10e      	bne.n	80036d2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	68db      	ldr	r3, [r3, #12]
 80036ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036be:	2b80      	cmp	r3, #128	; 0x80
 80036c0:	d107      	bne.n	80036d2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80036ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80036cc:	6878      	ldr	r0, [r7, #4]
 80036ce:	f000 f907 	bl	80038e0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	691b      	ldr	r3, [r3, #16]
 80036d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036dc:	2b40      	cmp	r3, #64	; 0x40
 80036de:	d10e      	bne.n	80036fe <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	68db      	ldr	r3, [r3, #12]
 80036e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036ea:	2b40      	cmp	r3, #64	; 0x40
 80036ec:	d107      	bne.n	80036fe <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80036f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80036f8:	6878      	ldr	r0, [r7, #4]
 80036fa:	f000 f838 	bl	800376e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	691b      	ldr	r3, [r3, #16]
 8003704:	f003 0320 	and.w	r3, r3, #32
 8003708:	2b20      	cmp	r3, #32
 800370a:	d10e      	bne.n	800372a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	68db      	ldr	r3, [r3, #12]
 8003712:	f003 0320 	and.w	r3, r3, #32
 8003716:	2b20      	cmp	r3, #32
 8003718:	d107      	bne.n	800372a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f06f 0220 	mvn.w	r2, #32
 8003722:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003724:	6878      	ldr	r0, [r7, #4]
 8003726:	f000 f8c7 	bl	80038b8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800372a:	bf00      	nop
 800372c:	3708      	adds	r7, #8
 800372e:	46bd      	mov	sp, r7
 8003730:	bd80      	pop	{r7, pc}

08003732 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003732:	b480      	push	{r7}
 8003734:	b083      	sub	sp, #12
 8003736:	af00      	add	r7, sp, #0
 8003738:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800373a:	bf00      	nop
 800373c:	370c      	adds	r7, #12
 800373e:	46bd      	mov	sp, r7
 8003740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003744:	4770      	bx	lr

08003746 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003746:	b480      	push	{r7}
 8003748:	b083      	sub	sp, #12
 800374a:	af00      	add	r7, sp, #0
 800374c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800374e:	bf00      	nop
 8003750:	370c      	adds	r7, #12
 8003752:	46bd      	mov	sp, r7
 8003754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003758:	4770      	bx	lr

0800375a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800375a:	b480      	push	{r7}
 800375c:	b083      	sub	sp, #12
 800375e:	af00      	add	r7, sp, #0
 8003760:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003762:	bf00      	nop
 8003764:	370c      	adds	r7, #12
 8003766:	46bd      	mov	sp, r7
 8003768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376c:	4770      	bx	lr

0800376e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800376e:	b480      	push	{r7}
 8003770:	b083      	sub	sp, #12
 8003772:	af00      	add	r7, sp, #0
 8003774:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003776:	bf00      	nop
 8003778:	370c      	adds	r7, #12
 800377a:	46bd      	mov	sp, r7
 800377c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003780:	4770      	bx	lr
	...

08003784 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003784:	b480      	push	{r7}
 8003786:	b085      	sub	sp, #20
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
 800378c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	4a40      	ldr	r2, [pc, #256]	; (8003898 <TIM_Base_SetConfig+0x114>)
 8003798:	4293      	cmp	r3, r2
 800379a:	d013      	beq.n	80037c4 <TIM_Base_SetConfig+0x40>
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037a2:	d00f      	beq.n	80037c4 <TIM_Base_SetConfig+0x40>
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	4a3d      	ldr	r2, [pc, #244]	; (800389c <TIM_Base_SetConfig+0x118>)
 80037a8:	4293      	cmp	r3, r2
 80037aa:	d00b      	beq.n	80037c4 <TIM_Base_SetConfig+0x40>
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	4a3c      	ldr	r2, [pc, #240]	; (80038a0 <TIM_Base_SetConfig+0x11c>)
 80037b0:	4293      	cmp	r3, r2
 80037b2:	d007      	beq.n	80037c4 <TIM_Base_SetConfig+0x40>
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	4a3b      	ldr	r2, [pc, #236]	; (80038a4 <TIM_Base_SetConfig+0x120>)
 80037b8:	4293      	cmp	r3, r2
 80037ba:	d003      	beq.n	80037c4 <TIM_Base_SetConfig+0x40>
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	4a3a      	ldr	r2, [pc, #232]	; (80038a8 <TIM_Base_SetConfig+0x124>)
 80037c0:	4293      	cmp	r3, r2
 80037c2:	d108      	bne.n	80037d6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037ca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	685b      	ldr	r3, [r3, #4]
 80037d0:	68fa      	ldr	r2, [r7, #12]
 80037d2:	4313      	orrs	r3, r2
 80037d4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	4a2f      	ldr	r2, [pc, #188]	; (8003898 <TIM_Base_SetConfig+0x114>)
 80037da:	4293      	cmp	r3, r2
 80037dc:	d01f      	beq.n	800381e <TIM_Base_SetConfig+0x9a>
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037e4:	d01b      	beq.n	800381e <TIM_Base_SetConfig+0x9a>
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	4a2c      	ldr	r2, [pc, #176]	; (800389c <TIM_Base_SetConfig+0x118>)
 80037ea:	4293      	cmp	r3, r2
 80037ec:	d017      	beq.n	800381e <TIM_Base_SetConfig+0x9a>
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	4a2b      	ldr	r2, [pc, #172]	; (80038a0 <TIM_Base_SetConfig+0x11c>)
 80037f2:	4293      	cmp	r3, r2
 80037f4:	d013      	beq.n	800381e <TIM_Base_SetConfig+0x9a>
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	4a2a      	ldr	r2, [pc, #168]	; (80038a4 <TIM_Base_SetConfig+0x120>)
 80037fa:	4293      	cmp	r3, r2
 80037fc:	d00f      	beq.n	800381e <TIM_Base_SetConfig+0x9a>
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	4a29      	ldr	r2, [pc, #164]	; (80038a8 <TIM_Base_SetConfig+0x124>)
 8003802:	4293      	cmp	r3, r2
 8003804:	d00b      	beq.n	800381e <TIM_Base_SetConfig+0x9a>
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	4a28      	ldr	r2, [pc, #160]	; (80038ac <TIM_Base_SetConfig+0x128>)
 800380a:	4293      	cmp	r3, r2
 800380c:	d007      	beq.n	800381e <TIM_Base_SetConfig+0x9a>
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	4a27      	ldr	r2, [pc, #156]	; (80038b0 <TIM_Base_SetConfig+0x12c>)
 8003812:	4293      	cmp	r3, r2
 8003814:	d003      	beq.n	800381e <TIM_Base_SetConfig+0x9a>
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	4a26      	ldr	r2, [pc, #152]	; (80038b4 <TIM_Base_SetConfig+0x130>)
 800381a:	4293      	cmp	r3, r2
 800381c:	d108      	bne.n	8003830 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003824:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003826:	683b      	ldr	r3, [r7, #0]
 8003828:	68db      	ldr	r3, [r3, #12]
 800382a:	68fa      	ldr	r2, [r7, #12]
 800382c:	4313      	orrs	r3, r2
 800382e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003836:	683b      	ldr	r3, [r7, #0]
 8003838:	695b      	ldr	r3, [r3, #20]
 800383a:	4313      	orrs	r3, r2
 800383c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	68fa      	ldr	r2, [r7, #12]
 8003842:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003844:	683b      	ldr	r3, [r7, #0]
 8003846:	689a      	ldr	r2, [r3, #8]
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	681a      	ldr	r2, [r3, #0]
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	4a10      	ldr	r2, [pc, #64]	; (8003898 <TIM_Base_SetConfig+0x114>)
 8003858:	4293      	cmp	r3, r2
 800385a:	d00f      	beq.n	800387c <TIM_Base_SetConfig+0xf8>
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	4a12      	ldr	r2, [pc, #72]	; (80038a8 <TIM_Base_SetConfig+0x124>)
 8003860:	4293      	cmp	r3, r2
 8003862:	d00b      	beq.n	800387c <TIM_Base_SetConfig+0xf8>
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	4a11      	ldr	r2, [pc, #68]	; (80038ac <TIM_Base_SetConfig+0x128>)
 8003868:	4293      	cmp	r3, r2
 800386a:	d007      	beq.n	800387c <TIM_Base_SetConfig+0xf8>
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	4a10      	ldr	r2, [pc, #64]	; (80038b0 <TIM_Base_SetConfig+0x12c>)
 8003870:	4293      	cmp	r3, r2
 8003872:	d003      	beq.n	800387c <TIM_Base_SetConfig+0xf8>
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	4a0f      	ldr	r2, [pc, #60]	; (80038b4 <TIM_Base_SetConfig+0x130>)
 8003878:	4293      	cmp	r3, r2
 800387a:	d103      	bne.n	8003884 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	691a      	ldr	r2, [r3, #16]
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2201      	movs	r2, #1
 8003888:	615a      	str	r2, [r3, #20]
}
 800388a:	bf00      	nop
 800388c:	3714      	adds	r7, #20
 800388e:	46bd      	mov	sp, r7
 8003890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003894:	4770      	bx	lr
 8003896:	bf00      	nop
 8003898:	40012c00 	.word	0x40012c00
 800389c:	40000400 	.word	0x40000400
 80038a0:	40000800 	.word	0x40000800
 80038a4:	40000c00 	.word	0x40000c00
 80038a8:	40013400 	.word	0x40013400
 80038ac:	40014000 	.word	0x40014000
 80038b0:	40014400 	.word	0x40014400
 80038b4:	40014800 	.word	0x40014800

080038b8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80038b8:	b480      	push	{r7}
 80038ba:	b083      	sub	sp, #12
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80038c0:	bf00      	nop
 80038c2:	370c      	adds	r7, #12
 80038c4:	46bd      	mov	sp, r7
 80038c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ca:	4770      	bx	lr

080038cc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80038cc:	b480      	push	{r7}
 80038ce:	b083      	sub	sp, #12
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80038d4:	bf00      	nop
 80038d6:	370c      	adds	r7, #12
 80038d8:	46bd      	mov	sp, r7
 80038da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038de:	4770      	bx	lr

080038e0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80038e0:	b480      	push	{r7}
 80038e2:	b083      	sub	sp, #12
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80038e8:	bf00      	nop
 80038ea:	370c      	adds	r7, #12
 80038ec:	46bd      	mov	sp, r7
 80038ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f2:	4770      	bx	lr

080038f4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b08c      	sub	sp, #48	; 0x30
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80038fc:	2300      	movs	r3, #0
 80038fe:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              uwPrescalerValue = 0U;
 8003900:	2300      	movs	r3, #0
 8003902:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  
  /* Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8003904:	2200      	movs	r2, #0
 8003906:	6879      	ldr	r1, [r7, #4]
 8003908:	2036      	movs	r0, #54	; 0x36
 800390a:	f7fc ff63 	bl	80007d4 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800390e:	2036      	movs	r0, #54	; 0x36
 8003910:	f7fc ff8c 	bl	800082c <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8003914:	4b25      	ldr	r3, [pc, #148]	; (80039ac <HAL_InitTick+0xb8>)
 8003916:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003918:	4a24      	ldr	r2, [pc, #144]	; (80039ac <HAL_InitTick+0xb8>)
 800391a:	f043 0310 	orr.w	r3, r3, #16
 800391e:	6593      	str	r3, [r2, #88]	; 0x58
 8003920:	4b22      	ldr	r3, [pc, #136]	; (80039ac <HAL_InitTick+0xb8>)
 8003922:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003924:	f003 0310 	and.w	r3, r3, #16
 8003928:	60bb      	str	r3, [r7, #8]
 800392a:	68bb      	ldr	r3, [r7, #8]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800392c:	f107 020c 	add.w	r2, r7, #12
 8003930:	f107 0310 	add.w	r3, r7, #16
 8003934:	4611      	mov	r1, r2
 8003936:	4618      	mov	r0, r3
 8003938:	f7fe fc68 	bl	800220c <HAL_RCC_GetClockConfig>
  
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800393c:	69fb      	ldr	r3, [r7, #28]
 800393e:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1) 
 8003940:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003942:	2b00      	cmp	r3, #0
 8003944:	d103      	bne.n	800394e <HAL_InitTick+0x5a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8003946:	f7fe fc35 	bl	80021b4 <HAL_RCC_GetPCLK1Freq>
 800394a:	62f8      	str	r0, [r7, #44]	; 0x2c
 800394c:	e004      	b.n	8003958 <HAL_InitTick+0x64>
  }
  else
  {
    uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 800394e:	f7fe fc31 	bl	80021b4 <HAL_RCC_GetPCLK1Freq>
 8003952:	4603      	mov	r3, r0
 8003954:	005b      	lsls	r3, r3, #1
 8003956:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003958:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800395a:	4a15      	ldr	r2, [pc, #84]	; (80039b0 <HAL_InitTick+0xbc>)
 800395c:	fba2 2303 	umull	r2, r3, r2, r3
 8003960:	0c9b      	lsrs	r3, r3, #18
 8003962:	3b01      	subs	r3, #1
 8003964:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Initialize TIM6 */
  TimHandle.Instance = TIM6;
 8003966:	4b13      	ldr	r3, [pc, #76]	; (80039b4 <HAL_InitTick+0xc0>)
 8003968:	4a13      	ldr	r2, [pc, #76]	; (80039b8 <HAL_InitTick+0xc4>)
 800396a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  TimHandle.Init.Period = (1000000U / 1000U) - 1U;
 800396c:	4b11      	ldr	r3, [pc, #68]	; (80039b4 <HAL_InitTick+0xc0>)
 800396e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003972:	60da      	str	r2, [r3, #12]
  TimHandle.Init.Prescaler = uwPrescalerValue;
 8003974:	4a0f      	ldr	r2, [pc, #60]	; (80039b4 <HAL_InitTick+0xc0>)
 8003976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003978:	6053      	str	r3, [r2, #4]
  TimHandle.Init.ClockDivision = 0;
 800397a:	4b0e      	ldr	r3, [pc, #56]	; (80039b4 <HAL_InitTick+0xc0>)
 800397c:	2200      	movs	r2, #0
 800397e:	611a      	str	r2, [r3, #16]
  TimHandle.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003980:	4b0c      	ldr	r3, [pc, #48]	; (80039b4 <HAL_InitTick+0xc0>)
 8003982:	2200      	movs	r2, #0
 8003984:	609a      	str	r2, [r3, #8]
  TimHandle.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003986:	4b0b      	ldr	r3, [pc, #44]	; (80039b4 <HAL_InitTick+0xc0>)
 8003988:	2200      	movs	r2, #0
 800398a:	619a      	str	r2, [r3, #24]
  if(HAL_TIM_Base_Init(&TimHandle) == HAL_OK)
 800398c:	4809      	ldr	r0, [pc, #36]	; (80039b4 <HAL_InitTick+0xc0>)
 800398e:	f7ff fc77 	bl	8003280 <HAL_TIM_Base_Init>
 8003992:	4603      	mov	r3, r0
 8003994:	2b00      	cmp	r3, #0
 8003996:	d104      	bne.n	80039a2 <HAL_InitTick+0xae>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&TimHandle);
 8003998:	4806      	ldr	r0, [pc, #24]	; (80039b4 <HAL_InitTick+0xc0>)
 800399a:	f7ff fd31 	bl	8003400 <HAL_TIM_Base_Start_IT>
 800399e:	4603      	mov	r3, r0
 80039a0:	e000      	b.n	80039a4 <HAL_InitTick+0xb0>
  }
  
  /* Return function status */
  return HAL_ERROR;
 80039a2:	2301      	movs	r3, #1
}
 80039a4:	4618      	mov	r0, r3
 80039a6:	3730      	adds	r7, #48	; 0x30
 80039a8:	46bd      	mov	sp, r7
 80039aa:	bd80      	pop	{r7, pc}
 80039ac:	40021000 	.word	0x40021000
 80039b0:	431bde83 	.word	0x431bde83
 80039b4:	2000d640 	.word	0x2000d640
 80039b8:	40001000 	.word	0x40001000

080039bc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	b082      	sub	sp, #8
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	6078      	str	r0, [r7, #4]
  HAL_IncTick();
 80039c4:	f7fc fdf4 	bl	80005b0 <HAL_IncTick>
}
 80039c8:	bf00      	nop
 80039ca:	3708      	adds	r7, #8
 80039cc:	46bd      	mov	sp, r7
 80039ce:	bd80      	pop	{r7, pc}

080039d0 <TIM6_DAC_IRQHandler>:
  * @brief  This function handles TIM interrupt request.
  * @param  None
  * @retval None
  */
void TIM6_DAC_IRQHandler(void)
{
 80039d0:	b580      	push	{r7, lr}
 80039d2:	af00      	add	r7, sp, #0
  HAL_TIM_IRQHandler(&TimHandle);
 80039d4:	4802      	ldr	r0, [pc, #8]	; (80039e0 <TIM6_DAC_IRQHandler+0x10>)
 80039d6:	f7ff fd8d 	bl	80034f4 <HAL_TIM_IRQHandler>
}
 80039da:	bf00      	nop
 80039dc:	bd80      	pop	{r7, pc}
 80039de:	bf00      	nop
 80039e0:	2000d640 	.word	0x2000d640

080039e4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	b082      	sub	sp, #8
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d101      	bne.n	80039f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80039f2:	2301      	movs	r3, #1
 80039f4:	e099      	b.n	8003b2a <HAL_UART_Init+0x146>
  }

  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	699b      	ldr	r3, [r3, #24]
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d023      	beq.n	8003a46 <HAL_UART_Init+0x62>
  {
    /* Check the parameters */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	4a4c      	ldr	r2, [pc, #304]	; (8003b34 <HAL_UART_Init+0x150>)
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d041      	beq.n	8003a8c <HAL_UART_Init+0xa8>
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	4a4a      	ldr	r2, [pc, #296]	; (8003b38 <HAL_UART_Init+0x154>)
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	d03c      	beq.n	8003a8c <HAL_UART_Init+0xa8>
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	4a49      	ldr	r2, [pc, #292]	; (8003b3c <HAL_UART_Init+0x158>)
 8003a18:	4293      	cmp	r3, r2
 8003a1a:	d037      	beq.n	8003a8c <HAL_UART_Init+0xa8>
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	4a47      	ldr	r2, [pc, #284]	; (8003b40 <HAL_UART_Init+0x15c>)
 8003a22:	4293      	cmp	r3, r2
 8003a24:	d032      	beq.n	8003a8c <HAL_UART_Init+0xa8>
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	4a46      	ldr	r2, [pc, #280]	; (8003b44 <HAL_UART_Init+0x160>)
 8003a2c:	4293      	cmp	r3, r2
 8003a2e:	d02d      	beq.n	8003a8c <HAL_UART_Init+0xa8>
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	4a44      	ldr	r2, [pc, #272]	; (8003b48 <HAL_UART_Init+0x164>)
 8003a36:	4293      	cmp	r3, r2
 8003a38:	d028      	beq.n	8003a8c <HAL_UART_Init+0xa8>
 8003a3a:	f240 113f 	movw	r1, #319	; 0x13f
 8003a3e:	4843      	ldr	r0, [pc, #268]	; (8003b4c <HAL_UART_Init+0x168>)
 8003a40:	f004 fbf1 	bl	8008226 <assert_failed>
 8003a44:	e022      	b.n	8003a8c <HAL_UART_Init+0xa8>
  }
  else
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	4a3a      	ldr	r2, [pc, #232]	; (8003b34 <HAL_UART_Init+0x150>)
 8003a4c:	4293      	cmp	r3, r2
 8003a4e:	d01d      	beq.n	8003a8c <HAL_UART_Init+0xa8>
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	4a38      	ldr	r2, [pc, #224]	; (8003b38 <HAL_UART_Init+0x154>)
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d018      	beq.n	8003a8c <HAL_UART_Init+0xa8>
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	4a37      	ldr	r2, [pc, #220]	; (8003b3c <HAL_UART_Init+0x158>)
 8003a60:	4293      	cmp	r3, r2
 8003a62:	d013      	beq.n	8003a8c <HAL_UART_Init+0xa8>
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	4a35      	ldr	r2, [pc, #212]	; (8003b40 <HAL_UART_Init+0x15c>)
 8003a6a:	4293      	cmp	r3, r2
 8003a6c:	d00e      	beq.n	8003a8c <HAL_UART_Init+0xa8>
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	4a34      	ldr	r2, [pc, #208]	; (8003b44 <HAL_UART_Init+0x160>)
 8003a74:	4293      	cmp	r3, r2
 8003a76:	d009      	beq.n	8003a8c <HAL_UART_Init+0xa8>
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	4a32      	ldr	r2, [pc, #200]	; (8003b48 <HAL_UART_Init+0x164>)
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	d004      	beq.n	8003a8c <HAL_UART_Init+0xa8>
 8003a82:	f44f 71a2 	mov.w	r1, #324	; 0x144
 8003a86:	4831      	ldr	r0, [pc, #196]	; (8003b4c <HAL_UART_Init+0x168>)
 8003a88:	f004 fbcd 	bl	8008226 <assert_failed>
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d114      	bne.n	8003abe <HAL_UART_Init+0xda>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2200      	movs	r2, #0
 8003a98:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 8003a9c:	6878      	ldr	r0, [r7, #4]
 8003a9e:	f000 fb03 	bl	80040a8 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d103      	bne.n	8003ab4 <HAL_UART_Init+0xd0>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	4a28      	ldr	r2, [pc, #160]	; (8003b50 <HAL_UART_Init+0x16c>)
 8003ab0:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003aba:	6878      	ldr	r0, [r7, #4]
 8003abc:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	2224      	movs	r2, #36	; 0x24
 8003ac2:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	681a      	ldr	r2, [r3, #0]
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f022 0201 	bic.w	r2, r2, #1
 8003ad2:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003ad4:	6878      	ldr	r0, [r7, #4]
 8003ad6:	f000 fb27 	bl	8004128 <UART_SetConfig>
 8003ada:	4603      	mov	r3, r0
 8003adc:	2b01      	cmp	r3, #1
 8003ade:	d101      	bne.n	8003ae4 <HAL_UART_Init+0x100>
  {
    return HAL_ERROR;
 8003ae0:	2301      	movs	r3, #1
 8003ae2:	e022      	b.n	8003b2a <HAL_UART_Init+0x146>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d002      	beq.n	8003af2 <HAL_UART_Init+0x10e>
  {
    UART_AdvFeatureConfig(huart);
 8003aec:	6878      	ldr	r0, [r7, #4]
 8003aee:	f000 ff0b 	bl	8004908 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	685a      	ldr	r2, [r3, #4]
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003b00:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	689a      	ldr	r2, [r3, #8]
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003b10:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	681a      	ldr	r2, [r3, #0]
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f042 0201 	orr.w	r2, r2, #1
 8003b20:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003b22:	6878      	ldr	r0, [r7, #4]
 8003b24:	f001 f84e 	bl	8004bc4 <UART_CheckIdleState>
 8003b28:	4603      	mov	r3, r0
}
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	3708      	adds	r7, #8
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	bd80      	pop	{r7, pc}
 8003b32:	bf00      	nop
 8003b34:	40013800 	.word	0x40013800
 8003b38:	40004400 	.word	0x40004400
 8003b3c:	40004800 	.word	0x40004800
 8003b40:	40004c00 	.word	0x40004c00
 8003b44:	40005000 	.word	0x40005000
 8003b48:	40008000 	.word	0x40008000
 8003b4c:	0800a6e0 	.word	0x0800a6e0
 8003b50:	08003b55 	.word	0x08003b55

08003b54 <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8003b54:	b480      	push	{r7}
 8003b56:	b083      	sub	sp, #12
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 8003b5c:	bf00      	nop
 8003b5e:	370c      	adds	r7, #12
 8003b60:	46bd      	mov	sp, r7
 8003b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b66:	4770      	bx	lr

08003b68 <HAL_UART_Transmit>:
  * @param Size    Amount of data to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b68:	b580      	push	{r7, lr}
 8003b6a:	b08a      	sub	sp, #40	; 0x28
 8003b6c:	af02      	add	r7, sp, #8
 8003b6e:	60f8      	str	r0, [r7, #12]
 8003b70:	60b9      	str	r1, [r7, #8]
 8003b72:	603b      	str	r3, [r7, #0]
 8003b74:	4613      	mov	r3, r2
 8003b76:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b7c:	2b20      	cmp	r3, #32
 8003b7e:	f040 8081 	bne.w	8003c84 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003b82:	68bb      	ldr	r3, [r7, #8]
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d002      	beq.n	8003b8e <HAL_UART_Transmit+0x26>
 8003b88:	88fb      	ldrh	r3, [r7, #6]
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d101      	bne.n	8003b92 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003b8e:	2301      	movs	r3, #1
 8003b90:	e079      	b.n	8003c86 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8003b98:	2b01      	cmp	r3, #1
 8003b9a:	d101      	bne.n	8003ba0 <HAL_UART_Transmit+0x38>
 8003b9c:	2302      	movs	r3, #2
 8003b9e:	e072      	b.n	8003c86 <HAL_UART_Transmit+0x11e>
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	2201      	movs	r2, #1
 8003ba4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	2200      	movs	r2, #0
 8003bac:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	2221      	movs	r2, #33	; 0x21
 8003bb2:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8003bb4:	f7fc fd0e 	bl	80005d4 <HAL_GetTick>
 8003bb8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	88fa      	ldrh	r2, [r7, #6]
 8003bbe:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	88fa      	ldrh	r2, [r7, #6]
 8003bc6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	689b      	ldr	r3, [r3, #8]
 8003bce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003bd2:	d108      	bne.n	8003be6 <HAL_UART_Transmit+0x7e>
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	691b      	ldr	r3, [r3, #16]
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d104      	bne.n	8003be6 <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 8003bdc:	2300      	movs	r3, #0
 8003bde:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003be0:	68bb      	ldr	r3, [r7, #8]
 8003be2:	61bb      	str	r3, [r7, #24]
 8003be4:	e003      	b.n	8003bee <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 8003be6:	68bb      	ldr	r3, [r7, #8]
 8003be8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003bea:	2300      	movs	r3, #0
 8003bec:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003bee:	e02d      	b.n	8003c4c <HAL_UART_Transmit+0xe4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003bf0:	683b      	ldr	r3, [r7, #0]
 8003bf2:	9300      	str	r3, [sp, #0]
 8003bf4:	697b      	ldr	r3, [r7, #20]
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	2180      	movs	r1, #128	; 0x80
 8003bfa:	68f8      	ldr	r0, [r7, #12]
 8003bfc:	f001 f827 	bl	8004c4e <UART_WaitOnFlagUntilTimeout>
 8003c00:	4603      	mov	r3, r0
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d001      	beq.n	8003c0a <HAL_UART_Transmit+0xa2>
      {
        return HAL_TIMEOUT;
 8003c06:	2303      	movs	r3, #3
 8003c08:	e03d      	b.n	8003c86 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8003c0a:	69fb      	ldr	r3, [r7, #28]
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d10b      	bne.n	8003c28 <HAL_UART_Transmit+0xc0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003c10:	69bb      	ldr	r3, [r7, #24]
 8003c12:	881a      	ldrh	r2, [r3, #0]
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003c1c:	b292      	uxth	r2, r2
 8003c1e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003c20:	69bb      	ldr	r3, [r7, #24]
 8003c22:	3302      	adds	r3, #2
 8003c24:	61bb      	str	r3, [r7, #24]
 8003c26:	e008      	b.n	8003c3a <HAL_UART_Transmit+0xd2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003c28:	69fb      	ldr	r3, [r7, #28]
 8003c2a:	781a      	ldrb	r2, [r3, #0]
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	b292      	uxth	r2, r2
 8003c32:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003c34:	69fb      	ldr	r3, [r7, #28]
 8003c36:	3301      	adds	r3, #1
 8003c38:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003c40:	b29b      	uxth	r3, r3
 8003c42:	3b01      	subs	r3, #1
 8003c44:	b29a      	uxth	r2, r3
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003c52:	b29b      	uxth	r3, r3
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d1cb      	bne.n	8003bf0 <HAL_UART_Transmit+0x88>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003c58:	683b      	ldr	r3, [r7, #0]
 8003c5a:	9300      	str	r3, [sp, #0]
 8003c5c:	697b      	ldr	r3, [r7, #20]
 8003c5e:	2200      	movs	r2, #0
 8003c60:	2140      	movs	r1, #64	; 0x40
 8003c62:	68f8      	ldr	r0, [r7, #12]
 8003c64:	f000 fff3 	bl	8004c4e <UART_WaitOnFlagUntilTimeout>
 8003c68:	4603      	mov	r3, r0
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d001      	beq.n	8003c72 <HAL_UART_Transmit+0x10a>
    {
      return HAL_TIMEOUT;
 8003c6e:	2303      	movs	r3, #3
 8003c70:	e009      	b.n	8003c86 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	2220      	movs	r2, #32
 8003c76:	675a      	str	r2, [r3, #116]	; 0x74

    __HAL_UNLOCK(huart);
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    return HAL_OK;
 8003c80:	2300      	movs	r3, #0
 8003c82:	e000      	b.n	8003c86 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8003c84:	2302      	movs	r3, #2
  }
}
 8003c86:	4618      	mov	r0, r3
 8003c88:	3720      	adds	r7, #32
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	bd80      	pop	{r7, pc}
	...

08003c90 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer.
  * @param Size  Amount of data to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b084      	sub	sp, #16
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	60f8      	str	r0, [r7, #12]
 8003c98:	60b9      	str	r1, [r7, #8]
 8003c9a:	4613      	mov	r3, r2
 8003c9c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003ca2:	2b20      	cmp	r3, #32
 8003ca4:	d16c      	bne.n	8003d80 <HAL_UART_Receive_DMA+0xf0>
  {
    if ((pData == NULL) || (Size == 0U))
 8003ca6:	68bb      	ldr	r3, [r7, #8]
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d002      	beq.n	8003cb2 <HAL_UART_Receive_DMA+0x22>
 8003cac:	88fb      	ldrh	r3, [r7, #6]
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d101      	bne.n	8003cb6 <HAL_UART_Receive_DMA+0x26>
    {
      return HAL_ERROR;
 8003cb2:	2301      	movs	r3, #1
 8003cb4:	e065      	b.n	8003d82 <HAL_UART_Receive_DMA+0xf2>
    }

    __HAL_LOCK(huart);
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8003cbc:	2b01      	cmp	r3, #1
 8003cbe:	d101      	bne.n	8003cc4 <HAL_UART_Receive_DMA+0x34>
 8003cc0:	2302      	movs	r3, #2
 8003cc2:	e05e      	b.n	8003d82 <HAL_UART_Receive_DMA+0xf2>
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	2201      	movs	r2, #1
 8003cc8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr = pData;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	68ba      	ldr	r2, [r7, #8]
 8003cd0:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize = Size;
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	88fa      	ldrh	r2, [r7, #6]
 8003cd6:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	2200      	movs	r2, #0
 8003cde:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	2222      	movs	r2, #34	; 0x22
 8003ce4:	679a      	str	r2, [r3, #120]	; 0x78

    if (huart->hdmarx != NULL)
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d02a      	beq.n	8003d44 <HAL_UART_Receive_DMA+0xb4>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003cf2:	4a26      	ldr	r2, [pc, #152]	; (8003d8c <HAL_UART_Receive_DMA+0xfc>)
 8003cf4:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003cfa:	4a25      	ldr	r2, [pc, #148]	; (8003d90 <HAL_UART_Receive_DMA+0x100>)
 8003cfc:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmarx->XferErrorCallback = UART_DMAError;
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003d02:	4a24      	ldr	r2, [pc, #144]	; (8003d94 <HAL_UART_Receive_DMA+0x104>)
 8003d04:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmarx->XferAbortCallback = NULL;
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	3324      	adds	r3, #36	; 0x24
 8003d18:	4619      	mov	r1, r3
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d1e:	461a      	mov	r2, r3
 8003d20:	88fb      	ldrh	r3, [r7, #6]
 8003d22:	f7fc ff53 	bl	8000bcc <HAL_DMA_Start_IT>
 8003d26:	4603      	mov	r3, r0
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d00b      	beq.n	8003d44 <HAL_UART_Receive_DMA+0xb4>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	2210      	movs	r2, #16
 8003d30:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	2200      	movs	r2, #0
 8003d36:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	2220      	movs	r2, #32
 8003d3e:	675a      	str	r2, [r3, #116]	; 0x74

        return HAL_ERROR;
 8003d40:	2301      	movs	r3, #1
 8003d42:	e01e      	b.n	8003d82 <HAL_UART_Receive_DMA+0xf2>
      }
    }
    __HAL_UNLOCK(huart);
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	2200      	movs	r2, #0
 8003d48:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	681a      	ldr	r2, [r3, #0]
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003d5a:	601a      	str	r2, [r3, #0]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	689a      	ldr	r2, [r3, #8]
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f042 0201 	orr.w	r2, r2, #1
 8003d6a:	609a      	str	r2, [r3, #8]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	689a      	ldr	r2, [r3, #8]
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003d7a:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 8003d7c:	2300      	movs	r3, #0
 8003d7e:	e000      	b.n	8003d82 <HAL_UART_Receive_DMA+0xf2>
  }
  else
  {
    return HAL_BUSY;
 8003d80:	2302      	movs	r3, #2
  }
}
 8003d82:	4618      	mov	r0, r3
 8003d84:	3710      	adds	r7, #16
 8003d86:	46bd      	mov	sp, r7
 8003d88:	bd80      	pop	{r7, pc}
 8003d8a:	bf00      	nop
 8003d8c:	08004d49 	.word	0x08004d49
 8003d90:	08004db5 	.word	0x08004db5
 8003d94:	08004dd5 	.word	0x08004dd5

08003d98 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b088      	sub	sp, #32
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	69db      	ldr	r3, [r3, #28]
 8003da6:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	689b      	ldr	r3, [r3, #8]
 8003db6:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE));
 8003db8:	69fb      	ldr	r3, [r7, #28]
 8003dba:	f003 030f 	and.w	r3, r3, #15
 8003dbe:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8003dc0:	693b      	ldr	r3, [r7, #16]
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d113      	bne.n	8003dee <HAL_UART_IRQHandler+0x56>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003dc6:	69fb      	ldr	r3, [r7, #28]
 8003dc8:	f003 0320 	and.w	r3, r3, #32
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d00e      	beq.n	8003dee <HAL_UART_IRQHandler+0x56>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003dd0:	69bb      	ldr	r3, [r7, #24]
 8003dd2:	f003 0320 	and.w	r3, r3, #32
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d009      	beq.n	8003dee <HAL_UART_IRQHandler+0x56>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	f000 8107 	beq.w	8003ff2 <HAL_UART_IRQHandler+0x25a>
      {
        huart->RxISR(huart);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003de8:	6878      	ldr	r0, [r7, #4]
 8003dea:	4798      	blx	r3
      }
      return;
 8003dec:	e101      	b.n	8003ff2 <HAL_UART_IRQHandler+0x25a>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8003dee:	693b      	ldr	r3, [r7, #16]
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	f000 80c7 	beq.w	8003f84 <HAL_UART_IRQHandler+0x1ec>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003df6:	697b      	ldr	r3, [r7, #20]
 8003df8:	f003 0301 	and.w	r3, r3, #1
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d105      	bne.n	8003e0c <HAL_UART_IRQHandler+0x74>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 8003e00:	69bb      	ldr	r3, [r7, #24]
 8003e02:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	f000 80bc 	beq.w	8003f84 <HAL_UART_IRQHandler+0x1ec>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003e0c:	69fb      	ldr	r3, [r7, #28]
 8003e0e:	f003 0301 	and.w	r3, r3, #1
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d00e      	beq.n	8003e34 <HAL_UART_IRQHandler+0x9c>
 8003e16:	69bb      	ldr	r3, [r7, #24]
 8003e18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d009      	beq.n	8003e34 <HAL_UART_IRQHandler+0x9c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	2201      	movs	r2, #1
 8003e26:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003e2c:	f043 0201 	orr.w	r2, r3, #1
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003e34:	69fb      	ldr	r3, [r7, #28]
 8003e36:	f003 0302 	and.w	r3, r3, #2
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d00e      	beq.n	8003e5c <HAL_UART_IRQHandler+0xc4>
 8003e3e:	697b      	ldr	r3, [r7, #20]
 8003e40:	f003 0301 	and.w	r3, r3, #1
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d009      	beq.n	8003e5c <HAL_UART_IRQHandler+0xc4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	2202      	movs	r2, #2
 8003e4e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003e54:	f043 0204 	orr.w	r2, r3, #4
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003e5c:	69fb      	ldr	r3, [r7, #28]
 8003e5e:	f003 0304 	and.w	r3, r3, #4
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d00e      	beq.n	8003e84 <HAL_UART_IRQHandler+0xec>
 8003e66:	697b      	ldr	r3, [r7, #20]
 8003e68:	f003 0301 	and.w	r3, r3, #1
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d009      	beq.n	8003e84 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	2204      	movs	r2, #4
 8003e76:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003e7c:	f043 0202 	orr.w	r2, r3, #2
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	67da      	str	r2, [r3, #124]	; 0x7c
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003e84:	69fb      	ldr	r3, [r7, #28]
 8003e86:	f003 0308 	and.w	r3, r3, #8
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d013      	beq.n	8003eb6 <HAL_UART_IRQHandler+0x11e>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003e8e:	69bb      	ldr	r3, [r7, #24]
 8003e90:	f003 0320 	and.w	r3, r3, #32
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d104      	bne.n	8003ea2 <HAL_UART_IRQHandler+0x10a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003e98:	697b      	ldr	r3, [r7, #20]
 8003e9a:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d009      	beq.n	8003eb6 <HAL_UART_IRQHandler+0x11e>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	2208      	movs	r2, #8
 8003ea8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003eae:	f043 0208 	orr.w	r2, r3, #8
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	f000 809b 	beq.w	8003ff6 <HAL_UART_IRQHandler+0x25e>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003ec0:	69fb      	ldr	r3, [r7, #28]
 8003ec2:	f003 0320 	and.w	r3, r3, #32
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d00c      	beq.n	8003ee4 <HAL_UART_IRQHandler+0x14c>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003eca:	69bb      	ldr	r3, [r7, #24]
 8003ecc:	f003 0320 	and.w	r3, r3, #32
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d007      	beq.n	8003ee4 <HAL_UART_IRQHandler+0x14c>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d003      	beq.n	8003ee4 <HAL_UART_IRQHandler+0x14c>
        {
          huart->RxISR(huart);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ee0:	6878      	ldr	r0, [r7, #4]
 8003ee2:	4798      	blx	r3
        }
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      errorcode = huart->ErrorCode;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003ee8:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	689b      	ldr	r3, [r3, #8]
 8003ef0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ef4:	2b40      	cmp	r3, #64	; 0x40
 8003ef6:	d004      	beq.n	8003f02 <HAL_UART_IRQHandler+0x16a>
          ((errorcode & HAL_UART_ERROR_ORE) != 0U))
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	f003 0308 	and.w	r3, r3, #8
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d035      	beq.n	8003f6e <HAL_UART_IRQHandler+0x1d6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003f02:	6878      	ldr	r0, [r7, #4]
 8003f04:	f000 ff00 	bl	8004d08 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	689b      	ldr	r3, [r3, #8]
 8003f0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f12:	2b40      	cmp	r3, #64	; 0x40
 8003f14:	d125      	bne.n	8003f62 <HAL_UART_IRQHandler+0x1ca>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	689a      	ldr	r2, [r3, #8]
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f24:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d013      	beq.n	8003f56 <HAL_UART_IRQHandler+0x1be>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003f32:	4a34      	ldr	r2, [pc, #208]	; (8004004 <HAL_UART_IRQHandler+0x26c>)
 8003f34:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	f7fc feb4 	bl	8000ca8 <HAL_DMA_Abort_IT>
 8003f40:	4603      	mov	r3, r0
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d01c      	beq.n	8003f80 <HAL_UART_IRQHandler+0x1e8>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003f4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f4c:	687a      	ldr	r2, [r7, #4]
 8003f4e:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8003f50:	4610      	mov	r0, r2
 8003f52:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f54:	e014      	b.n	8003f80 <HAL_UART_IRQHandler+0x1e8>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f5c:	6878      	ldr	r0, [r7, #4]
 8003f5e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f60:	e00e      	b.n	8003f80 <HAL_UART_IRQHandler+0x1e8>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f68:	6878      	ldr	r0, [r7, #4]
 8003f6a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f6c:	e008      	b.n	8003f80 <HAL_UART_IRQHandler+0x1e8>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f74:	6878      	ldr	r0, [r7, #4]
 8003f76:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 8003f7e:	e03a      	b.n	8003ff6 <HAL_UART_IRQHandler+0x25e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f80:	bf00      	nop
    return;
 8003f82:	e038      	b.n	8003ff6 <HAL_UART_IRQHandler+0x25e>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003f84:	69fb      	ldr	r3, [r7, #28]
 8003f86:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d00f      	beq.n	8003fae <HAL_UART_IRQHandler+0x216>
 8003f8e:	697b      	ldr	r3, [r7, #20]
 8003f90:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d00a      	beq.n	8003fae <HAL_UART_IRQHandler+0x216>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003fa0:	621a      	str	r2, [r3, #32]
    /* UART Rx state is not reset as a reception process might be ongoing.
       If UART handle state fields need to be reset to READY, this could be done in Wakeup callback */

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003fa8:	6878      	ldr	r0, [r7, #4]
 8003faa:	4798      	blx	r3
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003fac:	e026      	b.n	8003ffc <HAL_UART_IRQHandler+0x264>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003fae:	69fb      	ldr	r3, [r7, #28]
 8003fb0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d00d      	beq.n	8003fd4 <HAL_UART_IRQHandler+0x23c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003fb8:	69bb      	ldr	r3, [r7, #24]
 8003fba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d008      	beq.n	8003fd4 <HAL_UART_IRQHandler+0x23c>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d017      	beq.n	8003ffa <HAL_UART_IRQHandler+0x262>
    {
      huart->TxISR(huart);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003fce:	6878      	ldr	r0, [r7, #4]
 8003fd0:	4798      	blx	r3
    }
    return;
 8003fd2:	e012      	b.n	8003ffa <HAL_UART_IRQHandler+0x262>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003fd4:	69fb      	ldr	r3, [r7, #28]
 8003fd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d00e      	beq.n	8003ffc <HAL_UART_IRQHandler+0x264>
 8003fde:	69bb      	ldr	r3, [r7, #24]
 8003fe0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d009      	beq.n	8003ffc <HAL_UART_IRQHandler+0x264>
  {
    UART_EndTransmit_IT(huart);
 8003fe8:	6878      	ldr	r0, [r7, #4]
 8003fea:	f000 ff49 	bl	8004e80 <UART_EndTransmit_IT>
    return;
 8003fee:	bf00      	nop
 8003ff0:	e004      	b.n	8003ffc <HAL_UART_IRQHandler+0x264>
      return;
 8003ff2:	bf00      	nop
 8003ff4:	e002      	b.n	8003ffc <HAL_UART_IRQHandler+0x264>
    return;
 8003ff6:	bf00      	nop
 8003ff8:	e000      	b.n	8003ffc <HAL_UART_IRQHandler+0x264>
    return;
 8003ffa:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8003ffc:	3720      	adds	r7, #32
 8003ffe:	46bd      	mov	sp, r7
 8004000:	bd80      	pop	{r7, pc}
 8004002:	bf00      	nop
 8004004:	08004e51 	.word	0x08004e51

08004008 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004008:	b480      	push	{r7}
 800400a:	b083      	sub	sp, #12
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004010:	bf00      	nop
 8004012:	370c      	adds	r7, #12
 8004014:	46bd      	mov	sp, r7
 8004016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401a:	4770      	bx	lr

0800401c <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800401c:	b480      	push	{r7}
 800401e:	b083      	sub	sp, #12
 8004020:	af00      	add	r7, sp, #0
 8004022:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8004024:	bf00      	nop
 8004026:	370c      	adds	r7, #12
 8004028:	46bd      	mov	sp, r7
 800402a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402e:	4770      	bx	lr

08004030 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004030:	b480      	push	{r7}
 8004032:	b083      	sub	sp, #12
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8004038:	bf00      	nop
 800403a:	370c      	adds	r7, #12
 800403c:	46bd      	mov	sp, r7
 800403e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004042:	4770      	bx	lr

08004044 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004044:	b480      	push	{r7}
 8004046:	b083      	sub	sp, #12
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800404c:	bf00      	nop
 800404e:	370c      	adds	r7, #12
 8004050:	46bd      	mov	sp, r7
 8004052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004056:	4770      	bx	lr

08004058 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004058:	b480      	push	{r7}
 800405a:	b083      	sub	sp, #12
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004060:	bf00      	nop
 8004062:	370c      	adds	r7, #12
 8004064:	46bd      	mov	sp, r7
 8004066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406a:	4770      	bx	lr

0800406c <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 800406c:	b480      	push	{r7}
 800406e:	b083      	sub	sp, #12
 8004070:	af00      	add	r7, sp, #0
 8004072:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 8004074:	bf00      	nop
 8004076:	370c      	adds	r7, #12
 8004078:	46bd      	mov	sp, r7
 800407a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407e:	4770      	bx	lr

08004080 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 8004080:	b480      	push	{r7}
 8004082:	b083      	sub	sp, #12
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 8004088:	bf00      	nop
 800408a:	370c      	adds	r7, #12
 800408c:	46bd      	mov	sp, r7
 800408e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004092:	4770      	bx	lr

08004094 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 8004094:	b480      	push	{r7}
 8004096:	b083      	sub	sp, #12
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 800409c:	bf00      	nop
 800409e:	370c      	adds	r7, #12
 80040a0:	46bd      	mov	sp, r7
 80040a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a6:	4770      	bx	lr

080040a8 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 80040a8:	b480      	push	{r7}
 80040aa:	b083      	sub	sp, #12
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	4a14      	ldr	r2, [pc, #80]	; (8004104 <UART_InitCallbacksToDefault+0x5c>)
 80040b4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	4a13      	ldr	r2, [pc, #76]	; (8004108 <UART_InitCallbacksToDefault+0x60>)
 80040bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	4a12      	ldr	r2, [pc, #72]	; (800410c <UART_InitCallbacksToDefault+0x64>)
 80040c4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	4a11      	ldr	r2, [pc, #68]	; (8004110 <UART_InitCallbacksToDefault+0x68>)
 80040cc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	4a10      	ldr	r2, [pc, #64]	; (8004114 <UART_InitCallbacksToDefault+0x6c>)
 80040d4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	4a0f      	ldr	r2, [pc, #60]	; (8004118 <UART_InitCallbacksToDefault+0x70>)
 80040dc:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	4a0e      	ldr	r2, [pc, #56]	; (800411c <UART_InitCallbacksToDefault+0x74>)
 80040e4:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	4a0d      	ldr	r2, [pc, #52]	; (8004120 <UART_InitCallbacksToDefault+0x78>)
 80040ec:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	4a0c      	ldr	r2, [pc, #48]	; (8004124 <UART_InitCallbacksToDefault+0x7c>)
 80040f4:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
#if defined(USART_CR1_FIFOEN)
  huart->RxFifoFullCallback        = HAL_UARTEx_RxFifoFullCallback;      /* Legacy weak RxFifoFullCallback        */
  huart->TxFifoEmptyCallback       = HAL_UARTEx_TxFifoEmptyCallback;     /* Legacy weak TxFifoEmptyCallback       */
#endif /* USART_CR1_FIFOEN */

}
 80040f8:	bf00      	nop
 80040fa:	370c      	adds	r7, #12
 80040fc:	46bd      	mov	sp, r7
 80040fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004102:	4770      	bx	lr
 8004104:	0800401d 	.word	0x0800401d
 8004108:	08004009 	.word	0x08004009
 800410c:	08004045 	.word	0x08004045
 8004110:	08004031 	.word	0x08004031
 8004114:	08004059 	.word	0x08004059
 8004118:	0800406d 	.word	0x0800406d
 800411c:	08004081 	.word	0x08004081
 8004120:	08004095 	.word	0x08004095
 8004124:	08004eb7 	.word	0x08004eb7

08004128 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004128:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 800412c:	b088      	sub	sp, #32
 800412e:	af00      	add	r7, sp, #0
 8004130:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8004132:	2300      	movs	r3, #0
 8004134:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef ret               = HAL_OK;
 8004136:	2300      	movs	r3, #0
 8004138:	74fb      	strb	r3, [r7, #19]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 800413a:	2300      	movs	r3, #0
 800413c:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	685b      	ldr	r3, [r3, #4]
 8004142:	4aab      	ldr	r2, [pc, #684]	; (80043f0 <UART_SetConfig+0x2c8>)
 8004144:	4293      	cmp	r3, r2
 8004146:	d904      	bls.n	8004152 <UART_SetConfig+0x2a>
 8004148:	f640 312d 	movw	r1, #2861	; 0xb2d
 800414c:	48a9      	ldr	r0, [pc, #676]	; (80043f4 <UART_SetConfig+0x2cc>)
 800414e:	f004 f86a 	bl	8008226 <assert_failed>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	689b      	ldr	r3, [r3, #8]
 8004156:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800415a:	d00d      	beq.n	8004178 <UART_SetConfig+0x50>
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	689b      	ldr	r3, [r3, #8]
 8004160:	2b00      	cmp	r3, #0
 8004162:	d009      	beq.n	8004178 <UART_SetConfig+0x50>
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	689b      	ldr	r3, [r3, #8]
 8004168:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800416c:	d004      	beq.n	8004178 <UART_SetConfig+0x50>
 800416e:	f640 312e 	movw	r1, #2862	; 0xb2e
 8004172:	48a0      	ldr	r0, [pc, #640]	; (80043f4 <UART_SetConfig+0x2cc>)
 8004174:	f004 f857 	bl	8008226 <assert_failed>
  if (UART_INSTANCE_LOWPOWER(huart))
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	4a9e      	ldr	r2, [pc, #632]	; (80043f8 <UART_SetConfig+0x2d0>)
 800417e:	4293      	cmp	r3, r2
 8004180:	d10e      	bne.n	80041a0 <UART_SetConfig+0x78>
  {
    assert_param(IS_LPUART_STOPBITS(huart->Init.StopBits));
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	68db      	ldr	r3, [r3, #12]
 8004186:	2b00      	cmp	r3, #0
 8004188:	d030      	beq.n	80041ec <UART_SetConfig+0xc4>
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	68db      	ldr	r3, [r3, #12]
 800418e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004192:	d02b      	beq.n	80041ec <UART_SetConfig+0xc4>
 8004194:	f640 3131 	movw	r1, #2865	; 0xb31
 8004198:	4896      	ldr	r0, [pc, #600]	; (80043f4 <UART_SetConfig+0x2cc>)
 800419a:	f004 f844 	bl	8008226 <assert_failed>
 800419e:	e025      	b.n	80041ec <UART_SetConfig+0xc4>
  }
  else
  {
    assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	68db      	ldr	r3, [r3, #12]
 80041a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041a8:	d012      	beq.n	80041d0 <UART_SetConfig+0xa8>
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	68db      	ldr	r3, [r3, #12]
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d00e      	beq.n	80041d0 <UART_SetConfig+0xa8>
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	68db      	ldr	r3, [r3, #12]
 80041b6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80041ba:	d009      	beq.n	80041d0 <UART_SetConfig+0xa8>
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	68db      	ldr	r3, [r3, #12]
 80041c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80041c4:	d004      	beq.n	80041d0 <UART_SetConfig+0xa8>
 80041c6:	f640 3135 	movw	r1, #2869	; 0xb35
 80041ca:	488a      	ldr	r0, [pc, #552]	; (80043f4 <UART_SetConfig+0x2cc>)
 80041cc:	f004 f82b 	bl	8008226 <assert_failed>
    assert_param(IS_UART_ONE_BIT_SAMPLE(huart->Init.OneBitSampling));
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	6a1b      	ldr	r3, [r3, #32]
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d009      	beq.n	80041ec <UART_SetConfig+0xc4>
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	6a1b      	ldr	r3, [r3, #32]
 80041dc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80041e0:	d004      	beq.n	80041ec <UART_SetConfig+0xc4>
 80041e2:	f640 3136 	movw	r1, #2870	; 0xb36
 80041e6:	4883      	ldr	r0, [pc, #524]	; (80043f4 <UART_SetConfig+0x2cc>)
 80041e8:	f004 f81d 	bl	8008226 <assert_failed>
  }

  assert_param(IS_UART_PARITY(huart->Init.Parity));
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	691b      	ldr	r3, [r3, #16]
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d00e      	beq.n	8004212 <UART_SetConfig+0xea>
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	691b      	ldr	r3, [r3, #16]
 80041f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041fc:	d009      	beq.n	8004212 <UART_SetConfig+0xea>
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	691b      	ldr	r3, [r3, #16]
 8004202:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004206:	d004      	beq.n	8004212 <UART_SetConfig+0xea>
 8004208:	f640 3139 	movw	r1, #2873	; 0xb39
 800420c:	4879      	ldr	r0, [pc, #484]	; (80043f4 <UART_SetConfig+0x2cc>)
 800420e:	f004 f80a 	bl	8008226 <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	695b      	ldr	r3, [r3, #20]
 8004216:	f023 030c 	bic.w	r3, r3, #12
 800421a:	2b00      	cmp	r3, #0
 800421c:	d103      	bne.n	8004226 <UART_SetConfig+0xfe>
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	695b      	ldr	r3, [r3, #20]
 8004222:	2b00      	cmp	r3, #0
 8004224:	d104      	bne.n	8004230 <UART_SetConfig+0x108>
 8004226:	f640 313a 	movw	r1, #2874	; 0xb3a
 800422a:	4872      	ldr	r0, [pc, #456]	; (80043f4 <UART_SetConfig+0x2cc>)
 800422c:	f003 fffb 	bl	8008226 <assert_failed>
  assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	699b      	ldr	r3, [r3, #24]
 8004234:	2b00      	cmp	r3, #0
 8004236:	d013      	beq.n	8004260 <UART_SetConfig+0x138>
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	699b      	ldr	r3, [r3, #24]
 800423c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004240:	d00e      	beq.n	8004260 <UART_SetConfig+0x138>
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	699b      	ldr	r3, [r3, #24]
 8004246:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800424a:	d009      	beq.n	8004260 <UART_SetConfig+0x138>
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	699b      	ldr	r3, [r3, #24]
 8004250:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004254:	d004      	beq.n	8004260 <UART_SetConfig+0x138>
 8004256:	f640 313b 	movw	r1, #2875	; 0xb3b
 800425a:	4866      	ldr	r0, [pc, #408]	; (80043f4 <UART_SetConfig+0x2cc>)
 800425c:	f003 ffe3 	bl	8008226 <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	69db      	ldr	r3, [r3, #28]
 8004264:	2b00      	cmp	r3, #0
 8004266:	d009      	beq.n	800427c <UART_SetConfig+0x154>
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	69db      	ldr	r3, [r3, #28]
 800426c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004270:	d004      	beq.n	800427c <UART_SetConfig+0x154>
 8004272:	f640 313c 	movw	r1, #2876	; 0xb3c
 8004276:	485f      	ldr	r0, [pc, #380]	; (80043f4 <UART_SetConfig+0x2cc>)
 8004278:	f003 ffd5 	bl	8008226 <assert_failed>
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	689a      	ldr	r2, [r3, #8]
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	691b      	ldr	r3, [r3, #16]
 8004284:	431a      	orrs	r2, r3
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	695b      	ldr	r3, [r3, #20]
 800428a:	431a      	orrs	r2, r3
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	69db      	ldr	r3, [r3, #28]
 8004290:	4313      	orrs	r3, r2
 8004292:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	681a      	ldr	r2, [r3, #0]
 800429a:	4b58      	ldr	r3, [pc, #352]	; (80043fc <UART_SetConfig+0x2d4>)
 800429c:	4013      	ands	r3, r2
 800429e:	687a      	ldr	r2, [r7, #4]
 80042a0:	6812      	ldr	r2, [r2, #0]
 80042a2:	69f9      	ldr	r1, [r7, #28]
 80042a4:	430b      	orrs	r3, r1
 80042a6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	685b      	ldr	r3, [r3, #4]
 80042ae:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	68da      	ldr	r2, [r3, #12]
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	430a      	orrs	r2, r1
 80042bc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	699b      	ldr	r3, [r3, #24]
 80042c2:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	4a4b      	ldr	r2, [pc, #300]	; (80043f8 <UART_SetConfig+0x2d0>)
 80042ca:	4293      	cmp	r3, r2
 80042cc:	d004      	beq.n	80042d8 <UART_SetConfig+0x1b0>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	6a1b      	ldr	r3, [r3, #32]
 80042d2:	69fa      	ldr	r2, [r7, #28]
 80042d4:	4313      	orrs	r3, r2
 80042d6:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	689b      	ldr	r3, [r3, #8]
 80042de:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	69fa      	ldr	r2, [r7, #28]
 80042e8:	430a      	orrs	r2, r1
 80042ea:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	4a43      	ldr	r2, [pc, #268]	; (8004400 <UART_SetConfig+0x2d8>)
 80042f2:	4293      	cmp	r3, r2
 80042f4:	d122      	bne.n	800433c <UART_SetConfig+0x214>
 80042f6:	4b43      	ldr	r3, [pc, #268]	; (8004404 <UART_SetConfig+0x2dc>)
 80042f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042fc:	f003 0303 	and.w	r3, r3, #3
 8004300:	2b03      	cmp	r3, #3
 8004302:	d817      	bhi.n	8004334 <UART_SetConfig+0x20c>
 8004304:	a201      	add	r2, pc, #4	; (adr r2, 800430c <UART_SetConfig+0x1e4>)
 8004306:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800430a:	bf00      	nop
 800430c:	0800431d 	.word	0x0800431d
 8004310:	08004329 	.word	0x08004329
 8004314:	08004323 	.word	0x08004323
 8004318:	0800432f 	.word	0x0800432f
 800431c:	2301      	movs	r3, #1
 800431e:	76fb      	strb	r3, [r7, #27]
 8004320:	e0f9      	b.n	8004516 <UART_SetConfig+0x3ee>
 8004322:	2302      	movs	r3, #2
 8004324:	76fb      	strb	r3, [r7, #27]
 8004326:	e0f6      	b.n	8004516 <UART_SetConfig+0x3ee>
 8004328:	2304      	movs	r3, #4
 800432a:	76fb      	strb	r3, [r7, #27]
 800432c:	e0f3      	b.n	8004516 <UART_SetConfig+0x3ee>
 800432e:	2308      	movs	r3, #8
 8004330:	76fb      	strb	r3, [r7, #27]
 8004332:	e0f0      	b.n	8004516 <UART_SetConfig+0x3ee>
 8004334:	2310      	movs	r3, #16
 8004336:	76fb      	strb	r3, [r7, #27]
 8004338:	bf00      	nop
 800433a:	e0ec      	b.n	8004516 <UART_SetConfig+0x3ee>
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	4a31      	ldr	r2, [pc, #196]	; (8004408 <UART_SetConfig+0x2e0>)
 8004342:	4293      	cmp	r3, r2
 8004344:	d134      	bne.n	80043b0 <UART_SetConfig+0x288>
 8004346:	4b2f      	ldr	r3, [pc, #188]	; (8004404 <UART_SetConfig+0x2dc>)
 8004348:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800434c:	f003 030c 	and.w	r3, r3, #12
 8004350:	2b0c      	cmp	r3, #12
 8004352:	d829      	bhi.n	80043a8 <UART_SetConfig+0x280>
 8004354:	a201      	add	r2, pc, #4	; (adr r2, 800435c <UART_SetConfig+0x234>)
 8004356:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800435a:	bf00      	nop
 800435c:	08004391 	.word	0x08004391
 8004360:	080043a9 	.word	0x080043a9
 8004364:	080043a9 	.word	0x080043a9
 8004368:	080043a9 	.word	0x080043a9
 800436c:	0800439d 	.word	0x0800439d
 8004370:	080043a9 	.word	0x080043a9
 8004374:	080043a9 	.word	0x080043a9
 8004378:	080043a9 	.word	0x080043a9
 800437c:	08004397 	.word	0x08004397
 8004380:	080043a9 	.word	0x080043a9
 8004384:	080043a9 	.word	0x080043a9
 8004388:	080043a9 	.word	0x080043a9
 800438c:	080043a3 	.word	0x080043a3
 8004390:	2300      	movs	r3, #0
 8004392:	76fb      	strb	r3, [r7, #27]
 8004394:	e0bf      	b.n	8004516 <UART_SetConfig+0x3ee>
 8004396:	2302      	movs	r3, #2
 8004398:	76fb      	strb	r3, [r7, #27]
 800439a:	e0bc      	b.n	8004516 <UART_SetConfig+0x3ee>
 800439c:	2304      	movs	r3, #4
 800439e:	76fb      	strb	r3, [r7, #27]
 80043a0:	e0b9      	b.n	8004516 <UART_SetConfig+0x3ee>
 80043a2:	2308      	movs	r3, #8
 80043a4:	76fb      	strb	r3, [r7, #27]
 80043a6:	e0b6      	b.n	8004516 <UART_SetConfig+0x3ee>
 80043a8:	2310      	movs	r3, #16
 80043aa:	76fb      	strb	r3, [r7, #27]
 80043ac:	bf00      	nop
 80043ae:	e0b2      	b.n	8004516 <UART_SetConfig+0x3ee>
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	4a15      	ldr	r2, [pc, #84]	; (800440c <UART_SetConfig+0x2e4>)
 80043b6:	4293      	cmp	r3, r2
 80043b8:	d131      	bne.n	800441e <UART_SetConfig+0x2f6>
 80043ba:	4b12      	ldr	r3, [pc, #72]	; (8004404 <UART_SetConfig+0x2dc>)
 80043bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043c0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80043c4:	2b10      	cmp	r3, #16
 80043c6:	d00f      	beq.n	80043e8 <UART_SetConfig+0x2c0>
 80043c8:	2b10      	cmp	r3, #16
 80043ca:	d802      	bhi.n	80043d2 <UART_SetConfig+0x2aa>
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d005      	beq.n	80043dc <UART_SetConfig+0x2b4>
 80043d0:	e021      	b.n	8004416 <UART_SetConfig+0x2ee>
 80043d2:	2b20      	cmp	r3, #32
 80043d4:	d005      	beq.n	80043e2 <UART_SetConfig+0x2ba>
 80043d6:	2b30      	cmp	r3, #48	; 0x30
 80043d8:	d01a      	beq.n	8004410 <UART_SetConfig+0x2e8>
 80043da:	e01c      	b.n	8004416 <UART_SetConfig+0x2ee>
 80043dc:	2300      	movs	r3, #0
 80043de:	76fb      	strb	r3, [r7, #27]
 80043e0:	e099      	b.n	8004516 <UART_SetConfig+0x3ee>
 80043e2:	2302      	movs	r3, #2
 80043e4:	76fb      	strb	r3, [r7, #27]
 80043e6:	e096      	b.n	8004516 <UART_SetConfig+0x3ee>
 80043e8:	2304      	movs	r3, #4
 80043ea:	76fb      	strb	r3, [r7, #27]
 80043ec:	e093      	b.n	8004516 <UART_SetConfig+0x3ee>
 80043ee:	bf00      	nop
 80043f0:	00989680 	.word	0x00989680
 80043f4:	0800a6e0 	.word	0x0800a6e0
 80043f8:	40008000 	.word	0x40008000
 80043fc:	efff69f3 	.word	0xefff69f3
 8004400:	40013800 	.word	0x40013800
 8004404:	40021000 	.word	0x40021000
 8004408:	40004400 	.word	0x40004400
 800440c:	40004800 	.word	0x40004800
 8004410:	2308      	movs	r3, #8
 8004412:	76fb      	strb	r3, [r7, #27]
 8004414:	e07f      	b.n	8004516 <UART_SetConfig+0x3ee>
 8004416:	2310      	movs	r3, #16
 8004418:	76fb      	strb	r3, [r7, #27]
 800441a:	bf00      	nop
 800441c:	e07b      	b.n	8004516 <UART_SetConfig+0x3ee>
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	4ab3      	ldr	r2, [pc, #716]	; (80046f0 <UART_SetConfig+0x5c8>)
 8004424:	4293      	cmp	r3, r2
 8004426:	d120      	bne.n	800446a <UART_SetConfig+0x342>
 8004428:	4bb2      	ldr	r3, [pc, #712]	; (80046f4 <UART_SetConfig+0x5cc>)
 800442a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800442e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004432:	2b40      	cmp	r3, #64	; 0x40
 8004434:	d00f      	beq.n	8004456 <UART_SetConfig+0x32e>
 8004436:	2b40      	cmp	r3, #64	; 0x40
 8004438:	d802      	bhi.n	8004440 <UART_SetConfig+0x318>
 800443a:	2b00      	cmp	r3, #0
 800443c:	d005      	beq.n	800444a <UART_SetConfig+0x322>
 800443e:	e010      	b.n	8004462 <UART_SetConfig+0x33a>
 8004440:	2b80      	cmp	r3, #128	; 0x80
 8004442:	d005      	beq.n	8004450 <UART_SetConfig+0x328>
 8004444:	2bc0      	cmp	r3, #192	; 0xc0
 8004446:	d009      	beq.n	800445c <UART_SetConfig+0x334>
 8004448:	e00b      	b.n	8004462 <UART_SetConfig+0x33a>
 800444a:	2300      	movs	r3, #0
 800444c:	76fb      	strb	r3, [r7, #27]
 800444e:	e062      	b.n	8004516 <UART_SetConfig+0x3ee>
 8004450:	2302      	movs	r3, #2
 8004452:	76fb      	strb	r3, [r7, #27]
 8004454:	e05f      	b.n	8004516 <UART_SetConfig+0x3ee>
 8004456:	2304      	movs	r3, #4
 8004458:	76fb      	strb	r3, [r7, #27]
 800445a:	e05c      	b.n	8004516 <UART_SetConfig+0x3ee>
 800445c:	2308      	movs	r3, #8
 800445e:	76fb      	strb	r3, [r7, #27]
 8004460:	e059      	b.n	8004516 <UART_SetConfig+0x3ee>
 8004462:	2310      	movs	r3, #16
 8004464:	76fb      	strb	r3, [r7, #27]
 8004466:	bf00      	nop
 8004468:	e055      	b.n	8004516 <UART_SetConfig+0x3ee>
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	4aa2      	ldr	r2, [pc, #648]	; (80046f8 <UART_SetConfig+0x5d0>)
 8004470:	4293      	cmp	r3, r2
 8004472:	d124      	bne.n	80044be <UART_SetConfig+0x396>
 8004474:	4b9f      	ldr	r3, [pc, #636]	; (80046f4 <UART_SetConfig+0x5cc>)
 8004476:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800447a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800447e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004482:	d012      	beq.n	80044aa <UART_SetConfig+0x382>
 8004484:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004488:	d802      	bhi.n	8004490 <UART_SetConfig+0x368>
 800448a:	2b00      	cmp	r3, #0
 800448c:	d007      	beq.n	800449e <UART_SetConfig+0x376>
 800448e:	e012      	b.n	80044b6 <UART_SetConfig+0x38e>
 8004490:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004494:	d006      	beq.n	80044a4 <UART_SetConfig+0x37c>
 8004496:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800449a:	d009      	beq.n	80044b0 <UART_SetConfig+0x388>
 800449c:	e00b      	b.n	80044b6 <UART_SetConfig+0x38e>
 800449e:	2300      	movs	r3, #0
 80044a0:	76fb      	strb	r3, [r7, #27]
 80044a2:	e038      	b.n	8004516 <UART_SetConfig+0x3ee>
 80044a4:	2302      	movs	r3, #2
 80044a6:	76fb      	strb	r3, [r7, #27]
 80044a8:	e035      	b.n	8004516 <UART_SetConfig+0x3ee>
 80044aa:	2304      	movs	r3, #4
 80044ac:	76fb      	strb	r3, [r7, #27]
 80044ae:	e032      	b.n	8004516 <UART_SetConfig+0x3ee>
 80044b0:	2308      	movs	r3, #8
 80044b2:	76fb      	strb	r3, [r7, #27]
 80044b4:	e02f      	b.n	8004516 <UART_SetConfig+0x3ee>
 80044b6:	2310      	movs	r3, #16
 80044b8:	76fb      	strb	r3, [r7, #27]
 80044ba:	bf00      	nop
 80044bc:	e02b      	b.n	8004516 <UART_SetConfig+0x3ee>
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	4a8e      	ldr	r2, [pc, #568]	; (80046fc <UART_SetConfig+0x5d4>)
 80044c4:	4293      	cmp	r3, r2
 80044c6:	d124      	bne.n	8004512 <UART_SetConfig+0x3ea>
 80044c8:	4b8a      	ldr	r3, [pc, #552]	; (80046f4 <UART_SetConfig+0x5cc>)
 80044ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044ce:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80044d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80044d6:	d012      	beq.n	80044fe <UART_SetConfig+0x3d6>
 80044d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80044dc:	d802      	bhi.n	80044e4 <UART_SetConfig+0x3bc>
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d007      	beq.n	80044f2 <UART_SetConfig+0x3ca>
 80044e2:	e012      	b.n	800450a <UART_SetConfig+0x3e2>
 80044e4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80044e8:	d006      	beq.n	80044f8 <UART_SetConfig+0x3d0>
 80044ea:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80044ee:	d009      	beq.n	8004504 <UART_SetConfig+0x3dc>
 80044f0:	e00b      	b.n	800450a <UART_SetConfig+0x3e2>
 80044f2:	2300      	movs	r3, #0
 80044f4:	76fb      	strb	r3, [r7, #27]
 80044f6:	e00e      	b.n	8004516 <UART_SetConfig+0x3ee>
 80044f8:	2302      	movs	r3, #2
 80044fa:	76fb      	strb	r3, [r7, #27]
 80044fc:	e00b      	b.n	8004516 <UART_SetConfig+0x3ee>
 80044fe:	2304      	movs	r3, #4
 8004500:	76fb      	strb	r3, [r7, #27]
 8004502:	e008      	b.n	8004516 <UART_SetConfig+0x3ee>
 8004504:	2308      	movs	r3, #8
 8004506:	76fb      	strb	r3, [r7, #27]
 8004508:	e005      	b.n	8004516 <UART_SetConfig+0x3ee>
 800450a:	2310      	movs	r3, #16
 800450c:	76fb      	strb	r3, [r7, #27]
 800450e:	bf00      	nop
 8004510:	e001      	b.n	8004516 <UART_SetConfig+0x3ee>
 8004512:	2310      	movs	r3, #16
 8004514:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	4a78      	ldr	r2, [pc, #480]	; (80046fc <UART_SetConfig+0x5d4>)
 800451c:	4293      	cmp	r3, r2
 800451e:	f040 80f3 	bne.w	8004708 <UART_SetConfig+0x5e0>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004522:	7efb      	ldrb	r3, [r7, #27]
 8004524:	2b08      	cmp	r3, #8
 8004526:	d824      	bhi.n	8004572 <UART_SetConfig+0x44a>
 8004528:	a201      	add	r2, pc, #4	; (adr r2, 8004530 <UART_SetConfig+0x408>)
 800452a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800452e:	bf00      	nop
 8004530:	08004555 	.word	0x08004555
 8004534:	08004573 	.word	0x08004573
 8004538:	0800455d 	.word	0x0800455d
 800453c:	08004573 	.word	0x08004573
 8004540:	08004563 	.word	0x08004563
 8004544:	08004573 	.word	0x08004573
 8004548:	08004573 	.word	0x08004573
 800454c:	08004573 	.word	0x08004573
 8004550:	0800456b 	.word	0x0800456b
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 8004554:	f7fd fe2e 	bl	80021b4 <HAL_RCC_GetPCLK1Freq>
 8004558:	60f8      	str	r0, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 800455a:	e00d      	b.n	8004578 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 800455c:	4b68      	ldr	r3, [pc, #416]	; (8004700 <UART_SetConfig+0x5d8>)
 800455e:	60fb      	str	r3, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004560:	e00a      	b.n	8004578 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 8004562:	f7fd fd91 	bl	8002088 <HAL_RCC_GetSysClockFreq>
 8004566:	60f8      	str	r0, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004568:	e006      	b.n	8004578 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 800456a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800456e:	60fb      	str	r3, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004570:	e002      	b.n	8004578 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8004572:	2301      	movs	r3, #1
 8004574:	74fb      	strb	r3, [r7, #19]
        break;
 8004576:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	2b00      	cmp	r3, #0
 800457c:	f000 81b7 	beq.w	80048ee <UART_SetConfig+0x7c6>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	685a      	ldr	r2, [r3, #4]
 8004584:	4613      	mov	r3, r2
 8004586:	005b      	lsls	r3, r3, #1
 8004588:	4413      	add	r3, r2
 800458a:	68fa      	ldr	r2, [r7, #12]
 800458c:	429a      	cmp	r2, r3
 800458e:	d305      	bcc.n	800459c <UART_SetConfig+0x474>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	685b      	ldr	r3, [r3, #4]
 8004594:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004596:	68fa      	ldr	r2, [r7, #12]
 8004598:	429a      	cmp	r2, r3
 800459a:	d902      	bls.n	80045a2 <UART_SetConfig+0x47a>
      {
        ret = HAL_ERROR;
 800459c:	2301      	movs	r3, #1
 800459e:	74fb      	strb	r3, [r7, #19]
 80045a0:	e1a5      	b.n	80048ee <UART_SetConfig+0x7c6>
      }
      else
      {
        switch (clocksource)
 80045a2:	7efb      	ldrb	r3, [r7, #27]
 80045a4:	2b08      	cmp	r3, #8
 80045a6:	f200 8090 	bhi.w	80046ca <UART_SetConfig+0x5a2>
 80045aa:	a201      	add	r2, pc, #4	; (adr r2, 80045b0 <UART_SetConfig+0x488>)
 80045ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045b0:	080045d5 	.word	0x080045d5
 80045b4:	080046cb 	.word	0x080046cb
 80045b8:	08004621 	.word	0x08004621
 80045bc:	080046cb 	.word	0x080046cb
 80045c0:	08004655 	.word	0x08004655
 80045c4:	080046cb 	.word	0x080046cb
 80045c8:	080046cb 	.word	0x080046cb
 80045cc:	080046cb 	.word	0x080046cb
 80045d0:	080046a1 	.word	0x080046a1
        {
          case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80045d4:	f7fd fdee 	bl	80021b4 <HAL_RCC_GetPCLK1Freq>
 80045d8:	4603      	mov	r3, r0
 80045da:	4619      	mov	r1, r3
 80045dc:	f04f 0200 	mov.w	r2, #0
 80045e0:	f04f 0300 	mov.w	r3, #0
 80045e4:	f04f 0400 	mov.w	r4, #0
 80045e8:	0214      	lsls	r4, r2, #8
 80045ea:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80045ee:	020b      	lsls	r3, r1, #8
 80045f0:	687a      	ldr	r2, [r7, #4]
 80045f2:	6852      	ldr	r2, [r2, #4]
 80045f4:	0852      	lsrs	r2, r2, #1
 80045f6:	4611      	mov	r1, r2
 80045f8:	f04f 0200 	mov.w	r2, #0
 80045fc:	eb13 0b01 	adds.w	fp, r3, r1
 8004600:	eb44 0c02 	adc.w	ip, r4, r2
 8004604:	4658      	mov	r0, fp
 8004606:	4661      	mov	r1, ip
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	685b      	ldr	r3, [r3, #4]
 800460c:	f04f 0400 	mov.w	r4, #0
 8004610:	461a      	mov	r2, r3
 8004612:	4623      	mov	r3, r4
 8004614:	f7fb fe34 	bl	8000280 <__aeabi_uldivmod>
 8004618:	4603      	mov	r3, r0
 800461a:	460c      	mov	r4, r1
 800461c:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 800461e:	e057      	b.n	80046d0 <UART_SetConfig+0x5a8>
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	685b      	ldr	r3, [r3, #4]
 8004624:	085b      	lsrs	r3, r3, #1
 8004626:	f04f 0400 	mov.w	r4, #0
 800462a:	4936      	ldr	r1, [pc, #216]	; (8004704 <UART_SetConfig+0x5dc>)
 800462c:	f04f 0200 	mov.w	r2, #0
 8004630:	eb13 0b01 	adds.w	fp, r3, r1
 8004634:	eb44 0c02 	adc.w	ip, r4, r2
 8004638:	4658      	mov	r0, fp
 800463a:	4661      	mov	r1, ip
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	685b      	ldr	r3, [r3, #4]
 8004640:	f04f 0400 	mov.w	r4, #0
 8004644:	461a      	mov	r2, r3
 8004646:	4623      	mov	r3, r4
 8004648:	f7fb fe1a 	bl	8000280 <__aeabi_uldivmod>
 800464c:	4603      	mov	r3, r0
 800464e:	460c      	mov	r4, r1
 8004650:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 8004652:	e03d      	b.n	80046d0 <UART_SetConfig+0x5a8>
          case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8004654:	f7fd fd18 	bl	8002088 <HAL_RCC_GetSysClockFreq>
 8004658:	4603      	mov	r3, r0
 800465a:	4619      	mov	r1, r3
 800465c:	f04f 0200 	mov.w	r2, #0
 8004660:	f04f 0300 	mov.w	r3, #0
 8004664:	f04f 0400 	mov.w	r4, #0
 8004668:	0214      	lsls	r4, r2, #8
 800466a:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800466e:	020b      	lsls	r3, r1, #8
 8004670:	687a      	ldr	r2, [r7, #4]
 8004672:	6852      	ldr	r2, [r2, #4]
 8004674:	0852      	lsrs	r2, r2, #1
 8004676:	4611      	mov	r1, r2
 8004678:	f04f 0200 	mov.w	r2, #0
 800467c:	eb13 0b01 	adds.w	fp, r3, r1
 8004680:	eb44 0c02 	adc.w	ip, r4, r2
 8004684:	4658      	mov	r0, fp
 8004686:	4661      	mov	r1, ip
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	685b      	ldr	r3, [r3, #4]
 800468c:	f04f 0400 	mov.w	r4, #0
 8004690:	461a      	mov	r2, r3
 8004692:	4623      	mov	r3, r4
 8004694:	f7fb fdf4 	bl	8000280 <__aeabi_uldivmod>
 8004698:	4603      	mov	r3, r0
 800469a:	460c      	mov	r4, r1
 800469c:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 800469e:	e017      	b.n	80046d0 <UART_SetConfig+0x5a8>
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	685b      	ldr	r3, [r3, #4]
 80046a4:	085b      	lsrs	r3, r3, #1
 80046a6:	f04f 0400 	mov.w	r4, #0
 80046aa:	f513 0000 	adds.w	r0, r3, #8388608	; 0x800000
 80046ae:	f144 0100 	adc.w	r1, r4, #0
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	685b      	ldr	r3, [r3, #4]
 80046b6:	f04f 0400 	mov.w	r4, #0
 80046ba:	461a      	mov	r2, r3
 80046bc:	4623      	mov	r3, r4
 80046be:	f7fb fddf 	bl	8000280 <__aeabi_uldivmod>
 80046c2:	4603      	mov	r3, r0
 80046c4:	460c      	mov	r4, r1
 80046c6:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 80046c8:	e002      	b.n	80046d0 <UART_SetConfig+0x5a8>
          case UART_CLOCKSOURCE_UNDEFINED:
          default:
            ret = HAL_ERROR;
 80046ca:	2301      	movs	r3, #1
 80046cc:	74fb      	strb	r3, [r7, #19]
            break;
 80046ce:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80046d0:	697b      	ldr	r3, [r7, #20]
 80046d2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80046d6:	d308      	bcc.n	80046ea <UART_SetConfig+0x5c2>
 80046d8:	697b      	ldr	r3, [r7, #20]
 80046da:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80046de:	d204      	bcs.n	80046ea <UART_SetConfig+0x5c2>
        {
          huart->Instance->BRR = usartdiv;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	697a      	ldr	r2, [r7, #20]
 80046e6:	60da      	str	r2, [r3, #12]
 80046e8:	e101      	b.n	80048ee <UART_SetConfig+0x7c6>
        }
        else
        {
          ret = HAL_ERROR;
 80046ea:	2301      	movs	r3, #1
 80046ec:	74fb      	strb	r3, [r7, #19]
 80046ee:	e0fe      	b.n	80048ee <UART_SetConfig+0x7c6>
 80046f0:	40004c00 	.word	0x40004c00
 80046f4:	40021000 	.word	0x40021000
 80046f8:	40005000 	.word	0x40005000
 80046fc:	40008000 	.word	0x40008000
 8004700:	00f42400 	.word	0x00f42400
 8004704:	f4240000 	.word	0xf4240000
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	69db      	ldr	r3, [r3, #28]
 800470c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004710:	d17f      	bne.n	8004812 <UART_SetConfig+0x6ea>
  {
    switch (clocksource)
 8004712:	7efb      	ldrb	r3, [r7, #27]
 8004714:	2b08      	cmp	r3, #8
 8004716:	d85c      	bhi.n	80047d2 <UART_SetConfig+0x6aa>
 8004718:	a201      	add	r2, pc, #4	; (adr r2, 8004720 <UART_SetConfig+0x5f8>)
 800471a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800471e:	bf00      	nop
 8004720:	08004745 	.word	0x08004745
 8004724:	08004763 	.word	0x08004763
 8004728:	08004781 	.word	0x08004781
 800472c:	080047d3 	.word	0x080047d3
 8004730:	0800479d 	.word	0x0800479d
 8004734:	080047d3 	.word	0x080047d3
 8004738:	080047d3 	.word	0x080047d3
 800473c:	080047d3 	.word	0x080047d3
 8004740:	080047bb 	.word	0x080047bb
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8004744:	f7fd fd36 	bl	80021b4 <HAL_RCC_GetPCLK1Freq>
 8004748:	4603      	mov	r3, r0
 800474a:	005a      	lsls	r2, r3, #1
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	685b      	ldr	r3, [r3, #4]
 8004750:	085b      	lsrs	r3, r3, #1
 8004752:	441a      	add	r2, r3
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	685b      	ldr	r3, [r3, #4]
 8004758:	fbb2 f3f3 	udiv	r3, r2, r3
 800475c:	b29b      	uxth	r3, r3
 800475e:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004760:	e03a      	b.n	80047d8 <UART_SetConfig+0x6b0>
      case UART_CLOCKSOURCE_PCLK2:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8004762:	f7fd fd3d 	bl	80021e0 <HAL_RCC_GetPCLK2Freq>
 8004766:	4603      	mov	r3, r0
 8004768:	005a      	lsls	r2, r3, #1
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	685b      	ldr	r3, [r3, #4]
 800476e:	085b      	lsrs	r3, r3, #1
 8004770:	441a      	add	r2, r3
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	685b      	ldr	r3, [r3, #4]
 8004776:	fbb2 f3f3 	udiv	r3, r2, r3
 800477a:	b29b      	uxth	r3, r3
 800477c:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800477e:	e02b      	b.n	80047d8 <UART_SetConfig+0x6b0>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	685b      	ldr	r3, [r3, #4]
 8004784:	085b      	lsrs	r3, r3, #1
 8004786:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 800478a:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 800478e:	687a      	ldr	r2, [r7, #4]
 8004790:	6852      	ldr	r2, [r2, #4]
 8004792:	fbb3 f3f2 	udiv	r3, r3, r2
 8004796:	b29b      	uxth	r3, r3
 8004798:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800479a:	e01d      	b.n	80047d8 <UART_SetConfig+0x6b0>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800479c:	f7fd fc74 	bl	8002088 <HAL_RCC_GetSysClockFreq>
 80047a0:	4603      	mov	r3, r0
 80047a2:	005a      	lsls	r2, r3, #1
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	685b      	ldr	r3, [r3, #4]
 80047a8:	085b      	lsrs	r3, r3, #1
 80047aa:	441a      	add	r2, r3
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	685b      	ldr	r3, [r3, #4]
 80047b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80047b4:	b29b      	uxth	r3, r3
 80047b6:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80047b8:	e00e      	b.n	80047d8 <UART_SetConfig+0x6b0>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	685b      	ldr	r3, [r3, #4]
 80047be:	085b      	lsrs	r3, r3, #1
 80047c0:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	685b      	ldr	r3, [r3, #4]
 80047c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80047cc:	b29b      	uxth	r3, r3
 80047ce:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80047d0:	e002      	b.n	80047d8 <UART_SetConfig+0x6b0>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 80047d2:	2301      	movs	r3, #1
 80047d4:	74fb      	strb	r3, [r7, #19]
        break;
 80047d6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80047d8:	697b      	ldr	r3, [r7, #20]
 80047da:	2b0f      	cmp	r3, #15
 80047dc:	d916      	bls.n	800480c <UART_SetConfig+0x6e4>
 80047de:	697b      	ldr	r3, [r7, #20]
 80047e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80047e4:	d212      	bcs.n	800480c <UART_SetConfig+0x6e4>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80047e6:	697b      	ldr	r3, [r7, #20]
 80047e8:	b29b      	uxth	r3, r3
 80047ea:	f023 030f 	bic.w	r3, r3, #15
 80047ee:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80047f0:	697b      	ldr	r3, [r7, #20]
 80047f2:	085b      	lsrs	r3, r3, #1
 80047f4:	b29b      	uxth	r3, r3
 80047f6:	f003 0307 	and.w	r3, r3, #7
 80047fa:	b29a      	uxth	r2, r3
 80047fc:	897b      	ldrh	r3, [r7, #10]
 80047fe:	4313      	orrs	r3, r2
 8004800:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	897a      	ldrh	r2, [r7, #10]
 8004808:	60da      	str	r2, [r3, #12]
 800480a:	e070      	b.n	80048ee <UART_SetConfig+0x7c6>
    }
    else
    {
      ret = HAL_ERROR;
 800480c:	2301      	movs	r3, #1
 800480e:	74fb      	strb	r3, [r7, #19]
 8004810:	e06d      	b.n	80048ee <UART_SetConfig+0x7c6>
    }
  }
  else
  {
    switch (clocksource)
 8004812:	7efb      	ldrb	r3, [r7, #27]
 8004814:	2b08      	cmp	r3, #8
 8004816:	d859      	bhi.n	80048cc <UART_SetConfig+0x7a4>
 8004818:	a201      	add	r2, pc, #4	; (adr r2, 8004820 <UART_SetConfig+0x6f8>)
 800481a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800481e:	bf00      	nop
 8004820:	08004845 	.word	0x08004845
 8004824:	08004861 	.word	0x08004861
 8004828:	0800487d 	.word	0x0800487d
 800482c:	080048cd 	.word	0x080048cd
 8004830:	08004899 	.word	0x08004899
 8004834:	080048cd 	.word	0x080048cd
 8004838:	080048cd 	.word	0x080048cd
 800483c:	080048cd 	.word	0x080048cd
 8004840:	080048b5 	.word	0x080048b5
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8004844:	f7fd fcb6 	bl	80021b4 <HAL_RCC_GetPCLK1Freq>
 8004848:	4602      	mov	r2, r0
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	685b      	ldr	r3, [r3, #4]
 800484e:	085b      	lsrs	r3, r3, #1
 8004850:	441a      	add	r2, r3
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	685b      	ldr	r3, [r3, #4]
 8004856:	fbb2 f3f3 	udiv	r3, r2, r3
 800485a:	b29b      	uxth	r3, r3
 800485c:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800485e:	e038      	b.n	80048d2 <UART_SetConfig+0x7aa>
      case UART_CLOCKSOURCE_PCLK2:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8004860:	f7fd fcbe 	bl	80021e0 <HAL_RCC_GetPCLK2Freq>
 8004864:	4602      	mov	r2, r0
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	685b      	ldr	r3, [r3, #4]
 800486a:	085b      	lsrs	r3, r3, #1
 800486c:	441a      	add	r2, r3
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	685b      	ldr	r3, [r3, #4]
 8004872:	fbb2 f3f3 	udiv	r3, r2, r3
 8004876:	b29b      	uxth	r3, r3
 8004878:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800487a:	e02a      	b.n	80048d2 <UART_SetConfig+0x7aa>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	685b      	ldr	r3, [r3, #4]
 8004880:	085b      	lsrs	r3, r3, #1
 8004882:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8004886:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 800488a:	687a      	ldr	r2, [r7, #4]
 800488c:	6852      	ldr	r2, [r2, #4]
 800488e:	fbb3 f3f2 	udiv	r3, r3, r2
 8004892:	b29b      	uxth	r3, r3
 8004894:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004896:	e01c      	b.n	80048d2 <UART_SetConfig+0x7aa>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8004898:	f7fd fbf6 	bl	8002088 <HAL_RCC_GetSysClockFreq>
 800489c:	4602      	mov	r2, r0
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	685b      	ldr	r3, [r3, #4]
 80048a2:	085b      	lsrs	r3, r3, #1
 80048a4:	441a      	add	r2, r3
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	685b      	ldr	r3, [r3, #4]
 80048aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80048ae:	b29b      	uxth	r3, r3
 80048b0:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80048b2:	e00e      	b.n	80048d2 <UART_SetConfig+0x7aa>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	685b      	ldr	r3, [r3, #4]
 80048b8:	085b      	lsrs	r3, r3, #1
 80048ba:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	685b      	ldr	r3, [r3, #4]
 80048c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80048c6:	b29b      	uxth	r3, r3
 80048c8:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80048ca:	e002      	b.n	80048d2 <UART_SetConfig+0x7aa>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 80048cc:	2301      	movs	r3, #1
 80048ce:	74fb      	strb	r3, [r7, #19]
        break;
 80048d0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80048d2:	697b      	ldr	r3, [r7, #20]
 80048d4:	2b0f      	cmp	r3, #15
 80048d6:	d908      	bls.n	80048ea <UART_SetConfig+0x7c2>
 80048d8:	697b      	ldr	r3, [r7, #20]
 80048da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048de:	d204      	bcs.n	80048ea <UART_SetConfig+0x7c2>
    {
      huart->Instance->BRR = usartdiv;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	697a      	ldr	r2, [r7, #20]
 80048e6:	60da      	str	r2, [r3, #12]
 80048e8:	e001      	b.n	80048ee <UART_SetConfig+0x7c6>
    }
    else
    {
      ret = HAL_ERROR;
 80048ea:	2301      	movs	r3, #1
 80048ec:	74fb      	strb	r3, [r7, #19]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	2200      	movs	r2, #0
 80048f2:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2200      	movs	r2, #0
 80048f8:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 80048fa:	7cfb      	ldrb	r3, [r7, #19]
}
 80048fc:	4618      	mov	r0, r3
 80048fe:	3720      	adds	r7, #32
 8004900:	46bd      	mov	sp, r7
 8004902:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8004906:	bf00      	nop

08004908 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004908:	b580      	push	{r7, lr}
 800490a:	b082      	sub	sp, #8
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004914:	2bff      	cmp	r3, #255	; 0xff
 8004916:	d904      	bls.n	8004922 <UART_AdvFeatureConfig+0x1a>
 8004918:	f640 4155 	movw	r1, #3157	; 0xc55
 800491c:	489b      	ldr	r0, [pc, #620]	; (8004b8c <UART_AdvFeatureConfig+0x284>)
 800491e:	f003 fc82 	bl	8008226 <assert_failed>

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004926:	f003 0301 	and.w	r3, r3, #1
 800492a:	2b00      	cmp	r3, #0
 800492c:	d018      	beq.n	8004960 <UART_AdvFeatureConfig+0x58>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004932:	2b00      	cmp	r3, #0
 8004934:	d009      	beq.n	800494a <UART_AdvFeatureConfig+0x42>
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800493a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800493e:	d004      	beq.n	800494a <UART_AdvFeatureConfig+0x42>
 8004940:	f640 415a 	movw	r1, #3162	; 0xc5a
 8004944:	4891      	ldr	r0, [pc, #580]	; (8004b8c <UART_AdvFeatureConfig+0x284>)
 8004946:	f003 fc6e 	bl	8008226 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	685b      	ldr	r3, [r3, #4]
 8004950:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	430a      	orrs	r2, r1
 800495e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004964:	f003 0302 	and.w	r3, r3, #2
 8004968:	2b00      	cmp	r3, #0
 800496a:	d018      	beq.n	800499e <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004970:	2b00      	cmp	r3, #0
 8004972:	d009      	beq.n	8004988 <UART_AdvFeatureConfig+0x80>
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004978:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800497c:	d004      	beq.n	8004988 <UART_AdvFeatureConfig+0x80>
 800497e:	f640 4161 	movw	r1, #3169	; 0xc61
 8004982:	4882      	ldr	r0, [pc, #520]	; (8004b8c <UART_AdvFeatureConfig+0x284>)
 8004984:	f003 fc4f 	bl	8008226 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	685b      	ldr	r3, [r3, #4]
 800498e:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	430a      	orrs	r2, r1
 800499c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049a2:	f003 0304 	and.w	r3, r3, #4
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d018      	beq.n	80049dc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d009      	beq.n	80049c6 <UART_AdvFeatureConfig+0xbe>
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049b6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80049ba:	d004      	beq.n	80049c6 <UART_AdvFeatureConfig+0xbe>
 80049bc:	f640 4168 	movw	r1, #3176	; 0xc68
 80049c0:	4872      	ldr	r0, [pc, #456]	; (8004b8c <UART_AdvFeatureConfig+0x284>)
 80049c2:	f003 fc30 	bl	8008226 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	685b      	ldr	r3, [r3, #4]
 80049cc:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	430a      	orrs	r2, r1
 80049da:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049e0:	f003 0308 	and.w	r3, r3, #8
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d018      	beq.n	8004a1a <UART_AdvFeatureConfig+0x112>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d009      	beq.n	8004a04 <UART_AdvFeatureConfig+0xfc>
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80049f8:	d004      	beq.n	8004a04 <UART_AdvFeatureConfig+0xfc>
 80049fa:	f640 416f 	movw	r1, #3183	; 0xc6f
 80049fe:	4863      	ldr	r0, [pc, #396]	; (8004b8c <UART_AdvFeatureConfig+0x284>)
 8004a00:	f003 fc11 	bl	8008226 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	685b      	ldr	r3, [r3, #4]
 8004a0a:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	430a      	orrs	r2, r1
 8004a18:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a1e:	f003 0310 	and.w	r3, r3, #16
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d018      	beq.n	8004a58 <UART_AdvFeatureConfig+0x150>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d009      	beq.n	8004a42 <UART_AdvFeatureConfig+0x13a>
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a36:	d004      	beq.n	8004a42 <UART_AdvFeatureConfig+0x13a>
 8004a38:	f640 4176 	movw	r1, #3190	; 0xc76
 8004a3c:	4853      	ldr	r0, [pc, #332]	; (8004b8c <UART_AdvFeatureConfig+0x284>)
 8004a3e:	f003 fbf2 	bl	8008226 <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	689b      	ldr	r3, [r3, #8]
 8004a48:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	430a      	orrs	r2, r1
 8004a56:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a5c:	f003 0320 	and.w	r3, r3, #32
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d018      	beq.n	8004a96 <UART_AdvFeatureConfig+0x18e>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d009      	beq.n	8004a80 <UART_AdvFeatureConfig+0x178>
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a70:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a74:	d004      	beq.n	8004a80 <UART_AdvFeatureConfig+0x178>
 8004a76:	f640 417d 	movw	r1, #3197	; 0xc7d
 8004a7a:	4844      	ldr	r0, [pc, #272]	; (8004b8c <UART_AdvFeatureConfig+0x284>)
 8004a7c:	f003 fbd3 	bl	8008226 <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	689b      	ldr	r3, [r3, #8]
 8004a86:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	430a      	orrs	r2, r1
 8004a94:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d05e      	beq.n	8004b60 <UART_AdvFeatureConfig+0x258>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	4a3a      	ldr	r2, [pc, #232]	; (8004b90 <UART_AdvFeatureConfig+0x288>)
 8004aa8:	4293      	cmp	r3, r2
 8004aaa:	d018      	beq.n	8004ade <UART_AdvFeatureConfig+0x1d6>
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	4a38      	ldr	r2, [pc, #224]	; (8004b94 <UART_AdvFeatureConfig+0x28c>)
 8004ab2:	4293      	cmp	r3, r2
 8004ab4:	d013      	beq.n	8004ade <UART_AdvFeatureConfig+0x1d6>
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	4a37      	ldr	r2, [pc, #220]	; (8004b98 <UART_AdvFeatureConfig+0x290>)
 8004abc:	4293      	cmp	r3, r2
 8004abe:	d00e      	beq.n	8004ade <UART_AdvFeatureConfig+0x1d6>
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	4a35      	ldr	r2, [pc, #212]	; (8004b9c <UART_AdvFeatureConfig+0x294>)
 8004ac6:	4293      	cmp	r3, r2
 8004ac8:	d009      	beq.n	8004ade <UART_AdvFeatureConfig+0x1d6>
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	4a34      	ldr	r2, [pc, #208]	; (8004ba0 <UART_AdvFeatureConfig+0x298>)
 8004ad0:	4293      	cmp	r3, r2
 8004ad2:	d004      	beq.n	8004ade <UART_AdvFeatureConfig+0x1d6>
 8004ad4:	f640 4184 	movw	r1, #3204	; 0xc84
 8004ad8:	482c      	ldr	r0, [pc, #176]	; (8004b8c <UART_AdvFeatureConfig+0x284>)
 8004ada:	f003 fba4 	bl	8008226 <assert_failed>
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d009      	beq.n	8004afa <UART_AdvFeatureConfig+0x1f2>
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004aee:	d004      	beq.n	8004afa <UART_AdvFeatureConfig+0x1f2>
 8004af0:	f640 4185 	movw	r1, #3205	; 0xc85
 8004af4:	4825      	ldr	r0, [pc, #148]	; (8004b8c <UART_AdvFeatureConfig+0x284>)
 8004af6:	f003 fb96 	bl	8008226 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	685b      	ldr	r3, [r3, #4]
 8004b00:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	430a      	orrs	r2, r1
 8004b0e:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b14:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004b18:	d122      	bne.n	8004b60 <UART_AdvFeatureConfig+0x258>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d013      	beq.n	8004b4a <UART_AdvFeatureConfig+0x242>
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b26:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004b2a:	d00e      	beq.n	8004b4a <UART_AdvFeatureConfig+0x242>
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b30:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004b34:	d009      	beq.n	8004b4a <UART_AdvFeatureConfig+0x242>
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b3a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004b3e:	d004      	beq.n	8004b4a <UART_AdvFeatureConfig+0x242>
 8004b40:	f640 418a 	movw	r1, #3210	; 0xc8a
 8004b44:	4811      	ldr	r0, [pc, #68]	; (8004b8c <UART_AdvFeatureConfig+0x284>)
 8004b46:	f003 fb6e 	bl	8008226 <assert_failed>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	685b      	ldr	r3, [r3, #4]
 8004b50:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	430a      	orrs	r2, r1
 8004b5e:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d026      	beq.n	8004bba <UART_AdvFeatureConfig+0x2b2>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d017      	beq.n	8004ba4 <UART_AdvFeatureConfig+0x29c>
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b78:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004b7c:	d012      	beq.n	8004ba4 <UART_AdvFeatureConfig+0x29c>
 8004b7e:	f640 4192 	movw	r1, #3218	; 0xc92
 8004b82:	4802      	ldr	r0, [pc, #8]	; (8004b8c <UART_AdvFeatureConfig+0x284>)
 8004b84:	f003 fb4f 	bl	8008226 <assert_failed>
 8004b88:	e00c      	b.n	8004ba4 <UART_AdvFeatureConfig+0x29c>
 8004b8a:	bf00      	nop
 8004b8c:	0800a6e0 	.word	0x0800a6e0
 8004b90:	40013800 	.word	0x40013800
 8004b94:	40004400 	.word	0x40004400
 8004b98:	40004800 	.word	0x40004800
 8004b9c:	40004c00 	.word	0x40004c00
 8004ba0:	40005000 	.word	0x40005000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	685b      	ldr	r3, [r3, #4]
 8004baa:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	430a      	orrs	r2, r1
 8004bb8:	605a      	str	r2, [r3, #4]
  }
}
 8004bba:	bf00      	nop
 8004bbc:	3708      	adds	r7, #8
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	bd80      	pop	{r7, pc}
 8004bc2:	bf00      	nop

08004bc4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004bc4:	b580      	push	{r7, lr}
 8004bc6:	b086      	sub	sp, #24
 8004bc8:	af02      	add	r7, sp, #8
 8004bca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2200      	movs	r2, #0
 8004bd0:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8004bd2:	f7fb fcff 	bl	80005d4 <HAL_GetTick>
 8004bd6:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f003 0308 	and.w	r3, r3, #8
 8004be2:	2b08      	cmp	r3, #8
 8004be4:	d10e      	bne.n	8004c04 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004be6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004bea:	9300      	str	r3, [sp, #0]
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	2200      	movs	r2, #0
 8004bf0:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004bf4:	6878      	ldr	r0, [r7, #4]
 8004bf6:	f000 f82a 	bl	8004c4e <UART_WaitOnFlagUntilTimeout>
 8004bfa:	4603      	mov	r3, r0
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d001      	beq.n	8004c04 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004c00:	2303      	movs	r3, #3
 8004c02:	e020      	b.n	8004c46 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f003 0304 	and.w	r3, r3, #4
 8004c0e:	2b04      	cmp	r3, #4
 8004c10:	d10e      	bne.n	8004c30 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004c12:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004c16:	9300      	str	r3, [sp, #0]
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	2200      	movs	r2, #0
 8004c1c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004c20:	6878      	ldr	r0, [r7, #4]
 8004c22:	f000 f814 	bl	8004c4e <UART_WaitOnFlagUntilTimeout>
 8004c26:	4603      	mov	r3, r0
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d001      	beq.n	8004c30 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004c2c:	2303      	movs	r3, #3
 8004c2e:	e00a      	b.n	8004c46 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2220      	movs	r2, #32
 8004c34:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	2220      	movs	r2, #32
 8004c3a:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2200      	movs	r2, #0
 8004c40:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8004c44:	2300      	movs	r3, #0
}
 8004c46:	4618      	mov	r0, r3
 8004c48:	3710      	adds	r7, #16
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	bd80      	pop	{r7, pc}

08004c4e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004c4e:	b580      	push	{r7, lr}
 8004c50:	b084      	sub	sp, #16
 8004c52:	af00      	add	r7, sp, #0
 8004c54:	60f8      	str	r0, [r7, #12]
 8004c56:	60b9      	str	r1, [r7, #8]
 8004c58:	603b      	str	r3, [r7, #0]
 8004c5a:	4613      	mov	r3, r2
 8004c5c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c5e:	e02a      	b.n	8004cb6 <UART_WaitOnFlagUntilTimeout+0x68>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c60:	69bb      	ldr	r3, [r7, #24]
 8004c62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c66:	d026      	beq.n	8004cb6 <UART_WaitOnFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c68:	f7fb fcb4 	bl	80005d4 <HAL_GetTick>
 8004c6c:	4602      	mov	r2, r0
 8004c6e:	683b      	ldr	r3, [r7, #0]
 8004c70:	1ad3      	subs	r3, r2, r3
 8004c72:	69ba      	ldr	r2, [r7, #24]
 8004c74:	429a      	cmp	r2, r3
 8004c76:	d302      	bcc.n	8004c7e <UART_WaitOnFlagUntilTimeout+0x30>
 8004c78:	69bb      	ldr	r3, [r7, #24]
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d11b      	bne.n	8004cb6 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	681a      	ldr	r2, [r3, #0]
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004c8c:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	689a      	ldr	r2, [r3, #8]
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f022 0201 	bic.w	r2, r2, #1
 8004c9c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	2220      	movs	r2, #32
 8004ca2:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	2220      	movs	r2, #32
 8004ca8:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	2200      	movs	r2, #0
 8004cae:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8004cb2:	2303      	movs	r3, #3
 8004cb4:	e00f      	b.n	8004cd6 <UART_WaitOnFlagUntilTimeout+0x88>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	69da      	ldr	r2, [r3, #28]
 8004cbc:	68bb      	ldr	r3, [r7, #8]
 8004cbe:	4013      	ands	r3, r2
 8004cc0:	68ba      	ldr	r2, [r7, #8]
 8004cc2:	429a      	cmp	r2, r3
 8004cc4:	bf0c      	ite	eq
 8004cc6:	2301      	moveq	r3, #1
 8004cc8:	2300      	movne	r3, #0
 8004cca:	b2db      	uxtb	r3, r3
 8004ccc:	461a      	mov	r2, r3
 8004cce:	79fb      	ldrb	r3, [r7, #7]
 8004cd0:	429a      	cmp	r2, r3
 8004cd2:	d0c5      	beq.n	8004c60 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004cd4:	2300      	movs	r3, #0
}
 8004cd6:	4618      	mov	r0, r3
 8004cd8:	3710      	adds	r7, #16
 8004cda:	46bd      	mov	sp, r7
 8004cdc:	bd80      	pop	{r7, pc}

08004cde <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004cde:	b480      	push	{r7}
 8004ce0:	b083      	sub	sp, #12
 8004ce2:	af00      	add	r7, sp, #0
 8004ce4:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	681a      	ldr	r2, [r3, #0]
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8004cf4:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	2220      	movs	r2, #32
 8004cfa:	675a      	str	r2, [r3, #116]	; 0x74
}
 8004cfc:	bf00      	nop
 8004cfe:	370c      	adds	r7, #12
 8004d00:	46bd      	mov	sp, r7
 8004d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d06:	4770      	bx	lr

08004d08 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004d08:	b480      	push	{r7}
 8004d0a:	b083      	sub	sp, #12
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	681a      	ldr	r2, [r3, #0]
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004d1e:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	689a      	ldr	r2, [r3, #8]
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f022 0201 	bic.w	r2, r2, #1
 8004d2e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	2220      	movs	r2, #32
 8004d34:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	2200      	movs	r2, #0
 8004d3a:	661a      	str	r2, [r3, #96]	; 0x60
}
 8004d3c:	bf00      	nop
 8004d3e:	370c      	adds	r7, #12
 8004d40:	46bd      	mov	sp, r7
 8004d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d46:	4770      	bx	lr

08004d48 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004d48:	b580      	push	{r7, lr}
 8004d4a:	b084      	sub	sp, #16
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d54:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f003 0320 	and.w	r3, r3, #32
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d11e      	bne.n	8004da2 <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	2200      	movs	r2, #0
 8004d68:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	681a      	ldr	r2, [r3, #0]
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004d7a:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	689a      	ldr	r2, [r3, #8]
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	f022 0201 	bic.w	r2, r2, #1
 8004d8a:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	689a      	ldr	r2, [r3, #8]
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d9a:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	2220      	movs	r2, #32
 8004da0:	679a      	str	r2, [r3, #120]	; 0x78
  }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004da8:	68f8      	ldr	r0, [r7, #12]
 8004daa:	4798      	blx	r3
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004dac:	bf00      	nop
 8004dae:	3710      	adds	r7, #16
 8004db0:	46bd      	mov	sp, r7
 8004db2:	bd80      	pop	{r7, pc}

08004db4 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004db4:	b580      	push	{r7, lr}
 8004db6:	b084      	sub	sp, #16
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dc0:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dc8:	68f8      	ldr	r0, [r7, #12]
 8004dca:	4798      	blx	r3
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004dcc:	bf00      	nop
 8004dce:	3710      	adds	r7, #16
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	bd80      	pop	{r7, pc}

08004dd4 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004dd4:	b580      	push	{r7, lr}
 8004dd6:	b086      	sub	sp, #24
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004de0:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8004de2:	697b      	ldr	r3, [r7, #20]
 8004de4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004de6:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8004de8:	697b      	ldr	r3, [r7, #20]
 8004dea:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004dec:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8004dee:	697b      	ldr	r3, [r7, #20]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	689b      	ldr	r3, [r3, #8]
 8004df4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004df8:	2b80      	cmp	r3, #128	; 0x80
 8004dfa:	d109      	bne.n	8004e10 <UART_DMAError+0x3c>
 8004dfc:	693b      	ldr	r3, [r7, #16]
 8004dfe:	2b21      	cmp	r3, #33	; 0x21
 8004e00:	d106      	bne.n	8004e10 <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8004e02:	697b      	ldr	r3, [r7, #20]
 8004e04:	2200      	movs	r2, #0
 8004e06:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 8004e0a:	6978      	ldr	r0, [r7, #20]
 8004e0c:	f7ff ff67 	bl	8004cde <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8004e10:	697b      	ldr	r3, [r7, #20]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	689b      	ldr	r3, [r3, #8]
 8004e16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e1a:	2b40      	cmp	r3, #64	; 0x40
 8004e1c:	d109      	bne.n	8004e32 <UART_DMAError+0x5e>
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	2b22      	cmp	r3, #34	; 0x22
 8004e22:	d106      	bne.n	8004e32 <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8004e24:	697b      	ldr	r3, [r7, #20]
 8004e26:	2200      	movs	r2, #0
 8004e28:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 8004e2c:	6978      	ldr	r0, [r7, #20]
 8004e2e:	f7ff ff6b 	bl	8004d08 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004e32:	697b      	ldr	r3, [r7, #20]
 8004e34:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004e36:	f043 0210 	orr.w	r2, r3, #16
 8004e3a:	697b      	ldr	r3, [r7, #20]
 8004e3c:	67da      	str	r2, [r3, #124]	; 0x7c

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 8004e3e:	697b      	ldr	r3, [r7, #20]
 8004e40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e44:	6978      	ldr	r0, [r7, #20]
 8004e46:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004e48:	bf00      	nop
 8004e4a:	3718      	adds	r7, #24
 8004e4c:	46bd      	mov	sp, r7
 8004e4e:	bd80      	pop	{r7, pc}

08004e50 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004e50:	b580      	push	{r7, lr}
 8004e52:	b084      	sub	sp, #16
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e5c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	2200      	movs	r2, #0
 8004e62:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	2200      	movs	r2, #0
 8004e6a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e74:	68f8      	ldr	r0, [r7, #12]
 8004e76:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004e78:	bf00      	nop
 8004e7a:	3710      	adds	r7, #16
 8004e7c:	46bd      	mov	sp, r7
 8004e7e:	bd80      	pop	{r7, pc}

08004e80 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004e80:	b580      	push	{r7, lr}
 8004e82:	b082      	sub	sp, #8
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	681a      	ldr	r2, [r3, #0]
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004e96:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	2220      	movs	r2, #32
 8004e9c:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	2200      	movs	r2, #0
 8004ea2:	665a      	str	r2, [r3, #100]	; 0x64

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004eaa:	6878      	ldr	r0, [r7, #4]
 8004eac:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004eae:	bf00      	nop
 8004eb0:	3708      	adds	r7, #8
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	bd80      	pop	{r7, pc}

08004eb6 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004eb6:	b480      	push	{r7}
 8004eb8:	b083      	sub	sp, #12
 8004eba:	af00      	add	r7, sp, #0
 8004ebc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004ebe:	bf00      	nop
 8004ec0:	370c      	adds	r7, #12
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec8:	4770      	bx	lr
	...

08004ecc <osKernelInitialize>:
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize(void)
{
 8004ecc:	b480      	push	{r7}
 8004ece:	b085      	sub	sp, #20
 8004ed0:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004ed2:	f3ef 8305 	mrs	r3, IPSR
 8004ed6:	60bb      	str	r3, [r7, #8]
  return(result);
 8004ed8:	68bb      	ldr	r3, [r7, #8]
	osStatus_t stat;

	if (IS_IRQ())
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d10f      	bne.n	8004efe <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004ede:	f3ef 8310 	mrs	r3, PRIMASK
 8004ee2:	607b      	str	r3, [r7, #4]
  return(result);
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d109      	bne.n	8004efe <osKernelInitialize+0x32>
 8004eea:	4b11      	ldr	r3, [pc, #68]	; (8004f30 <osKernelInitialize+0x64>)
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	2b02      	cmp	r3, #2
 8004ef0:	d109      	bne.n	8004f06 <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004ef2:	f3ef 8311 	mrs	r3, BASEPRI
 8004ef6:	603b      	str	r3, [r7, #0]
  return(result);
 8004ef8:	683b      	ldr	r3, [r7, #0]
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d003      	beq.n	8004f06 <osKernelInitialize+0x3a>
	{
		stat = osErrorISR;
 8004efe:	f06f 0305 	mvn.w	r3, #5
 8004f02:	60fb      	str	r3, [r7, #12]
 8004f04:	e00c      	b.n	8004f20 <osKernelInitialize+0x54>
	}
	else
	{
		if (KernelState == osKernelInactive)
 8004f06:	4b0a      	ldr	r3, [pc, #40]	; (8004f30 <osKernelInitialize+0x64>)
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d105      	bne.n	8004f1a <osKernelInitialize+0x4e>
		{
#if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
			KernelState = osKernelReady;
 8004f0e:	4b08      	ldr	r3, [pc, #32]	; (8004f30 <osKernelInitialize+0x64>)
 8004f10:	2201      	movs	r2, #1
 8004f12:	601a      	str	r2, [r3, #0]
			stat = osOK;
 8004f14:	2300      	movs	r3, #0
 8004f16:	60fb      	str	r3, [r7, #12]
 8004f18:	e002      	b.n	8004f20 <osKernelInitialize+0x54>
		}
		else
		{
			stat = osError;
 8004f1a:	f04f 33ff 	mov.w	r3, #4294967295
 8004f1e:	60fb      	str	r3, [r7, #12]
		}
	}

	return (stat);
 8004f20:	68fb      	ldr	r3, [r7, #12]
}
 8004f22:	4618      	mov	r0, r3
 8004f24:	3714      	adds	r7, #20
 8004f26:	46bd      	mov	sp, r7
 8004f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2c:	4770      	bx	lr
 8004f2e:	bf00      	nop
 8004f30:	200000c4 	.word	0x200000c4

08004f34 <osKernelStart>:

	return (state);
}

osStatus_t osKernelStart(void)
{
 8004f34:	b580      	push	{r7, lr}
 8004f36:	b084      	sub	sp, #16
 8004f38:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004f3a:	f3ef 8305 	mrs	r3, IPSR
 8004f3e:	60bb      	str	r3, [r7, #8]
  return(result);
 8004f40:	68bb      	ldr	r3, [r7, #8]
	osStatus_t stat;

	if (IS_IRQ())
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d10f      	bne.n	8004f66 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004f46:	f3ef 8310 	mrs	r3, PRIMASK
 8004f4a:	607b      	str	r3, [r7, #4]
  return(result);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d109      	bne.n	8004f66 <osKernelStart+0x32>
 8004f52:	4b11      	ldr	r3, [pc, #68]	; (8004f98 <osKernelStart+0x64>)
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	2b02      	cmp	r3, #2
 8004f58:	d109      	bne.n	8004f6e <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004f5a:	f3ef 8311 	mrs	r3, BASEPRI
 8004f5e:	603b      	str	r3, [r7, #0]
  return(result);
 8004f60:	683b      	ldr	r3, [r7, #0]
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d003      	beq.n	8004f6e <osKernelStart+0x3a>
	{
		stat = osErrorISR;
 8004f66:	f06f 0305 	mvn.w	r3, #5
 8004f6a:	60fb      	str	r3, [r7, #12]
 8004f6c:	e00e      	b.n	8004f8c <osKernelStart+0x58>
	}
	else
	{
		if (KernelState == osKernelReady)
 8004f6e:	4b0a      	ldr	r3, [pc, #40]	; (8004f98 <osKernelStart+0x64>)
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	2b01      	cmp	r3, #1
 8004f74:	d107      	bne.n	8004f86 <osKernelStart+0x52>
		{
			KernelState = osKernelRunning;
 8004f76:	4b08      	ldr	r3, [pc, #32]	; (8004f98 <osKernelStart+0x64>)
 8004f78:	2202      	movs	r2, #2
 8004f7a:	601a      	str	r2, [r3, #0]
			vTaskStartScheduler();
 8004f7c:	f001 fb00 	bl	8006580 <vTaskStartScheduler>

			stat = osOK;
 8004f80:	2300      	movs	r3, #0
 8004f82:	60fb      	str	r3, [r7, #12]
 8004f84:	e002      	b.n	8004f8c <osKernelStart+0x58>
		}
		else
		{
			stat = osError;
 8004f86:	f04f 33ff 	mov.w	r3, #4294967295
 8004f8a:	60fb      	str	r3, [r7, #12]
		}
	}

	return (stat);
 8004f8c:	68fb      	ldr	r3, [r7, #12]
}
 8004f8e:	4618      	mov	r0, r3
 8004f90:	3710      	adds	r7, #16
 8004f92:	46bd      	mov	sp, r7
 8004f94:	bd80      	pop	{r7, pc}
 8004f96:	bf00      	nop
 8004f98:	200000c4 	.word	0x200000c4

08004f9c <osThreadNew>:

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew(osThreadFunc_t func, void *argument,
		const osThreadAttr_t *attr)
{
 8004f9c:	b580      	push	{r7, lr}
 8004f9e:	b092      	sub	sp, #72	; 0x48
 8004fa0:	af04      	add	r7, sp, #16
 8004fa2:	60f8      	str	r0, [r7, #12]
 8004fa4:	60b9      	str	r1, [r7, #8]
 8004fa6:	607a      	str	r2, [r7, #4]
	uint32_t stack;
	TaskHandle_t hTask;
	UBaseType_t prio;
	int32_t mem;

	hTask = NULL;
 8004fa8:	2300      	movs	r3, #0
 8004faa:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004fac:	f3ef 8305 	mrs	r3, IPSR
 8004fb0:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8004fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24

	if (!IS_IRQ() && (func != NULL))
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	f040 8094 	bne.w	80050e2 <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004fba:	f3ef 8310 	mrs	r3, PRIMASK
 8004fbe:	623b      	str	r3, [r7, #32]
  return(result);
 8004fc0:	6a3b      	ldr	r3, [r7, #32]
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	f040 808d 	bne.w	80050e2 <osThreadNew+0x146>
 8004fc8:	4b48      	ldr	r3, [pc, #288]	; (80050ec <osThreadNew+0x150>)
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	2b02      	cmp	r3, #2
 8004fce:	d106      	bne.n	8004fde <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004fd0:	f3ef 8311 	mrs	r3, BASEPRI
 8004fd4:	61fb      	str	r3, [r7, #28]
  return(result);
 8004fd6:	69fb      	ldr	r3, [r7, #28]
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	f040 8082 	bne.w	80050e2 <osThreadNew+0x146>
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d07e      	beq.n	80050e2 <osThreadNew+0x146>
	{
		stack = configMINIMAL_STACK_SIZE;
 8004fe4:	2380      	movs	r3, #128	; 0x80
 8004fe6:	633b      	str	r3, [r7, #48]	; 0x30
		prio = (UBaseType_t) osPriorityNormal;
 8004fe8:	2318      	movs	r3, #24
 8004fea:	62fb      	str	r3, [r7, #44]	; 0x2c

		empty = '\0';
 8004fec:	2300      	movs	r3, #0
 8004fee:	76fb      	strb	r3, [r7, #27]
		name = &empty;
 8004ff0:	f107 031b 	add.w	r3, r7, #27
 8004ff4:	637b      	str	r3, [r7, #52]	; 0x34
		mem = -1;
 8004ff6:	f04f 33ff 	mov.w	r3, #4294967295
 8004ffa:	62bb      	str	r3, [r7, #40]	; 0x28

		if (attr != NULL)
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d045      	beq.n	800508e <osThreadNew+0xf2>
		{
			if (attr->name != NULL)
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	2b00      	cmp	r3, #0
 8005008:	d002      	beq.n	8005010 <osThreadNew+0x74>
			{
				name = attr->name;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	637b      	str	r3, [r7, #52]	; 0x34
			}
			if (attr->priority != osPriorityNone)
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	699b      	ldr	r3, [r3, #24]
 8005014:	2b00      	cmp	r3, #0
 8005016:	d002      	beq.n	800501e <osThreadNew+0x82>
			{
				prio = (UBaseType_t) attr->priority;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	699b      	ldr	r3, [r3, #24]
 800501c:	62fb      	str	r3, [r7, #44]	; 0x2c
			}

			if ((prio < osPriorityIdle) || (prio > osPriorityISR)
 800501e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005020:	2b00      	cmp	r3, #0
 8005022:	d008      	beq.n	8005036 <osThreadNew+0x9a>
 8005024:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005026:	2b38      	cmp	r3, #56	; 0x38
 8005028:	d805      	bhi.n	8005036 <osThreadNew+0x9a>
					|| ((attr->attr_bits & osThreadJoinable) == osThreadJoinable))
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	685b      	ldr	r3, [r3, #4]
 800502e:	f003 0301 	and.w	r3, r3, #1
 8005032:	2b00      	cmp	r3, #0
 8005034:	d001      	beq.n	800503a <osThreadNew+0x9e>
			{
				return (NULL);
 8005036:	2300      	movs	r3, #0
 8005038:	e054      	b.n	80050e4 <osThreadNew+0x148>
			}

			if (attr->stack_size > 0U)
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	695b      	ldr	r3, [r3, #20]
 800503e:	2b00      	cmp	r3, #0
 8005040:	d003      	beq.n	800504a <osThreadNew+0xae>
			{
				/* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
				/* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
				stack = attr->stack_size / sizeof(StackType_t);
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	695b      	ldr	r3, [r3, #20]
 8005046:	089b      	lsrs	r3, r3, #2
 8005048:	633b      	str	r3, [r7, #48]	; 0x30
			}

			if ((attr->cb_mem != NULL)
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	689b      	ldr	r3, [r3, #8]
 800504e:	2b00      	cmp	r3, #0
 8005050:	d00e      	beq.n	8005070 <osThreadNew+0xd4>
					&& (attr->cb_size >= sizeof(StaticTask_t))
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	68db      	ldr	r3, [r3, #12]
 8005056:	2b5b      	cmp	r3, #91	; 0x5b
 8005058:	d90a      	bls.n	8005070 <osThreadNew+0xd4>
					&& (attr->stack_mem != NULL) && (attr->stack_size > 0U))
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	691b      	ldr	r3, [r3, #16]
 800505e:	2b00      	cmp	r3, #0
 8005060:	d006      	beq.n	8005070 <osThreadNew+0xd4>
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	695b      	ldr	r3, [r3, #20]
 8005066:	2b00      	cmp	r3, #0
 8005068:	d002      	beq.n	8005070 <osThreadNew+0xd4>
			{
				mem = 1;
 800506a:	2301      	movs	r3, #1
 800506c:	62bb      	str	r3, [r7, #40]	; 0x28
 800506e:	e010      	b.n	8005092 <osThreadNew+0xf6>
			}
			else
			{
				if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	689b      	ldr	r3, [r3, #8]
 8005074:	2b00      	cmp	r3, #0
 8005076:	d10c      	bne.n	8005092 <osThreadNew+0xf6>
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	68db      	ldr	r3, [r3, #12]
 800507c:	2b00      	cmp	r3, #0
 800507e:	d108      	bne.n	8005092 <osThreadNew+0xf6>
						&& (attr->stack_mem == NULL))
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	691b      	ldr	r3, [r3, #16]
 8005084:	2b00      	cmp	r3, #0
 8005086:	d104      	bne.n	8005092 <osThreadNew+0xf6>
				{
					mem = 0;
 8005088:	2300      	movs	r3, #0
 800508a:	62bb      	str	r3, [r7, #40]	; 0x28
 800508c:	e001      	b.n	8005092 <osThreadNew+0xf6>
				}
			}
		}
		else
		{
			mem = 0;
 800508e:	2300      	movs	r3, #0
 8005090:	62bb      	str	r3, [r7, #40]	; 0x28
		}

		if (mem == 1)
 8005092:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005094:	2b01      	cmp	r3, #1
 8005096:	d110      	bne.n	80050ba <osThreadNew+0x11e>
		{
			hTask = xTaskCreateStatic((TaskFunction_t) func, name, stack,
					argument, prio, (StackType_t *) attr->stack_mem,
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	691b      	ldr	r3, [r3, #16]
					(StaticTask_t *) attr->cb_mem);
 800509c:	687a      	ldr	r2, [r7, #4]
 800509e:	6892      	ldr	r2, [r2, #8]
			hTask = xTaskCreateStatic((TaskFunction_t) func, name, stack,
 80050a0:	9202      	str	r2, [sp, #8]
 80050a2:	9301      	str	r3, [sp, #4]
 80050a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050a6:	9300      	str	r3, [sp, #0]
 80050a8:	68bb      	ldr	r3, [r7, #8]
 80050aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80050ac:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80050ae:	68f8      	ldr	r0, [r7, #12]
 80050b0:	f001 f89e 	bl	80061f0 <xTaskCreateStatic>
 80050b4:	4603      	mov	r3, r0
 80050b6:	617b      	str	r3, [r7, #20]
 80050b8:	e013      	b.n	80050e2 <osThreadNew+0x146>
		}
		else
		{
			if (mem == 0)
 80050ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d110      	bne.n	80050e2 <osThreadNew+0x146>
			{
				if (xTaskCreate((TaskFunction_t) func, name, (uint16_t) stack,
 80050c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050c2:	b29a      	uxth	r2, r3
 80050c4:	f107 0314 	add.w	r3, r7, #20
 80050c8:	9301      	str	r3, [sp, #4]
 80050ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050cc:	9300      	str	r3, [sp, #0]
 80050ce:	68bb      	ldr	r3, [r7, #8]
 80050d0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80050d2:	68f8      	ldr	r0, [r7, #12]
 80050d4:	f001 f8e5 	bl	80062a2 <xTaskCreate>
 80050d8:	4603      	mov	r3, r0
 80050da:	2b01      	cmp	r3, #1
 80050dc:	d001      	beq.n	80050e2 <osThreadNew+0x146>
						argument, prio, &hTask) != pdPASS)
				{
					hTask = NULL;
 80050de:	2300      	movs	r3, #0
 80050e0:	617b      	str	r3, [r7, #20]
				}
			}
		}
	}

	return ((osThreadId_t) hTask);
 80050e2:	697b      	ldr	r3, [r7, #20]
}
 80050e4:	4618      	mov	r0, r3
 80050e6:	3738      	adds	r7, #56	; 0x38
 80050e8:	46bd      	mov	sp, r7
 80050ea:	bd80      	pop	{r7, pc}
 80050ec:	200000c4 	.word	0x200000c4

080050f0 <osDelay>:
	/* Return flags before clearing */
	return (rflags);
}

osStatus_t osDelay(uint32_t ticks)
{
 80050f0:	b580      	push	{r7, lr}
 80050f2:	b086      	sub	sp, #24
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80050f8:	f3ef 8305 	mrs	r3, IPSR
 80050fc:	613b      	str	r3, [r7, #16]
  return(result);
 80050fe:	693b      	ldr	r3, [r7, #16]
	osStatus_t stat;

	if (IS_IRQ())
 8005100:	2b00      	cmp	r3, #0
 8005102:	d10f      	bne.n	8005124 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005104:	f3ef 8310 	mrs	r3, PRIMASK
 8005108:	60fb      	str	r3, [r7, #12]
  return(result);
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	2b00      	cmp	r3, #0
 800510e:	d109      	bne.n	8005124 <osDelay+0x34>
 8005110:	4b0d      	ldr	r3, [pc, #52]	; (8005148 <osDelay+0x58>)
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	2b02      	cmp	r3, #2
 8005116:	d109      	bne.n	800512c <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005118:	f3ef 8311 	mrs	r3, BASEPRI
 800511c:	60bb      	str	r3, [r7, #8]
  return(result);
 800511e:	68bb      	ldr	r3, [r7, #8]
 8005120:	2b00      	cmp	r3, #0
 8005122:	d003      	beq.n	800512c <osDelay+0x3c>
	{
		stat = osErrorISR;
 8005124:	f06f 0305 	mvn.w	r3, #5
 8005128:	617b      	str	r3, [r7, #20]
 800512a:	e007      	b.n	800513c <osDelay+0x4c>
	}
	else
	{
		stat = osOK;
 800512c:	2300      	movs	r3, #0
 800512e:	617b      	str	r3, [r7, #20]

		if (ticks != 0U)
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	2b00      	cmp	r3, #0
 8005134:	d002      	beq.n	800513c <osDelay+0x4c>
		{
			vTaskDelay(ticks);
 8005136:	6878      	ldr	r0, [r7, #4]
 8005138:	f001 f9ee 	bl	8006518 <vTaskDelay>
		}
	}

	return (stat);
 800513c:	697b      	ldr	r3, [r7, #20]
}
 800513e:	4618      	mov	r0, r3
 8005140:	3718      	adds	r7, #24
 8005142:	46bd      	mov	sp, r7
 8005144:	bd80      	pop	{r7, pc}
 8005146:	bf00      	nop
 8005148:	200000c4 	.word	0x200000c4

0800514c <vApplicationGetIdleTaskMemory>:
 vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
 equals to 1 and is required for static memory allocation support.
 */
void vApplicationGetIdleTaskMemory(StaticTask_t **ppxIdleTaskTCBBuffer,
		StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize)
{
 800514c:	b480      	push	{r7}
 800514e:	b085      	sub	sp, #20
 8005150:	af00      	add	r7, sp, #0
 8005152:	60f8      	str	r0, [r7, #12]
 8005154:	60b9      	str	r1, [r7, #8]
 8005156:	607a      	str	r2, [r7, #4]
	*ppxIdleTaskTCBBuffer = &Idle_TCB;
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	4a07      	ldr	r2, [pc, #28]	; (8005178 <vApplicationGetIdleTaskMemory+0x2c>)
 800515c:	601a      	str	r2, [r3, #0]
	*ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800515e:	68bb      	ldr	r3, [r7, #8]
 8005160:	4a06      	ldr	r2, [pc, #24]	; (800517c <vApplicationGetIdleTaskMemory+0x30>)
 8005162:	601a      	str	r2, [r3, #0]
	*pulIdleTaskStackSize = (uint32_t) configMINIMAL_STACK_SIZE;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2280      	movs	r2, #128	; 0x80
 8005168:	601a      	str	r2, [r3, #0]
}
 800516a:	bf00      	nop
 800516c:	3714      	adds	r7, #20
 800516e:	46bd      	mov	sp, r7
 8005170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005174:	4770      	bx	lr
 8005176:	bf00      	nop
 8005178:	200000c8 	.word	0x200000c8
 800517c:	20000124 	.word	0x20000124

08005180 <vApplicationGetTimerTaskMemory>:
 vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
 equals to 1 and is required for static memory allocation support.
 */
void vApplicationGetTimerTaskMemory(StaticTask_t **ppxTimerTaskTCBBuffer,
		StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize)
{
 8005180:	b480      	push	{r7}
 8005182:	b085      	sub	sp, #20
 8005184:	af00      	add	r7, sp, #0
 8005186:	60f8      	str	r0, [r7, #12]
 8005188:	60b9      	str	r1, [r7, #8]
 800518a:	607a      	str	r2, [r7, #4]
	*ppxTimerTaskTCBBuffer = &Timer_TCB;
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	4a07      	ldr	r2, [pc, #28]	; (80051ac <vApplicationGetTimerTaskMemory+0x2c>)
 8005190:	601a      	str	r2, [r3, #0]
	*ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005192:	68bb      	ldr	r3, [r7, #8]
 8005194:	4a06      	ldr	r2, [pc, #24]	; (80051b0 <vApplicationGetTimerTaskMemory+0x30>)
 8005196:	601a      	str	r2, [r3, #0]
	*pulTimerTaskStackSize = (uint32_t) configTIMER_TASK_STACK_DEPTH;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800519e:	601a      	str	r2, [r3, #0]
}
 80051a0:	bf00      	nop
 80051a2:	3714      	adds	r7, #20
 80051a4:	46bd      	mov	sp, r7
 80051a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051aa:	4770      	bx	lr
 80051ac:	20000324 	.word	0x20000324
 80051b0:	20000380 	.word	0x20000380

080051b4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80051b4:	b480      	push	{r7}
 80051b6:	b083      	sub	sp, #12
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	f103 0208 	add.w	r2, r3, #8
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	f04f 32ff 	mov.w	r2, #4294967295
 80051cc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	f103 0208 	add.w	r2, r3, #8
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	f103 0208 	add.w	r2, r3, #8
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	2200      	movs	r2, #0
 80051e6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80051e8:	bf00      	nop
 80051ea:	370c      	adds	r7, #12
 80051ec:	46bd      	mov	sp, r7
 80051ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f2:	4770      	bx	lr

080051f4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80051f4:	b480      	push	{r7}
 80051f6:	b083      	sub	sp, #12
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	2200      	movs	r2, #0
 8005200:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005202:	bf00      	nop
 8005204:	370c      	adds	r7, #12
 8005206:	46bd      	mov	sp, r7
 8005208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520c:	4770      	bx	lr

0800520e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800520e:	b480      	push	{r7}
 8005210:	b085      	sub	sp, #20
 8005212:	af00      	add	r7, sp, #0
 8005214:	6078      	str	r0, [r7, #4]
 8005216:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	685b      	ldr	r3, [r3, #4]
 800521c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800521e:	683b      	ldr	r3, [r7, #0]
 8005220:	68fa      	ldr	r2, [r7, #12]
 8005222:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	689a      	ldr	r2, [r3, #8]
 8005228:	683b      	ldr	r3, [r7, #0]
 800522a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	689b      	ldr	r3, [r3, #8]
 8005230:	683a      	ldr	r2, [r7, #0]
 8005232:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	683a      	ldr	r2, [r7, #0]
 8005238:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800523a:	683b      	ldr	r3, [r7, #0]
 800523c:	687a      	ldr	r2, [r7, #4]
 800523e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	1c5a      	adds	r2, r3, #1
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	601a      	str	r2, [r3, #0]
}
 800524a:	bf00      	nop
 800524c:	3714      	adds	r7, #20
 800524e:	46bd      	mov	sp, r7
 8005250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005254:	4770      	bx	lr

08005256 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005256:	b480      	push	{r7}
 8005258:	b085      	sub	sp, #20
 800525a:	af00      	add	r7, sp, #0
 800525c:	6078      	str	r0, [r7, #4]
 800525e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005260:	683b      	ldr	r3, [r7, #0]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005266:	68bb      	ldr	r3, [r7, #8]
 8005268:	f1b3 3fff 	cmp.w	r3, #4294967295
 800526c:	d103      	bne.n	8005276 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	691b      	ldr	r3, [r3, #16]
 8005272:	60fb      	str	r3, [r7, #12]
 8005274:	e00c      	b.n	8005290 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	3308      	adds	r3, #8
 800527a:	60fb      	str	r3, [r7, #12]
 800527c:	e002      	b.n	8005284 <vListInsert+0x2e>
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	685b      	ldr	r3, [r3, #4]
 8005282:	60fb      	str	r3, [r7, #12]
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	685b      	ldr	r3, [r3, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	68ba      	ldr	r2, [r7, #8]
 800528c:	429a      	cmp	r2, r3
 800528e:	d2f6      	bcs.n	800527e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	685a      	ldr	r2, [r3, #4]
 8005294:	683b      	ldr	r3, [r7, #0]
 8005296:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005298:	683b      	ldr	r3, [r7, #0]
 800529a:	685b      	ldr	r3, [r3, #4]
 800529c:	683a      	ldr	r2, [r7, #0]
 800529e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80052a0:	683b      	ldr	r3, [r7, #0]
 80052a2:	68fa      	ldr	r2, [r7, #12]
 80052a4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	683a      	ldr	r2, [r7, #0]
 80052aa:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80052ac:	683b      	ldr	r3, [r7, #0]
 80052ae:	687a      	ldr	r2, [r7, #4]
 80052b0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	1c5a      	adds	r2, r3, #1
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	601a      	str	r2, [r3, #0]
}
 80052bc:	bf00      	nop
 80052be:	3714      	adds	r7, #20
 80052c0:	46bd      	mov	sp, r7
 80052c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c6:	4770      	bx	lr

080052c8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80052c8:	b480      	push	{r7}
 80052ca:	b085      	sub	sp, #20
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	691b      	ldr	r3, [r3, #16]
 80052d4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	685b      	ldr	r3, [r3, #4]
 80052da:	687a      	ldr	r2, [r7, #4]
 80052dc:	6892      	ldr	r2, [r2, #8]
 80052de:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	689b      	ldr	r3, [r3, #8]
 80052e4:	687a      	ldr	r2, [r7, #4]
 80052e6:	6852      	ldr	r2, [r2, #4]
 80052e8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	685b      	ldr	r3, [r3, #4]
 80052ee:	687a      	ldr	r2, [r7, #4]
 80052f0:	429a      	cmp	r2, r3
 80052f2:	d103      	bne.n	80052fc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	689a      	ldr	r2, [r3, #8]
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	2200      	movs	r2, #0
 8005300:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	1e5a      	subs	r2, r3, #1
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	681b      	ldr	r3, [r3, #0]
}
 8005310:	4618      	mov	r0, r3
 8005312:	3714      	adds	r7, #20
 8005314:	46bd      	mov	sp, r7
 8005316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531a:	4770      	bx	lr

0800531c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800531c:	b580      	push	{r7, lr}
 800531e:	b084      	sub	sp, #16
 8005320:	af00      	add	r7, sp, #0
 8005322:	6078      	str	r0, [r7, #4]
 8005324:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	2b00      	cmp	r3, #0
 800532e:	d109      	bne.n	8005344 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005330:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005334:	f383 8811 	msr	BASEPRI, r3
 8005338:	f3bf 8f6f 	isb	sy
 800533c:	f3bf 8f4f 	dsb	sy
 8005340:	60bb      	str	r3, [r7, #8]
 8005342:	e7fe      	b.n	8005342 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8005344:	f002 fb72 	bl	8007a2c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	681a      	ldr	r2, [r3, #0]
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005350:	68f9      	ldr	r1, [r7, #12]
 8005352:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005354:	fb01 f303 	mul.w	r3, r1, r3
 8005358:	441a      	add	r2, r3
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	2200      	movs	r2, #0
 8005362:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	681a      	ldr	r2, [r3, #0]
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	681a      	ldr	r2, [r3, #0]
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005374:	3b01      	subs	r3, #1
 8005376:	68f9      	ldr	r1, [r7, #12]
 8005378:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800537a:	fb01 f303 	mul.w	r3, r1, r3
 800537e:	441a      	add	r2, r3
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	22ff      	movs	r2, #255	; 0xff
 8005388:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	22ff      	movs	r2, #255	; 0xff
 8005390:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005394:	683b      	ldr	r3, [r7, #0]
 8005396:	2b00      	cmp	r3, #0
 8005398:	d114      	bne.n	80053c4 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	691b      	ldr	r3, [r3, #16]
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d01a      	beq.n	80053d8 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	3310      	adds	r3, #16
 80053a6:	4618      	mov	r0, r3
 80053a8:	f001 fb70 	bl	8006a8c <xTaskRemoveFromEventList>
 80053ac:	4603      	mov	r3, r0
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d012      	beq.n	80053d8 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80053b2:	4b0d      	ldr	r3, [pc, #52]	; (80053e8 <xQueueGenericReset+0xcc>)
 80053b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80053b8:	601a      	str	r2, [r3, #0]
 80053ba:	f3bf 8f4f 	dsb	sy
 80053be:	f3bf 8f6f 	isb	sy
 80053c2:	e009      	b.n	80053d8 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	3310      	adds	r3, #16
 80053c8:	4618      	mov	r0, r3
 80053ca:	f7ff fef3 	bl	80051b4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	3324      	adds	r3, #36	; 0x24
 80053d2:	4618      	mov	r0, r3
 80053d4:	f7ff feee 	bl	80051b4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80053d8:	f002 fb56 	bl	8007a88 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80053dc:	2301      	movs	r3, #1
}
 80053de:	4618      	mov	r0, r3
 80053e0:	3710      	adds	r7, #16
 80053e2:	46bd      	mov	sp, r7
 80053e4:	bd80      	pop	{r7, pc}
 80053e6:	bf00      	nop
 80053e8:	e000ed04 	.word	0xe000ed04

080053ec <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80053ec:	b580      	push	{r7, lr}
 80053ee:	b08e      	sub	sp, #56	; 0x38
 80053f0:	af02      	add	r7, sp, #8
 80053f2:	60f8      	str	r0, [r7, #12]
 80053f4:	60b9      	str	r1, [r7, #8]
 80053f6:	607a      	str	r2, [r7, #4]
 80053f8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d109      	bne.n	8005414 <xQueueGenericCreateStatic+0x28>
 8005400:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005404:	f383 8811 	msr	BASEPRI, r3
 8005408:	f3bf 8f6f 	isb	sy
 800540c:	f3bf 8f4f 	dsb	sy
 8005410:	62bb      	str	r3, [r7, #40]	; 0x28
 8005412:	e7fe      	b.n	8005412 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005414:	683b      	ldr	r3, [r7, #0]
 8005416:	2b00      	cmp	r3, #0
 8005418:	d109      	bne.n	800542e <xQueueGenericCreateStatic+0x42>
 800541a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800541e:	f383 8811 	msr	BASEPRI, r3
 8005422:	f3bf 8f6f 	isb	sy
 8005426:	f3bf 8f4f 	dsb	sy
 800542a:	627b      	str	r3, [r7, #36]	; 0x24
 800542c:	e7fe      	b.n	800542c <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	2b00      	cmp	r3, #0
 8005432:	d002      	beq.n	800543a <xQueueGenericCreateStatic+0x4e>
 8005434:	68bb      	ldr	r3, [r7, #8]
 8005436:	2b00      	cmp	r3, #0
 8005438:	d001      	beq.n	800543e <xQueueGenericCreateStatic+0x52>
 800543a:	2301      	movs	r3, #1
 800543c:	e000      	b.n	8005440 <xQueueGenericCreateStatic+0x54>
 800543e:	2300      	movs	r3, #0
 8005440:	2b00      	cmp	r3, #0
 8005442:	d109      	bne.n	8005458 <xQueueGenericCreateStatic+0x6c>
 8005444:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005448:	f383 8811 	msr	BASEPRI, r3
 800544c:	f3bf 8f6f 	isb	sy
 8005450:	f3bf 8f4f 	dsb	sy
 8005454:	623b      	str	r3, [r7, #32]
 8005456:	e7fe      	b.n	8005456 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2b00      	cmp	r3, #0
 800545c:	d102      	bne.n	8005464 <xQueueGenericCreateStatic+0x78>
 800545e:	68bb      	ldr	r3, [r7, #8]
 8005460:	2b00      	cmp	r3, #0
 8005462:	d101      	bne.n	8005468 <xQueueGenericCreateStatic+0x7c>
 8005464:	2301      	movs	r3, #1
 8005466:	e000      	b.n	800546a <xQueueGenericCreateStatic+0x7e>
 8005468:	2300      	movs	r3, #0
 800546a:	2b00      	cmp	r3, #0
 800546c:	d109      	bne.n	8005482 <xQueueGenericCreateStatic+0x96>
 800546e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005472:	f383 8811 	msr	BASEPRI, r3
 8005476:	f3bf 8f6f 	isb	sy
 800547a:	f3bf 8f4f 	dsb	sy
 800547e:	61fb      	str	r3, [r7, #28]
 8005480:	e7fe      	b.n	8005480 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005482:	2350      	movs	r3, #80	; 0x50
 8005484:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005486:	697b      	ldr	r3, [r7, #20]
 8005488:	2b50      	cmp	r3, #80	; 0x50
 800548a:	d009      	beq.n	80054a0 <xQueueGenericCreateStatic+0xb4>
 800548c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005490:	f383 8811 	msr	BASEPRI, r3
 8005494:	f3bf 8f6f 	isb	sy
 8005498:	f3bf 8f4f 	dsb	sy
 800549c:	61bb      	str	r3, [r7, #24]
 800549e:	e7fe      	b.n	800549e <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80054a0:	683b      	ldr	r3, [r7, #0]
 80054a2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80054a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d00d      	beq.n	80054c6 <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80054aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054ac:	2201      	movs	r2, #1
 80054ae:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80054b2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80054b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054b8:	9300      	str	r3, [sp, #0]
 80054ba:	4613      	mov	r3, r2
 80054bc:	687a      	ldr	r2, [r7, #4]
 80054be:	68b9      	ldr	r1, [r7, #8]
 80054c0:	68f8      	ldr	r0, [r7, #12]
 80054c2:	f000 f842 	bl	800554a <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80054c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80054c8:	4618      	mov	r0, r3
 80054ca:	3730      	adds	r7, #48	; 0x30
 80054cc:	46bd      	mov	sp, r7
 80054ce:	bd80      	pop	{r7, pc}

080054d0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80054d0:	b580      	push	{r7, lr}
 80054d2:	b08a      	sub	sp, #40	; 0x28
 80054d4:	af02      	add	r7, sp, #8
 80054d6:	60f8      	str	r0, [r7, #12]
 80054d8:	60b9      	str	r1, [r7, #8]
 80054da:	4613      	mov	r3, r2
 80054dc:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d109      	bne.n	80054f8 <xQueueGenericCreate+0x28>
 80054e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054e8:	f383 8811 	msr	BASEPRI, r3
 80054ec:	f3bf 8f6f 	isb	sy
 80054f0:	f3bf 8f4f 	dsb	sy
 80054f4:	613b      	str	r3, [r7, #16]
 80054f6:	e7fe      	b.n	80054f6 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80054f8:	68bb      	ldr	r3, [r7, #8]
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d102      	bne.n	8005504 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80054fe:	2300      	movs	r3, #0
 8005500:	61fb      	str	r3, [r7, #28]
 8005502:	e004      	b.n	800550e <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	68ba      	ldr	r2, [r7, #8]
 8005508:	fb02 f303 	mul.w	r3, r2, r3
 800550c:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800550e:	69fb      	ldr	r3, [r7, #28]
 8005510:	3350      	adds	r3, #80	; 0x50
 8005512:	4618      	mov	r0, r3
 8005514:	f002 fba4 	bl	8007c60 <pvPortMalloc>
 8005518:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800551a:	69bb      	ldr	r3, [r7, #24]
 800551c:	2b00      	cmp	r3, #0
 800551e:	d00f      	beq.n	8005540 <xQueueGenericCreate+0x70>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8005520:	69bb      	ldr	r3, [r7, #24]
 8005522:	3350      	adds	r3, #80	; 0x50
 8005524:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005526:	69bb      	ldr	r3, [r7, #24]
 8005528:	2200      	movs	r2, #0
 800552a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800552e:	79fa      	ldrb	r2, [r7, #7]
 8005530:	69bb      	ldr	r3, [r7, #24]
 8005532:	9300      	str	r3, [sp, #0]
 8005534:	4613      	mov	r3, r2
 8005536:	697a      	ldr	r2, [r7, #20]
 8005538:	68b9      	ldr	r1, [r7, #8]
 800553a:	68f8      	ldr	r0, [r7, #12]
 800553c:	f000 f805 	bl	800554a <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8005540:	69bb      	ldr	r3, [r7, #24]
	}
 8005542:	4618      	mov	r0, r3
 8005544:	3720      	adds	r7, #32
 8005546:	46bd      	mov	sp, r7
 8005548:	bd80      	pop	{r7, pc}

0800554a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800554a:	b580      	push	{r7, lr}
 800554c:	b084      	sub	sp, #16
 800554e:	af00      	add	r7, sp, #0
 8005550:	60f8      	str	r0, [r7, #12]
 8005552:	60b9      	str	r1, [r7, #8]
 8005554:	607a      	str	r2, [r7, #4]
 8005556:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005558:	68bb      	ldr	r3, [r7, #8]
 800555a:	2b00      	cmp	r3, #0
 800555c:	d103      	bne.n	8005566 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800555e:	69bb      	ldr	r3, [r7, #24]
 8005560:	69ba      	ldr	r2, [r7, #24]
 8005562:	601a      	str	r2, [r3, #0]
 8005564:	e002      	b.n	800556c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005566:	69bb      	ldr	r3, [r7, #24]
 8005568:	687a      	ldr	r2, [r7, #4]
 800556a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800556c:	69bb      	ldr	r3, [r7, #24]
 800556e:	68fa      	ldr	r2, [r7, #12]
 8005570:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005572:	69bb      	ldr	r3, [r7, #24]
 8005574:	68ba      	ldr	r2, [r7, #8]
 8005576:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005578:	2101      	movs	r1, #1
 800557a:	69b8      	ldr	r0, [r7, #24]
 800557c:	f7ff fece 	bl	800531c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005580:	69bb      	ldr	r3, [r7, #24]
 8005582:	78fa      	ldrb	r2, [r7, #3]
 8005584:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005588:	bf00      	nop
 800558a:	3710      	adds	r7, #16
 800558c:	46bd      	mov	sp, r7
 800558e:	bd80      	pop	{r7, pc}

08005590 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8005590:	b580      	push	{r7, lr}
 8005592:	b082      	sub	sp, #8
 8005594:	af00      	add	r7, sp, #0
 8005596:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	2b00      	cmp	r3, #0
 800559c:	d00e      	beq.n	80055bc <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	2200      	movs	r2, #0
 80055a2:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	2200      	movs	r2, #0
 80055a8:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	2200      	movs	r2, #0
 80055ae:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80055b0:	2300      	movs	r3, #0
 80055b2:	2200      	movs	r2, #0
 80055b4:	2100      	movs	r1, #0
 80055b6:	6878      	ldr	r0, [r7, #4]
 80055b8:	f000 f81c 	bl	80055f4 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80055bc:	bf00      	nop
 80055be:	3708      	adds	r7, #8
 80055c0:	46bd      	mov	sp, r7
 80055c2:	bd80      	pop	{r7, pc}

080055c4 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80055c4:	b580      	push	{r7, lr}
 80055c6:	b086      	sub	sp, #24
 80055c8:	af00      	add	r7, sp, #0
 80055ca:	4603      	mov	r3, r0
 80055cc:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80055ce:	2301      	movs	r3, #1
 80055d0:	617b      	str	r3, [r7, #20]
 80055d2:	2300      	movs	r3, #0
 80055d4:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80055d6:	79fb      	ldrb	r3, [r7, #7]
 80055d8:	461a      	mov	r2, r3
 80055da:	6939      	ldr	r1, [r7, #16]
 80055dc:	6978      	ldr	r0, [r7, #20]
 80055de:	f7ff ff77 	bl	80054d0 <xQueueGenericCreate>
 80055e2:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 80055e4:	68f8      	ldr	r0, [r7, #12]
 80055e6:	f7ff ffd3 	bl	8005590 <prvInitialiseMutex>

		return pxNewQueue;
 80055ea:	68fb      	ldr	r3, [r7, #12]
	}
 80055ec:	4618      	mov	r0, r3
 80055ee:	3718      	adds	r7, #24
 80055f0:	46bd      	mov	sp, r7
 80055f2:	bd80      	pop	{r7, pc}

080055f4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80055f4:	b580      	push	{r7, lr}
 80055f6:	b08e      	sub	sp, #56	; 0x38
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	60f8      	str	r0, [r7, #12]
 80055fc:	60b9      	str	r1, [r7, #8]
 80055fe:	607a      	str	r2, [r7, #4]
 8005600:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005602:	2300      	movs	r3, #0
 8005604:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800560a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800560c:	2b00      	cmp	r3, #0
 800560e:	d109      	bne.n	8005624 <xQueueGenericSend+0x30>
 8005610:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005614:	f383 8811 	msr	BASEPRI, r3
 8005618:	f3bf 8f6f 	isb	sy
 800561c:	f3bf 8f4f 	dsb	sy
 8005620:	62bb      	str	r3, [r7, #40]	; 0x28
 8005622:	e7fe      	b.n	8005622 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005624:	68bb      	ldr	r3, [r7, #8]
 8005626:	2b00      	cmp	r3, #0
 8005628:	d103      	bne.n	8005632 <xQueueGenericSend+0x3e>
 800562a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800562c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800562e:	2b00      	cmp	r3, #0
 8005630:	d101      	bne.n	8005636 <xQueueGenericSend+0x42>
 8005632:	2301      	movs	r3, #1
 8005634:	e000      	b.n	8005638 <xQueueGenericSend+0x44>
 8005636:	2300      	movs	r3, #0
 8005638:	2b00      	cmp	r3, #0
 800563a:	d109      	bne.n	8005650 <xQueueGenericSend+0x5c>
 800563c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005640:	f383 8811 	msr	BASEPRI, r3
 8005644:	f3bf 8f6f 	isb	sy
 8005648:	f3bf 8f4f 	dsb	sy
 800564c:	627b      	str	r3, [r7, #36]	; 0x24
 800564e:	e7fe      	b.n	800564e <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005650:	683b      	ldr	r3, [r7, #0]
 8005652:	2b02      	cmp	r3, #2
 8005654:	d103      	bne.n	800565e <xQueueGenericSend+0x6a>
 8005656:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005658:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800565a:	2b01      	cmp	r3, #1
 800565c:	d101      	bne.n	8005662 <xQueueGenericSend+0x6e>
 800565e:	2301      	movs	r3, #1
 8005660:	e000      	b.n	8005664 <xQueueGenericSend+0x70>
 8005662:	2300      	movs	r3, #0
 8005664:	2b00      	cmp	r3, #0
 8005666:	d109      	bne.n	800567c <xQueueGenericSend+0x88>
 8005668:	f04f 0350 	mov.w	r3, #80	; 0x50
 800566c:	f383 8811 	msr	BASEPRI, r3
 8005670:	f3bf 8f6f 	isb	sy
 8005674:	f3bf 8f4f 	dsb	sy
 8005678:	623b      	str	r3, [r7, #32]
 800567a:	e7fe      	b.n	800567a <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800567c:	f001 fbc2 	bl	8006e04 <xTaskGetSchedulerState>
 8005680:	4603      	mov	r3, r0
 8005682:	2b00      	cmp	r3, #0
 8005684:	d102      	bne.n	800568c <xQueueGenericSend+0x98>
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	2b00      	cmp	r3, #0
 800568a:	d101      	bne.n	8005690 <xQueueGenericSend+0x9c>
 800568c:	2301      	movs	r3, #1
 800568e:	e000      	b.n	8005692 <xQueueGenericSend+0x9e>
 8005690:	2300      	movs	r3, #0
 8005692:	2b00      	cmp	r3, #0
 8005694:	d109      	bne.n	80056aa <xQueueGenericSend+0xb6>
 8005696:	f04f 0350 	mov.w	r3, #80	; 0x50
 800569a:	f383 8811 	msr	BASEPRI, r3
 800569e:	f3bf 8f6f 	isb	sy
 80056a2:	f3bf 8f4f 	dsb	sy
 80056a6:	61fb      	str	r3, [r7, #28]
 80056a8:	e7fe      	b.n	80056a8 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80056aa:	f002 f9bf 	bl	8007a2c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80056ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80056b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056b6:	429a      	cmp	r2, r3
 80056b8:	d302      	bcc.n	80056c0 <xQueueGenericSend+0xcc>
 80056ba:	683b      	ldr	r3, [r7, #0]
 80056bc:	2b02      	cmp	r3, #2
 80056be:	d129      	bne.n	8005714 <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80056c0:	683a      	ldr	r2, [r7, #0]
 80056c2:	68b9      	ldr	r1, [r7, #8]
 80056c4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80056c6:	f000 fc26 	bl	8005f16 <prvCopyDataToQueue>
 80056ca:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80056cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d010      	beq.n	80056f6 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80056d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056d6:	3324      	adds	r3, #36	; 0x24
 80056d8:	4618      	mov	r0, r3
 80056da:	f001 f9d7 	bl	8006a8c <xTaskRemoveFromEventList>
 80056de:	4603      	mov	r3, r0
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d013      	beq.n	800570c <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80056e4:	4b3f      	ldr	r3, [pc, #252]	; (80057e4 <xQueueGenericSend+0x1f0>)
 80056e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80056ea:	601a      	str	r2, [r3, #0]
 80056ec:	f3bf 8f4f 	dsb	sy
 80056f0:	f3bf 8f6f 	isb	sy
 80056f4:	e00a      	b.n	800570c <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80056f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d007      	beq.n	800570c <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80056fc:	4b39      	ldr	r3, [pc, #228]	; (80057e4 <xQueueGenericSend+0x1f0>)
 80056fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005702:	601a      	str	r2, [r3, #0]
 8005704:	f3bf 8f4f 	dsb	sy
 8005708:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800570c:	f002 f9bc 	bl	8007a88 <vPortExitCritical>
				return pdPASS;
 8005710:	2301      	movs	r3, #1
 8005712:	e063      	b.n	80057dc <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	2b00      	cmp	r3, #0
 8005718:	d103      	bne.n	8005722 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800571a:	f002 f9b5 	bl	8007a88 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800571e:	2300      	movs	r3, #0
 8005720:	e05c      	b.n	80057dc <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005722:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005724:	2b00      	cmp	r3, #0
 8005726:	d106      	bne.n	8005736 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005728:	f107 0314 	add.w	r3, r7, #20
 800572c:	4618      	mov	r0, r3
 800572e:	f001 fa0f 	bl	8006b50 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005732:	2301      	movs	r3, #1
 8005734:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005736:	f002 f9a7 	bl	8007a88 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800573a:	f000 ff85 	bl	8006648 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800573e:	f002 f975 	bl	8007a2c <vPortEnterCritical>
 8005742:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005744:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005748:	b25b      	sxtb	r3, r3
 800574a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800574e:	d103      	bne.n	8005758 <xQueueGenericSend+0x164>
 8005750:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005752:	2200      	movs	r2, #0
 8005754:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005758:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800575a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800575e:	b25b      	sxtb	r3, r3
 8005760:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005764:	d103      	bne.n	800576e <xQueueGenericSend+0x17a>
 8005766:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005768:	2200      	movs	r2, #0
 800576a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800576e:	f002 f98b 	bl	8007a88 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005772:	1d3a      	adds	r2, r7, #4
 8005774:	f107 0314 	add.w	r3, r7, #20
 8005778:	4611      	mov	r1, r2
 800577a:	4618      	mov	r0, r3
 800577c:	f001 f9fe 	bl	8006b7c <xTaskCheckForTimeOut>
 8005780:	4603      	mov	r3, r0
 8005782:	2b00      	cmp	r3, #0
 8005784:	d124      	bne.n	80057d0 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005786:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005788:	f000 fcbd 	bl	8006106 <prvIsQueueFull>
 800578c:	4603      	mov	r3, r0
 800578e:	2b00      	cmp	r3, #0
 8005790:	d018      	beq.n	80057c4 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005792:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005794:	3310      	adds	r3, #16
 8005796:	687a      	ldr	r2, [r7, #4]
 8005798:	4611      	mov	r1, r2
 800579a:	4618      	mov	r0, r3
 800579c:	f001 f928 	bl	80069f0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80057a0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80057a2:	f000 fc48 	bl	8006036 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80057a6:	f000 ff5d 	bl	8006664 <xTaskResumeAll>
 80057aa:	4603      	mov	r3, r0
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	f47f af7c 	bne.w	80056aa <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 80057b2:	4b0c      	ldr	r3, [pc, #48]	; (80057e4 <xQueueGenericSend+0x1f0>)
 80057b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80057b8:	601a      	str	r2, [r3, #0]
 80057ba:	f3bf 8f4f 	dsb	sy
 80057be:	f3bf 8f6f 	isb	sy
 80057c2:	e772      	b.n	80056aa <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80057c4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80057c6:	f000 fc36 	bl	8006036 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80057ca:	f000 ff4b 	bl	8006664 <xTaskResumeAll>
 80057ce:	e76c      	b.n	80056aa <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80057d0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80057d2:	f000 fc30 	bl	8006036 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80057d6:	f000 ff45 	bl	8006664 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80057da:	2300      	movs	r3, #0
		}
	}
}
 80057dc:	4618      	mov	r0, r3
 80057de:	3738      	adds	r7, #56	; 0x38
 80057e0:	46bd      	mov	sp, r7
 80057e2:	bd80      	pop	{r7, pc}
 80057e4:	e000ed04 	.word	0xe000ed04

080057e8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80057e8:	b580      	push	{r7, lr}
 80057ea:	b08e      	sub	sp, #56	; 0x38
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	60f8      	str	r0, [r7, #12]
 80057f0:	60b9      	str	r1, [r7, #8]
 80057f2:	607a      	str	r2, [r7, #4]
 80057f4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80057fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d109      	bne.n	8005814 <xQueueGenericSendFromISR+0x2c>
 8005800:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005804:	f383 8811 	msr	BASEPRI, r3
 8005808:	f3bf 8f6f 	isb	sy
 800580c:	f3bf 8f4f 	dsb	sy
 8005810:	627b      	str	r3, [r7, #36]	; 0x24
 8005812:	e7fe      	b.n	8005812 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005814:	68bb      	ldr	r3, [r7, #8]
 8005816:	2b00      	cmp	r3, #0
 8005818:	d103      	bne.n	8005822 <xQueueGenericSendFromISR+0x3a>
 800581a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800581c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800581e:	2b00      	cmp	r3, #0
 8005820:	d101      	bne.n	8005826 <xQueueGenericSendFromISR+0x3e>
 8005822:	2301      	movs	r3, #1
 8005824:	e000      	b.n	8005828 <xQueueGenericSendFromISR+0x40>
 8005826:	2300      	movs	r3, #0
 8005828:	2b00      	cmp	r3, #0
 800582a:	d109      	bne.n	8005840 <xQueueGenericSendFromISR+0x58>
 800582c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005830:	f383 8811 	msr	BASEPRI, r3
 8005834:	f3bf 8f6f 	isb	sy
 8005838:	f3bf 8f4f 	dsb	sy
 800583c:	623b      	str	r3, [r7, #32]
 800583e:	e7fe      	b.n	800583e <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005840:	683b      	ldr	r3, [r7, #0]
 8005842:	2b02      	cmp	r3, #2
 8005844:	d103      	bne.n	800584e <xQueueGenericSendFromISR+0x66>
 8005846:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005848:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800584a:	2b01      	cmp	r3, #1
 800584c:	d101      	bne.n	8005852 <xQueueGenericSendFromISR+0x6a>
 800584e:	2301      	movs	r3, #1
 8005850:	e000      	b.n	8005854 <xQueueGenericSendFromISR+0x6c>
 8005852:	2300      	movs	r3, #0
 8005854:	2b00      	cmp	r3, #0
 8005856:	d109      	bne.n	800586c <xQueueGenericSendFromISR+0x84>
 8005858:	f04f 0350 	mov.w	r3, #80	; 0x50
 800585c:	f383 8811 	msr	BASEPRI, r3
 8005860:	f3bf 8f6f 	isb	sy
 8005864:	f3bf 8f4f 	dsb	sy
 8005868:	61fb      	str	r3, [r7, #28]
 800586a:	e7fe      	b.n	800586a <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800586c:	f002 f9ba 	bl	8007be4 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005870:	f3ef 8211 	mrs	r2, BASEPRI
 8005874:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005878:	f383 8811 	msr	BASEPRI, r3
 800587c:	f3bf 8f6f 	isb	sy
 8005880:	f3bf 8f4f 	dsb	sy
 8005884:	61ba      	str	r2, [r7, #24]
 8005886:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005888:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800588a:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800588c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800588e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005890:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005892:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005894:	429a      	cmp	r2, r3
 8005896:	d302      	bcc.n	800589e <xQueueGenericSendFromISR+0xb6>
 8005898:	683b      	ldr	r3, [r7, #0]
 800589a:	2b02      	cmp	r3, #2
 800589c:	d12c      	bne.n	80058f8 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800589e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058a0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80058a4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80058a8:	683a      	ldr	r2, [r7, #0]
 80058aa:	68b9      	ldr	r1, [r7, #8]
 80058ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80058ae:	f000 fb32 	bl	8005f16 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80058b2:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80058b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058ba:	d112      	bne.n	80058e2 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80058bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d016      	beq.n	80058f2 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80058c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058c6:	3324      	adds	r3, #36	; 0x24
 80058c8:	4618      	mov	r0, r3
 80058ca:	f001 f8df 	bl	8006a8c <xTaskRemoveFromEventList>
 80058ce:	4603      	mov	r3, r0
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d00e      	beq.n	80058f2 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d00b      	beq.n	80058f2 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	2201      	movs	r2, #1
 80058de:	601a      	str	r2, [r3, #0]
 80058e0:	e007      	b.n	80058f2 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80058e2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80058e6:	3301      	adds	r3, #1
 80058e8:	b2db      	uxtb	r3, r3
 80058ea:	b25a      	sxtb	r2, r3
 80058ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80058f2:	2301      	movs	r3, #1
 80058f4:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80058f6:	e001      	b.n	80058fc <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80058f8:	2300      	movs	r3, #0
 80058fa:	637b      	str	r3, [r7, #52]	; 0x34
 80058fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058fe:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005900:	693b      	ldr	r3, [r7, #16]
 8005902:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005906:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005908:	4618      	mov	r0, r3
 800590a:	3738      	adds	r7, #56	; 0x38
 800590c:	46bd      	mov	sp, r7
 800590e:	bd80      	pop	{r7, pc}

08005910 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005910:	b580      	push	{r7, lr}
 8005912:	b08e      	sub	sp, #56	; 0x38
 8005914:	af00      	add	r7, sp, #0
 8005916:	6078      	str	r0, [r7, #4]
 8005918:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800591e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005920:	2b00      	cmp	r3, #0
 8005922:	d109      	bne.n	8005938 <xQueueGiveFromISR+0x28>
	__asm volatile
 8005924:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005928:	f383 8811 	msr	BASEPRI, r3
 800592c:	f3bf 8f6f 	isb	sy
 8005930:	f3bf 8f4f 	dsb	sy
 8005934:	623b      	str	r3, [r7, #32]
 8005936:	e7fe      	b.n	8005936 <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005938:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800593a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800593c:	2b00      	cmp	r3, #0
 800593e:	d009      	beq.n	8005954 <xQueueGiveFromISR+0x44>
 8005940:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005944:	f383 8811 	msr	BASEPRI, r3
 8005948:	f3bf 8f6f 	isb	sy
 800594c:	f3bf 8f4f 	dsb	sy
 8005950:	61fb      	str	r3, [r7, #28]
 8005952:	e7fe      	b.n	8005952 <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 8005954:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	2b00      	cmp	r3, #0
 800595a:	d103      	bne.n	8005964 <xQueueGiveFromISR+0x54>
 800595c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800595e:	685b      	ldr	r3, [r3, #4]
 8005960:	2b00      	cmp	r3, #0
 8005962:	d101      	bne.n	8005968 <xQueueGiveFromISR+0x58>
 8005964:	2301      	movs	r3, #1
 8005966:	e000      	b.n	800596a <xQueueGiveFromISR+0x5a>
 8005968:	2300      	movs	r3, #0
 800596a:	2b00      	cmp	r3, #0
 800596c:	d109      	bne.n	8005982 <xQueueGiveFromISR+0x72>
 800596e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005972:	f383 8811 	msr	BASEPRI, r3
 8005976:	f3bf 8f6f 	isb	sy
 800597a:	f3bf 8f4f 	dsb	sy
 800597e:	61bb      	str	r3, [r7, #24]
 8005980:	e7fe      	b.n	8005980 <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005982:	f002 f92f 	bl	8007be4 <vPortValidateInterruptPriority>
	__asm volatile
 8005986:	f3ef 8211 	mrs	r2, BASEPRI
 800598a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800598e:	f383 8811 	msr	BASEPRI, r3
 8005992:	f3bf 8f6f 	isb	sy
 8005996:	f3bf 8f4f 	dsb	sy
 800599a:	617a      	str	r2, [r7, #20]
 800599c:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800599e:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80059a0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80059a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059a6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80059a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059ac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80059ae:	429a      	cmp	r2, r3
 80059b0:	d22b      	bcs.n	8005a0a <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80059b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059b4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80059b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80059bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059be:	1c5a      	adds	r2, r3, #1
 80059c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059c2:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80059c4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80059c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059cc:	d112      	bne.n	80059f4 <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80059ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d016      	beq.n	8005a04 <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80059d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059d8:	3324      	adds	r3, #36	; 0x24
 80059da:	4618      	mov	r0, r3
 80059dc:	f001 f856 	bl	8006a8c <xTaskRemoveFromEventList>
 80059e0:	4603      	mov	r3, r0
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d00e      	beq.n	8005a04 <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80059e6:	683b      	ldr	r3, [r7, #0]
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d00b      	beq.n	8005a04 <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80059ec:	683b      	ldr	r3, [r7, #0]
 80059ee:	2201      	movs	r2, #1
 80059f0:	601a      	str	r2, [r3, #0]
 80059f2:	e007      	b.n	8005a04 <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80059f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80059f8:	3301      	adds	r3, #1
 80059fa:	b2db      	uxtb	r3, r3
 80059fc:	b25a      	sxtb	r2, r3
 80059fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a00:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005a04:	2301      	movs	r3, #1
 8005a06:	637b      	str	r3, [r7, #52]	; 0x34
 8005a08:	e001      	b.n	8005a0e <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005a0a:	2300      	movs	r3, #0
 8005a0c:	637b      	str	r3, [r7, #52]	; 0x34
 8005a0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a10:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005a18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005a1a:	4618      	mov	r0, r3
 8005a1c:	3738      	adds	r7, #56	; 0x38
 8005a1e:	46bd      	mov	sp, r7
 8005a20:	bd80      	pop	{r7, pc}
	...

08005a24 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005a24:	b580      	push	{r7, lr}
 8005a26:	b08c      	sub	sp, #48	; 0x30
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	60f8      	str	r0, [r7, #12]
 8005a2c:	60b9      	str	r1, [r7, #8]
 8005a2e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005a30:	2300      	movs	r3, #0
 8005a32:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005a38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d109      	bne.n	8005a52 <xQueueReceive+0x2e>
	__asm volatile
 8005a3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a42:	f383 8811 	msr	BASEPRI, r3
 8005a46:	f3bf 8f6f 	isb	sy
 8005a4a:	f3bf 8f4f 	dsb	sy
 8005a4e:	623b      	str	r3, [r7, #32]
 8005a50:	e7fe      	b.n	8005a50 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005a52:	68bb      	ldr	r3, [r7, #8]
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d103      	bne.n	8005a60 <xQueueReceive+0x3c>
 8005a58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d101      	bne.n	8005a64 <xQueueReceive+0x40>
 8005a60:	2301      	movs	r3, #1
 8005a62:	e000      	b.n	8005a66 <xQueueReceive+0x42>
 8005a64:	2300      	movs	r3, #0
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d109      	bne.n	8005a7e <xQueueReceive+0x5a>
 8005a6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a6e:	f383 8811 	msr	BASEPRI, r3
 8005a72:	f3bf 8f6f 	isb	sy
 8005a76:	f3bf 8f4f 	dsb	sy
 8005a7a:	61fb      	str	r3, [r7, #28]
 8005a7c:	e7fe      	b.n	8005a7c <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005a7e:	f001 f9c1 	bl	8006e04 <xTaskGetSchedulerState>
 8005a82:	4603      	mov	r3, r0
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d102      	bne.n	8005a8e <xQueueReceive+0x6a>
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d101      	bne.n	8005a92 <xQueueReceive+0x6e>
 8005a8e:	2301      	movs	r3, #1
 8005a90:	e000      	b.n	8005a94 <xQueueReceive+0x70>
 8005a92:	2300      	movs	r3, #0
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d109      	bne.n	8005aac <xQueueReceive+0x88>
 8005a98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a9c:	f383 8811 	msr	BASEPRI, r3
 8005aa0:	f3bf 8f6f 	isb	sy
 8005aa4:	f3bf 8f4f 	dsb	sy
 8005aa8:	61bb      	str	r3, [r7, #24]
 8005aaa:	e7fe      	b.n	8005aaa <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8005aac:	f001 ffbe 	bl	8007a2c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005ab0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ab2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ab4:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d01f      	beq.n	8005afc <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005abc:	68b9      	ldr	r1, [r7, #8]
 8005abe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005ac0:	f000 fa93 	bl	8005fea <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ac6:	1e5a      	subs	r2, r3, #1
 8005ac8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005aca:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005acc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ace:	691b      	ldr	r3, [r3, #16]
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d00f      	beq.n	8005af4 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005ad4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ad6:	3310      	adds	r3, #16
 8005ad8:	4618      	mov	r0, r3
 8005ada:	f000 ffd7 	bl	8006a8c <xTaskRemoveFromEventList>
 8005ade:	4603      	mov	r3, r0
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d007      	beq.n	8005af4 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005ae4:	4b3c      	ldr	r3, [pc, #240]	; (8005bd8 <xQueueReceive+0x1b4>)
 8005ae6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005aea:	601a      	str	r2, [r3, #0]
 8005aec:	f3bf 8f4f 	dsb	sy
 8005af0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005af4:	f001 ffc8 	bl	8007a88 <vPortExitCritical>
				return pdPASS;
 8005af8:	2301      	movs	r3, #1
 8005afa:	e069      	b.n	8005bd0 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d103      	bne.n	8005b0a <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005b02:	f001 ffc1 	bl	8007a88 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005b06:	2300      	movs	r3, #0
 8005b08:	e062      	b.n	8005bd0 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005b0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d106      	bne.n	8005b1e <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005b10:	f107 0310 	add.w	r3, r7, #16
 8005b14:	4618      	mov	r0, r3
 8005b16:	f001 f81b 	bl	8006b50 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005b1a:	2301      	movs	r3, #1
 8005b1c:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005b1e:	f001 ffb3 	bl	8007a88 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005b22:	f000 fd91 	bl	8006648 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005b26:	f001 ff81 	bl	8007a2c <vPortEnterCritical>
 8005b2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b2c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005b30:	b25b      	sxtb	r3, r3
 8005b32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b36:	d103      	bne.n	8005b40 <xQueueReceive+0x11c>
 8005b38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b3a:	2200      	movs	r2, #0
 8005b3c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005b40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b42:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005b46:	b25b      	sxtb	r3, r3
 8005b48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b4c:	d103      	bne.n	8005b56 <xQueueReceive+0x132>
 8005b4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b50:	2200      	movs	r2, #0
 8005b52:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005b56:	f001 ff97 	bl	8007a88 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005b5a:	1d3a      	adds	r2, r7, #4
 8005b5c:	f107 0310 	add.w	r3, r7, #16
 8005b60:	4611      	mov	r1, r2
 8005b62:	4618      	mov	r0, r3
 8005b64:	f001 f80a 	bl	8006b7c <xTaskCheckForTimeOut>
 8005b68:	4603      	mov	r3, r0
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d123      	bne.n	8005bb6 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005b6e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005b70:	f000 fab3 	bl	80060da <prvIsQueueEmpty>
 8005b74:	4603      	mov	r3, r0
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d017      	beq.n	8005baa <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005b7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b7c:	3324      	adds	r3, #36	; 0x24
 8005b7e:	687a      	ldr	r2, [r7, #4]
 8005b80:	4611      	mov	r1, r2
 8005b82:	4618      	mov	r0, r3
 8005b84:	f000 ff34 	bl	80069f0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005b88:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005b8a:	f000 fa54 	bl	8006036 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005b8e:	f000 fd69 	bl	8006664 <xTaskResumeAll>
 8005b92:	4603      	mov	r3, r0
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d189      	bne.n	8005aac <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8005b98:	4b0f      	ldr	r3, [pc, #60]	; (8005bd8 <xQueueReceive+0x1b4>)
 8005b9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b9e:	601a      	str	r2, [r3, #0]
 8005ba0:	f3bf 8f4f 	dsb	sy
 8005ba4:	f3bf 8f6f 	isb	sy
 8005ba8:	e780      	b.n	8005aac <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005baa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005bac:	f000 fa43 	bl	8006036 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005bb0:	f000 fd58 	bl	8006664 <xTaskResumeAll>
 8005bb4:	e77a      	b.n	8005aac <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005bb6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005bb8:	f000 fa3d 	bl	8006036 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005bbc:	f000 fd52 	bl	8006664 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005bc0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005bc2:	f000 fa8a 	bl	80060da <prvIsQueueEmpty>
 8005bc6:	4603      	mov	r3, r0
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	f43f af6f 	beq.w	8005aac <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005bce:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8005bd0:	4618      	mov	r0, r3
 8005bd2:	3730      	adds	r7, #48	; 0x30
 8005bd4:	46bd      	mov	sp, r7
 8005bd6:	bd80      	pop	{r7, pc}
 8005bd8:	e000ed04 	.word	0xe000ed04

08005bdc <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8005bdc:	b580      	push	{r7, lr}
 8005bde:	b08e      	sub	sp, #56	; 0x38
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	6078      	str	r0, [r7, #4]
 8005be4:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8005be6:	2300      	movs	r3, #0
 8005be8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8005bee:	2300      	movs	r3, #0
 8005bf0:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005bf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d109      	bne.n	8005c0c <xQueueSemaphoreTake+0x30>
 8005bf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bfc:	f383 8811 	msr	BASEPRI, r3
 8005c00:	f3bf 8f6f 	isb	sy
 8005c04:	f3bf 8f4f 	dsb	sy
 8005c08:	623b      	str	r3, [r7, #32]
 8005c0a:	e7fe      	b.n	8005c0a <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005c0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d009      	beq.n	8005c28 <xQueueSemaphoreTake+0x4c>
 8005c14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c18:	f383 8811 	msr	BASEPRI, r3
 8005c1c:	f3bf 8f6f 	isb	sy
 8005c20:	f3bf 8f4f 	dsb	sy
 8005c24:	61fb      	str	r3, [r7, #28]
 8005c26:	e7fe      	b.n	8005c26 <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005c28:	f001 f8ec 	bl	8006e04 <xTaskGetSchedulerState>
 8005c2c:	4603      	mov	r3, r0
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d102      	bne.n	8005c38 <xQueueSemaphoreTake+0x5c>
 8005c32:	683b      	ldr	r3, [r7, #0]
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d101      	bne.n	8005c3c <xQueueSemaphoreTake+0x60>
 8005c38:	2301      	movs	r3, #1
 8005c3a:	e000      	b.n	8005c3e <xQueueSemaphoreTake+0x62>
 8005c3c:	2300      	movs	r3, #0
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d109      	bne.n	8005c56 <xQueueSemaphoreTake+0x7a>
 8005c42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c46:	f383 8811 	msr	BASEPRI, r3
 8005c4a:	f3bf 8f6f 	isb	sy
 8005c4e:	f3bf 8f4f 	dsb	sy
 8005c52:	61bb      	str	r3, [r7, #24]
 8005c54:	e7fe      	b.n	8005c54 <xQueueSemaphoreTake+0x78>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8005c56:	f001 fee9 	bl	8007a2c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8005c5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c5e:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8005c60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d024      	beq.n	8005cb0 <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8005c66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c68:	1e5a      	subs	r2, r3, #1
 8005c6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c6c:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005c6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d104      	bne.n	8005c80 <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8005c76:	f001 fa41 	bl	80070fc <pvTaskIncrementMutexHeldCount>
 8005c7a:	4602      	mov	r2, r0
 8005c7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c7e:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005c80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c82:	691b      	ldr	r3, [r3, #16]
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d00f      	beq.n	8005ca8 <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005c88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c8a:	3310      	adds	r3, #16
 8005c8c:	4618      	mov	r0, r3
 8005c8e:	f000 fefd 	bl	8006a8c <xTaskRemoveFromEventList>
 8005c92:	4603      	mov	r3, r0
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d007      	beq.n	8005ca8 <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005c98:	4b53      	ldr	r3, [pc, #332]	; (8005de8 <xQueueSemaphoreTake+0x20c>)
 8005c9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c9e:	601a      	str	r2, [r3, #0]
 8005ca0:	f3bf 8f4f 	dsb	sy
 8005ca4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005ca8:	f001 feee 	bl	8007a88 <vPortExitCritical>
				return pdPASS;
 8005cac:	2301      	movs	r3, #1
 8005cae:	e096      	b.n	8005dde <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005cb0:	683b      	ldr	r3, [r7, #0]
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d110      	bne.n	8005cd8 <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8005cb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d009      	beq.n	8005cd0 <xQueueSemaphoreTake+0xf4>
 8005cbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cc0:	f383 8811 	msr	BASEPRI, r3
 8005cc4:	f3bf 8f6f 	isb	sy
 8005cc8:	f3bf 8f4f 	dsb	sy
 8005ccc:	617b      	str	r3, [r7, #20]
 8005cce:	e7fe      	b.n	8005cce <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8005cd0:	f001 feda 	bl	8007a88 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005cd4:	2300      	movs	r3, #0
 8005cd6:	e082      	b.n	8005dde <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005cd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d106      	bne.n	8005cec <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005cde:	f107 030c 	add.w	r3, r7, #12
 8005ce2:	4618      	mov	r0, r3
 8005ce4:	f000 ff34 	bl	8006b50 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005ce8:	2301      	movs	r3, #1
 8005cea:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005cec:	f001 fecc 	bl	8007a88 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005cf0:	f000 fcaa 	bl	8006648 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005cf4:	f001 fe9a 	bl	8007a2c <vPortEnterCritical>
 8005cf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cfa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005cfe:	b25b      	sxtb	r3, r3
 8005d00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d04:	d103      	bne.n	8005d0e <xQueueSemaphoreTake+0x132>
 8005d06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d08:	2200      	movs	r2, #0
 8005d0a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005d0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d10:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005d14:	b25b      	sxtb	r3, r3
 8005d16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d1a:	d103      	bne.n	8005d24 <xQueueSemaphoreTake+0x148>
 8005d1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d1e:	2200      	movs	r2, #0
 8005d20:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005d24:	f001 feb0 	bl	8007a88 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005d28:	463a      	mov	r2, r7
 8005d2a:	f107 030c 	add.w	r3, r7, #12
 8005d2e:	4611      	mov	r1, r2
 8005d30:	4618      	mov	r0, r3
 8005d32:	f000 ff23 	bl	8006b7c <xTaskCheckForTimeOut>
 8005d36:	4603      	mov	r3, r0
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d132      	bne.n	8005da2 <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005d3c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005d3e:	f000 f9cc 	bl	80060da <prvIsQueueEmpty>
 8005d42:	4603      	mov	r3, r0
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d026      	beq.n	8005d96 <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005d48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d109      	bne.n	8005d64 <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 8005d50:	f001 fe6c 	bl	8007a2c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8005d54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d56:	685b      	ldr	r3, [r3, #4]
 8005d58:	4618      	mov	r0, r3
 8005d5a:	f001 f871 	bl	8006e40 <xTaskPriorityInherit>
 8005d5e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8005d60:	f001 fe92 	bl	8007a88 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005d64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d66:	3324      	adds	r3, #36	; 0x24
 8005d68:	683a      	ldr	r2, [r7, #0]
 8005d6a:	4611      	mov	r1, r2
 8005d6c:	4618      	mov	r0, r3
 8005d6e:	f000 fe3f 	bl	80069f0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005d72:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005d74:	f000 f95f 	bl	8006036 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005d78:	f000 fc74 	bl	8006664 <xTaskResumeAll>
 8005d7c:	4603      	mov	r3, r0
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	f47f af69 	bne.w	8005c56 <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 8005d84:	4b18      	ldr	r3, [pc, #96]	; (8005de8 <xQueueSemaphoreTake+0x20c>)
 8005d86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d8a:	601a      	str	r2, [r3, #0]
 8005d8c:	f3bf 8f4f 	dsb	sy
 8005d90:	f3bf 8f6f 	isb	sy
 8005d94:	e75f      	b.n	8005c56 <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8005d96:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005d98:	f000 f94d 	bl	8006036 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005d9c:	f000 fc62 	bl	8006664 <xTaskResumeAll>
 8005da0:	e759      	b.n	8005c56 <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8005da2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005da4:	f000 f947 	bl	8006036 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005da8:	f000 fc5c 	bl	8006664 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005dac:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005dae:	f000 f994 	bl	80060da <prvIsQueueEmpty>
 8005db2:	4603      	mov	r3, r0
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	f43f af4e 	beq.w	8005c56 <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8005dba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d00d      	beq.n	8005ddc <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 8005dc0:	f001 fe34 	bl	8007a2c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8005dc4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005dc6:	f000 f88e 	bl	8005ee6 <prvGetDisinheritPriorityAfterTimeout>
 8005dca:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 8005dcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dce:	685b      	ldr	r3, [r3, #4]
 8005dd0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005dd2:	4618      	mov	r0, r3
 8005dd4:	f001 f90e 	bl	8006ff4 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8005dd8:	f001 fe56 	bl	8007a88 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005ddc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8005dde:	4618      	mov	r0, r3
 8005de0:	3738      	adds	r7, #56	; 0x38
 8005de2:	46bd      	mov	sp, r7
 8005de4:	bd80      	pop	{r7, pc}
 8005de6:	bf00      	nop
 8005de8:	e000ed04 	.word	0xe000ed04

08005dec <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005dec:	b580      	push	{r7, lr}
 8005dee:	b08e      	sub	sp, #56	; 0x38
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	60f8      	str	r0, [r7, #12]
 8005df4:	60b9      	str	r1, [r7, #8]
 8005df6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005dfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d109      	bne.n	8005e16 <xQueueReceiveFromISR+0x2a>
 8005e02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e06:	f383 8811 	msr	BASEPRI, r3
 8005e0a:	f3bf 8f6f 	isb	sy
 8005e0e:	f3bf 8f4f 	dsb	sy
 8005e12:	623b      	str	r3, [r7, #32]
 8005e14:	e7fe      	b.n	8005e14 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005e16:	68bb      	ldr	r3, [r7, #8]
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d103      	bne.n	8005e24 <xQueueReceiveFromISR+0x38>
 8005e1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d101      	bne.n	8005e28 <xQueueReceiveFromISR+0x3c>
 8005e24:	2301      	movs	r3, #1
 8005e26:	e000      	b.n	8005e2a <xQueueReceiveFromISR+0x3e>
 8005e28:	2300      	movs	r3, #0
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d109      	bne.n	8005e42 <xQueueReceiveFromISR+0x56>
 8005e2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e32:	f383 8811 	msr	BASEPRI, r3
 8005e36:	f3bf 8f6f 	isb	sy
 8005e3a:	f3bf 8f4f 	dsb	sy
 8005e3e:	61fb      	str	r3, [r7, #28]
 8005e40:	e7fe      	b.n	8005e40 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005e42:	f001 fecf 	bl	8007be4 <vPortValidateInterruptPriority>
	__asm volatile
 8005e46:	f3ef 8211 	mrs	r2, BASEPRI
 8005e4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e4e:	f383 8811 	msr	BASEPRI, r3
 8005e52:	f3bf 8f6f 	isb	sy
 8005e56:	f3bf 8f4f 	dsb	sy
 8005e5a:	61ba      	str	r2, [r7, #24]
 8005e5c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8005e5e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005e60:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005e62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e66:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005e68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d02f      	beq.n	8005ece <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8005e6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e70:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005e74:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005e78:	68b9      	ldr	r1, [r7, #8]
 8005e7a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005e7c:	f000 f8b5 	bl	8005fea <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005e80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e82:	1e5a      	subs	r2, r3, #1
 8005e84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e86:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8005e88:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005e8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e90:	d112      	bne.n	8005eb8 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005e92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e94:	691b      	ldr	r3, [r3, #16]
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d016      	beq.n	8005ec8 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005e9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e9c:	3310      	adds	r3, #16
 8005e9e:	4618      	mov	r0, r3
 8005ea0:	f000 fdf4 	bl	8006a8c <xTaskRemoveFromEventList>
 8005ea4:	4603      	mov	r3, r0
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d00e      	beq.n	8005ec8 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d00b      	beq.n	8005ec8 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	2201      	movs	r2, #1
 8005eb4:	601a      	str	r2, [r3, #0]
 8005eb6:	e007      	b.n	8005ec8 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8005eb8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005ebc:	3301      	adds	r3, #1
 8005ebe:	b2db      	uxtb	r3, r3
 8005ec0:	b25a      	sxtb	r2, r3
 8005ec2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ec4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8005ec8:	2301      	movs	r3, #1
 8005eca:	637b      	str	r3, [r7, #52]	; 0x34
 8005ecc:	e001      	b.n	8005ed2 <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 8005ece:	2300      	movs	r3, #0
 8005ed0:	637b      	str	r3, [r7, #52]	; 0x34
 8005ed2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ed4:	613b      	str	r3, [r7, #16]
	__asm volatile
 8005ed6:	693b      	ldr	r3, [r7, #16]
 8005ed8:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005edc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005ede:	4618      	mov	r0, r3
 8005ee0:	3738      	adds	r7, #56	; 0x38
 8005ee2:	46bd      	mov	sp, r7
 8005ee4:	bd80      	pop	{r7, pc}

08005ee6 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8005ee6:	b480      	push	{r7}
 8005ee8:	b085      	sub	sp, #20
 8005eea:	af00      	add	r7, sp, #0
 8005eec:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d006      	beq.n	8005f04 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8005f00:	60fb      	str	r3, [r7, #12]
 8005f02:	e001      	b.n	8005f08 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8005f04:	2300      	movs	r3, #0
 8005f06:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8005f08:	68fb      	ldr	r3, [r7, #12]
	}
 8005f0a:	4618      	mov	r0, r3
 8005f0c:	3714      	adds	r7, #20
 8005f0e:	46bd      	mov	sp, r7
 8005f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f14:	4770      	bx	lr

08005f16 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005f16:	b580      	push	{r7, lr}
 8005f18:	b086      	sub	sp, #24
 8005f1a:	af00      	add	r7, sp, #0
 8005f1c:	60f8      	str	r0, [r7, #12]
 8005f1e:	60b9      	str	r1, [r7, #8]
 8005f20:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005f22:	2300      	movs	r3, #0
 8005f24:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f2a:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d10d      	bne.n	8005f50 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d14d      	bne.n	8005fd8 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	685b      	ldr	r3, [r3, #4]
 8005f40:	4618      	mov	r0, r3
 8005f42:	f000 ffeb 	bl	8006f1c <xTaskPriorityDisinherit>
 8005f46:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	2200      	movs	r2, #0
 8005f4c:	605a      	str	r2, [r3, #4]
 8005f4e:	e043      	b.n	8005fd8 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d119      	bne.n	8005f8a <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	6898      	ldr	r0, [r3, #8]
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f5e:	461a      	mov	r2, r3
 8005f60:	68b9      	ldr	r1, [r7, #8]
 8005f62:	f003 f953 	bl	800920c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	689a      	ldr	r2, [r3, #8]
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f6e:	441a      	add	r2, r3
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	689a      	ldr	r2, [r3, #8]
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	685b      	ldr	r3, [r3, #4]
 8005f7c:	429a      	cmp	r2, r3
 8005f7e:	d32b      	bcc.n	8005fd8 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	681a      	ldr	r2, [r3, #0]
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	609a      	str	r2, [r3, #8]
 8005f88:	e026      	b.n	8005fd8 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	68d8      	ldr	r0, [r3, #12]
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f92:	461a      	mov	r2, r3
 8005f94:	68b9      	ldr	r1, [r7, #8]
 8005f96:	f003 f939 	bl	800920c <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	68da      	ldr	r2, [r3, #12]
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fa2:	425b      	negs	r3, r3
 8005fa4:	441a      	add	r2, r3
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	68da      	ldr	r2, [r3, #12]
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	429a      	cmp	r2, r3
 8005fb4:	d207      	bcs.n	8005fc6 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	685a      	ldr	r2, [r3, #4]
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fbe:	425b      	negs	r3, r3
 8005fc0:	441a      	add	r2, r3
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	2b02      	cmp	r3, #2
 8005fca:	d105      	bne.n	8005fd8 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005fcc:	693b      	ldr	r3, [r7, #16]
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d002      	beq.n	8005fd8 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005fd2:	693b      	ldr	r3, [r7, #16]
 8005fd4:	3b01      	subs	r3, #1
 8005fd6:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005fd8:	693b      	ldr	r3, [r7, #16]
 8005fda:	1c5a      	adds	r2, r3, #1
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005fe0:	697b      	ldr	r3, [r7, #20]
}
 8005fe2:	4618      	mov	r0, r3
 8005fe4:	3718      	adds	r7, #24
 8005fe6:	46bd      	mov	sp, r7
 8005fe8:	bd80      	pop	{r7, pc}

08005fea <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005fea:	b580      	push	{r7, lr}
 8005fec:	b082      	sub	sp, #8
 8005fee:	af00      	add	r7, sp, #0
 8005ff0:	6078      	str	r0, [r7, #4]
 8005ff2:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d018      	beq.n	800602e <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	68da      	ldr	r2, [r3, #12]
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006004:	441a      	add	r2, r3
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	68da      	ldr	r2, [r3, #12]
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	685b      	ldr	r3, [r3, #4]
 8006012:	429a      	cmp	r2, r3
 8006014:	d303      	bcc.n	800601e <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681a      	ldr	r2, [r3, #0]
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	68d9      	ldr	r1, [r3, #12]
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006026:	461a      	mov	r2, r3
 8006028:	6838      	ldr	r0, [r7, #0]
 800602a:	f003 f8ef 	bl	800920c <memcpy>
	}
}
 800602e:	bf00      	nop
 8006030:	3708      	adds	r7, #8
 8006032:	46bd      	mov	sp, r7
 8006034:	bd80      	pop	{r7, pc}

08006036 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006036:	b580      	push	{r7, lr}
 8006038:	b084      	sub	sp, #16
 800603a:	af00      	add	r7, sp, #0
 800603c:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800603e:	f001 fcf5 	bl	8007a2c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006048:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800604a:	e011      	b.n	8006070 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006050:	2b00      	cmp	r3, #0
 8006052:	d012      	beq.n	800607a <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	3324      	adds	r3, #36	; 0x24
 8006058:	4618      	mov	r0, r3
 800605a:	f000 fd17 	bl	8006a8c <xTaskRemoveFromEventList>
 800605e:	4603      	mov	r3, r0
 8006060:	2b00      	cmp	r3, #0
 8006062:	d001      	beq.n	8006068 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006064:	f000 fdea 	bl	8006c3c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006068:	7bfb      	ldrb	r3, [r7, #15]
 800606a:	3b01      	subs	r3, #1
 800606c:	b2db      	uxtb	r3, r3
 800606e:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006070:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006074:	2b00      	cmp	r3, #0
 8006076:	dce9      	bgt.n	800604c <prvUnlockQueue+0x16>
 8006078:	e000      	b.n	800607c <prvUnlockQueue+0x46>
					break;
 800607a:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	22ff      	movs	r2, #255	; 0xff
 8006080:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8006084:	f001 fd00 	bl	8007a88 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006088:	f001 fcd0 	bl	8007a2c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006092:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006094:	e011      	b.n	80060ba <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	691b      	ldr	r3, [r3, #16]
 800609a:	2b00      	cmp	r3, #0
 800609c:	d012      	beq.n	80060c4 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	3310      	adds	r3, #16
 80060a2:	4618      	mov	r0, r3
 80060a4:	f000 fcf2 	bl	8006a8c <xTaskRemoveFromEventList>
 80060a8:	4603      	mov	r3, r0
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d001      	beq.n	80060b2 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80060ae:	f000 fdc5 	bl	8006c3c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80060b2:	7bbb      	ldrb	r3, [r7, #14]
 80060b4:	3b01      	subs	r3, #1
 80060b6:	b2db      	uxtb	r3, r3
 80060b8:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80060ba:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80060be:	2b00      	cmp	r3, #0
 80060c0:	dce9      	bgt.n	8006096 <prvUnlockQueue+0x60>
 80060c2:	e000      	b.n	80060c6 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80060c4:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	22ff      	movs	r2, #255	; 0xff
 80060ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80060ce:	f001 fcdb 	bl	8007a88 <vPortExitCritical>
}
 80060d2:	bf00      	nop
 80060d4:	3710      	adds	r7, #16
 80060d6:	46bd      	mov	sp, r7
 80060d8:	bd80      	pop	{r7, pc}

080060da <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80060da:	b580      	push	{r7, lr}
 80060dc:	b084      	sub	sp, #16
 80060de:	af00      	add	r7, sp, #0
 80060e0:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80060e2:	f001 fca3 	bl	8007a2c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d102      	bne.n	80060f4 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80060ee:	2301      	movs	r3, #1
 80060f0:	60fb      	str	r3, [r7, #12]
 80060f2:	e001      	b.n	80060f8 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80060f4:	2300      	movs	r3, #0
 80060f6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80060f8:	f001 fcc6 	bl	8007a88 <vPortExitCritical>

	return xReturn;
 80060fc:	68fb      	ldr	r3, [r7, #12]
}
 80060fe:	4618      	mov	r0, r3
 8006100:	3710      	adds	r7, #16
 8006102:	46bd      	mov	sp, r7
 8006104:	bd80      	pop	{r7, pc}

08006106 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006106:	b580      	push	{r7, lr}
 8006108:	b084      	sub	sp, #16
 800610a:	af00      	add	r7, sp, #0
 800610c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800610e:	f001 fc8d 	bl	8007a2c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800611a:	429a      	cmp	r2, r3
 800611c:	d102      	bne.n	8006124 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800611e:	2301      	movs	r3, #1
 8006120:	60fb      	str	r3, [r7, #12]
 8006122:	e001      	b.n	8006128 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006124:	2300      	movs	r3, #0
 8006126:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006128:	f001 fcae 	bl	8007a88 <vPortExitCritical>

	return xReturn;
 800612c:	68fb      	ldr	r3, [r7, #12]
}
 800612e:	4618      	mov	r0, r3
 8006130:	3710      	adds	r7, #16
 8006132:	46bd      	mov	sp, r7
 8006134:	bd80      	pop	{r7, pc}
	...

08006138 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006138:	b480      	push	{r7}
 800613a:	b085      	sub	sp, #20
 800613c:	af00      	add	r7, sp, #0
 800613e:	6078      	str	r0, [r7, #4]
 8006140:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006142:	2300      	movs	r3, #0
 8006144:	60fb      	str	r3, [r7, #12]
 8006146:	e014      	b.n	8006172 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006148:	4a0e      	ldr	r2, [pc, #56]	; (8006184 <vQueueAddToRegistry+0x4c>)
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006150:	2b00      	cmp	r3, #0
 8006152:	d10b      	bne.n	800616c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006154:	490b      	ldr	r1, [pc, #44]	; (8006184 <vQueueAddToRegistry+0x4c>)
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	683a      	ldr	r2, [r7, #0]
 800615a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800615e:	4a09      	ldr	r2, [pc, #36]	; (8006184 <vQueueAddToRegistry+0x4c>)
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	00db      	lsls	r3, r3, #3
 8006164:	4413      	add	r3, r2
 8006166:	687a      	ldr	r2, [r7, #4]
 8006168:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800616a:	e005      	b.n	8006178 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	3301      	adds	r3, #1
 8006170:	60fb      	str	r3, [r7, #12]
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	2b07      	cmp	r3, #7
 8006176:	d9e7      	bls.n	8006148 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006178:	bf00      	nop
 800617a:	3714      	adds	r7, #20
 800617c:	46bd      	mov	sp, r7
 800617e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006182:	4770      	bx	lr
 8006184:	2000d680 	.word	0x2000d680

08006188 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006188:	b580      	push	{r7, lr}
 800618a:	b086      	sub	sp, #24
 800618c:	af00      	add	r7, sp, #0
 800618e:	60f8      	str	r0, [r7, #12]
 8006190:	60b9      	str	r1, [r7, #8]
 8006192:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006198:	f001 fc48 	bl	8007a2c <vPortEnterCritical>
 800619c:	697b      	ldr	r3, [r7, #20]
 800619e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80061a2:	b25b      	sxtb	r3, r3
 80061a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061a8:	d103      	bne.n	80061b2 <vQueueWaitForMessageRestricted+0x2a>
 80061aa:	697b      	ldr	r3, [r7, #20]
 80061ac:	2200      	movs	r2, #0
 80061ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80061b2:	697b      	ldr	r3, [r7, #20]
 80061b4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80061b8:	b25b      	sxtb	r3, r3
 80061ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061be:	d103      	bne.n	80061c8 <vQueueWaitForMessageRestricted+0x40>
 80061c0:	697b      	ldr	r3, [r7, #20]
 80061c2:	2200      	movs	r2, #0
 80061c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80061c8:	f001 fc5e 	bl	8007a88 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80061cc:	697b      	ldr	r3, [r7, #20]
 80061ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d106      	bne.n	80061e2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80061d4:	697b      	ldr	r3, [r7, #20]
 80061d6:	3324      	adds	r3, #36	; 0x24
 80061d8:	687a      	ldr	r2, [r7, #4]
 80061da:	68b9      	ldr	r1, [r7, #8]
 80061dc:	4618      	mov	r0, r3
 80061de:	f000 fc2b 	bl	8006a38 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80061e2:	6978      	ldr	r0, [r7, #20]
 80061e4:	f7ff ff27 	bl	8006036 <prvUnlockQueue>
	}
 80061e8:	bf00      	nop
 80061ea:	3718      	adds	r7, #24
 80061ec:	46bd      	mov	sp, r7
 80061ee:	bd80      	pop	{r7, pc}

080061f0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80061f0:	b580      	push	{r7, lr}
 80061f2:	b08e      	sub	sp, #56	; 0x38
 80061f4:	af04      	add	r7, sp, #16
 80061f6:	60f8      	str	r0, [r7, #12]
 80061f8:	60b9      	str	r1, [r7, #8]
 80061fa:	607a      	str	r2, [r7, #4]
 80061fc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80061fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006200:	2b00      	cmp	r3, #0
 8006202:	d109      	bne.n	8006218 <xTaskCreateStatic+0x28>
	__asm volatile
 8006204:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006208:	f383 8811 	msr	BASEPRI, r3
 800620c:	f3bf 8f6f 	isb	sy
 8006210:	f3bf 8f4f 	dsb	sy
 8006214:	623b      	str	r3, [r7, #32]
 8006216:	e7fe      	b.n	8006216 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8006218:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800621a:	2b00      	cmp	r3, #0
 800621c:	d109      	bne.n	8006232 <xTaskCreateStatic+0x42>
 800621e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006222:	f383 8811 	msr	BASEPRI, r3
 8006226:	f3bf 8f6f 	isb	sy
 800622a:	f3bf 8f4f 	dsb	sy
 800622e:	61fb      	str	r3, [r7, #28]
 8006230:	e7fe      	b.n	8006230 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006232:	235c      	movs	r3, #92	; 0x5c
 8006234:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006236:	693b      	ldr	r3, [r7, #16]
 8006238:	2b5c      	cmp	r3, #92	; 0x5c
 800623a:	d009      	beq.n	8006250 <xTaskCreateStatic+0x60>
 800623c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006240:	f383 8811 	msr	BASEPRI, r3
 8006244:	f3bf 8f6f 	isb	sy
 8006248:	f3bf 8f4f 	dsb	sy
 800624c:	61bb      	str	r3, [r7, #24]
 800624e:	e7fe      	b.n	800624e <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006250:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006252:	2b00      	cmp	r3, #0
 8006254:	d01e      	beq.n	8006294 <xTaskCreateStatic+0xa4>
 8006256:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006258:	2b00      	cmp	r3, #0
 800625a:	d01b      	beq.n	8006294 <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800625c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800625e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006262:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006264:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006268:	2202      	movs	r2, #2
 800626a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800626e:	2300      	movs	r3, #0
 8006270:	9303      	str	r3, [sp, #12]
 8006272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006274:	9302      	str	r3, [sp, #8]
 8006276:	f107 0314 	add.w	r3, r7, #20
 800627a:	9301      	str	r3, [sp, #4]
 800627c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800627e:	9300      	str	r3, [sp, #0]
 8006280:	683b      	ldr	r3, [r7, #0]
 8006282:	687a      	ldr	r2, [r7, #4]
 8006284:	68b9      	ldr	r1, [r7, #8]
 8006286:	68f8      	ldr	r0, [r7, #12]
 8006288:	f000 f850 	bl	800632c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800628c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800628e:	f000 f8d3 	bl	8006438 <prvAddNewTaskToReadyList>
 8006292:	e001      	b.n	8006298 <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 8006294:	2300      	movs	r3, #0
 8006296:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006298:	697b      	ldr	r3, [r7, #20]
	}
 800629a:	4618      	mov	r0, r3
 800629c:	3728      	adds	r7, #40	; 0x28
 800629e:	46bd      	mov	sp, r7
 80062a0:	bd80      	pop	{r7, pc}

080062a2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80062a2:	b580      	push	{r7, lr}
 80062a4:	b08c      	sub	sp, #48	; 0x30
 80062a6:	af04      	add	r7, sp, #16
 80062a8:	60f8      	str	r0, [r7, #12]
 80062aa:	60b9      	str	r1, [r7, #8]
 80062ac:	603b      	str	r3, [r7, #0]
 80062ae:	4613      	mov	r3, r2
 80062b0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80062b2:	88fb      	ldrh	r3, [r7, #6]
 80062b4:	009b      	lsls	r3, r3, #2
 80062b6:	4618      	mov	r0, r3
 80062b8:	f001 fcd2 	bl	8007c60 <pvPortMalloc>
 80062bc:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80062be:	697b      	ldr	r3, [r7, #20]
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d00e      	beq.n	80062e2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80062c4:	205c      	movs	r0, #92	; 0x5c
 80062c6:	f001 fccb 	bl	8007c60 <pvPortMalloc>
 80062ca:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80062cc:	69fb      	ldr	r3, [r7, #28]
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d003      	beq.n	80062da <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80062d2:	69fb      	ldr	r3, [r7, #28]
 80062d4:	697a      	ldr	r2, [r7, #20]
 80062d6:	631a      	str	r2, [r3, #48]	; 0x30
 80062d8:	e005      	b.n	80062e6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80062da:	6978      	ldr	r0, [r7, #20]
 80062dc:	f001 fd82 	bl	8007de4 <vPortFree>
 80062e0:	e001      	b.n	80062e6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80062e2:	2300      	movs	r3, #0
 80062e4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80062e6:	69fb      	ldr	r3, [r7, #28]
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d017      	beq.n	800631c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80062ec:	69fb      	ldr	r3, [r7, #28]
 80062ee:	2200      	movs	r2, #0
 80062f0:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80062f4:	88fa      	ldrh	r2, [r7, #6]
 80062f6:	2300      	movs	r3, #0
 80062f8:	9303      	str	r3, [sp, #12]
 80062fa:	69fb      	ldr	r3, [r7, #28]
 80062fc:	9302      	str	r3, [sp, #8]
 80062fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006300:	9301      	str	r3, [sp, #4]
 8006302:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006304:	9300      	str	r3, [sp, #0]
 8006306:	683b      	ldr	r3, [r7, #0]
 8006308:	68b9      	ldr	r1, [r7, #8]
 800630a:	68f8      	ldr	r0, [r7, #12]
 800630c:	f000 f80e 	bl	800632c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006310:	69f8      	ldr	r0, [r7, #28]
 8006312:	f000 f891 	bl	8006438 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006316:	2301      	movs	r3, #1
 8006318:	61bb      	str	r3, [r7, #24]
 800631a:	e002      	b.n	8006322 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800631c:	f04f 33ff 	mov.w	r3, #4294967295
 8006320:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006322:	69bb      	ldr	r3, [r7, #24]
	}
 8006324:	4618      	mov	r0, r3
 8006326:	3720      	adds	r7, #32
 8006328:	46bd      	mov	sp, r7
 800632a:	bd80      	pop	{r7, pc}

0800632c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800632c:	b580      	push	{r7, lr}
 800632e:	b088      	sub	sp, #32
 8006330:	af00      	add	r7, sp, #0
 8006332:	60f8      	str	r0, [r7, #12]
 8006334:	60b9      	str	r1, [r7, #8]
 8006336:	607a      	str	r2, [r7, #4]
 8006338:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800633a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800633c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	009b      	lsls	r3, r3, #2
 8006342:	461a      	mov	r2, r3
 8006344:	21a5      	movs	r1, #165	; 0xa5
 8006346:	f002 ff6c 	bl	8009222 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800634a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800634c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006354:	3b01      	subs	r3, #1
 8006356:	009b      	lsls	r3, r3, #2
 8006358:	4413      	add	r3, r2
 800635a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800635c:	69bb      	ldr	r3, [r7, #24]
 800635e:	f023 0307 	bic.w	r3, r3, #7
 8006362:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006364:	69bb      	ldr	r3, [r7, #24]
 8006366:	f003 0307 	and.w	r3, r3, #7
 800636a:	2b00      	cmp	r3, #0
 800636c:	d009      	beq.n	8006382 <prvInitialiseNewTask+0x56>
 800636e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006372:	f383 8811 	msr	BASEPRI, r3
 8006376:	f3bf 8f6f 	isb	sy
 800637a:	f3bf 8f4f 	dsb	sy
 800637e:	617b      	str	r3, [r7, #20]
 8006380:	e7fe      	b.n	8006380 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006382:	2300      	movs	r3, #0
 8006384:	61fb      	str	r3, [r7, #28]
 8006386:	e012      	b.n	80063ae <prvInitialiseNewTask+0x82>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006388:	68ba      	ldr	r2, [r7, #8]
 800638a:	69fb      	ldr	r3, [r7, #28]
 800638c:	4413      	add	r3, r2
 800638e:	7819      	ldrb	r1, [r3, #0]
 8006390:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006392:	69fb      	ldr	r3, [r7, #28]
 8006394:	4413      	add	r3, r2
 8006396:	3334      	adds	r3, #52	; 0x34
 8006398:	460a      	mov	r2, r1
 800639a:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800639c:	68ba      	ldr	r2, [r7, #8]
 800639e:	69fb      	ldr	r3, [r7, #28]
 80063a0:	4413      	add	r3, r2
 80063a2:	781b      	ldrb	r3, [r3, #0]
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d006      	beq.n	80063b6 <prvInitialiseNewTask+0x8a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80063a8:	69fb      	ldr	r3, [r7, #28]
 80063aa:	3301      	adds	r3, #1
 80063ac:	61fb      	str	r3, [r7, #28]
 80063ae:	69fb      	ldr	r3, [r7, #28]
 80063b0:	2b0f      	cmp	r3, #15
 80063b2:	d9e9      	bls.n	8006388 <prvInitialiseNewTask+0x5c>
 80063b4:	e000      	b.n	80063b8 <prvInitialiseNewTask+0x8c>
		{
			break;
 80063b6:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80063b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063ba:	2200      	movs	r2, #0
 80063bc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80063c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063c2:	2b37      	cmp	r3, #55	; 0x37
 80063c4:	d901      	bls.n	80063ca <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80063c6:	2337      	movs	r3, #55	; 0x37
 80063c8:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80063ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80063ce:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80063d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80063d4:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80063d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063d8:	2200      	movs	r2, #0
 80063da:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80063dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063de:	3304      	adds	r3, #4
 80063e0:	4618      	mov	r0, r3
 80063e2:	f7fe ff07 	bl	80051f4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80063e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063e8:	3318      	adds	r3, #24
 80063ea:	4618      	mov	r0, r3
 80063ec:	f7fe ff02 	bl	80051f4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80063f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80063f4:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80063f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063f8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80063fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063fe:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006400:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006402:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006404:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006406:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006408:	2200      	movs	r2, #0
 800640a:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800640c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800640e:	2200      	movs	r2, #0
 8006410:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006414:	683a      	ldr	r2, [r7, #0]
 8006416:	68f9      	ldr	r1, [r7, #12]
 8006418:	69b8      	ldr	r0, [r7, #24]
 800641a:	f001 f9e1 	bl	80077e0 <pxPortInitialiseStack>
 800641e:	4602      	mov	r2, r0
 8006420:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006422:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8006424:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006426:	2b00      	cmp	r3, #0
 8006428:	d002      	beq.n	8006430 <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800642a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800642c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800642e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006430:	bf00      	nop
 8006432:	3720      	adds	r7, #32
 8006434:	46bd      	mov	sp, r7
 8006436:	bd80      	pop	{r7, pc}

08006438 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006438:	b580      	push	{r7, lr}
 800643a:	b082      	sub	sp, #8
 800643c:	af00      	add	r7, sp, #0
 800643e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006440:	f001 faf4 	bl	8007a2c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006444:	4b2d      	ldr	r3, [pc, #180]	; (80064fc <prvAddNewTaskToReadyList+0xc4>)
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	3301      	adds	r3, #1
 800644a:	4a2c      	ldr	r2, [pc, #176]	; (80064fc <prvAddNewTaskToReadyList+0xc4>)
 800644c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800644e:	4b2c      	ldr	r3, [pc, #176]	; (8006500 <prvAddNewTaskToReadyList+0xc8>)
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	2b00      	cmp	r3, #0
 8006454:	d109      	bne.n	800646a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006456:	4a2a      	ldr	r2, [pc, #168]	; (8006500 <prvAddNewTaskToReadyList+0xc8>)
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800645c:	4b27      	ldr	r3, [pc, #156]	; (80064fc <prvAddNewTaskToReadyList+0xc4>)
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	2b01      	cmp	r3, #1
 8006462:	d110      	bne.n	8006486 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006464:	f000 fc0e 	bl	8006c84 <prvInitialiseTaskLists>
 8006468:	e00d      	b.n	8006486 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800646a:	4b26      	ldr	r3, [pc, #152]	; (8006504 <prvAddNewTaskToReadyList+0xcc>)
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	2b00      	cmp	r3, #0
 8006470:	d109      	bne.n	8006486 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006472:	4b23      	ldr	r3, [pc, #140]	; (8006500 <prvAddNewTaskToReadyList+0xc8>)
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800647c:	429a      	cmp	r2, r3
 800647e:	d802      	bhi.n	8006486 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006480:	4a1f      	ldr	r2, [pc, #124]	; (8006500 <prvAddNewTaskToReadyList+0xc8>)
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006486:	4b20      	ldr	r3, [pc, #128]	; (8006508 <prvAddNewTaskToReadyList+0xd0>)
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	3301      	adds	r3, #1
 800648c:	4a1e      	ldr	r2, [pc, #120]	; (8006508 <prvAddNewTaskToReadyList+0xd0>)
 800648e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006490:	4b1d      	ldr	r3, [pc, #116]	; (8006508 <prvAddNewTaskToReadyList+0xd0>)
 8006492:	681a      	ldr	r2, [r3, #0]
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800649c:	4b1b      	ldr	r3, [pc, #108]	; (800650c <prvAddNewTaskToReadyList+0xd4>)
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	429a      	cmp	r2, r3
 80064a2:	d903      	bls.n	80064ac <prvAddNewTaskToReadyList+0x74>
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064a8:	4a18      	ldr	r2, [pc, #96]	; (800650c <prvAddNewTaskToReadyList+0xd4>)
 80064aa:	6013      	str	r3, [r2, #0]
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064b0:	4613      	mov	r3, r2
 80064b2:	009b      	lsls	r3, r3, #2
 80064b4:	4413      	add	r3, r2
 80064b6:	009b      	lsls	r3, r3, #2
 80064b8:	4a15      	ldr	r2, [pc, #84]	; (8006510 <prvAddNewTaskToReadyList+0xd8>)
 80064ba:	441a      	add	r2, r3
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	3304      	adds	r3, #4
 80064c0:	4619      	mov	r1, r3
 80064c2:	4610      	mov	r0, r2
 80064c4:	f7fe fea3 	bl	800520e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80064c8:	f001 fade 	bl	8007a88 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80064cc:	4b0d      	ldr	r3, [pc, #52]	; (8006504 <prvAddNewTaskToReadyList+0xcc>)
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d00e      	beq.n	80064f2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80064d4:	4b0a      	ldr	r3, [pc, #40]	; (8006500 <prvAddNewTaskToReadyList+0xc8>)
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064de:	429a      	cmp	r2, r3
 80064e0:	d207      	bcs.n	80064f2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80064e2:	4b0c      	ldr	r3, [pc, #48]	; (8006514 <prvAddNewTaskToReadyList+0xdc>)
 80064e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80064e8:	601a      	str	r2, [r3, #0]
 80064ea:	f3bf 8f4f 	dsb	sy
 80064ee:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80064f2:	bf00      	nop
 80064f4:	3708      	adds	r7, #8
 80064f6:	46bd      	mov	sp, r7
 80064f8:	bd80      	pop	{r7, pc}
 80064fa:	bf00      	nop
 80064fc:	20000c54 	.word	0x20000c54
 8006500:	20000780 	.word	0x20000780
 8006504:	20000c60 	.word	0x20000c60
 8006508:	20000c70 	.word	0x20000c70
 800650c:	20000c5c 	.word	0x20000c5c
 8006510:	20000784 	.word	0x20000784
 8006514:	e000ed04 	.word	0xe000ed04

08006518 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006518:	b580      	push	{r7, lr}
 800651a:	b084      	sub	sp, #16
 800651c:	af00      	add	r7, sp, #0
 800651e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006520:	2300      	movs	r3, #0
 8006522:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	2b00      	cmp	r3, #0
 8006528:	d016      	beq.n	8006558 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800652a:	4b13      	ldr	r3, [pc, #76]	; (8006578 <vTaskDelay+0x60>)
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	2b00      	cmp	r3, #0
 8006530:	d009      	beq.n	8006546 <vTaskDelay+0x2e>
 8006532:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006536:	f383 8811 	msr	BASEPRI, r3
 800653a:	f3bf 8f6f 	isb	sy
 800653e:	f3bf 8f4f 	dsb	sy
 8006542:	60bb      	str	r3, [r7, #8]
 8006544:	e7fe      	b.n	8006544 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8006546:	f000 f87f 	bl	8006648 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800654a:	2100      	movs	r1, #0
 800654c:	6878      	ldr	r0, [r7, #4]
 800654e:	f000 fde9 	bl	8007124 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006552:	f000 f887 	bl	8006664 <xTaskResumeAll>
 8006556:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	2b00      	cmp	r3, #0
 800655c:	d107      	bne.n	800656e <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 800655e:	4b07      	ldr	r3, [pc, #28]	; (800657c <vTaskDelay+0x64>)
 8006560:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006564:	601a      	str	r2, [r3, #0]
 8006566:	f3bf 8f4f 	dsb	sy
 800656a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800656e:	bf00      	nop
 8006570:	3710      	adds	r7, #16
 8006572:	46bd      	mov	sp, r7
 8006574:	bd80      	pop	{r7, pc}
 8006576:	bf00      	nop
 8006578:	20000c7c 	.word	0x20000c7c
 800657c:	e000ed04 	.word	0xe000ed04

08006580 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006580:	b580      	push	{r7, lr}
 8006582:	b08a      	sub	sp, #40	; 0x28
 8006584:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006586:	2300      	movs	r3, #0
 8006588:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800658a:	2300      	movs	r3, #0
 800658c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800658e:	463a      	mov	r2, r7
 8006590:	1d39      	adds	r1, r7, #4
 8006592:	f107 0308 	add.w	r3, r7, #8
 8006596:	4618      	mov	r0, r3
 8006598:	f7fe fdd8 	bl	800514c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800659c:	6839      	ldr	r1, [r7, #0]
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	68ba      	ldr	r2, [r7, #8]
 80065a2:	9202      	str	r2, [sp, #8]
 80065a4:	9301      	str	r3, [sp, #4]
 80065a6:	2300      	movs	r3, #0
 80065a8:	9300      	str	r3, [sp, #0]
 80065aa:	2300      	movs	r3, #0
 80065ac:	460a      	mov	r2, r1
 80065ae:	4920      	ldr	r1, [pc, #128]	; (8006630 <vTaskStartScheduler+0xb0>)
 80065b0:	4820      	ldr	r0, [pc, #128]	; (8006634 <vTaskStartScheduler+0xb4>)
 80065b2:	f7ff fe1d 	bl	80061f0 <xTaskCreateStatic>
 80065b6:	4602      	mov	r2, r0
 80065b8:	4b1f      	ldr	r3, [pc, #124]	; (8006638 <vTaskStartScheduler+0xb8>)
 80065ba:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80065bc:	4b1e      	ldr	r3, [pc, #120]	; (8006638 <vTaskStartScheduler+0xb8>)
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d002      	beq.n	80065ca <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80065c4:	2301      	movs	r3, #1
 80065c6:	617b      	str	r3, [r7, #20]
 80065c8:	e001      	b.n	80065ce <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80065ca:	2300      	movs	r3, #0
 80065cc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80065ce:	697b      	ldr	r3, [r7, #20]
 80065d0:	2b01      	cmp	r3, #1
 80065d2:	d102      	bne.n	80065da <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80065d4:	f000 fdfa 	bl	80071cc <xTimerCreateTimerTask>
 80065d8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80065da:	697b      	ldr	r3, [r7, #20]
 80065dc:	2b01      	cmp	r3, #1
 80065de:	d115      	bne.n	800660c <vTaskStartScheduler+0x8c>
 80065e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065e4:	f383 8811 	msr	BASEPRI, r3
 80065e8:	f3bf 8f6f 	isb	sy
 80065ec:	f3bf 8f4f 	dsb	sy
 80065f0:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80065f2:	4b12      	ldr	r3, [pc, #72]	; (800663c <vTaskStartScheduler+0xbc>)
 80065f4:	f04f 32ff 	mov.w	r2, #4294967295
 80065f8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80065fa:	4b11      	ldr	r3, [pc, #68]	; (8006640 <vTaskStartScheduler+0xc0>)
 80065fc:	2201      	movs	r2, #1
 80065fe:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8006600:	4b10      	ldr	r3, [pc, #64]	; (8006644 <vTaskStartScheduler+0xc4>)
 8006602:	2200      	movs	r2, #0
 8006604:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006606:	f001 f973 	bl	80078f0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800660a:	e00d      	b.n	8006628 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800660c:	697b      	ldr	r3, [r7, #20]
 800660e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006612:	d109      	bne.n	8006628 <vTaskStartScheduler+0xa8>
 8006614:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006618:	f383 8811 	msr	BASEPRI, r3
 800661c:	f3bf 8f6f 	isb	sy
 8006620:	f3bf 8f4f 	dsb	sy
 8006624:	60fb      	str	r3, [r7, #12]
 8006626:	e7fe      	b.n	8006626 <vTaskStartScheduler+0xa6>
}
 8006628:	bf00      	nop
 800662a:	3718      	adds	r7, #24
 800662c:	46bd      	mov	sp, r7
 800662e:	bd80      	pop	{r7, pc}
 8006630:	0800a71c 	.word	0x0800a71c
 8006634:	08006c55 	.word	0x08006c55
 8006638:	20000c78 	.word	0x20000c78
 800663c:	20000c74 	.word	0x20000c74
 8006640:	20000c60 	.word	0x20000c60
 8006644:	20000c58 	.word	0x20000c58

08006648 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006648:	b480      	push	{r7}
 800664a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800664c:	4b04      	ldr	r3, [pc, #16]	; (8006660 <vTaskSuspendAll+0x18>)
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	3301      	adds	r3, #1
 8006652:	4a03      	ldr	r2, [pc, #12]	; (8006660 <vTaskSuspendAll+0x18>)
 8006654:	6013      	str	r3, [r2, #0]
}
 8006656:	bf00      	nop
 8006658:	46bd      	mov	sp, r7
 800665a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800665e:	4770      	bx	lr
 8006660:	20000c7c 	.word	0x20000c7c

08006664 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006664:	b580      	push	{r7, lr}
 8006666:	b084      	sub	sp, #16
 8006668:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800666a:	2300      	movs	r3, #0
 800666c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800666e:	2300      	movs	r3, #0
 8006670:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006672:	4b41      	ldr	r3, [pc, #260]	; (8006778 <xTaskResumeAll+0x114>)
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	2b00      	cmp	r3, #0
 8006678:	d109      	bne.n	800668e <xTaskResumeAll+0x2a>
 800667a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800667e:	f383 8811 	msr	BASEPRI, r3
 8006682:	f3bf 8f6f 	isb	sy
 8006686:	f3bf 8f4f 	dsb	sy
 800668a:	603b      	str	r3, [r7, #0]
 800668c:	e7fe      	b.n	800668c <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800668e:	f001 f9cd 	bl	8007a2c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006692:	4b39      	ldr	r3, [pc, #228]	; (8006778 <xTaskResumeAll+0x114>)
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	3b01      	subs	r3, #1
 8006698:	4a37      	ldr	r2, [pc, #220]	; (8006778 <xTaskResumeAll+0x114>)
 800669a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800669c:	4b36      	ldr	r3, [pc, #216]	; (8006778 <xTaskResumeAll+0x114>)
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d162      	bne.n	800676a <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80066a4:	4b35      	ldr	r3, [pc, #212]	; (800677c <xTaskResumeAll+0x118>)
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d05e      	beq.n	800676a <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80066ac:	e02f      	b.n	800670e <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80066ae:	4b34      	ldr	r3, [pc, #208]	; (8006780 <xTaskResumeAll+0x11c>)
 80066b0:	68db      	ldr	r3, [r3, #12]
 80066b2:	68db      	ldr	r3, [r3, #12]
 80066b4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	3318      	adds	r3, #24
 80066ba:	4618      	mov	r0, r3
 80066bc:	f7fe fe04 	bl	80052c8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	3304      	adds	r3, #4
 80066c4:	4618      	mov	r0, r3
 80066c6:	f7fe fdff 	bl	80052c8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066ce:	4b2d      	ldr	r3, [pc, #180]	; (8006784 <xTaskResumeAll+0x120>)
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	429a      	cmp	r2, r3
 80066d4:	d903      	bls.n	80066de <xTaskResumeAll+0x7a>
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066da:	4a2a      	ldr	r2, [pc, #168]	; (8006784 <xTaskResumeAll+0x120>)
 80066dc:	6013      	str	r3, [r2, #0]
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066e2:	4613      	mov	r3, r2
 80066e4:	009b      	lsls	r3, r3, #2
 80066e6:	4413      	add	r3, r2
 80066e8:	009b      	lsls	r3, r3, #2
 80066ea:	4a27      	ldr	r2, [pc, #156]	; (8006788 <xTaskResumeAll+0x124>)
 80066ec:	441a      	add	r2, r3
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	3304      	adds	r3, #4
 80066f2:	4619      	mov	r1, r3
 80066f4:	4610      	mov	r0, r2
 80066f6:	f7fe fd8a 	bl	800520e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066fe:	4b23      	ldr	r3, [pc, #140]	; (800678c <xTaskResumeAll+0x128>)
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006704:	429a      	cmp	r2, r3
 8006706:	d302      	bcc.n	800670e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8006708:	4b21      	ldr	r3, [pc, #132]	; (8006790 <xTaskResumeAll+0x12c>)
 800670a:	2201      	movs	r2, #1
 800670c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800670e:	4b1c      	ldr	r3, [pc, #112]	; (8006780 <xTaskResumeAll+0x11c>)
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	2b00      	cmp	r3, #0
 8006714:	d1cb      	bne.n	80066ae <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	2b00      	cmp	r3, #0
 800671a:	d001      	beq.n	8006720 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800671c:	f000 fb4c 	bl	8006db8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8006720:	4b1c      	ldr	r3, [pc, #112]	; (8006794 <xTaskResumeAll+0x130>)
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	2b00      	cmp	r3, #0
 800672a:	d010      	beq.n	800674e <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800672c:	f000 f846 	bl	80067bc <xTaskIncrementTick>
 8006730:	4603      	mov	r3, r0
 8006732:	2b00      	cmp	r3, #0
 8006734:	d002      	beq.n	800673c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8006736:	4b16      	ldr	r3, [pc, #88]	; (8006790 <xTaskResumeAll+0x12c>)
 8006738:	2201      	movs	r2, #1
 800673a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	3b01      	subs	r3, #1
 8006740:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	2b00      	cmp	r3, #0
 8006746:	d1f1      	bne.n	800672c <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8006748:	4b12      	ldr	r3, [pc, #72]	; (8006794 <xTaskResumeAll+0x130>)
 800674a:	2200      	movs	r2, #0
 800674c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800674e:	4b10      	ldr	r3, [pc, #64]	; (8006790 <xTaskResumeAll+0x12c>)
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	2b00      	cmp	r3, #0
 8006754:	d009      	beq.n	800676a <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006756:	2301      	movs	r3, #1
 8006758:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800675a:	4b0f      	ldr	r3, [pc, #60]	; (8006798 <xTaskResumeAll+0x134>)
 800675c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006760:	601a      	str	r2, [r3, #0]
 8006762:	f3bf 8f4f 	dsb	sy
 8006766:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800676a:	f001 f98d 	bl	8007a88 <vPortExitCritical>

	return xAlreadyYielded;
 800676e:	68bb      	ldr	r3, [r7, #8]
}
 8006770:	4618      	mov	r0, r3
 8006772:	3710      	adds	r7, #16
 8006774:	46bd      	mov	sp, r7
 8006776:	bd80      	pop	{r7, pc}
 8006778:	20000c7c 	.word	0x20000c7c
 800677c:	20000c54 	.word	0x20000c54
 8006780:	20000c14 	.word	0x20000c14
 8006784:	20000c5c 	.word	0x20000c5c
 8006788:	20000784 	.word	0x20000784
 800678c:	20000780 	.word	0x20000780
 8006790:	20000c68 	.word	0x20000c68
 8006794:	20000c64 	.word	0x20000c64
 8006798:	e000ed04 	.word	0xe000ed04

0800679c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800679c:	b480      	push	{r7}
 800679e:	b083      	sub	sp, #12
 80067a0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80067a2:	4b05      	ldr	r3, [pc, #20]	; (80067b8 <xTaskGetTickCount+0x1c>)
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80067a8:	687b      	ldr	r3, [r7, #4]
}
 80067aa:	4618      	mov	r0, r3
 80067ac:	370c      	adds	r7, #12
 80067ae:	46bd      	mov	sp, r7
 80067b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b4:	4770      	bx	lr
 80067b6:	bf00      	nop
 80067b8:	20000c58 	.word	0x20000c58

080067bc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80067bc:	b580      	push	{r7, lr}
 80067be:	b086      	sub	sp, #24
 80067c0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80067c2:	2300      	movs	r3, #0
 80067c4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80067c6:	4b51      	ldr	r3, [pc, #324]	; (800690c <xTaskIncrementTick+0x150>)
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	f040 808d 	bne.w	80068ea <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80067d0:	4b4f      	ldr	r3, [pc, #316]	; (8006910 <xTaskIncrementTick+0x154>)
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	3301      	adds	r3, #1
 80067d6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80067d8:	4a4d      	ldr	r2, [pc, #308]	; (8006910 <xTaskIncrementTick+0x154>)
 80067da:	693b      	ldr	r3, [r7, #16]
 80067dc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80067de:	693b      	ldr	r3, [r7, #16]
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d11f      	bne.n	8006824 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 80067e4:	4b4b      	ldr	r3, [pc, #300]	; (8006914 <xTaskIncrementTick+0x158>)
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d009      	beq.n	8006802 <xTaskIncrementTick+0x46>
 80067ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067f2:	f383 8811 	msr	BASEPRI, r3
 80067f6:	f3bf 8f6f 	isb	sy
 80067fa:	f3bf 8f4f 	dsb	sy
 80067fe:	603b      	str	r3, [r7, #0]
 8006800:	e7fe      	b.n	8006800 <xTaskIncrementTick+0x44>
 8006802:	4b44      	ldr	r3, [pc, #272]	; (8006914 <xTaskIncrementTick+0x158>)
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	60fb      	str	r3, [r7, #12]
 8006808:	4b43      	ldr	r3, [pc, #268]	; (8006918 <xTaskIncrementTick+0x15c>)
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	4a41      	ldr	r2, [pc, #260]	; (8006914 <xTaskIncrementTick+0x158>)
 800680e:	6013      	str	r3, [r2, #0]
 8006810:	4a41      	ldr	r2, [pc, #260]	; (8006918 <xTaskIncrementTick+0x15c>)
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	6013      	str	r3, [r2, #0]
 8006816:	4b41      	ldr	r3, [pc, #260]	; (800691c <xTaskIncrementTick+0x160>)
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	3301      	adds	r3, #1
 800681c:	4a3f      	ldr	r2, [pc, #252]	; (800691c <xTaskIncrementTick+0x160>)
 800681e:	6013      	str	r3, [r2, #0]
 8006820:	f000 faca 	bl	8006db8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006824:	4b3e      	ldr	r3, [pc, #248]	; (8006920 <xTaskIncrementTick+0x164>)
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	693a      	ldr	r2, [r7, #16]
 800682a:	429a      	cmp	r2, r3
 800682c:	d34e      	bcc.n	80068cc <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800682e:	4b39      	ldr	r3, [pc, #228]	; (8006914 <xTaskIncrementTick+0x158>)
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	2b00      	cmp	r3, #0
 8006836:	d101      	bne.n	800683c <xTaskIncrementTick+0x80>
 8006838:	2301      	movs	r3, #1
 800683a:	e000      	b.n	800683e <xTaskIncrementTick+0x82>
 800683c:	2300      	movs	r3, #0
 800683e:	2b00      	cmp	r3, #0
 8006840:	d004      	beq.n	800684c <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006842:	4b37      	ldr	r3, [pc, #220]	; (8006920 <xTaskIncrementTick+0x164>)
 8006844:	f04f 32ff 	mov.w	r2, #4294967295
 8006848:	601a      	str	r2, [r3, #0]
					break;
 800684a:	e03f      	b.n	80068cc <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800684c:	4b31      	ldr	r3, [pc, #196]	; (8006914 <xTaskIncrementTick+0x158>)
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	68db      	ldr	r3, [r3, #12]
 8006852:	68db      	ldr	r3, [r3, #12]
 8006854:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006856:	68bb      	ldr	r3, [r7, #8]
 8006858:	685b      	ldr	r3, [r3, #4]
 800685a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800685c:	693a      	ldr	r2, [r7, #16]
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	429a      	cmp	r2, r3
 8006862:	d203      	bcs.n	800686c <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006864:	4a2e      	ldr	r2, [pc, #184]	; (8006920 <xTaskIncrementTick+0x164>)
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	6013      	str	r3, [r2, #0]
						break;
 800686a:	e02f      	b.n	80068cc <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800686c:	68bb      	ldr	r3, [r7, #8]
 800686e:	3304      	adds	r3, #4
 8006870:	4618      	mov	r0, r3
 8006872:	f7fe fd29 	bl	80052c8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006876:	68bb      	ldr	r3, [r7, #8]
 8006878:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800687a:	2b00      	cmp	r3, #0
 800687c:	d004      	beq.n	8006888 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800687e:	68bb      	ldr	r3, [r7, #8]
 8006880:	3318      	adds	r3, #24
 8006882:	4618      	mov	r0, r3
 8006884:	f7fe fd20 	bl	80052c8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006888:	68bb      	ldr	r3, [r7, #8]
 800688a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800688c:	4b25      	ldr	r3, [pc, #148]	; (8006924 <xTaskIncrementTick+0x168>)
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	429a      	cmp	r2, r3
 8006892:	d903      	bls.n	800689c <xTaskIncrementTick+0xe0>
 8006894:	68bb      	ldr	r3, [r7, #8]
 8006896:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006898:	4a22      	ldr	r2, [pc, #136]	; (8006924 <xTaskIncrementTick+0x168>)
 800689a:	6013      	str	r3, [r2, #0]
 800689c:	68bb      	ldr	r3, [r7, #8]
 800689e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068a0:	4613      	mov	r3, r2
 80068a2:	009b      	lsls	r3, r3, #2
 80068a4:	4413      	add	r3, r2
 80068a6:	009b      	lsls	r3, r3, #2
 80068a8:	4a1f      	ldr	r2, [pc, #124]	; (8006928 <xTaskIncrementTick+0x16c>)
 80068aa:	441a      	add	r2, r3
 80068ac:	68bb      	ldr	r3, [r7, #8]
 80068ae:	3304      	adds	r3, #4
 80068b0:	4619      	mov	r1, r3
 80068b2:	4610      	mov	r0, r2
 80068b4:	f7fe fcab 	bl	800520e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80068b8:	68bb      	ldr	r3, [r7, #8]
 80068ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068bc:	4b1b      	ldr	r3, [pc, #108]	; (800692c <xTaskIncrementTick+0x170>)
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068c2:	429a      	cmp	r2, r3
 80068c4:	d3b3      	bcc.n	800682e <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 80068c6:	2301      	movs	r3, #1
 80068c8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80068ca:	e7b0      	b.n	800682e <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80068cc:	4b17      	ldr	r3, [pc, #92]	; (800692c <xTaskIncrementTick+0x170>)
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068d2:	4915      	ldr	r1, [pc, #84]	; (8006928 <xTaskIncrementTick+0x16c>)
 80068d4:	4613      	mov	r3, r2
 80068d6:	009b      	lsls	r3, r3, #2
 80068d8:	4413      	add	r3, r2
 80068da:	009b      	lsls	r3, r3, #2
 80068dc:	440b      	add	r3, r1
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	2b01      	cmp	r3, #1
 80068e2:	d907      	bls.n	80068f4 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 80068e4:	2301      	movs	r3, #1
 80068e6:	617b      	str	r3, [r7, #20]
 80068e8:	e004      	b.n	80068f4 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80068ea:	4b11      	ldr	r3, [pc, #68]	; (8006930 <xTaskIncrementTick+0x174>)
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	3301      	adds	r3, #1
 80068f0:	4a0f      	ldr	r2, [pc, #60]	; (8006930 <xTaskIncrementTick+0x174>)
 80068f2:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80068f4:	4b0f      	ldr	r3, [pc, #60]	; (8006934 <xTaskIncrementTick+0x178>)
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d001      	beq.n	8006900 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 80068fc:	2301      	movs	r3, #1
 80068fe:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8006900:	697b      	ldr	r3, [r7, #20]
}
 8006902:	4618      	mov	r0, r3
 8006904:	3718      	adds	r7, #24
 8006906:	46bd      	mov	sp, r7
 8006908:	bd80      	pop	{r7, pc}
 800690a:	bf00      	nop
 800690c:	20000c7c 	.word	0x20000c7c
 8006910:	20000c58 	.word	0x20000c58
 8006914:	20000c0c 	.word	0x20000c0c
 8006918:	20000c10 	.word	0x20000c10
 800691c:	20000c6c 	.word	0x20000c6c
 8006920:	20000c74 	.word	0x20000c74
 8006924:	20000c5c 	.word	0x20000c5c
 8006928:	20000784 	.word	0x20000784
 800692c:	20000780 	.word	0x20000780
 8006930:	20000c64 	.word	0x20000c64
 8006934:	20000c68 	.word	0x20000c68

08006938 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006938:	b480      	push	{r7}
 800693a:	b085      	sub	sp, #20
 800693c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800693e:	4b27      	ldr	r3, [pc, #156]	; (80069dc <vTaskSwitchContext+0xa4>)
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	2b00      	cmp	r3, #0
 8006944:	d003      	beq.n	800694e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006946:	4b26      	ldr	r3, [pc, #152]	; (80069e0 <vTaskSwitchContext+0xa8>)
 8006948:	2201      	movs	r2, #1
 800694a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800694c:	e040      	b.n	80069d0 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 800694e:	4b24      	ldr	r3, [pc, #144]	; (80069e0 <vTaskSwitchContext+0xa8>)
 8006950:	2200      	movs	r2, #0
 8006952:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8006954:	4b23      	ldr	r3, [pc, #140]	; (80069e4 <vTaskSwitchContext+0xac>)
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	60fb      	str	r3, [r7, #12]
 800695a:	e00f      	b.n	800697c <vTaskSwitchContext+0x44>
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	2b00      	cmp	r3, #0
 8006960:	d109      	bne.n	8006976 <vTaskSwitchContext+0x3e>
 8006962:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006966:	f383 8811 	msr	BASEPRI, r3
 800696a:	f3bf 8f6f 	isb	sy
 800696e:	f3bf 8f4f 	dsb	sy
 8006972:	607b      	str	r3, [r7, #4]
 8006974:	e7fe      	b.n	8006974 <vTaskSwitchContext+0x3c>
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	3b01      	subs	r3, #1
 800697a:	60fb      	str	r3, [r7, #12]
 800697c:	491a      	ldr	r1, [pc, #104]	; (80069e8 <vTaskSwitchContext+0xb0>)
 800697e:	68fa      	ldr	r2, [r7, #12]
 8006980:	4613      	mov	r3, r2
 8006982:	009b      	lsls	r3, r3, #2
 8006984:	4413      	add	r3, r2
 8006986:	009b      	lsls	r3, r3, #2
 8006988:	440b      	add	r3, r1
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	2b00      	cmp	r3, #0
 800698e:	d0e5      	beq.n	800695c <vTaskSwitchContext+0x24>
 8006990:	68fa      	ldr	r2, [r7, #12]
 8006992:	4613      	mov	r3, r2
 8006994:	009b      	lsls	r3, r3, #2
 8006996:	4413      	add	r3, r2
 8006998:	009b      	lsls	r3, r3, #2
 800699a:	4a13      	ldr	r2, [pc, #76]	; (80069e8 <vTaskSwitchContext+0xb0>)
 800699c:	4413      	add	r3, r2
 800699e:	60bb      	str	r3, [r7, #8]
 80069a0:	68bb      	ldr	r3, [r7, #8]
 80069a2:	685b      	ldr	r3, [r3, #4]
 80069a4:	685a      	ldr	r2, [r3, #4]
 80069a6:	68bb      	ldr	r3, [r7, #8]
 80069a8:	605a      	str	r2, [r3, #4]
 80069aa:	68bb      	ldr	r3, [r7, #8]
 80069ac:	685a      	ldr	r2, [r3, #4]
 80069ae:	68bb      	ldr	r3, [r7, #8]
 80069b0:	3308      	adds	r3, #8
 80069b2:	429a      	cmp	r2, r3
 80069b4:	d104      	bne.n	80069c0 <vTaskSwitchContext+0x88>
 80069b6:	68bb      	ldr	r3, [r7, #8]
 80069b8:	685b      	ldr	r3, [r3, #4]
 80069ba:	685a      	ldr	r2, [r3, #4]
 80069bc:	68bb      	ldr	r3, [r7, #8]
 80069be:	605a      	str	r2, [r3, #4]
 80069c0:	68bb      	ldr	r3, [r7, #8]
 80069c2:	685b      	ldr	r3, [r3, #4]
 80069c4:	68db      	ldr	r3, [r3, #12]
 80069c6:	4a09      	ldr	r2, [pc, #36]	; (80069ec <vTaskSwitchContext+0xb4>)
 80069c8:	6013      	str	r3, [r2, #0]
 80069ca:	4a06      	ldr	r2, [pc, #24]	; (80069e4 <vTaskSwitchContext+0xac>)
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	6013      	str	r3, [r2, #0]
}
 80069d0:	bf00      	nop
 80069d2:	3714      	adds	r7, #20
 80069d4:	46bd      	mov	sp, r7
 80069d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069da:	4770      	bx	lr
 80069dc:	20000c7c 	.word	0x20000c7c
 80069e0:	20000c68 	.word	0x20000c68
 80069e4:	20000c5c 	.word	0x20000c5c
 80069e8:	20000784 	.word	0x20000784
 80069ec:	20000780 	.word	0x20000780

080069f0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80069f0:	b580      	push	{r7, lr}
 80069f2:	b084      	sub	sp, #16
 80069f4:	af00      	add	r7, sp, #0
 80069f6:	6078      	str	r0, [r7, #4]
 80069f8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d109      	bne.n	8006a14 <vTaskPlaceOnEventList+0x24>
 8006a00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a04:	f383 8811 	msr	BASEPRI, r3
 8006a08:	f3bf 8f6f 	isb	sy
 8006a0c:	f3bf 8f4f 	dsb	sy
 8006a10:	60fb      	str	r3, [r7, #12]
 8006a12:	e7fe      	b.n	8006a12 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006a14:	4b07      	ldr	r3, [pc, #28]	; (8006a34 <vTaskPlaceOnEventList+0x44>)
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	3318      	adds	r3, #24
 8006a1a:	4619      	mov	r1, r3
 8006a1c:	6878      	ldr	r0, [r7, #4]
 8006a1e:	f7fe fc1a 	bl	8005256 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006a22:	2101      	movs	r1, #1
 8006a24:	6838      	ldr	r0, [r7, #0]
 8006a26:	f000 fb7d 	bl	8007124 <prvAddCurrentTaskToDelayedList>
}
 8006a2a:	bf00      	nop
 8006a2c:	3710      	adds	r7, #16
 8006a2e:	46bd      	mov	sp, r7
 8006a30:	bd80      	pop	{r7, pc}
 8006a32:	bf00      	nop
 8006a34:	20000780 	.word	0x20000780

08006a38 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006a38:	b580      	push	{r7, lr}
 8006a3a:	b086      	sub	sp, #24
 8006a3c:	af00      	add	r7, sp, #0
 8006a3e:	60f8      	str	r0, [r7, #12]
 8006a40:	60b9      	str	r1, [r7, #8]
 8006a42:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d109      	bne.n	8006a5e <vTaskPlaceOnEventListRestricted+0x26>
 8006a4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a4e:	f383 8811 	msr	BASEPRI, r3
 8006a52:	f3bf 8f6f 	isb	sy
 8006a56:	f3bf 8f4f 	dsb	sy
 8006a5a:	617b      	str	r3, [r7, #20]
 8006a5c:	e7fe      	b.n	8006a5c <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006a5e:	4b0a      	ldr	r3, [pc, #40]	; (8006a88 <vTaskPlaceOnEventListRestricted+0x50>)
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	3318      	adds	r3, #24
 8006a64:	4619      	mov	r1, r3
 8006a66:	68f8      	ldr	r0, [r7, #12]
 8006a68:	f7fe fbd1 	bl	800520e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d002      	beq.n	8006a78 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 8006a72:	f04f 33ff 	mov.w	r3, #4294967295
 8006a76:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006a78:	6879      	ldr	r1, [r7, #4]
 8006a7a:	68b8      	ldr	r0, [r7, #8]
 8006a7c:	f000 fb52 	bl	8007124 <prvAddCurrentTaskToDelayedList>
	}
 8006a80:	bf00      	nop
 8006a82:	3718      	adds	r7, #24
 8006a84:	46bd      	mov	sp, r7
 8006a86:	bd80      	pop	{r7, pc}
 8006a88:	20000780 	.word	0x20000780

08006a8c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006a8c:	b580      	push	{r7, lr}
 8006a8e:	b086      	sub	sp, #24
 8006a90:	af00      	add	r7, sp, #0
 8006a92:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	68db      	ldr	r3, [r3, #12]
 8006a98:	68db      	ldr	r3, [r3, #12]
 8006a9a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006a9c:	693b      	ldr	r3, [r7, #16]
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d109      	bne.n	8006ab6 <xTaskRemoveFromEventList+0x2a>
 8006aa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006aa6:	f383 8811 	msr	BASEPRI, r3
 8006aaa:	f3bf 8f6f 	isb	sy
 8006aae:	f3bf 8f4f 	dsb	sy
 8006ab2:	60fb      	str	r3, [r7, #12]
 8006ab4:	e7fe      	b.n	8006ab4 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006ab6:	693b      	ldr	r3, [r7, #16]
 8006ab8:	3318      	adds	r3, #24
 8006aba:	4618      	mov	r0, r3
 8006abc:	f7fe fc04 	bl	80052c8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006ac0:	4b1d      	ldr	r3, [pc, #116]	; (8006b38 <xTaskRemoveFromEventList+0xac>)
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d11d      	bne.n	8006b04 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006ac8:	693b      	ldr	r3, [r7, #16]
 8006aca:	3304      	adds	r3, #4
 8006acc:	4618      	mov	r0, r3
 8006ace:	f7fe fbfb 	bl	80052c8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006ad2:	693b      	ldr	r3, [r7, #16]
 8006ad4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ad6:	4b19      	ldr	r3, [pc, #100]	; (8006b3c <xTaskRemoveFromEventList+0xb0>)
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	429a      	cmp	r2, r3
 8006adc:	d903      	bls.n	8006ae6 <xTaskRemoveFromEventList+0x5a>
 8006ade:	693b      	ldr	r3, [r7, #16]
 8006ae0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ae2:	4a16      	ldr	r2, [pc, #88]	; (8006b3c <xTaskRemoveFromEventList+0xb0>)
 8006ae4:	6013      	str	r3, [r2, #0]
 8006ae6:	693b      	ldr	r3, [r7, #16]
 8006ae8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006aea:	4613      	mov	r3, r2
 8006aec:	009b      	lsls	r3, r3, #2
 8006aee:	4413      	add	r3, r2
 8006af0:	009b      	lsls	r3, r3, #2
 8006af2:	4a13      	ldr	r2, [pc, #76]	; (8006b40 <xTaskRemoveFromEventList+0xb4>)
 8006af4:	441a      	add	r2, r3
 8006af6:	693b      	ldr	r3, [r7, #16]
 8006af8:	3304      	adds	r3, #4
 8006afa:	4619      	mov	r1, r3
 8006afc:	4610      	mov	r0, r2
 8006afe:	f7fe fb86 	bl	800520e <vListInsertEnd>
 8006b02:	e005      	b.n	8006b10 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006b04:	693b      	ldr	r3, [r7, #16]
 8006b06:	3318      	adds	r3, #24
 8006b08:	4619      	mov	r1, r3
 8006b0a:	480e      	ldr	r0, [pc, #56]	; (8006b44 <xTaskRemoveFromEventList+0xb8>)
 8006b0c:	f7fe fb7f 	bl	800520e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006b10:	693b      	ldr	r3, [r7, #16]
 8006b12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b14:	4b0c      	ldr	r3, [pc, #48]	; (8006b48 <xTaskRemoveFromEventList+0xbc>)
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b1a:	429a      	cmp	r2, r3
 8006b1c:	d905      	bls.n	8006b2a <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006b1e:	2301      	movs	r3, #1
 8006b20:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006b22:	4b0a      	ldr	r3, [pc, #40]	; (8006b4c <xTaskRemoveFromEventList+0xc0>)
 8006b24:	2201      	movs	r2, #1
 8006b26:	601a      	str	r2, [r3, #0]
 8006b28:	e001      	b.n	8006b2e <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8006b2a:	2300      	movs	r3, #0
 8006b2c:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8006b2e:	697b      	ldr	r3, [r7, #20]
}
 8006b30:	4618      	mov	r0, r3
 8006b32:	3718      	adds	r7, #24
 8006b34:	46bd      	mov	sp, r7
 8006b36:	bd80      	pop	{r7, pc}
 8006b38:	20000c7c 	.word	0x20000c7c
 8006b3c:	20000c5c 	.word	0x20000c5c
 8006b40:	20000784 	.word	0x20000784
 8006b44:	20000c14 	.word	0x20000c14
 8006b48:	20000780 	.word	0x20000780
 8006b4c:	20000c68 	.word	0x20000c68

08006b50 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006b50:	b480      	push	{r7}
 8006b52:	b083      	sub	sp, #12
 8006b54:	af00      	add	r7, sp, #0
 8006b56:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006b58:	4b06      	ldr	r3, [pc, #24]	; (8006b74 <vTaskInternalSetTimeOutState+0x24>)
 8006b5a:	681a      	ldr	r2, [r3, #0]
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006b60:	4b05      	ldr	r3, [pc, #20]	; (8006b78 <vTaskInternalSetTimeOutState+0x28>)
 8006b62:	681a      	ldr	r2, [r3, #0]
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	605a      	str	r2, [r3, #4]
}
 8006b68:	bf00      	nop
 8006b6a:	370c      	adds	r7, #12
 8006b6c:	46bd      	mov	sp, r7
 8006b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b72:	4770      	bx	lr
 8006b74:	20000c6c 	.word	0x20000c6c
 8006b78:	20000c58 	.word	0x20000c58

08006b7c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006b7c:	b580      	push	{r7, lr}
 8006b7e:	b088      	sub	sp, #32
 8006b80:	af00      	add	r7, sp, #0
 8006b82:	6078      	str	r0, [r7, #4]
 8006b84:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d109      	bne.n	8006ba0 <xTaskCheckForTimeOut+0x24>
 8006b8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b90:	f383 8811 	msr	BASEPRI, r3
 8006b94:	f3bf 8f6f 	isb	sy
 8006b98:	f3bf 8f4f 	dsb	sy
 8006b9c:	613b      	str	r3, [r7, #16]
 8006b9e:	e7fe      	b.n	8006b9e <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8006ba0:	683b      	ldr	r3, [r7, #0]
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d109      	bne.n	8006bba <xTaskCheckForTimeOut+0x3e>
 8006ba6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006baa:	f383 8811 	msr	BASEPRI, r3
 8006bae:	f3bf 8f6f 	isb	sy
 8006bb2:	f3bf 8f4f 	dsb	sy
 8006bb6:	60fb      	str	r3, [r7, #12]
 8006bb8:	e7fe      	b.n	8006bb8 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8006bba:	f000 ff37 	bl	8007a2c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006bbe:	4b1d      	ldr	r3, [pc, #116]	; (8006c34 <xTaskCheckForTimeOut+0xb8>)
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	685b      	ldr	r3, [r3, #4]
 8006bc8:	69ba      	ldr	r2, [r7, #24]
 8006bca:	1ad3      	subs	r3, r2, r3
 8006bcc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006bce:	683b      	ldr	r3, [r7, #0]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bd6:	d102      	bne.n	8006bde <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006bd8:	2300      	movs	r3, #0
 8006bda:	61fb      	str	r3, [r7, #28]
 8006bdc:	e023      	b.n	8006c26 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681a      	ldr	r2, [r3, #0]
 8006be2:	4b15      	ldr	r3, [pc, #84]	; (8006c38 <xTaskCheckForTimeOut+0xbc>)
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	429a      	cmp	r2, r3
 8006be8:	d007      	beq.n	8006bfa <xTaskCheckForTimeOut+0x7e>
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	685b      	ldr	r3, [r3, #4]
 8006bee:	69ba      	ldr	r2, [r7, #24]
 8006bf0:	429a      	cmp	r2, r3
 8006bf2:	d302      	bcc.n	8006bfa <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006bf4:	2301      	movs	r3, #1
 8006bf6:	61fb      	str	r3, [r7, #28]
 8006bf8:	e015      	b.n	8006c26 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006bfa:	683b      	ldr	r3, [r7, #0]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	697a      	ldr	r2, [r7, #20]
 8006c00:	429a      	cmp	r2, r3
 8006c02:	d20b      	bcs.n	8006c1c <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006c04:	683b      	ldr	r3, [r7, #0]
 8006c06:	681a      	ldr	r2, [r3, #0]
 8006c08:	697b      	ldr	r3, [r7, #20]
 8006c0a:	1ad2      	subs	r2, r2, r3
 8006c0c:	683b      	ldr	r3, [r7, #0]
 8006c0e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006c10:	6878      	ldr	r0, [r7, #4]
 8006c12:	f7ff ff9d 	bl	8006b50 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006c16:	2300      	movs	r3, #0
 8006c18:	61fb      	str	r3, [r7, #28]
 8006c1a:	e004      	b.n	8006c26 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8006c1c:	683b      	ldr	r3, [r7, #0]
 8006c1e:	2200      	movs	r2, #0
 8006c20:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006c22:	2301      	movs	r3, #1
 8006c24:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006c26:	f000 ff2f 	bl	8007a88 <vPortExitCritical>

	return xReturn;
 8006c2a:	69fb      	ldr	r3, [r7, #28]
}
 8006c2c:	4618      	mov	r0, r3
 8006c2e:	3720      	adds	r7, #32
 8006c30:	46bd      	mov	sp, r7
 8006c32:	bd80      	pop	{r7, pc}
 8006c34:	20000c58 	.word	0x20000c58
 8006c38:	20000c6c 	.word	0x20000c6c

08006c3c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006c3c:	b480      	push	{r7}
 8006c3e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006c40:	4b03      	ldr	r3, [pc, #12]	; (8006c50 <vTaskMissedYield+0x14>)
 8006c42:	2201      	movs	r2, #1
 8006c44:	601a      	str	r2, [r3, #0]
}
 8006c46:	bf00      	nop
 8006c48:	46bd      	mov	sp, r7
 8006c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c4e:	4770      	bx	lr
 8006c50:	20000c68 	.word	0x20000c68

08006c54 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006c54:	b580      	push	{r7, lr}
 8006c56:	b082      	sub	sp, #8
 8006c58:	af00      	add	r7, sp, #0
 8006c5a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006c5c:	f000 f852 	bl	8006d04 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006c60:	4b06      	ldr	r3, [pc, #24]	; (8006c7c <prvIdleTask+0x28>)
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	2b01      	cmp	r3, #1
 8006c66:	d9f9      	bls.n	8006c5c <prvIdleTask+0x8>
			{
				taskYIELD();
 8006c68:	4b05      	ldr	r3, [pc, #20]	; (8006c80 <prvIdleTask+0x2c>)
 8006c6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c6e:	601a      	str	r2, [r3, #0]
 8006c70:	f3bf 8f4f 	dsb	sy
 8006c74:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006c78:	e7f0      	b.n	8006c5c <prvIdleTask+0x8>
 8006c7a:	bf00      	nop
 8006c7c:	20000784 	.word	0x20000784
 8006c80:	e000ed04 	.word	0xe000ed04

08006c84 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006c84:	b580      	push	{r7, lr}
 8006c86:	b082      	sub	sp, #8
 8006c88:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006c8a:	2300      	movs	r3, #0
 8006c8c:	607b      	str	r3, [r7, #4]
 8006c8e:	e00c      	b.n	8006caa <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006c90:	687a      	ldr	r2, [r7, #4]
 8006c92:	4613      	mov	r3, r2
 8006c94:	009b      	lsls	r3, r3, #2
 8006c96:	4413      	add	r3, r2
 8006c98:	009b      	lsls	r3, r3, #2
 8006c9a:	4a12      	ldr	r2, [pc, #72]	; (8006ce4 <prvInitialiseTaskLists+0x60>)
 8006c9c:	4413      	add	r3, r2
 8006c9e:	4618      	mov	r0, r3
 8006ca0:	f7fe fa88 	bl	80051b4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	3301      	adds	r3, #1
 8006ca8:	607b      	str	r3, [r7, #4]
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	2b37      	cmp	r3, #55	; 0x37
 8006cae:	d9ef      	bls.n	8006c90 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006cb0:	480d      	ldr	r0, [pc, #52]	; (8006ce8 <prvInitialiseTaskLists+0x64>)
 8006cb2:	f7fe fa7f 	bl	80051b4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006cb6:	480d      	ldr	r0, [pc, #52]	; (8006cec <prvInitialiseTaskLists+0x68>)
 8006cb8:	f7fe fa7c 	bl	80051b4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006cbc:	480c      	ldr	r0, [pc, #48]	; (8006cf0 <prvInitialiseTaskLists+0x6c>)
 8006cbe:	f7fe fa79 	bl	80051b4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006cc2:	480c      	ldr	r0, [pc, #48]	; (8006cf4 <prvInitialiseTaskLists+0x70>)
 8006cc4:	f7fe fa76 	bl	80051b4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006cc8:	480b      	ldr	r0, [pc, #44]	; (8006cf8 <prvInitialiseTaskLists+0x74>)
 8006cca:	f7fe fa73 	bl	80051b4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006cce:	4b0b      	ldr	r3, [pc, #44]	; (8006cfc <prvInitialiseTaskLists+0x78>)
 8006cd0:	4a05      	ldr	r2, [pc, #20]	; (8006ce8 <prvInitialiseTaskLists+0x64>)
 8006cd2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006cd4:	4b0a      	ldr	r3, [pc, #40]	; (8006d00 <prvInitialiseTaskLists+0x7c>)
 8006cd6:	4a05      	ldr	r2, [pc, #20]	; (8006cec <prvInitialiseTaskLists+0x68>)
 8006cd8:	601a      	str	r2, [r3, #0]
}
 8006cda:	bf00      	nop
 8006cdc:	3708      	adds	r7, #8
 8006cde:	46bd      	mov	sp, r7
 8006ce0:	bd80      	pop	{r7, pc}
 8006ce2:	bf00      	nop
 8006ce4:	20000784 	.word	0x20000784
 8006ce8:	20000be4 	.word	0x20000be4
 8006cec:	20000bf8 	.word	0x20000bf8
 8006cf0:	20000c14 	.word	0x20000c14
 8006cf4:	20000c28 	.word	0x20000c28
 8006cf8:	20000c40 	.word	0x20000c40
 8006cfc:	20000c0c 	.word	0x20000c0c
 8006d00:	20000c10 	.word	0x20000c10

08006d04 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006d04:	b580      	push	{r7, lr}
 8006d06:	b082      	sub	sp, #8
 8006d08:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006d0a:	e019      	b.n	8006d40 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006d0c:	f000 fe8e 	bl	8007a2c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8006d10:	4b0f      	ldr	r3, [pc, #60]	; (8006d50 <prvCheckTasksWaitingTermination+0x4c>)
 8006d12:	68db      	ldr	r3, [r3, #12]
 8006d14:	68db      	ldr	r3, [r3, #12]
 8006d16:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	3304      	adds	r3, #4
 8006d1c:	4618      	mov	r0, r3
 8006d1e:	f7fe fad3 	bl	80052c8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006d22:	4b0c      	ldr	r3, [pc, #48]	; (8006d54 <prvCheckTasksWaitingTermination+0x50>)
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	3b01      	subs	r3, #1
 8006d28:	4a0a      	ldr	r2, [pc, #40]	; (8006d54 <prvCheckTasksWaitingTermination+0x50>)
 8006d2a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006d2c:	4b0a      	ldr	r3, [pc, #40]	; (8006d58 <prvCheckTasksWaitingTermination+0x54>)
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	3b01      	subs	r3, #1
 8006d32:	4a09      	ldr	r2, [pc, #36]	; (8006d58 <prvCheckTasksWaitingTermination+0x54>)
 8006d34:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006d36:	f000 fea7 	bl	8007a88 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006d3a:	6878      	ldr	r0, [r7, #4]
 8006d3c:	f000 f80e 	bl	8006d5c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006d40:	4b05      	ldr	r3, [pc, #20]	; (8006d58 <prvCheckTasksWaitingTermination+0x54>)
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d1e1      	bne.n	8006d0c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006d48:	bf00      	nop
 8006d4a:	3708      	adds	r7, #8
 8006d4c:	46bd      	mov	sp, r7
 8006d4e:	bd80      	pop	{r7, pc}
 8006d50:	20000c28 	.word	0x20000c28
 8006d54:	20000c54 	.word	0x20000c54
 8006d58:	20000c3c 	.word	0x20000c3c

08006d5c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006d5c:	b580      	push	{r7, lr}
 8006d5e:	b084      	sub	sp, #16
 8006d60:	af00      	add	r7, sp, #0
 8006d62:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d108      	bne.n	8006d80 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d72:	4618      	mov	r0, r3
 8006d74:	f001 f836 	bl	8007de4 <vPortFree>
				vPortFree( pxTCB );
 8006d78:	6878      	ldr	r0, [r7, #4]
 8006d7a:	f001 f833 	bl	8007de4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006d7e:	e017      	b.n	8006db0 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006d86:	2b01      	cmp	r3, #1
 8006d88:	d103      	bne.n	8006d92 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8006d8a:	6878      	ldr	r0, [r7, #4]
 8006d8c:	f001 f82a 	bl	8007de4 <vPortFree>
	}
 8006d90:	e00e      	b.n	8006db0 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006d98:	2b02      	cmp	r3, #2
 8006d9a:	d009      	beq.n	8006db0 <prvDeleteTCB+0x54>
 8006d9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006da0:	f383 8811 	msr	BASEPRI, r3
 8006da4:	f3bf 8f6f 	isb	sy
 8006da8:	f3bf 8f4f 	dsb	sy
 8006dac:	60fb      	str	r3, [r7, #12]
 8006dae:	e7fe      	b.n	8006dae <prvDeleteTCB+0x52>
	}
 8006db0:	bf00      	nop
 8006db2:	3710      	adds	r7, #16
 8006db4:	46bd      	mov	sp, r7
 8006db6:	bd80      	pop	{r7, pc}

08006db8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006db8:	b480      	push	{r7}
 8006dba:	b083      	sub	sp, #12
 8006dbc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006dbe:	4b0f      	ldr	r3, [pc, #60]	; (8006dfc <prvResetNextTaskUnblockTime+0x44>)
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d101      	bne.n	8006dcc <prvResetNextTaskUnblockTime+0x14>
 8006dc8:	2301      	movs	r3, #1
 8006dca:	e000      	b.n	8006dce <prvResetNextTaskUnblockTime+0x16>
 8006dcc:	2300      	movs	r3, #0
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d004      	beq.n	8006ddc <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006dd2:	4b0b      	ldr	r3, [pc, #44]	; (8006e00 <prvResetNextTaskUnblockTime+0x48>)
 8006dd4:	f04f 32ff 	mov.w	r2, #4294967295
 8006dd8:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006dda:	e008      	b.n	8006dee <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006ddc:	4b07      	ldr	r3, [pc, #28]	; (8006dfc <prvResetNextTaskUnblockTime+0x44>)
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	68db      	ldr	r3, [r3, #12]
 8006de2:	68db      	ldr	r3, [r3, #12]
 8006de4:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	685b      	ldr	r3, [r3, #4]
 8006dea:	4a05      	ldr	r2, [pc, #20]	; (8006e00 <prvResetNextTaskUnblockTime+0x48>)
 8006dec:	6013      	str	r3, [r2, #0]
}
 8006dee:	bf00      	nop
 8006df0:	370c      	adds	r7, #12
 8006df2:	46bd      	mov	sp, r7
 8006df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df8:	4770      	bx	lr
 8006dfa:	bf00      	nop
 8006dfc:	20000c0c 	.word	0x20000c0c
 8006e00:	20000c74 	.word	0x20000c74

08006e04 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006e04:	b480      	push	{r7}
 8006e06:	b083      	sub	sp, #12
 8006e08:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006e0a:	4b0b      	ldr	r3, [pc, #44]	; (8006e38 <xTaskGetSchedulerState+0x34>)
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d102      	bne.n	8006e18 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006e12:	2301      	movs	r3, #1
 8006e14:	607b      	str	r3, [r7, #4]
 8006e16:	e008      	b.n	8006e2a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006e18:	4b08      	ldr	r3, [pc, #32]	; (8006e3c <xTaskGetSchedulerState+0x38>)
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d102      	bne.n	8006e26 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006e20:	2302      	movs	r3, #2
 8006e22:	607b      	str	r3, [r7, #4]
 8006e24:	e001      	b.n	8006e2a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006e26:	2300      	movs	r3, #0
 8006e28:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006e2a:	687b      	ldr	r3, [r7, #4]
	}
 8006e2c:	4618      	mov	r0, r3
 8006e2e:	370c      	adds	r7, #12
 8006e30:	46bd      	mov	sp, r7
 8006e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e36:	4770      	bx	lr
 8006e38:	20000c60 	.word	0x20000c60
 8006e3c:	20000c7c 	.word	0x20000c7c

08006e40 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8006e40:	b580      	push	{r7, lr}
 8006e42:	b084      	sub	sp, #16
 8006e44:	af00      	add	r7, sp, #0
 8006e46:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8006e4c:	2300      	movs	r3, #0
 8006e4e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d056      	beq.n	8006f04 <xTaskPriorityInherit+0xc4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8006e56:	68bb      	ldr	r3, [r7, #8]
 8006e58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e5a:	4b2d      	ldr	r3, [pc, #180]	; (8006f10 <xTaskPriorityInherit+0xd0>)
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e60:	429a      	cmp	r2, r3
 8006e62:	d246      	bcs.n	8006ef2 <xTaskPriorityInherit+0xb2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006e64:	68bb      	ldr	r3, [r7, #8]
 8006e66:	699b      	ldr	r3, [r3, #24]
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	db06      	blt.n	8006e7a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006e6c:	4b28      	ldr	r3, [pc, #160]	; (8006f10 <xTaskPriorityInherit+0xd0>)
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e72:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006e76:	68bb      	ldr	r3, [r7, #8]
 8006e78:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8006e7a:	68bb      	ldr	r3, [r7, #8]
 8006e7c:	6959      	ldr	r1, [r3, #20]
 8006e7e:	68bb      	ldr	r3, [r7, #8]
 8006e80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e82:	4613      	mov	r3, r2
 8006e84:	009b      	lsls	r3, r3, #2
 8006e86:	4413      	add	r3, r2
 8006e88:	009b      	lsls	r3, r3, #2
 8006e8a:	4a22      	ldr	r2, [pc, #136]	; (8006f14 <xTaskPriorityInherit+0xd4>)
 8006e8c:	4413      	add	r3, r2
 8006e8e:	4299      	cmp	r1, r3
 8006e90:	d101      	bne.n	8006e96 <xTaskPriorityInherit+0x56>
 8006e92:	2301      	movs	r3, #1
 8006e94:	e000      	b.n	8006e98 <xTaskPriorityInherit+0x58>
 8006e96:	2300      	movs	r3, #0
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d022      	beq.n	8006ee2 <xTaskPriorityInherit+0xa2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006e9c:	68bb      	ldr	r3, [r7, #8]
 8006e9e:	3304      	adds	r3, #4
 8006ea0:	4618      	mov	r0, r3
 8006ea2:	f7fe fa11 	bl	80052c8 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006ea6:	4b1a      	ldr	r3, [pc, #104]	; (8006f10 <xTaskPriorityInherit+0xd0>)
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006eac:	68bb      	ldr	r3, [r7, #8]
 8006eae:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8006eb0:	68bb      	ldr	r3, [r7, #8]
 8006eb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006eb4:	4b18      	ldr	r3, [pc, #96]	; (8006f18 <xTaskPriorityInherit+0xd8>)
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	429a      	cmp	r2, r3
 8006eba:	d903      	bls.n	8006ec4 <xTaskPriorityInherit+0x84>
 8006ebc:	68bb      	ldr	r3, [r7, #8]
 8006ebe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ec0:	4a15      	ldr	r2, [pc, #84]	; (8006f18 <xTaskPriorityInherit+0xd8>)
 8006ec2:	6013      	str	r3, [r2, #0]
 8006ec4:	68bb      	ldr	r3, [r7, #8]
 8006ec6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ec8:	4613      	mov	r3, r2
 8006eca:	009b      	lsls	r3, r3, #2
 8006ecc:	4413      	add	r3, r2
 8006ece:	009b      	lsls	r3, r3, #2
 8006ed0:	4a10      	ldr	r2, [pc, #64]	; (8006f14 <xTaskPriorityInherit+0xd4>)
 8006ed2:	441a      	add	r2, r3
 8006ed4:	68bb      	ldr	r3, [r7, #8]
 8006ed6:	3304      	adds	r3, #4
 8006ed8:	4619      	mov	r1, r3
 8006eda:	4610      	mov	r0, r2
 8006edc:	f7fe f997 	bl	800520e <vListInsertEnd>
 8006ee0:	e004      	b.n	8006eec <xTaskPriorityInherit+0xac>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006ee2:	4b0b      	ldr	r3, [pc, #44]	; (8006f10 <xTaskPriorityInherit+0xd0>)
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ee8:	68bb      	ldr	r3, [r7, #8]
 8006eea:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8006eec:	2301      	movs	r3, #1
 8006eee:	60fb      	str	r3, [r7, #12]
 8006ef0:	e008      	b.n	8006f04 <xTaskPriorityInherit+0xc4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8006ef2:	68bb      	ldr	r3, [r7, #8]
 8006ef4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006ef6:	4b06      	ldr	r3, [pc, #24]	; (8006f10 <xTaskPriorityInherit+0xd0>)
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006efc:	429a      	cmp	r2, r3
 8006efe:	d201      	bcs.n	8006f04 <xTaskPriorityInherit+0xc4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8006f00:	2301      	movs	r3, #1
 8006f02:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006f04:	68fb      	ldr	r3, [r7, #12]
	}
 8006f06:	4618      	mov	r0, r3
 8006f08:	3710      	adds	r7, #16
 8006f0a:	46bd      	mov	sp, r7
 8006f0c:	bd80      	pop	{r7, pc}
 8006f0e:	bf00      	nop
 8006f10:	20000780 	.word	0x20000780
 8006f14:	20000784 	.word	0x20000784
 8006f18:	20000c5c 	.word	0x20000c5c

08006f1c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006f1c:	b580      	push	{r7, lr}
 8006f1e:	b086      	sub	sp, #24
 8006f20:	af00      	add	r7, sp, #0
 8006f22:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006f28:	2300      	movs	r3, #0
 8006f2a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d054      	beq.n	8006fdc <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006f32:	4b2d      	ldr	r3, [pc, #180]	; (8006fe8 <xTaskPriorityDisinherit+0xcc>)
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	693a      	ldr	r2, [r7, #16]
 8006f38:	429a      	cmp	r2, r3
 8006f3a:	d009      	beq.n	8006f50 <xTaskPriorityDisinherit+0x34>
 8006f3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f40:	f383 8811 	msr	BASEPRI, r3
 8006f44:	f3bf 8f6f 	isb	sy
 8006f48:	f3bf 8f4f 	dsb	sy
 8006f4c:	60fb      	str	r3, [r7, #12]
 8006f4e:	e7fe      	b.n	8006f4e <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8006f50:	693b      	ldr	r3, [r7, #16]
 8006f52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d109      	bne.n	8006f6c <xTaskPriorityDisinherit+0x50>
 8006f58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f5c:	f383 8811 	msr	BASEPRI, r3
 8006f60:	f3bf 8f6f 	isb	sy
 8006f64:	f3bf 8f4f 	dsb	sy
 8006f68:	60bb      	str	r3, [r7, #8]
 8006f6a:	e7fe      	b.n	8006f6a <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8006f6c:	693b      	ldr	r3, [r7, #16]
 8006f6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f70:	1e5a      	subs	r2, r3, #1
 8006f72:	693b      	ldr	r3, [r7, #16]
 8006f74:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006f76:	693b      	ldr	r3, [r7, #16]
 8006f78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f7a:	693b      	ldr	r3, [r7, #16]
 8006f7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f7e:	429a      	cmp	r2, r3
 8006f80:	d02c      	beq.n	8006fdc <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006f82:	693b      	ldr	r3, [r7, #16]
 8006f84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d128      	bne.n	8006fdc <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006f8a:	693b      	ldr	r3, [r7, #16]
 8006f8c:	3304      	adds	r3, #4
 8006f8e:	4618      	mov	r0, r3
 8006f90:	f7fe f99a 	bl	80052c8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006f94:	693b      	ldr	r3, [r7, #16]
 8006f96:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006f98:	693b      	ldr	r3, [r7, #16]
 8006f9a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006f9c:	693b      	ldr	r3, [r7, #16]
 8006f9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fa0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006fa4:	693b      	ldr	r3, [r7, #16]
 8006fa6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006fa8:	693b      	ldr	r3, [r7, #16]
 8006faa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006fac:	4b0f      	ldr	r3, [pc, #60]	; (8006fec <xTaskPriorityDisinherit+0xd0>)
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	429a      	cmp	r2, r3
 8006fb2:	d903      	bls.n	8006fbc <xTaskPriorityDisinherit+0xa0>
 8006fb4:	693b      	ldr	r3, [r7, #16]
 8006fb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fb8:	4a0c      	ldr	r2, [pc, #48]	; (8006fec <xTaskPriorityDisinherit+0xd0>)
 8006fba:	6013      	str	r3, [r2, #0]
 8006fbc:	693b      	ldr	r3, [r7, #16]
 8006fbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006fc0:	4613      	mov	r3, r2
 8006fc2:	009b      	lsls	r3, r3, #2
 8006fc4:	4413      	add	r3, r2
 8006fc6:	009b      	lsls	r3, r3, #2
 8006fc8:	4a09      	ldr	r2, [pc, #36]	; (8006ff0 <xTaskPriorityDisinherit+0xd4>)
 8006fca:	441a      	add	r2, r3
 8006fcc:	693b      	ldr	r3, [r7, #16]
 8006fce:	3304      	adds	r3, #4
 8006fd0:	4619      	mov	r1, r3
 8006fd2:	4610      	mov	r0, r2
 8006fd4:	f7fe f91b 	bl	800520e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006fd8:	2301      	movs	r3, #1
 8006fda:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006fdc:	697b      	ldr	r3, [r7, #20]
	}
 8006fde:	4618      	mov	r0, r3
 8006fe0:	3718      	adds	r7, #24
 8006fe2:	46bd      	mov	sp, r7
 8006fe4:	bd80      	pop	{r7, pc}
 8006fe6:	bf00      	nop
 8006fe8:	20000780 	.word	0x20000780
 8006fec:	20000c5c 	.word	0x20000c5c
 8006ff0:	20000784 	.word	0x20000784

08006ff4 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8006ff4:	b580      	push	{r7, lr}
 8006ff6:	b088      	sub	sp, #32
 8006ff8:	af00      	add	r7, sp, #0
 8006ffa:	6078      	str	r0, [r7, #4]
 8006ffc:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8007002:	2301      	movs	r3, #1
 8007004:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	2b00      	cmp	r3, #0
 800700a:	d06d      	beq.n	80070e8 <vTaskPriorityDisinheritAfterTimeout+0xf4>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800700c:	69bb      	ldr	r3, [r7, #24]
 800700e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007010:	2b00      	cmp	r3, #0
 8007012:	d109      	bne.n	8007028 <vTaskPriorityDisinheritAfterTimeout+0x34>
 8007014:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007018:	f383 8811 	msr	BASEPRI, r3
 800701c:	f3bf 8f6f 	isb	sy
 8007020:	f3bf 8f4f 	dsb	sy
 8007024:	60fb      	str	r3, [r7, #12]
 8007026:	e7fe      	b.n	8007026 <vTaskPriorityDisinheritAfterTimeout+0x32>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8007028:	69bb      	ldr	r3, [r7, #24]
 800702a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800702c:	683a      	ldr	r2, [r7, #0]
 800702e:	429a      	cmp	r2, r3
 8007030:	d902      	bls.n	8007038 <vTaskPriorityDisinheritAfterTimeout+0x44>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8007032:	683b      	ldr	r3, [r7, #0]
 8007034:	61fb      	str	r3, [r7, #28]
 8007036:	e002      	b.n	800703e <vTaskPriorityDisinheritAfterTimeout+0x4a>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8007038:	69bb      	ldr	r3, [r7, #24]
 800703a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800703c:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800703e:	69bb      	ldr	r3, [r7, #24]
 8007040:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007042:	69fa      	ldr	r2, [r7, #28]
 8007044:	429a      	cmp	r2, r3
 8007046:	d04f      	beq.n	80070e8 <vTaskPriorityDisinheritAfterTimeout+0xf4>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8007048:	69bb      	ldr	r3, [r7, #24]
 800704a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800704c:	697a      	ldr	r2, [r7, #20]
 800704e:	429a      	cmp	r2, r3
 8007050:	d14a      	bne.n	80070e8 <vTaskPriorityDisinheritAfterTimeout+0xf4>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8007052:	4b27      	ldr	r3, [pc, #156]	; (80070f0 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	69ba      	ldr	r2, [r7, #24]
 8007058:	429a      	cmp	r2, r3
 800705a:	d109      	bne.n	8007070 <vTaskPriorityDisinheritAfterTimeout+0x7c>
 800705c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007060:	f383 8811 	msr	BASEPRI, r3
 8007064:	f3bf 8f6f 	isb	sy
 8007068:	f3bf 8f4f 	dsb	sy
 800706c:	60bb      	str	r3, [r7, #8]
 800706e:	e7fe      	b.n	800706e <vTaskPriorityDisinheritAfterTimeout+0x7a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8007070:	69bb      	ldr	r3, [r7, #24]
 8007072:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007074:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8007076:	69bb      	ldr	r3, [r7, #24]
 8007078:	69fa      	ldr	r2, [r7, #28]
 800707a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800707c:	69bb      	ldr	r3, [r7, #24]
 800707e:	699b      	ldr	r3, [r3, #24]
 8007080:	2b00      	cmp	r3, #0
 8007082:	db04      	blt.n	800708e <vTaskPriorityDisinheritAfterTimeout+0x9a>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007084:	69fb      	ldr	r3, [r7, #28]
 8007086:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800708a:	69bb      	ldr	r3, [r7, #24]
 800708c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800708e:	69bb      	ldr	r3, [r7, #24]
 8007090:	6959      	ldr	r1, [r3, #20]
 8007092:	693a      	ldr	r2, [r7, #16]
 8007094:	4613      	mov	r3, r2
 8007096:	009b      	lsls	r3, r3, #2
 8007098:	4413      	add	r3, r2
 800709a:	009b      	lsls	r3, r3, #2
 800709c:	4a15      	ldr	r2, [pc, #84]	; (80070f4 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800709e:	4413      	add	r3, r2
 80070a0:	4299      	cmp	r1, r3
 80070a2:	d101      	bne.n	80070a8 <vTaskPriorityDisinheritAfterTimeout+0xb4>
 80070a4:	2301      	movs	r3, #1
 80070a6:	e000      	b.n	80070aa <vTaskPriorityDisinheritAfterTimeout+0xb6>
 80070a8:	2300      	movs	r3, #0
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d01c      	beq.n	80070e8 <vTaskPriorityDisinheritAfterTimeout+0xf4>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80070ae:	69bb      	ldr	r3, [r7, #24]
 80070b0:	3304      	adds	r3, #4
 80070b2:	4618      	mov	r0, r3
 80070b4:	f7fe f908 	bl	80052c8 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80070b8:	69bb      	ldr	r3, [r7, #24]
 80070ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070bc:	4b0e      	ldr	r3, [pc, #56]	; (80070f8 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	429a      	cmp	r2, r3
 80070c2:	d903      	bls.n	80070cc <vTaskPriorityDisinheritAfterTimeout+0xd8>
 80070c4:	69bb      	ldr	r3, [r7, #24]
 80070c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070c8:	4a0b      	ldr	r2, [pc, #44]	; (80070f8 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 80070ca:	6013      	str	r3, [r2, #0]
 80070cc:	69bb      	ldr	r3, [r7, #24]
 80070ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070d0:	4613      	mov	r3, r2
 80070d2:	009b      	lsls	r3, r3, #2
 80070d4:	4413      	add	r3, r2
 80070d6:	009b      	lsls	r3, r3, #2
 80070d8:	4a06      	ldr	r2, [pc, #24]	; (80070f4 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80070da:	441a      	add	r2, r3
 80070dc:	69bb      	ldr	r3, [r7, #24]
 80070de:	3304      	adds	r3, #4
 80070e0:	4619      	mov	r1, r3
 80070e2:	4610      	mov	r0, r2
 80070e4:	f7fe f893 	bl	800520e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80070e8:	bf00      	nop
 80070ea:	3720      	adds	r7, #32
 80070ec:	46bd      	mov	sp, r7
 80070ee:	bd80      	pop	{r7, pc}
 80070f0:	20000780 	.word	0x20000780
 80070f4:	20000784 	.word	0x20000784
 80070f8:	20000c5c 	.word	0x20000c5c

080070fc <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 80070fc:	b480      	push	{r7}
 80070fe:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8007100:	4b07      	ldr	r3, [pc, #28]	; (8007120 <pvTaskIncrementMutexHeldCount+0x24>)
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	2b00      	cmp	r3, #0
 8007106:	d004      	beq.n	8007112 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8007108:	4b05      	ldr	r3, [pc, #20]	; (8007120 <pvTaskIncrementMutexHeldCount+0x24>)
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800710e:	3201      	adds	r2, #1
 8007110:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8007112:	4b03      	ldr	r3, [pc, #12]	; (8007120 <pvTaskIncrementMutexHeldCount+0x24>)
 8007114:	681b      	ldr	r3, [r3, #0]
	}
 8007116:	4618      	mov	r0, r3
 8007118:	46bd      	mov	sp, r7
 800711a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800711e:	4770      	bx	lr
 8007120:	20000780 	.word	0x20000780

08007124 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007124:	b580      	push	{r7, lr}
 8007126:	b084      	sub	sp, #16
 8007128:	af00      	add	r7, sp, #0
 800712a:	6078      	str	r0, [r7, #4]
 800712c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800712e:	4b21      	ldr	r3, [pc, #132]	; (80071b4 <prvAddCurrentTaskToDelayedList+0x90>)
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007134:	4b20      	ldr	r3, [pc, #128]	; (80071b8 <prvAddCurrentTaskToDelayedList+0x94>)
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	3304      	adds	r3, #4
 800713a:	4618      	mov	r0, r3
 800713c:	f7fe f8c4 	bl	80052c8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007146:	d10a      	bne.n	800715e <prvAddCurrentTaskToDelayedList+0x3a>
 8007148:	683b      	ldr	r3, [r7, #0]
 800714a:	2b00      	cmp	r3, #0
 800714c:	d007      	beq.n	800715e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800714e:	4b1a      	ldr	r3, [pc, #104]	; (80071b8 <prvAddCurrentTaskToDelayedList+0x94>)
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	3304      	adds	r3, #4
 8007154:	4619      	mov	r1, r3
 8007156:	4819      	ldr	r0, [pc, #100]	; (80071bc <prvAddCurrentTaskToDelayedList+0x98>)
 8007158:	f7fe f859 	bl	800520e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800715c:	e026      	b.n	80071ac <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800715e:	68fa      	ldr	r2, [r7, #12]
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	4413      	add	r3, r2
 8007164:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007166:	4b14      	ldr	r3, [pc, #80]	; (80071b8 <prvAddCurrentTaskToDelayedList+0x94>)
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	68ba      	ldr	r2, [r7, #8]
 800716c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800716e:	68ba      	ldr	r2, [r7, #8]
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	429a      	cmp	r2, r3
 8007174:	d209      	bcs.n	800718a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007176:	4b12      	ldr	r3, [pc, #72]	; (80071c0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8007178:	681a      	ldr	r2, [r3, #0]
 800717a:	4b0f      	ldr	r3, [pc, #60]	; (80071b8 <prvAddCurrentTaskToDelayedList+0x94>)
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	3304      	adds	r3, #4
 8007180:	4619      	mov	r1, r3
 8007182:	4610      	mov	r0, r2
 8007184:	f7fe f867 	bl	8005256 <vListInsert>
}
 8007188:	e010      	b.n	80071ac <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800718a:	4b0e      	ldr	r3, [pc, #56]	; (80071c4 <prvAddCurrentTaskToDelayedList+0xa0>)
 800718c:	681a      	ldr	r2, [r3, #0]
 800718e:	4b0a      	ldr	r3, [pc, #40]	; (80071b8 <prvAddCurrentTaskToDelayedList+0x94>)
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	3304      	adds	r3, #4
 8007194:	4619      	mov	r1, r3
 8007196:	4610      	mov	r0, r2
 8007198:	f7fe f85d 	bl	8005256 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800719c:	4b0a      	ldr	r3, [pc, #40]	; (80071c8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	68ba      	ldr	r2, [r7, #8]
 80071a2:	429a      	cmp	r2, r3
 80071a4:	d202      	bcs.n	80071ac <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80071a6:	4a08      	ldr	r2, [pc, #32]	; (80071c8 <prvAddCurrentTaskToDelayedList+0xa4>)
 80071a8:	68bb      	ldr	r3, [r7, #8]
 80071aa:	6013      	str	r3, [r2, #0]
}
 80071ac:	bf00      	nop
 80071ae:	3710      	adds	r7, #16
 80071b0:	46bd      	mov	sp, r7
 80071b2:	bd80      	pop	{r7, pc}
 80071b4:	20000c58 	.word	0x20000c58
 80071b8:	20000780 	.word	0x20000780
 80071bc:	20000c40 	.word	0x20000c40
 80071c0:	20000c10 	.word	0x20000c10
 80071c4:	20000c0c 	.word	0x20000c0c
 80071c8:	20000c74 	.word	0x20000c74

080071cc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80071cc:	b580      	push	{r7, lr}
 80071ce:	b08a      	sub	sp, #40	; 0x28
 80071d0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80071d2:	2300      	movs	r3, #0
 80071d4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80071d6:	f000 fac3 	bl	8007760 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80071da:	4b1c      	ldr	r3, [pc, #112]	; (800724c <xTimerCreateTimerTask+0x80>)
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d021      	beq.n	8007226 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80071e2:	2300      	movs	r3, #0
 80071e4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80071e6:	2300      	movs	r3, #0
 80071e8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80071ea:	1d3a      	adds	r2, r7, #4
 80071ec:	f107 0108 	add.w	r1, r7, #8
 80071f0:	f107 030c 	add.w	r3, r7, #12
 80071f4:	4618      	mov	r0, r3
 80071f6:	f7fd ffc3 	bl	8005180 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80071fa:	6879      	ldr	r1, [r7, #4]
 80071fc:	68bb      	ldr	r3, [r7, #8]
 80071fe:	68fa      	ldr	r2, [r7, #12]
 8007200:	9202      	str	r2, [sp, #8]
 8007202:	9301      	str	r3, [sp, #4]
 8007204:	2302      	movs	r3, #2
 8007206:	9300      	str	r3, [sp, #0]
 8007208:	2300      	movs	r3, #0
 800720a:	460a      	mov	r2, r1
 800720c:	4910      	ldr	r1, [pc, #64]	; (8007250 <xTimerCreateTimerTask+0x84>)
 800720e:	4811      	ldr	r0, [pc, #68]	; (8007254 <xTimerCreateTimerTask+0x88>)
 8007210:	f7fe ffee 	bl	80061f0 <xTaskCreateStatic>
 8007214:	4602      	mov	r2, r0
 8007216:	4b10      	ldr	r3, [pc, #64]	; (8007258 <xTimerCreateTimerTask+0x8c>)
 8007218:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800721a:	4b0f      	ldr	r3, [pc, #60]	; (8007258 <xTimerCreateTimerTask+0x8c>)
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	2b00      	cmp	r3, #0
 8007220:	d001      	beq.n	8007226 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8007222:	2301      	movs	r3, #1
 8007224:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8007226:	697b      	ldr	r3, [r7, #20]
 8007228:	2b00      	cmp	r3, #0
 800722a:	d109      	bne.n	8007240 <xTimerCreateTimerTask+0x74>
 800722c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007230:	f383 8811 	msr	BASEPRI, r3
 8007234:	f3bf 8f6f 	isb	sy
 8007238:	f3bf 8f4f 	dsb	sy
 800723c:	613b      	str	r3, [r7, #16]
 800723e:	e7fe      	b.n	800723e <xTimerCreateTimerTask+0x72>
	return xReturn;
 8007240:	697b      	ldr	r3, [r7, #20]
}
 8007242:	4618      	mov	r0, r3
 8007244:	3718      	adds	r7, #24
 8007246:	46bd      	mov	sp, r7
 8007248:	bd80      	pop	{r7, pc}
 800724a:	bf00      	nop
 800724c:	20000cb0 	.word	0x20000cb0
 8007250:	0800a724 	.word	0x0800a724
 8007254:	08007375 	.word	0x08007375
 8007258:	20000cb4 	.word	0x20000cb4

0800725c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800725c:	b580      	push	{r7, lr}
 800725e:	b08a      	sub	sp, #40	; 0x28
 8007260:	af00      	add	r7, sp, #0
 8007262:	60f8      	str	r0, [r7, #12]
 8007264:	60b9      	str	r1, [r7, #8]
 8007266:	607a      	str	r2, [r7, #4]
 8007268:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800726a:	2300      	movs	r3, #0
 800726c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	2b00      	cmp	r3, #0
 8007272:	d109      	bne.n	8007288 <xTimerGenericCommand+0x2c>
 8007274:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007278:	f383 8811 	msr	BASEPRI, r3
 800727c:	f3bf 8f6f 	isb	sy
 8007280:	f3bf 8f4f 	dsb	sy
 8007284:	623b      	str	r3, [r7, #32]
 8007286:	e7fe      	b.n	8007286 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007288:	4b19      	ldr	r3, [pc, #100]	; (80072f0 <xTimerGenericCommand+0x94>)
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	2b00      	cmp	r3, #0
 800728e:	d02a      	beq.n	80072e6 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007290:	68bb      	ldr	r3, [r7, #8]
 8007292:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800729c:	68bb      	ldr	r3, [r7, #8]
 800729e:	2b05      	cmp	r3, #5
 80072a0:	dc18      	bgt.n	80072d4 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80072a2:	f7ff fdaf 	bl	8006e04 <xTaskGetSchedulerState>
 80072a6:	4603      	mov	r3, r0
 80072a8:	2b02      	cmp	r3, #2
 80072aa:	d109      	bne.n	80072c0 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80072ac:	4b10      	ldr	r3, [pc, #64]	; (80072f0 <xTimerGenericCommand+0x94>)
 80072ae:	6818      	ldr	r0, [r3, #0]
 80072b0:	f107 0110 	add.w	r1, r7, #16
 80072b4:	2300      	movs	r3, #0
 80072b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80072b8:	f7fe f99c 	bl	80055f4 <xQueueGenericSend>
 80072bc:	6278      	str	r0, [r7, #36]	; 0x24
 80072be:	e012      	b.n	80072e6 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80072c0:	4b0b      	ldr	r3, [pc, #44]	; (80072f0 <xTimerGenericCommand+0x94>)
 80072c2:	6818      	ldr	r0, [r3, #0]
 80072c4:	f107 0110 	add.w	r1, r7, #16
 80072c8:	2300      	movs	r3, #0
 80072ca:	2200      	movs	r2, #0
 80072cc:	f7fe f992 	bl	80055f4 <xQueueGenericSend>
 80072d0:	6278      	str	r0, [r7, #36]	; 0x24
 80072d2:	e008      	b.n	80072e6 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80072d4:	4b06      	ldr	r3, [pc, #24]	; (80072f0 <xTimerGenericCommand+0x94>)
 80072d6:	6818      	ldr	r0, [r3, #0]
 80072d8:	f107 0110 	add.w	r1, r7, #16
 80072dc:	2300      	movs	r3, #0
 80072de:	683a      	ldr	r2, [r7, #0]
 80072e0:	f7fe fa82 	bl	80057e8 <xQueueGenericSendFromISR>
 80072e4:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80072e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80072e8:	4618      	mov	r0, r3
 80072ea:	3728      	adds	r7, #40	; 0x28
 80072ec:	46bd      	mov	sp, r7
 80072ee:	bd80      	pop	{r7, pc}
 80072f0:	20000cb0 	.word	0x20000cb0

080072f4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80072f4:	b580      	push	{r7, lr}
 80072f6:	b088      	sub	sp, #32
 80072f8:	af02      	add	r7, sp, #8
 80072fa:	6078      	str	r0, [r7, #4]
 80072fc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80072fe:	4b1c      	ldr	r3, [pc, #112]	; (8007370 <prvProcessExpiredTimer+0x7c>)
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	68db      	ldr	r3, [r3, #12]
 8007304:	68db      	ldr	r3, [r3, #12]
 8007306:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007308:	697b      	ldr	r3, [r7, #20]
 800730a:	3304      	adds	r3, #4
 800730c:	4618      	mov	r0, r3
 800730e:	f7fd ffdb 	bl	80052c8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8007312:	697b      	ldr	r3, [r7, #20]
 8007314:	69db      	ldr	r3, [r3, #28]
 8007316:	2b01      	cmp	r3, #1
 8007318:	d121      	bne.n	800735e <prvProcessExpiredTimer+0x6a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800731a:	697b      	ldr	r3, [r7, #20]
 800731c:	699a      	ldr	r2, [r3, #24]
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	18d1      	adds	r1, r2, r3
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	683a      	ldr	r2, [r7, #0]
 8007326:	6978      	ldr	r0, [r7, #20]
 8007328:	f000 f8c8 	bl	80074bc <prvInsertTimerInActiveList>
 800732c:	4603      	mov	r3, r0
 800732e:	2b00      	cmp	r3, #0
 8007330:	d015      	beq.n	800735e <prvProcessExpiredTimer+0x6a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007332:	2300      	movs	r3, #0
 8007334:	9300      	str	r3, [sp, #0]
 8007336:	2300      	movs	r3, #0
 8007338:	687a      	ldr	r2, [r7, #4]
 800733a:	2100      	movs	r1, #0
 800733c:	6978      	ldr	r0, [r7, #20]
 800733e:	f7ff ff8d 	bl	800725c <xTimerGenericCommand>
 8007342:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8007344:	693b      	ldr	r3, [r7, #16]
 8007346:	2b00      	cmp	r3, #0
 8007348:	d109      	bne.n	800735e <prvProcessExpiredTimer+0x6a>
 800734a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800734e:	f383 8811 	msr	BASEPRI, r3
 8007352:	f3bf 8f6f 	isb	sy
 8007356:	f3bf 8f4f 	dsb	sy
 800735a:	60fb      	str	r3, [r7, #12]
 800735c:	e7fe      	b.n	800735c <prvProcessExpiredTimer+0x68>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800735e:	697b      	ldr	r3, [r7, #20]
 8007360:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007362:	6978      	ldr	r0, [r7, #20]
 8007364:	4798      	blx	r3
}
 8007366:	bf00      	nop
 8007368:	3718      	adds	r7, #24
 800736a:	46bd      	mov	sp, r7
 800736c:	bd80      	pop	{r7, pc}
 800736e:	bf00      	nop
 8007370:	20000ca8 	.word	0x20000ca8

08007374 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8007374:	b580      	push	{r7, lr}
 8007376:	b084      	sub	sp, #16
 8007378:	af00      	add	r7, sp, #0
 800737a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800737c:	f107 0308 	add.w	r3, r7, #8
 8007380:	4618      	mov	r0, r3
 8007382:	f000 f857 	bl	8007434 <prvGetNextExpireTime>
 8007386:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007388:	68bb      	ldr	r3, [r7, #8]
 800738a:	4619      	mov	r1, r3
 800738c:	68f8      	ldr	r0, [r7, #12]
 800738e:	f000 f803 	bl	8007398 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8007392:	f000 f8d5 	bl	8007540 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007396:	e7f1      	b.n	800737c <prvTimerTask+0x8>

08007398 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007398:	b580      	push	{r7, lr}
 800739a:	b084      	sub	sp, #16
 800739c:	af00      	add	r7, sp, #0
 800739e:	6078      	str	r0, [r7, #4]
 80073a0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80073a2:	f7ff f951 	bl	8006648 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80073a6:	f107 0308 	add.w	r3, r7, #8
 80073aa:	4618      	mov	r0, r3
 80073ac:	f000 f866 	bl	800747c <prvSampleTimeNow>
 80073b0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80073b2:	68bb      	ldr	r3, [r7, #8]
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d130      	bne.n	800741a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80073b8:	683b      	ldr	r3, [r7, #0]
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d10a      	bne.n	80073d4 <prvProcessTimerOrBlockTask+0x3c>
 80073be:	687a      	ldr	r2, [r7, #4]
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	429a      	cmp	r2, r3
 80073c4:	d806      	bhi.n	80073d4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80073c6:	f7ff f94d 	bl	8006664 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80073ca:	68f9      	ldr	r1, [r7, #12]
 80073cc:	6878      	ldr	r0, [r7, #4]
 80073ce:	f7ff ff91 	bl	80072f4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80073d2:	e024      	b.n	800741e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80073d4:	683b      	ldr	r3, [r7, #0]
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d008      	beq.n	80073ec <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80073da:	4b13      	ldr	r3, [pc, #76]	; (8007428 <prvProcessTimerOrBlockTask+0x90>)
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	bf0c      	ite	eq
 80073e4:	2301      	moveq	r3, #1
 80073e6:	2300      	movne	r3, #0
 80073e8:	b2db      	uxtb	r3, r3
 80073ea:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80073ec:	4b0f      	ldr	r3, [pc, #60]	; (800742c <prvProcessTimerOrBlockTask+0x94>)
 80073ee:	6818      	ldr	r0, [r3, #0]
 80073f0:	687a      	ldr	r2, [r7, #4]
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	1ad3      	subs	r3, r2, r3
 80073f6:	683a      	ldr	r2, [r7, #0]
 80073f8:	4619      	mov	r1, r3
 80073fa:	f7fe fec5 	bl	8006188 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80073fe:	f7ff f931 	bl	8006664 <xTaskResumeAll>
 8007402:	4603      	mov	r3, r0
 8007404:	2b00      	cmp	r3, #0
 8007406:	d10a      	bne.n	800741e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007408:	4b09      	ldr	r3, [pc, #36]	; (8007430 <prvProcessTimerOrBlockTask+0x98>)
 800740a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800740e:	601a      	str	r2, [r3, #0]
 8007410:	f3bf 8f4f 	dsb	sy
 8007414:	f3bf 8f6f 	isb	sy
}
 8007418:	e001      	b.n	800741e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800741a:	f7ff f923 	bl	8006664 <xTaskResumeAll>
}
 800741e:	bf00      	nop
 8007420:	3710      	adds	r7, #16
 8007422:	46bd      	mov	sp, r7
 8007424:	bd80      	pop	{r7, pc}
 8007426:	bf00      	nop
 8007428:	20000cac 	.word	0x20000cac
 800742c:	20000cb0 	.word	0x20000cb0
 8007430:	e000ed04 	.word	0xe000ed04

08007434 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007434:	b480      	push	{r7}
 8007436:	b085      	sub	sp, #20
 8007438:	af00      	add	r7, sp, #0
 800743a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800743c:	4b0e      	ldr	r3, [pc, #56]	; (8007478 <prvGetNextExpireTime+0x44>)
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	2b00      	cmp	r3, #0
 8007444:	bf0c      	ite	eq
 8007446:	2301      	moveq	r3, #1
 8007448:	2300      	movne	r3, #0
 800744a:	b2db      	uxtb	r3, r3
 800744c:	461a      	mov	r2, r3
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	2b00      	cmp	r3, #0
 8007458:	d105      	bne.n	8007466 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800745a:	4b07      	ldr	r3, [pc, #28]	; (8007478 <prvGetNextExpireTime+0x44>)
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	68db      	ldr	r3, [r3, #12]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	60fb      	str	r3, [r7, #12]
 8007464:	e001      	b.n	800746a <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007466:	2300      	movs	r3, #0
 8007468:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800746a:	68fb      	ldr	r3, [r7, #12]
}
 800746c:	4618      	mov	r0, r3
 800746e:	3714      	adds	r7, #20
 8007470:	46bd      	mov	sp, r7
 8007472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007476:	4770      	bx	lr
 8007478:	20000ca8 	.word	0x20000ca8

0800747c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800747c:	b580      	push	{r7, lr}
 800747e:	b084      	sub	sp, #16
 8007480:	af00      	add	r7, sp, #0
 8007482:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007484:	f7ff f98a 	bl	800679c <xTaskGetTickCount>
 8007488:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800748a:	4b0b      	ldr	r3, [pc, #44]	; (80074b8 <prvSampleTimeNow+0x3c>)
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	68fa      	ldr	r2, [r7, #12]
 8007490:	429a      	cmp	r2, r3
 8007492:	d205      	bcs.n	80074a0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007494:	f000 f904 	bl	80076a0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	2201      	movs	r2, #1
 800749c:	601a      	str	r2, [r3, #0]
 800749e:	e002      	b.n	80074a6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	2200      	movs	r2, #0
 80074a4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80074a6:	4a04      	ldr	r2, [pc, #16]	; (80074b8 <prvSampleTimeNow+0x3c>)
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80074ac:	68fb      	ldr	r3, [r7, #12]
}
 80074ae:	4618      	mov	r0, r3
 80074b0:	3710      	adds	r7, #16
 80074b2:	46bd      	mov	sp, r7
 80074b4:	bd80      	pop	{r7, pc}
 80074b6:	bf00      	nop
 80074b8:	20000cb8 	.word	0x20000cb8

080074bc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80074bc:	b580      	push	{r7, lr}
 80074be:	b086      	sub	sp, #24
 80074c0:	af00      	add	r7, sp, #0
 80074c2:	60f8      	str	r0, [r7, #12]
 80074c4:	60b9      	str	r1, [r7, #8]
 80074c6:	607a      	str	r2, [r7, #4]
 80074c8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80074ca:	2300      	movs	r3, #0
 80074cc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	68ba      	ldr	r2, [r7, #8]
 80074d2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	68fa      	ldr	r2, [r7, #12]
 80074d8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80074da:	68ba      	ldr	r2, [r7, #8]
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	429a      	cmp	r2, r3
 80074e0:	d812      	bhi.n	8007508 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80074e2:	687a      	ldr	r2, [r7, #4]
 80074e4:	683b      	ldr	r3, [r7, #0]
 80074e6:	1ad2      	subs	r2, r2, r3
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	699b      	ldr	r3, [r3, #24]
 80074ec:	429a      	cmp	r2, r3
 80074ee:	d302      	bcc.n	80074f6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80074f0:	2301      	movs	r3, #1
 80074f2:	617b      	str	r3, [r7, #20]
 80074f4:	e01b      	b.n	800752e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80074f6:	4b10      	ldr	r3, [pc, #64]	; (8007538 <prvInsertTimerInActiveList+0x7c>)
 80074f8:	681a      	ldr	r2, [r3, #0]
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	3304      	adds	r3, #4
 80074fe:	4619      	mov	r1, r3
 8007500:	4610      	mov	r0, r2
 8007502:	f7fd fea8 	bl	8005256 <vListInsert>
 8007506:	e012      	b.n	800752e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007508:	687a      	ldr	r2, [r7, #4]
 800750a:	683b      	ldr	r3, [r7, #0]
 800750c:	429a      	cmp	r2, r3
 800750e:	d206      	bcs.n	800751e <prvInsertTimerInActiveList+0x62>
 8007510:	68ba      	ldr	r2, [r7, #8]
 8007512:	683b      	ldr	r3, [r7, #0]
 8007514:	429a      	cmp	r2, r3
 8007516:	d302      	bcc.n	800751e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007518:	2301      	movs	r3, #1
 800751a:	617b      	str	r3, [r7, #20]
 800751c:	e007      	b.n	800752e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800751e:	4b07      	ldr	r3, [pc, #28]	; (800753c <prvInsertTimerInActiveList+0x80>)
 8007520:	681a      	ldr	r2, [r3, #0]
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	3304      	adds	r3, #4
 8007526:	4619      	mov	r1, r3
 8007528:	4610      	mov	r0, r2
 800752a:	f7fd fe94 	bl	8005256 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800752e:	697b      	ldr	r3, [r7, #20]
}
 8007530:	4618      	mov	r0, r3
 8007532:	3718      	adds	r7, #24
 8007534:	46bd      	mov	sp, r7
 8007536:	bd80      	pop	{r7, pc}
 8007538:	20000cac 	.word	0x20000cac
 800753c:	20000ca8 	.word	0x20000ca8

08007540 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007540:	b580      	push	{r7, lr}
 8007542:	b08e      	sub	sp, #56	; 0x38
 8007544:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007546:	e099      	b.n	800767c <prvProcessReceivedCommands+0x13c>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	2b00      	cmp	r3, #0
 800754c:	da17      	bge.n	800757e <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800754e:	1d3b      	adds	r3, r7, #4
 8007550:	3304      	adds	r3, #4
 8007552:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007554:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007556:	2b00      	cmp	r3, #0
 8007558:	d109      	bne.n	800756e <prvProcessReceivedCommands+0x2e>
 800755a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800755e:	f383 8811 	msr	BASEPRI, r3
 8007562:	f3bf 8f6f 	isb	sy
 8007566:	f3bf 8f4f 	dsb	sy
 800756a:	61fb      	str	r3, [r7, #28]
 800756c:	e7fe      	b.n	800756c <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800756e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007574:	6850      	ldr	r0, [r2, #4]
 8007576:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007578:	6892      	ldr	r2, [r2, #8]
 800757a:	4611      	mov	r1, r2
 800757c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	2b00      	cmp	r3, #0
 8007582:	db7a      	blt.n	800767a <prvProcessReceivedCommands+0x13a>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007588:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800758a:	695b      	ldr	r3, [r3, #20]
 800758c:	2b00      	cmp	r3, #0
 800758e:	d004      	beq.n	800759a <prvProcessReceivedCommands+0x5a>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007590:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007592:	3304      	adds	r3, #4
 8007594:	4618      	mov	r0, r3
 8007596:	f7fd fe97 	bl	80052c8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800759a:	463b      	mov	r3, r7
 800759c:	4618      	mov	r0, r3
 800759e:	f7ff ff6d 	bl	800747c <prvSampleTimeNow>
 80075a2:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	2b09      	cmp	r3, #9
 80075a8:	d868      	bhi.n	800767c <prvProcessReceivedCommands+0x13c>
 80075aa:	a201      	add	r2, pc, #4	; (adr r2, 80075b0 <prvProcessReceivedCommands+0x70>)
 80075ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075b0:	080075d9 	.word	0x080075d9
 80075b4:	080075d9 	.word	0x080075d9
 80075b8:	080075d9 	.word	0x080075d9
 80075bc:	0800767d 	.word	0x0800767d
 80075c0:	08007633 	.word	0x08007633
 80075c4:	08007669 	.word	0x08007669
 80075c8:	080075d9 	.word	0x080075d9
 80075cc:	080075d9 	.word	0x080075d9
 80075d0:	0800767d 	.word	0x0800767d
 80075d4:	08007633 	.word	0x08007633
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80075d8:	68ba      	ldr	r2, [r7, #8]
 80075da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075dc:	699b      	ldr	r3, [r3, #24]
 80075de:	18d1      	adds	r1, r2, r3
 80075e0:	68bb      	ldr	r3, [r7, #8]
 80075e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80075e4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80075e6:	f7ff ff69 	bl	80074bc <prvInsertTimerInActiveList>
 80075ea:	4603      	mov	r3, r0
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d045      	beq.n	800767c <prvProcessReceivedCommands+0x13c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80075f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80075f6:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80075f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075fa:	69db      	ldr	r3, [r3, #28]
 80075fc:	2b01      	cmp	r3, #1
 80075fe:	d13d      	bne.n	800767c <prvProcessReceivedCommands+0x13c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007600:	68ba      	ldr	r2, [r7, #8]
 8007602:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007604:	699b      	ldr	r3, [r3, #24]
 8007606:	441a      	add	r2, r3
 8007608:	2300      	movs	r3, #0
 800760a:	9300      	str	r3, [sp, #0]
 800760c:	2300      	movs	r3, #0
 800760e:	2100      	movs	r1, #0
 8007610:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007612:	f7ff fe23 	bl	800725c <xTimerGenericCommand>
 8007616:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007618:	6a3b      	ldr	r3, [r7, #32]
 800761a:	2b00      	cmp	r3, #0
 800761c:	d12e      	bne.n	800767c <prvProcessReceivedCommands+0x13c>
 800761e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007622:	f383 8811 	msr	BASEPRI, r3
 8007626:	f3bf 8f6f 	isb	sy
 800762a:	f3bf 8f4f 	dsb	sy
 800762e:	61bb      	str	r3, [r7, #24]
 8007630:	e7fe      	b.n	8007630 <prvProcessReceivedCommands+0xf0>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007632:	68ba      	ldr	r2, [r7, #8]
 8007634:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007636:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007638:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800763a:	699b      	ldr	r3, [r3, #24]
 800763c:	2b00      	cmp	r3, #0
 800763e:	d109      	bne.n	8007654 <prvProcessReceivedCommands+0x114>
 8007640:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007644:	f383 8811 	msr	BASEPRI, r3
 8007648:	f3bf 8f6f 	isb	sy
 800764c:	f3bf 8f4f 	dsb	sy
 8007650:	617b      	str	r3, [r7, #20]
 8007652:	e7fe      	b.n	8007652 <prvProcessReceivedCommands+0x112>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007654:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007656:	699a      	ldr	r2, [r3, #24]
 8007658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800765a:	18d1      	adds	r1, r2, r3
 800765c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800765e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007660:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007662:	f7ff ff2b 	bl	80074bc <prvInsertTimerInActiveList>
					break;
 8007666:	e009      	b.n	800767c <prvProcessReceivedCommands+0x13c>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8007668:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800766a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800766e:	2b00      	cmp	r3, #0
 8007670:	d104      	bne.n	800767c <prvProcessReceivedCommands+0x13c>
						{
							vPortFree( pxTimer );
 8007672:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007674:	f000 fbb6 	bl	8007de4 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007678:	e000      	b.n	800767c <prvProcessReceivedCommands+0x13c>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800767a:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800767c:	4b07      	ldr	r3, [pc, #28]	; (800769c <prvProcessReceivedCommands+0x15c>)
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	1d39      	adds	r1, r7, #4
 8007682:	2200      	movs	r2, #0
 8007684:	4618      	mov	r0, r3
 8007686:	f7fe f9cd 	bl	8005a24 <xQueueReceive>
 800768a:	4603      	mov	r3, r0
 800768c:	2b00      	cmp	r3, #0
 800768e:	f47f af5b 	bne.w	8007548 <prvProcessReceivedCommands+0x8>
	}
}
 8007692:	bf00      	nop
 8007694:	3730      	adds	r7, #48	; 0x30
 8007696:	46bd      	mov	sp, r7
 8007698:	bd80      	pop	{r7, pc}
 800769a:	bf00      	nop
 800769c:	20000cb0 	.word	0x20000cb0

080076a0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80076a0:	b580      	push	{r7, lr}
 80076a2:	b088      	sub	sp, #32
 80076a4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80076a6:	e044      	b.n	8007732 <prvSwitchTimerLists+0x92>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80076a8:	4b2b      	ldr	r3, [pc, #172]	; (8007758 <prvSwitchTimerLists+0xb8>)
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	68db      	ldr	r3, [r3, #12]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80076b2:	4b29      	ldr	r3, [pc, #164]	; (8007758 <prvSwitchTimerLists+0xb8>)
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	68db      	ldr	r3, [r3, #12]
 80076b8:	68db      	ldr	r3, [r3, #12]
 80076ba:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	3304      	adds	r3, #4
 80076c0:	4618      	mov	r0, r3
 80076c2:	f7fd fe01 	bl	80052c8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076ca:	68f8      	ldr	r0, [r7, #12]
 80076cc:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	69db      	ldr	r3, [r3, #28]
 80076d2:	2b01      	cmp	r3, #1
 80076d4:	d12d      	bne.n	8007732 <prvSwitchTimerLists+0x92>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	699b      	ldr	r3, [r3, #24]
 80076da:	693a      	ldr	r2, [r7, #16]
 80076dc:	4413      	add	r3, r2
 80076de:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80076e0:	68ba      	ldr	r2, [r7, #8]
 80076e2:	693b      	ldr	r3, [r7, #16]
 80076e4:	429a      	cmp	r2, r3
 80076e6:	d90e      	bls.n	8007706 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	68ba      	ldr	r2, [r7, #8]
 80076ec:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	68fa      	ldr	r2, [r7, #12]
 80076f2:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80076f4:	4b18      	ldr	r3, [pc, #96]	; (8007758 <prvSwitchTimerLists+0xb8>)
 80076f6:	681a      	ldr	r2, [r3, #0]
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	3304      	adds	r3, #4
 80076fc:	4619      	mov	r1, r3
 80076fe:	4610      	mov	r0, r2
 8007700:	f7fd fda9 	bl	8005256 <vListInsert>
 8007704:	e015      	b.n	8007732 <prvSwitchTimerLists+0x92>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007706:	2300      	movs	r3, #0
 8007708:	9300      	str	r3, [sp, #0]
 800770a:	2300      	movs	r3, #0
 800770c:	693a      	ldr	r2, [r7, #16]
 800770e:	2100      	movs	r1, #0
 8007710:	68f8      	ldr	r0, [r7, #12]
 8007712:	f7ff fda3 	bl	800725c <xTimerGenericCommand>
 8007716:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	2b00      	cmp	r3, #0
 800771c:	d109      	bne.n	8007732 <prvSwitchTimerLists+0x92>
 800771e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007722:	f383 8811 	msr	BASEPRI, r3
 8007726:	f3bf 8f6f 	isb	sy
 800772a:	f3bf 8f4f 	dsb	sy
 800772e:	603b      	str	r3, [r7, #0]
 8007730:	e7fe      	b.n	8007730 <prvSwitchTimerLists+0x90>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007732:	4b09      	ldr	r3, [pc, #36]	; (8007758 <prvSwitchTimerLists+0xb8>)
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	2b00      	cmp	r3, #0
 800773a:	d1b5      	bne.n	80076a8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800773c:	4b06      	ldr	r3, [pc, #24]	; (8007758 <prvSwitchTimerLists+0xb8>)
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007742:	4b06      	ldr	r3, [pc, #24]	; (800775c <prvSwitchTimerLists+0xbc>)
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	4a04      	ldr	r2, [pc, #16]	; (8007758 <prvSwitchTimerLists+0xb8>)
 8007748:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800774a:	4a04      	ldr	r2, [pc, #16]	; (800775c <prvSwitchTimerLists+0xbc>)
 800774c:	697b      	ldr	r3, [r7, #20]
 800774e:	6013      	str	r3, [r2, #0]
}
 8007750:	bf00      	nop
 8007752:	3718      	adds	r7, #24
 8007754:	46bd      	mov	sp, r7
 8007756:	bd80      	pop	{r7, pc}
 8007758:	20000ca8 	.word	0x20000ca8
 800775c:	20000cac 	.word	0x20000cac

08007760 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007760:	b580      	push	{r7, lr}
 8007762:	b082      	sub	sp, #8
 8007764:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007766:	f000 f961 	bl	8007a2c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800776a:	4b15      	ldr	r3, [pc, #84]	; (80077c0 <prvCheckForValidListAndQueue+0x60>)
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	2b00      	cmp	r3, #0
 8007770:	d120      	bne.n	80077b4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8007772:	4814      	ldr	r0, [pc, #80]	; (80077c4 <prvCheckForValidListAndQueue+0x64>)
 8007774:	f7fd fd1e 	bl	80051b4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007778:	4813      	ldr	r0, [pc, #76]	; (80077c8 <prvCheckForValidListAndQueue+0x68>)
 800777a:	f7fd fd1b 	bl	80051b4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800777e:	4b13      	ldr	r3, [pc, #76]	; (80077cc <prvCheckForValidListAndQueue+0x6c>)
 8007780:	4a10      	ldr	r2, [pc, #64]	; (80077c4 <prvCheckForValidListAndQueue+0x64>)
 8007782:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007784:	4b12      	ldr	r3, [pc, #72]	; (80077d0 <prvCheckForValidListAndQueue+0x70>)
 8007786:	4a10      	ldr	r2, [pc, #64]	; (80077c8 <prvCheckForValidListAndQueue+0x68>)
 8007788:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800778a:	2300      	movs	r3, #0
 800778c:	9300      	str	r3, [sp, #0]
 800778e:	4b11      	ldr	r3, [pc, #68]	; (80077d4 <prvCheckForValidListAndQueue+0x74>)
 8007790:	4a11      	ldr	r2, [pc, #68]	; (80077d8 <prvCheckForValidListAndQueue+0x78>)
 8007792:	2110      	movs	r1, #16
 8007794:	200a      	movs	r0, #10
 8007796:	f7fd fe29 	bl	80053ec <xQueueGenericCreateStatic>
 800779a:	4602      	mov	r2, r0
 800779c:	4b08      	ldr	r3, [pc, #32]	; (80077c0 <prvCheckForValidListAndQueue+0x60>)
 800779e:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80077a0:	4b07      	ldr	r3, [pc, #28]	; (80077c0 <prvCheckForValidListAndQueue+0x60>)
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d005      	beq.n	80077b4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80077a8:	4b05      	ldr	r3, [pc, #20]	; (80077c0 <prvCheckForValidListAndQueue+0x60>)
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	490b      	ldr	r1, [pc, #44]	; (80077dc <prvCheckForValidListAndQueue+0x7c>)
 80077ae:	4618      	mov	r0, r3
 80077b0:	f7fe fcc2 	bl	8006138 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80077b4:	f000 f968 	bl	8007a88 <vPortExitCritical>
}
 80077b8:	bf00      	nop
 80077ba:	46bd      	mov	sp, r7
 80077bc:	bd80      	pop	{r7, pc}
 80077be:	bf00      	nop
 80077c0:	20000cb0 	.word	0x20000cb0
 80077c4:	20000c80 	.word	0x20000c80
 80077c8:	20000c94 	.word	0x20000c94
 80077cc:	20000ca8 	.word	0x20000ca8
 80077d0:	20000cac 	.word	0x20000cac
 80077d4:	20000d5c 	.word	0x20000d5c
 80077d8:	20000cbc 	.word	0x20000cbc
 80077dc:	0800a72c 	.word	0x0800a72c

080077e0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80077e0:	b480      	push	{r7}
 80077e2:	b085      	sub	sp, #20
 80077e4:	af00      	add	r7, sp, #0
 80077e6:	60f8      	str	r0, [r7, #12]
 80077e8:	60b9      	str	r1, [r7, #8]
 80077ea:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	3b04      	subs	r3, #4
 80077f0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80077f8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	3b04      	subs	r3, #4
 80077fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007800:	68bb      	ldr	r3, [r7, #8]
 8007802:	f023 0201 	bic.w	r2, r3, #1
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	3b04      	subs	r3, #4
 800780e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007810:	4a0c      	ldr	r2, [pc, #48]	; (8007844 <pxPortInitialiseStack+0x64>)
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	3b14      	subs	r3, #20
 800781a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800781c:	687a      	ldr	r2, [r7, #4]
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	3b04      	subs	r3, #4
 8007826:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	f06f 0202 	mvn.w	r2, #2
 800782e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	3b20      	subs	r3, #32
 8007834:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007836:	68fb      	ldr	r3, [r7, #12]
}
 8007838:	4618      	mov	r0, r3
 800783a:	3714      	adds	r7, #20
 800783c:	46bd      	mov	sp, r7
 800783e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007842:	4770      	bx	lr
 8007844:	08007849 	.word	0x08007849

08007848 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007848:	b480      	push	{r7}
 800784a:	b085      	sub	sp, #20
 800784c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800784e:	2300      	movs	r3, #0
 8007850:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007852:	4b11      	ldr	r3, [pc, #68]	; (8007898 <prvTaskExitError+0x50>)
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	f1b3 3fff 	cmp.w	r3, #4294967295
 800785a:	d009      	beq.n	8007870 <prvTaskExitError+0x28>
 800785c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007860:	f383 8811 	msr	BASEPRI, r3
 8007864:	f3bf 8f6f 	isb	sy
 8007868:	f3bf 8f4f 	dsb	sy
 800786c:	60fb      	str	r3, [r7, #12]
 800786e:	e7fe      	b.n	800786e <prvTaskExitError+0x26>
 8007870:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007874:	f383 8811 	msr	BASEPRI, r3
 8007878:	f3bf 8f6f 	isb	sy
 800787c:	f3bf 8f4f 	dsb	sy
 8007880:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007882:	bf00      	nop
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	2b00      	cmp	r3, #0
 8007888:	d0fc      	beq.n	8007884 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800788a:	bf00      	nop
 800788c:	3714      	adds	r7, #20
 800788e:	46bd      	mov	sp, r7
 8007890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007894:	4770      	bx	lr
 8007896:	bf00      	nop
 8007898:	20000008 	.word	0x20000008
 800789c:	00000000 	.word	0x00000000

080078a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80078a0:	4b07      	ldr	r3, [pc, #28]	; (80078c0 <pxCurrentTCBConst2>)
 80078a2:	6819      	ldr	r1, [r3, #0]
 80078a4:	6808      	ldr	r0, [r1, #0]
 80078a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078aa:	f380 8809 	msr	PSP, r0
 80078ae:	f3bf 8f6f 	isb	sy
 80078b2:	f04f 0000 	mov.w	r0, #0
 80078b6:	f380 8811 	msr	BASEPRI, r0
 80078ba:	4770      	bx	lr
 80078bc:	f3af 8000 	nop.w

080078c0 <pxCurrentTCBConst2>:
 80078c0:	20000780 	.word	0x20000780
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80078c4:	bf00      	nop
 80078c6:	bf00      	nop

080078c8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80078c8:	4808      	ldr	r0, [pc, #32]	; (80078ec <prvPortStartFirstTask+0x24>)
 80078ca:	6800      	ldr	r0, [r0, #0]
 80078cc:	6800      	ldr	r0, [r0, #0]
 80078ce:	f380 8808 	msr	MSP, r0
 80078d2:	f04f 0000 	mov.w	r0, #0
 80078d6:	f380 8814 	msr	CONTROL, r0
 80078da:	b662      	cpsie	i
 80078dc:	b661      	cpsie	f
 80078de:	f3bf 8f4f 	dsb	sy
 80078e2:	f3bf 8f6f 	isb	sy
 80078e6:	df00      	svc	0
 80078e8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80078ea:	bf00      	nop
 80078ec:	e000ed08 	.word	0xe000ed08

080078f0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80078f0:	b580      	push	{r7, lr}
 80078f2:	b086      	sub	sp, #24
 80078f4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80078f6:	4b44      	ldr	r3, [pc, #272]	; (8007a08 <xPortStartScheduler+0x118>)
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	4a44      	ldr	r2, [pc, #272]	; (8007a0c <xPortStartScheduler+0x11c>)
 80078fc:	4293      	cmp	r3, r2
 80078fe:	d109      	bne.n	8007914 <xPortStartScheduler+0x24>
 8007900:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007904:	f383 8811 	msr	BASEPRI, r3
 8007908:	f3bf 8f6f 	isb	sy
 800790c:	f3bf 8f4f 	dsb	sy
 8007910:	613b      	str	r3, [r7, #16]
 8007912:	e7fe      	b.n	8007912 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007914:	4b3c      	ldr	r3, [pc, #240]	; (8007a08 <xPortStartScheduler+0x118>)
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	4a3d      	ldr	r2, [pc, #244]	; (8007a10 <xPortStartScheduler+0x120>)
 800791a:	4293      	cmp	r3, r2
 800791c:	d109      	bne.n	8007932 <xPortStartScheduler+0x42>
 800791e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007922:	f383 8811 	msr	BASEPRI, r3
 8007926:	f3bf 8f6f 	isb	sy
 800792a:	f3bf 8f4f 	dsb	sy
 800792e:	60fb      	str	r3, [r7, #12]
 8007930:	e7fe      	b.n	8007930 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007932:	4b38      	ldr	r3, [pc, #224]	; (8007a14 <xPortStartScheduler+0x124>)
 8007934:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007936:	697b      	ldr	r3, [r7, #20]
 8007938:	781b      	ldrb	r3, [r3, #0]
 800793a:	b2db      	uxtb	r3, r3
 800793c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800793e:	697b      	ldr	r3, [r7, #20]
 8007940:	22ff      	movs	r2, #255	; 0xff
 8007942:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007944:	697b      	ldr	r3, [r7, #20]
 8007946:	781b      	ldrb	r3, [r3, #0]
 8007948:	b2db      	uxtb	r3, r3
 800794a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800794c:	78fb      	ldrb	r3, [r7, #3]
 800794e:	b2db      	uxtb	r3, r3
 8007950:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007954:	b2da      	uxtb	r2, r3
 8007956:	4b30      	ldr	r3, [pc, #192]	; (8007a18 <xPortStartScheduler+0x128>)
 8007958:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800795a:	4b30      	ldr	r3, [pc, #192]	; (8007a1c <xPortStartScheduler+0x12c>)
 800795c:	2207      	movs	r2, #7
 800795e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007960:	e009      	b.n	8007976 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8007962:	4b2e      	ldr	r3, [pc, #184]	; (8007a1c <xPortStartScheduler+0x12c>)
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	3b01      	subs	r3, #1
 8007968:	4a2c      	ldr	r2, [pc, #176]	; (8007a1c <xPortStartScheduler+0x12c>)
 800796a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800796c:	78fb      	ldrb	r3, [r7, #3]
 800796e:	b2db      	uxtb	r3, r3
 8007970:	005b      	lsls	r3, r3, #1
 8007972:	b2db      	uxtb	r3, r3
 8007974:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007976:	78fb      	ldrb	r3, [r7, #3]
 8007978:	b2db      	uxtb	r3, r3
 800797a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800797e:	2b80      	cmp	r3, #128	; 0x80
 8007980:	d0ef      	beq.n	8007962 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007982:	4b26      	ldr	r3, [pc, #152]	; (8007a1c <xPortStartScheduler+0x12c>)
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	f1c3 0307 	rsb	r3, r3, #7
 800798a:	2b04      	cmp	r3, #4
 800798c:	d009      	beq.n	80079a2 <xPortStartScheduler+0xb2>
 800798e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007992:	f383 8811 	msr	BASEPRI, r3
 8007996:	f3bf 8f6f 	isb	sy
 800799a:	f3bf 8f4f 	dsb	sy
 800799e:	60bb      	str	r3, [r7, #8]
 80079a0:	e7fe      	b.n	80079a0 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80079a2:	4b1e      	ldr	r3, [pc, #120]	; (8007a1c <xPortStartScheduler+0x12c>)
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	021b      	lsls	r3, r3, #8
 80079a8:	4a1c      	ldr	r2, [pc, #112]	; (8007a1c <xPortStartScheduler+0x12c>)
 80079aa:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80079ac:	4b1b      	ldr	r3, [pc, #108]	; (8007a1c <xPortStartScheduler+0x12c>)
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80079b4:	4a19      	ldr	r2, [pc, #100]	; (8007a1c <xPortStartScheduler+0x12c>)
 80079b6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	b2da      	uxtb	r2, r3
 80079bc:	697b      	ldr	r3, [r7, #20]
 80079be:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80079c0:	4b17      	ldr	r3, [pc, #92]	; (8007a20 <xPortStartScheduler+0x130>)
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	4a16      	ldr	r2, [pc, #88]	; (8007a20 <xPortStartScheduler+0x130>)
 80079c6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80079ca:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80079cc:	4b14      	ldr	r3, [pc, #80]	; (8007a20 <xPortStartScheduler+0x130>)
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	4a13      	ldr	r2, [pc, #76]	; (8007a20 <xPortStartScheduler+0x130>)
 80079d2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80079d6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80079d8:	f000 f8d6 	bl	8007b88 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80079dc:	4b11      	ldr	r3, [pc, #68]	; (8007a24 <xPortStartScheduler+0x134>)
 80079de:	2200      	movs	r2, #0
 80079e0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80079e2:	f000 f8f5 	bl	8007bd0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80079e6:	4b10      	ldr	r3, [pc, #64]	; (8007a28 <xPortStartScheduler+0x138>)
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	4a0f      	ldr	r2, [pc, #60]	; (8007a28 <xPortStartScheduler+0x138>)
 80079ec:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80079f0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80079f2:	f7ff ff69 	bl	80078c8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80079f6:	f7fe ff9f 	bl	8006938 <vTaskSwitchContext>
	prvTaskExitError();
 80079fa:	f7ff ff25 	bl	8007848 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80079fe:	2300      	movs	r3, #0
}
 8007a00:	4618      	mov	r0, r3
 8007a02:	3718      	adds	r7, #24
 8007a04:	46bd      	mov	sp, r7
 8007a06:	bd80      	pop	{r7, pc}
 8007a08:	e000ed00 	.word	0xe000ed00
 8007a0c:	410fc271 	.word	0x410fc271
 8007a10:	410fc270 	.word	0x410fc270
 8007a14:	e000e400 	.word	0xe000e400
 8007a18:	20000dac 	.word	0x20000dac
 8007a1c:	20000db0 	.word	0x20000db0
 8007a20:	e000ed20 	.word	0xe000ed20
 8007a24:	20000008 	.word	0x20000008
 8007a28:	e000ef34 	.word	0xe000ef34

08007a2c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007a2c:	b480      	push	{r7}
 8007a2e:	b083      	sub	sp, #12
 8007a30:	af00      	add	r7, sp, #0
 8007a32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a36:	f383 8811 	msr	BASEPRI, r3
 8007a3a:	f3bf 8f6f 	isb	sy
 8007a3e:	f3bf 8f4f 	dsb	sy
 8007a42:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007a44:	4b0e      	ldr	r3, [pc, #56]	; (8007a80 <vPortEnterCritical+0x54>)
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	3301      	adds	r3, #1
 8007a4a:	4a0d      	ldr	r2, [pc, #52]	; (8007a80 <vPortEnterCritical+0x54>)
 8007a4c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007a4e:	4b0c      	ldr	r3, [pc, #48]	; (8007a80 <vPortEnterCritical+0x54>)
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	2b01      	cmp	r3, #1
 8007a54:	d10e      	bne.n	8007a74 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007a56:	4b0b      	ldr	r3, [pc, #44]	; (8007a84 <vPortEnterCritical+0x58>)
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	b2db      	uxtb	r3, r3
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d009      	beq.n	8007a74 <vPortEnterCritical+0x48>
 8007a60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a64:	f383 8811 	msr	BASEPRI, r3
 8007a68:	f3bf 8f6f 	isb	sy
 8007a6c:	f3bf 8f4f 	dsb	sy
 8007a70:	603b      	str	r3, [r7, #0]
 8007a72:	e7fe      	b.n	8007a72 <vPortEnterCritical+0x46>
	}
}
 8007a74:	bf00      	nop
 8007a76:	370c      	adds	r7, #12
 8007a78:	46bd      	mov	sp, r7
 8007a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a7e:	4770      	bx	lr
 8007a80:	20000008 	.word	0x20000008
 8007a84:	e000ed04 	.word	0xe000ed04

08007a88 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007a88:	b480      	push	{r7}
 8007a8a:	b083      	sub	sp, #12
 8007a8c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007a8e:	4b11      	ldr	r3, [pc, #68]	; (8007ad4 <vPortExitCritical+0x4c>)
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d109      	bne.n	8007aaa <vPortExitCritical+0x22>
 8007a96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a9a:	f383 8811 	msr	BASEPRI, r3
 8007a9e:	f3bf 8f6f 	isb	sy
 8007aa2:	f3bf 8f4f 	dsb	sy
 8007aa6:	607b      	str	r3, [r7, #4]
 8007aa8:	e7fe      	b.n	8007aa8 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8007aaa:	4b0a      	ldr	r3, [pc, #40]	; (8007ad4 <vPortExitCritical+0x4c>)
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	3b01      	subs	r3, #1
 8007ab0:	4a08      	ldr	r2, [pc, #32]	; (8007ad4 <vPortExitCritical+0x4c>)
 8007ab2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007ab4:	4b07      	ldr	r3, [pc, #28]	; (8007ad4 <vPortExitCritical+0x4c>)
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d104      	bne.n	8007ac6 <vPortExitCritical+0x3e>
 8007abc:	2300      	movs	r3, #0
 8007abe:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007ac0:	683b      	ldr	r3, [r7, #0]
 8007ac2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8007ac6:	bf00      	nop
 8007ac8:	370c      	adds	r7, #12
 8007aca:	46bd      	mov	sp, r7
 8007acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad0:	4770      	bx	lr
 8007ad2:	bf00      	nop
 8007ad4:	20000008 	.word	0x20000008
	...

08007ae0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007ae0:	f3ef 8009 	mrs	r0, PSP
 8007ae4:	f3bf 8f6f 	isb	sy
 8007ae8:	4b15      	ldr	r3, [pc, #84]	; (8007b40 <pxCurrentTCBConst>)
 8007aea:	681a      	ldr	r2, [r3, #0]
 8007aec:	f01e 0f10 	tst.w	lr, #16
 8007af0:	bf08      	it	eq
 8007af2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007af6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007afa:	6010      	str	r0, [r2, #0]
 8007afc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007b00:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007b04:	f380 8811 	msr	BASEPRI, r0
 8007b08:	f3bf 8f4f 	dsb	sy
 8007b0c:	f3bf 8f6f 	isb	sy
 8007b10:	f7fe ff12 	bl	8006938 <vTaskSwitchContext>
 8007b14:	f04f 0000 	mov.w	r0, #0
 8007b18:	f380 8811 	msr	BASEPRI, r0
 8007b1c:	bc09      	pop	{r0, r3}
 8007b1e:	6819      	ldr	r1, [r3, #0]
 8007b20:	6808      	ldr	r0, [r1, #0]
 8007b22:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b26:	f01e 0f10 	tst.w	lr, #16
 8007b2a:	bf08      	it	eq
 8007b2c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007b30:	f380 8809 	msr	PSP, r0
 8007b34:	f3bf 8f6f 	isb	sy
 8007b38:	4770      	bx	lr
 8007b3a:	bf00      	nop
 8007b3c:	f3af 8000 	nop.w

08007b40 <pxCurrentTCBConst>:
 8007b40:	20000780 	.word	0x20000780
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007b44:	bf00      	nop
 8007b46:	bf00      	nop

08007b48 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007b48:	b580      	push	{r7, lr}
 8007b4a:	b082      	sub	sp, #8
 8007b4c:	af00      	add	r7, sp, #0
	__asm volatile
 8007b4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b52:	f383 8811 	msr	BASEPRI, r3
 8007b56:	f3bf 8f6f 	isb	sy
 8007b5a:	f3bf 8f4f 	dsb	sy
 8007b5e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007b60:	f7fe fe2c 	bl	80067bc <xTaskIncrementTick>
 8007b64:	4603      	mov	r3, r0
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d003      	beq.n	8007b72 <xPortSysTickHandler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007b6a:	4b06      	ldr	r3, [pc, #24]	; (8007b84 <xPortSysTickHandler+0x3c>)
 8007b6c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007b70:	601a      	str	r2, [r3, #0]
 8007b72:	2300      	movs	r3, #0
 8007b74:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007b76:	683b      	ldr	r3, [r7, #0]
 8007b78:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8007b7c:	bf00      	nop
 8007b7e:	3708      	adds	r7, #8
 8007b80:	46bd      	mov	sp, r7
 8007b82:	bd80      	pop	{r7, pc}
 8007b84:	e000ed04 	.word	0xe000ed04

08007b88 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007b88:	b480      	push	{r7}
 8007b8a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007b8c:	4b0b      	ldr	r3, [pc, #44]	; (8007bbc <vPortSetupTimerInterrupt+0x34>)
 8007b8e:	2200      	movs	r2, #0
 8007b90:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007b92:	4b0b      	ldr	r3, [pc, #44]	; (8007bc0 <vPortSetupTimerInterrupt+0x38>)
 8007b94:	2200      	movs	r2, #0
 8007b96:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007b98:	4b0a      	ldr	r3, [pc, #40]	; (8007bc4 <vPortSetupTimerInterrupt+0x3c>)
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	4a0a      	ldr	r2, [pc, #40]	; (8007bc8 <vPortSetupTimerInterrupt+0x40>)
 8007b9e:	fba2 2303 	umull	r2, r3, r2, r3
 8007ba2:	099b      	lsrs	r3, r3, #6
 8007ba4:	4a09      	ldr	r2, [pc, #36]	; (8007bcc <vPortSetupTimerInterrupt+0x44>)
 8007ba6:	3b01      	subs	r3, #1
 8007ba8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007baa:	4b04      	ldr	r3, [pc, #16]	; (8007bbc <vPortSetupTimerInterrupt+0x34>)
 8007bac:	2207      	movs	r2, #7
 8007bae:	601a      	str	r2, [r3, #0]
}
 8007bb0:	bf00      	nop
 8007bb2:	46bd      	mov	sp, r7
 8007bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb8:	4770      	bx	lr
 8007bba:	bf00      	nop
 8007bbc:	e000e010 	.word	0xe000e010
 8007bc0:	e000e018 	.word	0xe000e018
 8007bc4:	2000000c 	.word	0x2000000c
 8007bc8:	10624dd3 	.word	0x10624dd3
 8007bcc:	e000e014 	.word	0xe000e014

08007bd0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007bd0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007be0 <vPortEnableVFP+0x10>
 8007bd4:	6801      	ldr	r1, [r0, #0]
 8007bd6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8007bda:	6001      	str	r1, [r0, #0]
 8007bdc:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007bde:	bf00      	nop
 8007be0:	e000ed88 	.word	0xe000ed88

08007be4 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007be4:	b480      	push	{r7}
 8007be6:	b085      	sub	sp, #20
 8007be8:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007bea:	f3ef 8305 	mrs	r3, IPSR
 8007bee:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	2b0f      	cmp	r3, #15
 8007bf4:	d913      	bls.n	8007c1e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007bf6:	4a16      	ldr	r2, [pc, #88]	; (8007c50 <vPortValidateInterruptPriority+0x6c>)
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	4413      	add	r3, r2
 8007bfc:	781b      	ldrb	r3, [r3, #0]
 8007bfe:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007c00:	4b14      	ldr	r3, [pc, #80]	; (8007c54 <vPortValidateInterruptPriority+0x70>)
 8007c02:	781b      	ldrb	r3, [r3, #0]
 8007c04:	7afa      	ldrb	r2, [r7, #11]
 8007c06:	429a      	cmp	r2, r3
 8007c08:	d209      	bcs.n	8007c1e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8007c0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c0e:	f383 8811 	msr	BASEPRI, r3
 8007c12:	f3bf 8f6f 	isb	sy
 8007c16:	f3bf 8f4f 	dsb	sy
 8007c1a:	607b      	str	r3, [r7, #4]
 8007c1c:	e7fe      	b.n	8007c1c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007c1e:	4b0e      	ldr	r3, [pc, #56]	; (8007c58 <vPortValidateInterruptPriority+0x74>)
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007c26:	4b0d      	ldr	r3, [pc, #52]	; (8007c5c <vPortValidateInterruptPriority+0x78>)
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	429a      	cmp	r2, r3
 8007c2c:	d909      	bls.n	8007c42 <vPortValidateInterruptPriority+0x5e>
 8007c2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c32:	f383 8811 	msr	BASEPRI, r3
 8007c36:	f3bf 8f6f 	isb	sy
 8007c3a:	f3bf 8f4f 	dsb	sy
 8007c3e:	603b      	str	r3, [r7, #0]
 8007c40:	e7fe      	b.n	8007c40 <vPortValidateInterruptPriority+0x5c>
	}
 8007c42:	bf00      	nop
 8007c44:	3714      	adds	r7, #20
 8007c46:	46bd      	mov	sp, r7
 8007c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c4c:	4770      	bx	lr
 8007c4e:	bf00      	nop
 8007c50:	e000e3f0 	.word	0xe000e3f0
 8007c54:	20000dac 	.word	0x20000dac
 8007c58:	e000ed0c 	.word	0xe000ed0c
 8007c5c:	20000db0 	.word	0x20000db0

08007c60 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007c60:	b580      	push	{r7, lr}
 8007c62:	b08a      	sub	sp, #40	; 0x28
 8007c64:	af00      	add	r7, sp, #0
 8007c66:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007c68:	2300      	movs	r3, #0
 8007c6a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007c6c:	f7fe fcec 	bl	8006648 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007c70:	4b57      	ldr	r3, [pc, #348]	; (8007dd0 <pvPortMalloc+0x170>)
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d101      	bne.n	8007c7c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007c78:	f000 f90c 	bl	8007e94 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007c7c:	4b55      	ldr	r3, [pc, #340]	; (8007dd4 <pvPortMalloc+0x174>)
 8007c7e:	681a      	ldr	r2, [r3, #0]
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	4013      	ands	r3, r2
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	f040 808c 	bne.w	8007da2 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d01c      	beq.n	8007cca <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8007c90:	2208      	movs	r2, #8
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	4413      	add	r3, r2
 8007c96:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	f003 0307 	and.w	r3, r3, #7
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d013      	beq.n	8007cca <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	f023 0307 	bic.w	r3, r3, #7
 8007ca8:	3308      	adds	r3, #8
 8007caa:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	f003 0307 	and.w	r3, r3, #7
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d009      	beq.n	8007cca <pvPortMalloc+0x6a>
 8007cb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cba:	f383 8811 	msr	BASEPRI, r3
 8007cbe:	f3bf 8f6f 	isb	sy
 8007cc2:	f3bf 8f4f 	dsb	sy
 8007cc6:	617b      	str	r3, [r7, #20]
 8007cc8:	e7fe      	b.n	8007cc8 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d068      	beq.n	8007da2 <pvPortMalloc+0x142>
 8007cd0:	4b41      	ldr	r3, [pc, #260]	; (8007dd8 <pvPortMalloc+0x178>)
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	687a      	ldr	r2, [r7, #4]
 8007cd6:	429a      	cmp	r2, r3
 8007cd8:	d863      	bhi.n	8007da2 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007cda:	4b40      	ldr	r3, [pc, #256]	; (8007ddc <pvPortMalloc+0x17c>)
 8007cdc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007cde:	4b3f      	ldr	r3, [pc, #252]	; (8007ddc <pvPortMalloc+0x17c>)
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007ce4:	e004      	b.n	8007cf0 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8007ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ce8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cf2:	685b      	ldr	r3, [r3, #4]
 8007cf4:	687a      	ldr	r2, [r7, #4]
 8007cf6:	429a      	cmp	r2, r3
 8007cf8:	d903      	bls.n	8007d02 <pvPortMalloc+0xa2>
 8007cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d1f1      	bne.n	8007ce6 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007d02:	4b33      	ldr	r3, [pc, #204]	; (8007dd0 <pvPortMalloc+0x170>)
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007d08:	429a      	cmp	r2, r3
 8007d0a:	d04a      	beq.n	8007da2 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007d0c:	6a3b      	ldr	r3, [r7, #32]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	2208      	movs	r2, #8
 8007d12:	4413      	add	r3, r2
 8007d14:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d18:	681a      	ldr	r2, [r3, #0]
 8007d1a:	6a3b      	ldr	r3, [r7, #32]
 8007d1c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d20:	685a      	ldr	r2, [r3, #4]
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	1ad2      	subs	r2, r2, r3
 8007d26:	2308      	movs	r3, #8
 8007d28:	005b      	lsls	r3, r3, #1
 8007d2a:	429a      	cmp	r2, r3
 8007d2c:	d91e      	bls.n	8007d6c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007d2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	4413      	add	r3, r2
 8007d34:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007d36:	69bb      	ldr	r3, [r7, #24]
 8007d38:	f003 0307 	and.w	r3, r3, #7
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d009      	beq.n	8007d54 <pvPortMalloc+0xf4>
 8007d40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d44:	f383 8811 	msr	BASEPRI, r3
 8007d48:	f3bf 8f6f 	isb	sy
 8007d4c:	f3bf 8f4f 	dsb	sy
 8007d50:	613b      	str	r3, [r7, #16]
 8007d52:	e7fe      	b.n	8007d52 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d56:	685a      	ldr	r2, [r3, #4]
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	1ad2      	subs	r2, r2, r3
 8007d5c:	69bb      	ldr	r3, [r7, #24]
 8007d5e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d62:	687a      	ldr	r2, [r7, #4]
 8007d64:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007d66:	69b8      	ldr	r0, [r7, #24]
 8007d68:	f000 f8f6 	bl	8007f58 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007d6c:	4b1a      	ldr	r3, [pc, #104]	; (8007dd8 <pvPortMalloc+0x178>)
 8007d6e:	681a      	ldr	r2, [r3, #0]
 8007d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d72:	685b      	ldr	r3, [r3, #4]
 8007d74:	1ad3      	subs	r3, r2, r3
 8007d76:	4a18      	ldr	r2, [pc, #96]	; (8007dd8 <pvPortMalloc+0x178>)
 8007d78:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007d7a:	4b17      	ldr	r3, [pc, #92]	; (8007dd8 <pvPortMalloc+0x178>)
 8007d7c:	681a      	ldr	r2, [r3, #0]
 8007d7e:	4b18      	ldr	r3, [pc, #96]	; (8007de0 <pvPortMalloc+0x180>)
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	429a      	cmp	r2, r3
 8007d84:	d203      	bcs.n	8007d8e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007d86:	4b14      	ldr	r3, [pc, #80]	; (8007dd8 <pvPortMalloc+0x178>)
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	4a15      	ldr	r2, [pc, #84]	; (8007de0 <pvPortMalloc+0x180>)
 8007d8c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d90:	685a      	ldr	r2, [r3, #4]
 8007d92:	4b10      	ldr	r3, [pc, #64]	; (8007dd4 <pvPortMalloc+0x174>)
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	431a      	orrs	r2, r3
 8007d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d9a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d9e:	2200      	movs	r2, #0
 8007da0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007da2:	f7fe fc5f 	bl	8006664 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007da6:	69fb      	ldr	r3, [r7, #28]
 8007da8:	f003 0307 	and.w	r3, r3, #7
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d009      	beq.n	8007dc4 <pvPortMalloc+0x164>
 8007db0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007db4:	f383 8811 	msr	BASEPRI, r3
 8007db8:	f3bf 8f6f 	isb	sy
 8007dbc:	f3bf 8f4f 	dsb	sy
 8007dc0:	60fb      	str	r3, [r7, #12]
 8007dc2:	e7fe      	b.n	8007dc2 <pvPortMalloc+0x162>
	return pvReturn;
 8007dc4:	69fb      	ldr	r3, [r7, #28]
}
 8007dc6:	4618      	mov	r0, r3
 8007dc8:	3728      	adds	r7, #40	; 0x28
 8007dca:	46bd      	mov	sp, r7
 8007dcc:	bd80      	pop	{r7, pc}
 8007dce:	bf00      	nop
 8007dd0:	2000d5bc 	.word	0x2000d5bc
 8007dd4:	2000d5c8 	.word	0x2000d5c8
 8007dd8:	2000d5c0 	.word	0x2000d5c0
 8007ddc:	2000d5b4 	.word	0x2000d5b4
 8007de0:	2000d5c4 	.word	0x2000d5c4

08007de4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007de4:	b580      	push	{r7, lr}
 8007de6:	b086      	sub	sp, #24
 8007de8:	af00      	add	r7, sp, #0
 8007dea:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d046      	beq.n	8007e84 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007df6:	2308      	movs	r3, #8
 8007df8:	425b      	negs	r3, r3
 8007dfa:	697a      	ldr	r2, [r7, #20]
 8007dfc:	4413      	add	r3, r2
 8007dfe:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007e00:	697b      	ldr	r3, [r7, #20]
 8007e02:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007e04:	693b      	ldr	r3, [r7, #16]
 8007e06:	685a      	ldr	r2, [r3, #4]
 8007e08:	4b20      	ldr	r3, [pc, #128]	; (8007e8c <vPortFree+0xa8>)
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	4013      	ands	r3, r2
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d109      	bne.n	8007e26 <vPortFree+0x42>
 8007e12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e16:	f383 8811 	msr	BASEPRI, r3
 8007e1a:	f3bf 8f6f 	isb	sy
 8007e1e:	f3bf 8f4f 	dsb	sy
 8007e22:	60fb      	str	r3, [r7, #12]
 8007e24:	e7fe      	b.n	8007e24 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007e26:	693b      	ldr	r3, [r7, #16]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d009      	beq.n	8007e42 <vPortFree+0x5e>
 8007e2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e32:	f383 8811 	msr	BASEPRI, r3
 8007e36:	f3bf 8f6f 	isb	sy
 8007e3a:	f3bf 8f4f 	dsb	sy
 8007e3e:	60bb      	str	r3, [r7, #8]
 8007e40:	e7fe      	b.n	8007e40 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007e42:	693b      	ldr	r3, [r7, #16]
 8007e44:	685a      	ldr	r2, [r3, #4]
 8007e46:	4b11      	ldr	r3, [pc, #68]	; (8007e8c <vPortFree+0xa8>)
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	4013      	ands	r3, r2
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d019      	beq.n	8007e84 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007e50:	693b      	ldr	r3, [r7, #16]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d115      	bne.n	8007e84 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007e58:	693b      	ldr	r3, [r7, #16]
 8007e5a:	685a      	ldr	r2, [r3, #4]
 8007e5c:	4b0b      	ldr	r3, [pc, #44]	; (8007e8c <vPortFree+0xa8>)
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	43db      	mvns	r3, r3
 8007e62:	401a      	ands	r2, r3
 8007e64:	693b      	ldr	r3, [r7, #16]
 8007e66:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007e68:	f7fe fbee 	bl	8006648 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007e6c:	693b      	ldr	r3, [r7, #16]
 8007e6e:	685a      	ldr	r2, [r3, #4]
 8007e70:	4b07      	ldr	r3, [pc, #28]	; (8007e90 <vPortFree+0xac>)
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	4413      	add	r3, r2
 8007e76:	4a06      	ldr	r2, [pc, #24]	; (8007e90 <vPortFree+0xac>)
 8007e78:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007e7a:	6938      	ldr	r0, [r7, #16]
 8007e7c:	f000 f86c 	bl	8007f58 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8007e80:	f7fe fbf0 	bl	8006664 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007e84:	bf00      	nop
 8007e86:	3718      	adds	r7, #24
 8007e88:	46bd      	mov	sp, r7
 8007e8a:	bd80      	pop	{r7, pc}
 8007e8c:	2000d5c8 	.word	0x2000d5c8
 8007e90:	2000d5c0 	.word	0x2000d5c0

08007e94 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007e94:	b480      	push	{r7}
 8007e96:	b085      	sub	sp, #20
 8007e98:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007e9a:	f44f 4348 	mov.w	r3, #51200	; 0xc800
 8007e9e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007ea0:	4b27      	ldr	r3, [pc, #156]	; (8007f40 <prvHeapInit+0xac>)
 8007ea2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	f003 0307 	and.w	r3, r3, #7
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d00c      	beq.n	8007ec8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	3307      	adds	r3, #7
 8007eb2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	f023 0307 	bic.w	r3, r3, #7
 8007eba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007ebc:	68ba      	ldr	r2, [r7, #8]
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	1ad3      	subs	r3, r2, r3
 8007ec2:	4a1f      	ldr	r2, [pc, #124]	; (8007f40 <prvHeapInit+0xac>)
 8007ec4:	4413      	add	r3, r2
 8007ec6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007ecc:	4a1d      	ldr	r2, [pc, #116]	; (8007f44 <prvHeapInit+0xb0>)
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007ed2:	4b1c      	ldr	r3, [pc, #112]	; (8007f44 <prvHeapInit+0xb0>)
 8007ed4:	2200      	movs	r2, #0
 8007ed6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	68ba      	ldr	r2, [r7, #8]
 8007edc:	4413      	add	r3, r2
 8007ede:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007ee0:	2208      	movs	r2, #8
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	1a9b      	subs	r3, r3, r2
 8007ee6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	f023 0307 	bic.w	r3, r3, #7
 8007eee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	4a15      	ldr	r2, [pc, #84]	; (8007f48 <prvHeapInit+0xb4>)
 8007ef4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007ef6:	4b14      	ldr	r3, [pc, #80]	; (8007f48 <prvHeapInit+0xb4>)
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	2200      	movs	r2, #0
 8007efc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007efe:	4b12      	ldr	r3, [pc, #72]	; (8007f48 <prvHeapInit+0xb4>)
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	2200      	movs	r2, #0
 8007f04:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007f0a:	683b      	ldr	r3, [r7, #0]
 8007f0c:	68fa      	ldr	r2, [r7, #12]
 8007f0e:	1ad2      	subs	r2, r2, r3
 8007f10:	683b      	ldr	r3, [r7, #0]
 8007f12:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007f14:	4b0c      	ldr	r3, [pc, #48]	; (8007f48 <prvHeapInit+0xb4>)
 8007f16:	681a      	ldr	r2, [r3, #0]
 8007f18:	683b      	ldr	r3, [r7, #0]
 8007f1a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007f1c:	683b      	ldr	r3, [r7, #0]
 8007f1e:	685b      	ldr	r3, [r3, #4]
 8007f20:	4a0a      	ldr	r2, [pc, #40]	; (8007f4c <prvHeapInit+0xb8>)
 8007f22:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007f24:	683b      	ldr	r3, [r7, #0]
 8007f26:	685b      	ldr	r3, [r3, #4]
 8007f28:	4a09      	ldr	r2, [pc, #36]	; (8007f50 <prvHeapInit+0xbc>)
 8007f2a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007f2c:	4b09      	ldr	r3, [pc, #36]	; (8007f54 <prvHeapInit+0xc0>)
 8007f2e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007f32:	601a      	str	r2, [r3, #0]
}
 8007f34:	bf00      	nop
 8007f36:	3714      	adds	r7, #20
 8007f38:	46bd      	mov	sp, r7
 8007f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f3e:	4770      	bx	lr
 8007f40:	20000db4 	.word	0x20000db4
 8007f44:	2000d5b4 	.word	0x2000d5b4
 8007f48:	2000d5bc 	.word	0x2000d5bc
 8007f4c:	2000d5c4 	.word	0x2000d5c4
 8007f50:	2000d5c0 	.word	0x2000d5c0
 8007f54:	2000d5c8 	.word	0x2000d5c8

08007f58 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007f58:	b480      	push	{r7}
 8007f5a:	b085      	sub	sp, #20
 8007f5c:	af00      	add	r7, sp, #0
 8007f5e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007f60:	4b28      	ldr	r3, [pc, #160]	; (8008004 <prvInsertBlockIntoFreeList+0xac>)
 8007f62:	60fb      	str	r3, [r7, #12]
 8007f64:	e002      	b.n	8007f6c <prvInsertBlockIntoFreeList+0x14>
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	60fb      	str	r3, [r7, #12]
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	687a      	ldr	r2, [r7, #4]
 8007f72:	429a      	cmp	r2, r3
 8007f74:	d8f7      	bhi.n	8007f66 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	685b      	ldr	r3, [r3, #4]
 8007f7e:	68ba      	ldr	r2, [r7, #8]
 8007f80:	4413      	add	r3, r2
 8007f82:	687a      	ldr	r2, [r7, #4]
 8007f84:	429a      	cmp	r2, r3
 8007f86:	d108      	bne.n	8007f9a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	685a      	ldr	r2, [r3, #4]
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	685b      	ldr	r3, [r3, #4]
 8007f90:	441a      	add	r2, r3
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	685b      	ldr	r3, [r3, #4]
 8007fa2:	68ba      	ldr	r2, [r7, #8]
 8007fa4:	441a      	add	r2, r3
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	429a      	cmp	r2, r3
 8007fac:	d118      	bne.n	8007fe0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	681a      	ldr	r2, [r3, #0]
 8007fb2:	4b15      	ldr	r3, [pc, #84]	; (8008008 <prvInsertBlockIntoFreeList+0xb0>)
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	429a      	cmp	r2, r3
 8007fb8:	d00d      	beq.n	8007fd6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	685a      	ldr	r2, [r3, #4]
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	685b      	ldr	r3, [r3, #4]
 8007fc4:	441a      	add	r2, r3
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	681a      	ldr	r2, [r3, #0]
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	601a      	str	r2, [r3, #0]
 8007fd4:	e008      	b.n	8007fe8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007fd6:	4b0c      	ldr	r3, [pc, #48]	; (8008008 <prvInsertBlockIntoFreeList+0xb0>)
 8007fd8:	681a      	ldr	r2, [r3, #0]
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	601a      	str	r2, [r3, #0]
 8007fde:	e003      	b.n	8007fe8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	681a      	ldr	r2, [r3, #0]
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007fe8:	68fa      	ldr	r2, [r7, #12]
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	429a      	cmp	r2, r3
 8007fee:	d002      	beq.n	8007ff6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	687a      	ldr	r2, [r7, #4]
 8007ff4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007ff6:	bf00      	nop
 8007ff8:	3714      	adds	r7, #20
 8007ffa:	46bd      	mov	sp, r7
 8007ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008000:	4770      	bx	lr
 8008002:	bf00      	nop
 8008004:	2000d5b4 	.word	0x2000d5b4
 8008008:	2000d5bc 	.word	0x2000d5bc

0800800c <HAL_GetUID>:
osThreadId startup_handle;

uint8_t chipUid[12];

void HAL_GetUID(void)
{
 800800c:	b480      	push	{r7}
 800800e:	b083      	sub	sp, #12
 8008010:	af00      	add	r7, sp, #0
	uint8_t i;
	uint8_t *pUID = (uint8_t *) (UID_BASE);
 8008012:	4b0c      	ldr	r3, [pc, #48]	; (8008044 <HAL_GetUID+0x38>)
 8008014:	603b      	str	r3, [r7, #0]

	for (i = 0; i != 12; i++)
 8008016:	2300      	movs	r3, #0
 8008018:	71fb      	strb	r3, [r7, #7]
 800801a:	e009      	b.n	8008030 <HAL_GetUID+0x24>
	{
		chipUid[i] = *pUID++;
 800801c:	683b      	ldr	r3, [r7, #0]
 800801e:	1c5a      	adds	r2, r3, #1
 8008020:	603a      	str	r2, [r7, #0]
 8008022:	79fa      	ldrb	r2, [r7, #7]
 8008024:	7819      	ldrb	r1, [r3, #0]
 8008026:	4b08      	ldr	r3, [pc, #32]	; (8008048 <HAL_GetUID+0x3c>)
 8008028:	5499      	strb	r1, [r3, r2]
	for (i = 0; i != 12; i++)
 800802a:	79fb      	ldrb	r3, [r7, #7]
 800802c:	3301      	adds	r3, #1
 800802e:	71fb      	strb	r3, [r7, #7]
 8008030:	79fb      	ldrb	r3, [r7, #7]
 8008032:	2b0c      	cmp	r3, #12
 8008034:	d1f2      	bne.n	800801c <HAL_GetUID+0x10>
	}
}
 8008036:	bf00      	nop
 8008038:	370c      	adds	r7, #12
 800803a:	46bd      	mov	sp, r7
 800803c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008040:	4770      	bx	lr
 8008042:	bf00      	nop
 8008044:	1fff7590 	.word	0x1fff7590
 8008048:	2000d6c4 	.word	0x2000d6c4

0800804c <prtsrce_sysinf>:
 * @brief  show system id ,and clock
 * @retval int
 */

void prtsrce_sysinf(void)
{
 800804c:	b580      	push	{r7, lr}
 800804e:	b082      	sub	sp, #8
 8008050:	af00      	add	r7, sp, #0
	uint8_t i = 0;
 8008052:	2300      	movs	r3, #0
 8008054:	71fb      	strb	r3, [r7, #7]

	printf("*****************************************************\n");
 8008056:	482d      	ldr	r0, [pc, #180]	; (800810c <prtsrce_sysinf+0xc0>)
 8008058:	f001 fa1c 	bl	8009494 <puts>
	printf(" *\tTerminus lock use freertos ,version:V10.0.1\n");
 800805c:	482c      	ldr	r0, [pc, #176]	; (8008110 <prtsrce_sysinf+0xc4>)
 800805e:	f001 fa19 	bl	8009494 <puts>
	printf(
 8008062:	482c      	ldr	r0, [pc, #176]	; (8008114 <prtsrce_sysinf+0xc8>)
 8008064:	f001 fa16 	bl	8009494 <puts>
			" *\tBy terminus hwteam(BeiJing), project started in December 2018.\n");
	printf(" *\tBulid data=%s %s\n", __DATE__, __TIME__);
 8008068:	4a2b      	ldr	r2, [pc, #172]	; (8008118 <prtsrce_sysinf+0xcc>)
 800806a:	492c      	ldr	r1, [pc, #176]	; (800811c <prtsrce_sysinf+0xd0>)
 800806c:	482c      	ldr	r0, [pc, #176]	; (8008120 <prtsrce_sysinf+0xd4>)
 800806e:	f001 f989 	bl	8009384 <iprintf>
	//printf(" *\tCodeing version =%s\n" ,PRG_VERSION);
	//printf(" *\tSoft version =%s\n" ,SOFT_VERSION);
	//printf(" *\tHardware version =%s\n" ,HARD_VERSION);
	//printf(" *\tHardfault debug tool version =%s\n" ,CMB_SW_VERSION);
	printf(" *\tCPU:STM32L471REXX\n");
 8008072:	482c      	ldr	r0, [pc, #176]	; (8008124 <prtsrce_sysinf+0xd8>)
 8008074:	f001 fa0e 	bl	8009494 <puts>
	printf(" *\tHCLK:%ldHz\n", HAL_RCC_GetHCLKFreq());
 8008078:	f7fa f890 	bl	800219c <HAL_RCC_GetHCLKFreq>
 800807c:	4603      	mov	r3, r0
 800807e:	4619      	mov	r1, r3
 8008080:	4829      	ldr	r0, [pc, #164]	; (8008128 <prtsrce_sysinf+0xdc>)
 8008082:	f001 f97f 	bl	8009384 <iprintf>
	printf(" *\tPCLK1:%ldHz\n", HAL_RCC_GetPCLK1Freq());
 8008086:	f7fa f895 	bl	80021b4 <HAL_RCC_GetPCLK1Freq>
 800808a:	4603      	mov	r3, r0
 800808c:	4619      	mov	r1, r3
 800808e:	4827      	ldr	r0, [pc, #156]	; (800812c <prtsrce_sysinf+0xe0>)
 8008090:	f001 f978 	bl	8009384 <iprintf>
	printf(" *\tPCLK2:%ldHz\n", HAL_RCC_GetPCLK2Freq());
 8008094:	f7fa f8a4 	bl	80021e0 <HAL_RCC_GetPCLK2Freq>
 8008098:	4603      	mov	r3, r0
 800809a:	4619      	mov	r1, r3
 800809c:	4824      	ldr	r0, [pc, #144]	; (8008130 <prtsrce_sysinf+0xe4>)
 800809e:	f001 f971 	bl	8009384 <iprintf>
	printf(" *\tHAL version:0x%lX\n", HAL_GetHalVersion());
 80080a2:	f7f8 faa3 	bl	80005ec <HAL_GetHalVersion>
 80080a6:	4603      	mov	r3, r0
 80080a8:	4619      	mov	r1, r3
 80080aa:	4822      	ldr	r0, [pc, #136]	; (8008134 <prtsrce_sysinf+0xe8>)
 80080ac:	f001 f96a 	bl	8009384 <iprintf>
	printf(" *\tDevice revision ID:0x%lX\n", HAL_GetREVID());
 80080b0:	f7f8 faa6 	bl	8000600 <HAL_GetREVID>
 80080b4:	4603      	mov	r3, r0
 80080b6:	4619      	mov	r1, r3
 80080b8:	481f      	ldr	r0, [pc, #124]	; (8008138 <prtsrce_sysinf+0xec>)
 80080ba:	f001 f963 	bl	8009384 <iprintf>
	printf(" *\tDevice ID:0x%lX\n", HAL_GetDEVID());
 80080be:	f7f8 faad 	bl	800061c <HAL_GetDEVID>
 80080c2:	4603      	mov	r3, r0
 80080c4:	4619      	mov	r1, r3
 80080c6:	481d      	ldr	r0, [pc, #116]	; (800813c <prtsrce_sysinf+0xf0>)
 80080c8:	f001 f95c 	bl	8009384 <iprintf>
	printf(" *\tUnique device ID:0x");
 80080cc:	481c      	ldr	r0, [pc, #112]	; (8008140 <prtsrce_sysinf+0xf4>)
 80080ce:	f001 f959 	bl	8009384 <iprintf>
	for (i = 0; i < 12; i++)
 80080d2:	2300      	movs	r3, #0
 80080d4:	71fb      	strb	r3, [r7, #7]
 80080d6:	e009      	b.n	80080ec <prtsrce_sysinf+0xa0>
	{
		printf("%X", chipUid[i]);
 80080d8:	79fb      	ldrb	r3, [r7, #7]
 80080da:	4a1a      	ldr	r2, [pc, #104]	; (8008144 <prtsrce_sysinf+0xf8>)
 80080dc:	5cd3      	ldrb	r3, [r2, r3]
 80080de:	4619      	mov	r1, r3
 80080e0:	4819      	ldr	r0, [pc, #100]	; (8008148 <prtsrce_sysinf+0xfc>)
 80080e2:	f001 f94f 	bl	8009384 <iprintf>
	for (i = 0; i < 12; i++)
 80080e6:	79fb      	ldrb	r3, [r7, #7]
 80080e8:	3301      	adds	r3, #1
 80080ea:	71fb      	strb	r3, [r7, #7]
 80080ec:	79fb      	ldrb	r3, [r7, #7]
 80080ee:	2b0b      	cmp	r3, #11
 80080f0:	d9f2      	bls.n	80080d8 <prtsrce_sysinf+0x8c>
	}
	printf("\n");
 80080f2:	200a      	movs	r0, #10
 80080f4:	f001 f95e 	bl	80093b4 <putchar>
	printf("*****************************************************");
 80080f8:	4804      	ldr	r0, [pc, #16]	; (800810c <prtsrce_sysinf+0xc0>)
 80080fa:	f001 f943 	bl	8009384 <iprintf>
	printf("\n\n");
 80080fe:	4813      	ldr	r0, [pc, #76]	; (800814c <prtsrce_sysinf+0x100>)
 8008100:	f001 f9c8 	bl	8009494 <puts>
}
 8008104:	bf00      	nop
 8008106:	3708      	adds	r7, #8
 8008108:	46bd      	mov	sp, r7
 800810a:	bd80      	pop	{r7, pc}
 800810c:	0800a734 	.word	0x0800a734
 8008110:	0800a76c 	.word	0x0800a76c
 8008114:	0800a79c 	.word	0x0800a79c
 8008118:	0800a7e0 	.word	0x0800a7e0
 800811c:	0800a7ec 	.word	0x0800a7ec
 8008120:	0800a7f8 	.word	0x0800a7f8
 8008124:	0800a810 	.word	0x0800a810
 8008128:	0800a828 	.word	0x0800a828
 800812c:	0800a838 	.word	0x0800a838
 8008130:	0800a848 	.word	0x0800a848
 8008134:	0800a858 	.word	0x0800a858
 8008138:	0800a870 	.word	0x0800a870
 800813c:	0800a890 	.word	0x0800a890
 8008140:	0800a8a4 	.word	0x0800a8a4
 8008144:	2000d6c4 	.word	0x2000d6c4
 8008148:	0800a8bc 	.word	0x0800a8bc
 800814c:	0800a8c0 	.word	0x0800a8c0

08008150 <startup_task>:

DEV_HAND nvfd;
void startup_task(void *argument)
{
 8008150:	b580      	push	{r7, lr}
 8008152:	b082      	sub	sp, #8
 8008154:	af00      	add	r7, sp, #0
 8008156:	6078      	str	r0, [r7, #4]
	/* task init*/
	//_setup();
	while (1)
	{
		//feed_dog();
		CYT_LOGE(TAG, "start up task\n");
 8008158:	4a04      	ldr	r2, [pc, #16]	; (800816c <startup_task+0x1c>)
 800815a:	4905      	ldr	r1, [pc, #20]	; (8008170 <startup_task+0x20>)
 800815c:	2001      	movs	r0, #1
 800815e:	f000 fbb7 	bl	80088d0 <cyt_log_write>
		osDelay(20000);
 8008162:	f644 6020 	movw	r0, #20000	; 0x4e20
 8008166:	f7fc ffc3 	bl	80050f0 <osDelay>
		CYT_LOGE(TAG, "start up task\n");
 800816a:	e7f5      	b.n	8008158 <startup_task+0x8>
 800816c:	0800a8c4 	.word	0x0800a8c4
 8008170:	0800a8d4 	.word	0x0800a8d4

08008174 <startup>:
/**
 * @brief  creat start task, module init must into task
 * @retval int
 */
void startup(void)
{
 8008174:	b580      	push	{r7, lr}
 8008176:	b08a      	sub	sp, #40	; 0x28
 8008178:	af00      	add	r7, sp, #0
	//osThreadDef(stup_task, startup_task, osPriorityNormal,    0, 256);
	//startup_handle = osThreadCreate(osThread(stup_task), NULL);

	const osThreadAttr_t defaultTask_attributes =
 800817a:	1d3b      	adds	r3, r7, #4
 800817c:	2224      	movs	r2, #36	; 0x24
 800817e:	2100      	movs	r1, #0
 8008180:	4618      	mov	r0, r3
 8008182:	f001 f84e 	bl	8009222 <memset>
 8008186:	4b09      	ldr	r3, [pc, #36]	; (80081ac <startup+0x38>)
 8008188:	607b      	str	r3, [r7, #4]
 800818a:	2380      	movs	r3, #128	; 0x80
 800818c:	61bb      	str	r3, [r7, #24]
 800818e:	2318      	movs	r3, #24
 8008190:	61fb      	str	r3, [r7, #28]
	{ .name = "defaultTask", .priority = (osPriority_t) osPriorityNormal,
			.stack_size = 128 };
	startup_handle = osThreadNew(startup_task, NULL, &defaultTask_attributes);
 8008192:	1d3b      	adds	r3, r7, #4
 8008194:	461a      	mov	r2, r3
 8008196:	2100      	movs	r1, #0
 8008198:	4805      	ldr	r0, [pc, #20]	; (80081b0 <startup+0x3c>)
 800819a:	f7fc feff 	bl	8004f9c <osThreadNew>
 800819e:	4602      	mov	r2, r0
 80081a0:	4b04      	ldr	r3, [pc, #16]	; (80081b4 <startup+0x40>)
 80081a2:	601a      	str	r2, [r3, #0]

}
 80081a4:	bf00      	nop
 80081a6:	3728      	adds	r7, #40	; 0x28
 80081a8:	46bd      	mov	sp, r7
 80081aa:	bd80      	pop	{r7, pc}
 80081ac:	0800a8dc 	.word	0x0800a8dc
 80081b0:	08008151 	.word	0x08008151
 80081b4:	2000d6c0 	.word	0x2000d6c0

080081b8 <main>:
 * @brief  The application entry point.
 * @retval int
 */

int main(void)
{
 80081b8:	b580      	push	{r7, lr}
 80081ba:	af00      	add	r7, sp, #0
	/* Output error message for HARDFAULT*/
	//HAL_HardfaultDebug_init();
	/* reset of all peripherals, Initializes the Flash interface and the Systick. */

	CYT_LOG_ADD(TAG, CYT_LOG_DEBUG);
 80081bc:	2104      	movs	r1, #4
 80081be:	4814      	ldr	r0, [pc, #80]	; (8008210 <main+0x58>)
 80081c0:	f000 fafe 	bl	80087c0 <cyt_log_add_tag>

	HAL_Init();
 80081c4:	f7f8 f9dc 	bl	8000580 <HAL_Init>

	/* Get chip uid*/
	HAL_GetUID();
 80081c8:	f7ff ff20 	bl	800800c <HAL_GetUID>

	/* Configure the system clock */
	HAL_Sysclk_Init();
 80081cc:	f000 f85c 	bl	8008288 <HAL_Sysclk_Init>

	/* Config pwr clock*/
	//HAL_Pwr_Init();
	/* Init serial for printf port*/
	HAL_Debug_init();
 80081d0:	f000 fece 	bl	8008f70 <serial1_hal_init>

	osKernelInitialize();
 80081d4:	f7fc fe7a 	bl	8004ecc <osKernelInitialize>
	/* Call init function for freertos objects (in freertos.c) */
	startup();
 80081d8:	f7ff ffcc 	bl	8008174 <startup>

	CYT_LOGE(TAG, "start up task\n");
 80081dc:	4a0d      	ldr	r2, [pc, #52]	; (8008214 <main+0x5c>)
 80081de:	490c      	ldr	r1, [pc, #48]	; (8008210 <main+0x58>)
 80081e0:	2001      	movs	r0, #1
 80081e2:	f000 fb75 	bl	80088d0 <cyt_log_write>
	CYT_LOGW(TAG, "start up task\n");
 80081e6:	4a0b      	ldr	r2, [pc, #44]	; (8008214 <main+0x5c>)
 80081e8:	4909      	ldr	r1, [pc, #36]	; (8008210 <main+0x58>)
 80081ea:	2002      	movs	r0, #2
 80081ec:	f000 fb70 	bl	80088d0 <cyt_log_write>
	CYT_LOGI(TAG, "start up task\n");
 80081f0:	4a08      	ldr	r2, [pc, #32]	; (8008214 <main+0x5c>)
 80081f2:	4907      	ldr	r1, [pc, #28]	; (8008210 <main+0x58>)
 80081f4:	2003      	movs	r0, #3
 80081f6:	f000 fb6b 	bl	80088d0 <cyt_log_write>
	CYT_LOGD(TAG, "start up task\n");
 80081fa:	4a06      	ldr	r2, [pc, #24]	; (8008214 <main+0x5c>)
 80081fc:	4904      	ldr	r1, [pc, #16]	; (8008210 <main+0x58>)
 80081fe:	2004      	movs	r0, #4
 8008200:	f000 fb66 	bl	80088d0 <cyt_log_write>

	/* Printf system info ,clock device version...*/
	prtsrce_sysinf();
 8008204:	f7ff ff22 	bl	800804c <prtsrce_sysinf>

	/* Start scheduler */
	osKernelStart();
 8008208:	f7fc fe94 	bl	8004f34 <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */

	/* Infinite loop */
	while (1)
 800820c:	e7fe      	b.n	800820c <main+0x54>
 800820e:	bf00      	nop
 8008210:	0800a8d4 	.word	0x0800a8d4
 8008214:	0800a8c4 	.word	0x0800a8c4

08008218 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8008218:	b480      	push	{r7}
 800821a:	af00      	add	r7, sp, #0
	/* User can add his own implementation to report the HAL error return state */
	//log(ERR, "Into Error_Handler , file=%s ,line=%d.\n", file ,line);
}
 800821c:	bf00      	nop
 800821e:	46bd      	mov	sp, r7
 8008220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008224:	4770      	bx	lr

08008226 <assert_failed>:
 * @retval None
 */
extern void
after_sleep(void);
void assert_failed(char *file, uint32_t line)
{
 8008226:	b480      	push	{r7}
 8008228:	b083      	sub	sp, #12
 800822a:	af00      	add	r7, sp, #0
 800822c:	6078      	str	r0, [r7, #4]
 800822e:	6039      	str	r1, [r7, #0]
	//after_sleep();
	//printf("Wrong parameters value: file %s on line %d\r\n", file, line);
}
 8008230:	bf00      	nop
 8008232:	370c      	adds	r7, #12
 8008234:	46bd      	mov	sp, r7
 8008236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800823a:	4770      	bx	lr

0800823c <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */
PUTCHAR_PROTOTYPE
{
 800823c:	b580      	push	{r7, lr}
 800823e:	b084      	sub	sp, #16
 8008240:	af00      	add	r7, sp, #0
 8008242:	6078      	str	r0, [r7, #4]
	if (ch == '\n')
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	2b0a      	cmp	r3, #10
 8008248:	d109      	bne.n	800825e <__io_putchar+0x22>
	{
		uint8_t enter = '\r';
 800824a:	230d      	movs	r3, #13
 800824c:	73fb      	strb	r3, [r7, #15]
		HAL_UART_Transmit(&huart1, &enter, 1, 5000);
 800824e:	f107 010f 	add.w	r1, r7, #15
 8008252:	f241 3388 	movw	r3, #5000	; 0x1388
 8008256:	2201      	movs	r2, #1
 8008258:	480a      	ldr	r0, [pc, #40]	; (8008284 <__io_putchar+0x48>)
 800825a:	f7fb fc85 	bl	8003b68 <HAL_UART_Transmit>
	}

	if ((HAL_UART_Transmit(&huart1, (uint8_t *) &ch, 1, 5000)) != HAL_OK)
 800825e:	1d39      	adds	r1, r7, #4
 8008260:	f241 3388 	movw	r3, #5000	; 0x1388
 8008264:	2201      	movs	r2, #1
 8008266:	4807      	ldr	r0, [pc, #28]	; (8008284 <__io_putchar+0x48>)
 8008268:	f7fb fc7e 	bl	8003b68 <HAL_UART_Transmit>
 800826c:	4603      	mov	r3, r0
 800826e:	2b00      	cmp	r3, #0
 8008270:	d002      	beq.n	8008278 <__io_putchar+0x3c>
	{
		return -1;
 8008272:	f04f 33ff 	mov.w	r3, #4294967295
 8008276:	e000      	b.n	800827a <__io_putchar+0x3e>
	}
	return ch;
 8008278:	687b      	ldr	r3, [r7, #4]
}
 800827a:	4618      	mov	r0, r3
 800827c:	3710      	adds	r7, #16
 800827e:	46bd      	mov	sp, r7
 8008280:	bd80      	pop	{r7, pc}
 8008282:	bf00      	nop
 8008284:	2000d720 	.word	0x2000d720

08008288 <HAL_Sysclk_Init>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void HAL_Sysclk_Init(void)
{
 8008288:	b580      	push	{r7, lr}
 800828a:	b0b8      	sub	sp, #224	; 0xe0
 800828c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct =
 800828e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8008292:	2244      	movs	r2, #68	; 0x44
 8008294:	2100      	movs	r1, #0
 8008296:	4618      	mov	r0, r3
 8008298:	f000 ffc3 	bl	8009222 <memset>
	{ 0 };
	RCC_ClkInitTypeDef RCC_ClkInitStruct =
 800829c:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80082a0:	2200      	movs	r2, #0
 80082a2:	601a      	str	r2, [r3, #0]
 80082a4:	605a      	str	r2, [r3, #4]
 80082a6:	609a      	str	r2, [r3, #8]
 80082a8:	60da      	str	r2, [r3, #12]
 80082aa:	611a      	str	r2, [r3, #16]
	{ 0 };
	RCC_PeriphCLKInitTypeDef PeriphClkInit =
 80082ac:	1d3b      	adds	r3, r7, #4
 80082ae:	2284      	movs	r2, #132	; 0x84
 80082b0:	2100      	movs	r1, #0
 80082b2:	4618      	mov	r0, r3
 80082b4:	f000 ffb5 	bl	8009222 <memset>
	{ 0 };

	/** Configure LSE Drive Capability
	 */
	HAL_PWR_EnableBkUpAccess();
 80082b8:	f7f8 fff6 	bl	80012a8 <HAL_PWR_EnableBkUpAccess>
	__HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80082bc:	4b43      	ldr	r3, [pc, #268]	; (80083cc <HAL_Sysclk_Init+0x144>)
 80082be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80082c2:	4a42      	ldr	r2, [pc, #264]	; (80083cc <HAL_Sysclk_Init+0x144>)
 80082c4:	f023 0318 	bic.w	r3, r3, #24
 80082c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI
 80082cc:	230d      	movs	r3, #13
 80082ce:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
			| RCC_OSCILLATORTYPE_HSE | RCC_OSCILLATORTYPE_LSE;
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80082d2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80082d6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80082da:	2301      	movs	r3, #1
 80082dc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80082e0:	2301      	movs	r3, #1
 80082e2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80082e6:	2302      	movs	r3, #2
 80082e8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80082ec:	2303      	movs	r3, #3
 80082ee:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
	RCC_OscInitStruct.PLL.PLLM = 1;
 80082f2:	2301      	movs	r3, #1
 80082f4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
	RCC_OscInitStruct.PLL.PLLN = 20;
 80082f8:	2314      	movs	r3, #20
 80082fa:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80082fe:	2307      	movs	r3, #7
 8008300:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8008304:	2302      	movs	r3, #2
 8008306:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800830a:	2302      	movs	r3, #2
 800830c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8008310:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8008314:	4618      	mov	r0, r3
 8008316:	f7f9 f847 	bl	80013a8 <HAL_RCC_OscConfig>
 800831a:	4603      	mov	r3, r0
 800831c:	2b00      	cmp	r3, #0
 800831e:	d001      	beq.n	8008324 <HAL_Sysclk_Init+0x9c>
	{
		Error_Handler();
 8008320:	f7ff ff7a 	bl	8008218 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8008324:	230f      	movs	r3, #15
 8008326:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800832a:	2303      	movs	r3, #3
 800832c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8008330:	2300      	movs	r3, #0
 8008332:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8008336:	2300      	movs	r3, #0
 8008338:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800833c:	2300      	movs	r3, #0
 800833e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8008342:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8008346:	2104      	movs	r1, #4
 8008348:	4618      	mov	r0, r3
 800834a:	f7f9 fd1b 	bl	8001d84 <HAL_RCC_ClockConfig>
 800834e:	4603      	mov	r3, r0
 8008350:	2b00      	cmp	r3, #0
 8008352:	d001      	beq.n	8008358 <HAL_Sysclk_Init+0xd0>
	{
		Error_Handler();
 8008354:	f7ff ff60 	bl	8008218 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC
 8008358:	4b1d      	ldr	r3, [pc, #116]	; (80083d0 <HAL_Sysclk_Init+0x148>)
 800835a:	607b      	str	r3, [r7, #4]
			| RCC_PERIPHCLK_USART1 | RCC_PERIPHCLK_USART2 | RCC_PERIPHCLK_USART3
			| RCC_PERIPHCLK_UART4 | RCC_PERIPHCLK_UART5 | RCC_PERIPHCLK_LPUART1
			| RCC_PERIPHCLK_ADC;
	PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800835c:	2300      	movs	r3, #0
 800835e:	63fb      	str	r3, [r7, #60]	; 0x3c
	PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8008360:	2300      	movs	r3, #0
 8008362:	643b      	str	r3, [r7, #64]	; 0x40
	PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8008364:	2300      	movs	r3, #0
 8008366:	647b      	str	r3, [r7, #68]	; 0x44
	PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8008368:	2300      	movs	r3, #0
 800836a:	64bb      	str	r3, [r7, #72]	; 0x48
	PeriphClkInit.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 800836c:	2300      	movs	r3, #0
 800836e:	64fb      	str	r3, [r7, #76]	; 0x4c
	PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8008370:	2300      	movs	r3, #0
 8008372:	653b      	str	r3, [r7, #80]	; 0x50
	PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8008374:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008378:	67bb      	str	r3, [r7, #120]	; 0x78
	PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800837a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800837e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSE;
 8008382:	2303      	movs	r3, #3
 8008384:	60bb      	str	r3, [r7, #8]
	PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8008386:	2301      	movs	r3, #1
 8008388:	60fb      	str	r3, [r7, #12]
	PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 800838a:	2308      	movs	r3, #8
 800838c:	613b      	str	r3, [r7, #16]
	PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 800838e:	2307      	movs	r3, #7
 8008390:	617b      	str	r3, [r7, #20]
	PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8008392:	2302      	movs	r3, #2
 8008394:	61bb      	str	r3, [r7, #24]
	PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8008396:	2302      	movs	r3, #2
 8008398:	61fb      	str	r3, [r7, #28]
	PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 800839a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800839e:	623b      	str	r3, [r7, #32]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80083a0:	1d3b      	adds	r3, r7, #4
 80083a2:	4618      	mov	r0, r3
 80083a4:	f7f9 ffd4 	bl	8002350 <HAL_RCCEx_PeriphCLKConfig>
 80083a8:	4603      	mov	r3, r0
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d001      	beq.n	80083b2 <HAL_Sysclk_Init+0x12a>
	{
		Error_Handler();
 80083ae:	f7ff ff33 	bl	8008218 <Error_Handler>
	}
	/** Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80083b2:	f44f 7000 	mov.w	r0, #512	; 0x200
 80083b6:	f7f8 ff95 	bl	80012e4 <HAL_PWREx_ControlVoltageScaling>
 80083ba:	4603      	mov	r3, r0
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d001      	beq.n	80083c4 <HAL_Sysclk_Init+0x13c>
	{
		Error_Handler();
 80083c0:	f7ff ff2a 	bl	8008218 <Error_Handler>
	}
}
 80083c4:	bf00      	nop
 80083c6:	37e0      	adds	r7, #224	; 0xe0
 80083c8:	46bd      	mov	sp, r7
 80083ca:	bd80      	pop	{r7, pc}
 80083cc:	40021000 	.word	0x40021000
 80083d0:	0002403f 	.word	0x0002403f

080083d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
 * Initializes the Global MSP.
 */
void HAL_MspInit(void)
{
 80083d4:	b580      	push	{r7, lr}
 80083d6:	b082      	sub	sp, #8
 80083d8:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MspInit 0 */

	/* USER CODE END MspInit 0 */

	__HAL_RCC_SYSCFG_CLK_ENABLE()
 80083da:	4b11      	ldr	r3, [pc, #68]	; (8008420 <HAL_MspInit+0x4c>)
 80083dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80083de:	4a10      	ldr	r2, [pc, #64]	; (8008420 <HAL_MspInit+0x4c>)
 80083e0:	f043 0301 	orr.w	r3, r3, #1
 80083e4:	6613      	str	r3, [r2, #96]	; 0x60
 80083e6:	4b0e      	ldr	r3, [pc, #56]	; (8008420 <HAL_MspInit+0x4c>)
 80083e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80083ea:	f003 0301 	and.w	r3, r3, #1
 80083ee:	607b      	str	r3, [r7, #4]
 80083f0:	687b      	ldr	r3, [r7, #4]
	;
	__HAL_RCC_PWR_CLK_ENABLE()
 80083f2:	4b0b      	ldr	r3, [pc, #44]	; (8008420 <HAL_MspInit+0x4c>)
 80083f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80083f6:	4a0a      	ldr	r2, [pc, #40]	; (8008420 <HAL_MspInit+0x4c>)
 80083f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80083fc:	6593      	str	r3, [r2, #88]	; 0x58
 80083fe:	4b08      	ldr	r3, [pc, #32]	; (8008420 <HAL_MspInit+0x4c>)
 8008400:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008402:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008406:	603b      	str	r3, [r7, #0]
 8008408:	683b      	ldr	r3, [r7, #0]
	;

	/* System interrupt init*/
	/* PendSV_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800840a:	2200      	movs	r2, #0
 800840c:	210f      	movs	r1, #15
 800840e:	f06f 0001 	mvn.w	r0, #1
 8008412:	f7f8 f9df 	bl	80007d4 <HAL_NVIC_SetPriority>

	/* USER CODE BEGIN MspInit 1 */

	/* USER CODE END MspInit 1 */
}
 8008416:	bf00      	nop
 8008418:	3708      	adds	r7, #8
 800841a:	46bd      	mov	sp, r7
 800841c:	bd80      	pop	{r7, pc}
 800841e:	bf00      	nop
 8008420:	40021000 	.word	0x40021000

08008424 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8008424:	b480      	push	{r7}
 8008426:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8008428:	bf00      	nop
 800842a:	46bd      	mov	sp, r7
 800842c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008430:	4770      	bx	lr

08008432 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8008432:	b480      	push	{r7}
 8008434:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8008436:	e7fe      	b.n	8008436 <HardFault_Handler+0x4>

08008438 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8008438:	b480      	push	{r7}
 800843a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800843c:	e7fe      	b.n	800843c <MemManage_Handler+0x4>

0800843e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800843e:	b480      	push	{r7}
 8008440:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8008442:	e7fe      	b.n	8008442 <BusFault_Handler+0x4>

08008444 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8008444:	b480      	push	{r7}
 8008446:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8008448:	e7fe      	b.n	8008448 <UsageFault_Handler+0x4>

0800844a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800844a:	b480      	push	{r7}
 800844c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800844e:	bf00      	nop
 8008450:	46bd      	mov	sp, r7
 8008452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008456:	4770      	bx	lr

08008458 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8008458:	b580      	push	{r7, lr}
 800845a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800845c:	f7f8 f8a8 	bl	80005b0 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8008460:	f7fe fcd0 	bl	8006e04 <xTaskGetSchedulerState>
 8008464:	4603      	mov	r3, r0
 8008466:	2b01      	cmp	r3, #1
 8008468:	d001      	beq.n	800846e <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 800846a:	f7ff fb6d 	bl	8007b48 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800846e:	bf00      	nop
 8008470:	bd80      	pop	{r7, pc}

08008472 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8008472:	b580      	push	{r7, lr}
 8008474:	b086      	sub	sp, #24
 8008476:	af00      	add	r7, sp, #0
 8008478:	60f8      	str	r0, [r7, #12]
 800847a:	60b9      	str	r1, [r7, #8]
 800847c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800847e:	2300      	movs	r3, #0
 8008480:	617b      	str	r3, [r7, #20]
 8008482:	e00a      	b.n	800849a <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8008484:	f3af 8000 	nop.w
 8008488:	4601      	mov	r1, r0
 800848a:	68bb      	ldr	r3, [r7, #8]
 800848c:	1c5a      	adds	r2, r3, #1
 800848e:	60ba      	str	r2, [r7, #8]
 8008490:	b2ca      	uxtb	r2, r1
 8008492:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008494:	697b      	ldr	r3, [r7, #20]
 8008496:	3301      	adds	r3, #1
 8008498:	617b      	str	r3, [r7, #20]
 800849a:	697a      	ldr	r2, [r7, #20]
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	429a      	cmp	r2, r3
 80084a0:	dbf0      	blt.n	8008484 <_read+0x12>
	}

return len;
 80084a2:	687b      	ldr	r3, [r7, #4]
}
 80084a4:	4618      	mov	r0, r3
 80084a6:	3718      	adds	r7, #24
 80084a8:	46bd      	mov	sp, r7
 80084aa:	bd80      	pop	{r7, pc}

080084ac <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80084ac:	b580      	push	{r7, lr}
 80084ae:	b086      	sub	sp, #24
 80084b0:	af00      	add	r7, sp, #0
 80084b2:	60f8      	str	r0, [r7, #12]
 80084b4:	60b9      	str	r1, [r7, #8]
 80084b6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80084b8:	2300      	movs	r3, #0
 80084ba:	617b      	str	r3, [r7, #20]
 80084bc:	e009      	b.n	80084d2 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80084be:	68bb      	ldr	r3, [r7, #8]
 80084c0:	1c5a      	adds	r2, r3, #1
 80084c2:	60ba      	str	r2, [r7, #8]
 80084c4:	781b      	ldrb	r3, [r3, #0]
 80084c6:	4618      	mov	r0, r3
 80084c8:	f7ff feb8 	bl	800823c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80084cc:	697b      	ldr	r3, [r7, #20]
 80084ce:	3301      	adds	r3, #1
 80084d0:	617b      	str	r3, [r7, #20]
 80084d2:	697a      	ldr	r2, [r7, #20]
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	429a      	cmp	r2, r3
 80084d8:	dbf1      	blt.n	80084be <_write+0x12>
	}
	return len;
 80084da:	687b      	ldr	r3, [r7, #4]
}
 80084dc:	4618      	mov	r0, r3
 80084de:	3718      	adds	r7, #24
 80084e0:	46bd      	mov	sp, r7
 80084e2:	bd80      	pop	{r7, pc}

080084e4 <_close>:

int _close(int file)
{
 80084e4:	b480      	push	{r7}
 80084e6:	b083      	sub	sp, #12
 80084e8:	af00      	add	r7, sp, #0
 80084ea:	6078      	str	r0, [r7, #4]
	return -1;
 80084ec:	f04f 33ff 	mov.w	r3, #4294967295
}
 80084f0:	4618      	mov	r0, r3
 80084f2:	370c      	adds	r7, #12
 80084f4:	46bd      	mov	sp, r7
 80084f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084fa:	4770      	bx	lr

080084fc <_fstat>:


int _fstat(int file, struct stat *st)
{
 80084fc:	b480      	push	{r7}
 80084fe:	b083      	sub	sp, #12
 8008500:	af00      	add	r7, sp, #0
 8008502:	6078      	str	r0, [r7, #4]
 8008504:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8008506:	683b      	ldr	r3, [r7, #0]
 8008508:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800850c:	605a      	str	r2, [r3, #4]
	return 0;
 800850e:	2300      	movs	r3, #0
}
 8008510:	4618      	mov	r0, r3
 8008512:	370c      	adds	r7, #12
 8008514:	46bd      	mov	sp, r7
 8008516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800851a:	4770      	bx	lr

0800851c <_isatty>:

int _isatty(int file)
{
 800851c:	b480      	push	{r7}
 800851e:	b083      	sub	sp, #12
 8008520:	af00      	add	r7, sp, #0
 8008522:	6078      	str	r0, [r7, #4]
	return 1;
 8008524:	2301      	movs	r3, #1
}
 8008526:	4618      	mov	r0, r3
 8008528:	370c      	adds	r7, #12
 800852a:	46bd      	mov	sp, r7
 800852c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008530:	4770      	bx	lr

08008532 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8008532:	b480      	push	{r7}
 8008534:	b085      	sub	sp, #20
 8008536:	af00      	add	r7, sp, #0
 8008538:	60f8      	str	r0, [r7, #12]
 800853a:	60b9      	str	r1, [r7, #8]
 800853c:	607a      	str	r2, [r7, #4]
	return 0;
 800853e:	2300      	movs	r3, #0
}
 8008540:	4618      	mov	r0, r3
 8008542:	3714      	adds	r7, #20
 8008544:	46bd      	mov	sp, r7
 8008546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800854a:	4770      	bx	lr

0800854c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800854c:	b580      	push	{r7, lr}
 800854e:	b084      	sub	sp, #16
 8008550:	af00      	add	r7, sp, #0
 8008552:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8008554:	4b11      	ldr	r3, [pc, #68]	; (800859c <_sbrk+0x50>)
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	2b00      	cmp	r3, #0
 800855a:	d102      	bne.n	8008562 <_sbrk+0x16>
		heap_end = &end;
 800855c:	4b0f      	ldr	r3, [pc, #60]	; (800859c <_sbrk+0x50>)
 800855e:	4a10      	ldr	r2, [pc, #64]	; (80085a0 <_sbrk+0x54>)
 8008560:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8008562:	4b0e      	ldr	r3, [pc, #56]	; (800859c <_sbrk+0x50>)
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8008568:	4b0c      	ldr	r3, [pc, #48]	; (800859c <_sbrk+0x50>)
 800856a:	681a      	ldr	r2, [r3, #0]
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	4413      	add	r3, r2
 8008570:	466a      	mov	r2, sp
 8008572:	4293      	cmp	r3, r2
 8008574:	d907      	bls.n	8008586 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8008576:	f000 fe0f 	bl	8009198 <__errno>
 800857a:	4602      	mov	r2, r0
 800857c:	230c      	movs	r3, #12
 800857e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8008580:	f04f 33ff 	mov.w	r3, #4294967295
 8008584:	e006      	b.n	8008594 <_sbrk+0x48>
	}

	heap_end += incr;
 8008586:	4b05      	ldr	r3, [pc, #20]	; (800859c <_sbrk+0x50>)
 8008588:	681a      	ldr	r2, [r3, #0]
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	4413      	add	r3, r2
 800858e:	4a03      	ldr	r2, [pc, #12]	; (800859c <_sbrk+0x50>)
 8008590:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8008592:	68fb      	ldr	r3, [r7, #12]
}
 8008594:	4618      	mov	r0, r3
 8008596:	3710      	adds	r7, #16
 8008598:	46bd      	mov	sp, r7
 800859a:	bd80      	pop	{r7, pc}
 800859c:	2000d5cc 	.word	0x2000d5cc
 80085a0:	10000000 	.word	0x10000000

080085a4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80085a4:	b480      	push	{r7}
 80085a6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80085a8:	4b17      	ldr	r3, [pc, #92]	; (8008608 <SystemInit+0x64>)
 80085aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80085ae:	4a16      	ldr	r2, [pc, #88]	; (8008608 <SystemInit+0x64>)
 80085b0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80085b4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80085b8:	4b14      	ldr	r3, [pc, #80]	; (800860c <SystemInit+0x68>)
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	4a13      	ldr	r2, [pc, #76]	; (800860c <SystemInit+0x68>)
 80085be:	f043 0301 	orr.w	r3, r3, #1
 80085c2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80085c4:	4b11      	ldr	r3, [pc, #68]	; (800860c <SystemInit+0x68>)
 80085c6:	2200      	movs	r2, #0
 80085c8:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80085ca:	4b10      	ldr	r3, [pc, #64]	; (800860c <SystemInit+0x68>)
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	4a0f      	ldr	r2, [pc, #60]	; (800860c <SystemInit+0x68>)
 80085d0:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80085d4:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80085d8:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80085da:	4b0c      	ldr	r3, [pc, #48]	; (800860c <SystemInit+0x68>)
 80085dc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80085e0:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80085e2:	4b0a      	ldr	r3, [pc, #40]	; (800860c <SystemInit+0x68>)
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	4a09      	ldr	r2, [pc, #36]	; (800860c <SystemInit+0x68>)
 80085e8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80085ec:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80085ee:	4b07      	ldr	r3, [pc, #28]	; (800860c <SystemInit+0x68>)
 80085f0:	2200      	movs	r2, #0
 80085f2:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80085f4:	4b04      	ldr	r3, [pc, #16]	; (8008608 <SystemInit+0x64>)
 80085f6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80085fa:	609a      	str	r2, [r3, #8]
#endif
}
 80085fc:	bf00      	nop
 80085fe:	46bd      	mov	sp, r7
 8008600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008604:	4770      	bx	lr
 8008606:	bf00      	nop
 8008608:	e000ed00 	.word	0xe000ed00
 800860c:	40021000 	.word	0x40021000

08008610 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8008610:	f8df d034 	ldr.w	sp, [pc, #52]	; 8008648 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8008614:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8008616:	e003      	b.n	8008620 <LoopCopyDataInit>

08008618 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8008618:	4b0c      	ldr	r3, [pc, #48]	; (800864c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800861a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800861c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800861e:	3104      	adds	r1, #4

08008620 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8008620:	480b      	ldr	r0, [pc, #44]	; (8008650 <LoopForever+0xa>)
	ldr	r3, =_edata
 8008622:	4b0c      	ldr	r3, [pc, #48]	; (8008654 <LoopForever+0xe>)
	adds	r2, r0, r1
 8008624:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8008626:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8008628:	d3f6      	bcc.n	8008618 <CopyDataInit>
	ldr	r2, =_sbss
 800862a:	4a0b      	ldr	r2, [pc, #44]	; (8008658 <LoopForever+0x12>)
	b	LoopFillZerobss
 800862c:	e002      	b.n	8008634 <LoopFillZerobss>

0800862e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800862e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8008630:	f842 3b04 	str.w	r3, [r2], #4

08008634 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8008634:	4b09      	ldr	r3, [pc, #36]	; (800865c <LoopForever+0x16>)
	cmp	r2, r3
 8008636:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8008638:	d3f9      	bcc.n	800862e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800863a:	f7ff ffb3 	bl	80085a4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800863e:	f000 fdb1 	bl	80091a4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8008642:	f7ff fdb9 	bl	80081b8 <main>

08008646 <LoopForever>:

LoopForever:
    b LoopForever
 8008646:	e7fe      	b.n	8008646 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8008648:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 800864c:	0800aa04 	.word	0x0800aa04
	ldr	r0, =_sdata
 8008650:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8008654:	200000a8 	.word	0x200000a8
	ldr	r2, =_sbss
 8008658:	200000a8 	.word	0x200000a8
	ldr	r3, = _ebss
 800865c:	2000d7d0 	.word	0x2000d7d0

08008660 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8008660:	e7fe      	b.n	8008660 <ADC1_2_IRQHandler>

08008662 <list_create>:
 * list_release(), but private value of every node need to be freed
 * by the user before to call list_release().
 *
 * On error, NULL is returned. otherwise the pointer to the new list. */
list *list_create(void)
{
 8008662:	b580      	push	{r7, lr}
 8008664:	b082      	sub	sp, #8
 8008666:	af00      	add	r7, sp, #0
    struct list *list;

    if ((list = malloc(sizeof(*list))) == NULL)
 8008668:	2018      	movs	r0, #24
 800866a:	f000 fdbf 	bl	80091ec <malloc>
 800866e:	4603      	mov	r3, r0
 8008670:	607b      	str	r3, [r7, #4]
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	2b00      	cmp	r3, #0
 8008676:	d101      	bne.n	800867c <list_create+0x1a>
        return NULL;
 8008678:	2300      	movs	r3, #0
 800867a:	e013      	b.n	80086a4 <list_create+0x42>
    list->head = list->tail = NULL;
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	2200      	movs	r2, #0
 8008680:	605a      	str	r2, [r3, #4]
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	685a      	ldr	r2, [r3, #4]
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	601a      	str	r2, [r3, #0]
    list->len = 0;
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	2200      	movs	r2, #0
 800868e:	615a      	str	r2, [r3, #20]
    list->dup = NULL;
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	2200      	movs	r2, #0
 8008694:	609a      	str	r2, [r3, #8]
    list->free = NULL;
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	2200      	movs	r2, #0
 800869a:	60da      	str	r2, [r3, #12]
    list->match = NULL;
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	2200      	movs	r2, #0
 80086a0:	611a      	str	r2, [r3, #16]
    return list;
 80086a2:	687b      	ldr	r3, [r7, #4]
}
 80086a4:	4618      	mov	r0, r3
 80086a6:	3708      	adds	r7, #8
 80086a8:	46bd      	mov	sp, r7
 80086aa:	bd80      	pop	{r7, pc}

080086ac <list_add_node_tail>:
 *
 * On error, NULL is returned and no operation is performed (i.e. the
 * list remains unaltered).
 * On success the 'list' pointer you pass to the function is returned. */
list *list_add_node_tail(list *list, void *value)
{
 80086ac:	b580      	push	{r7, lr}
 80086ae:	b084      	sub	sp, #16
 80086b0:	af00      	add	r7, sp, #0
 80086b2:	6078      	str	r0, [r7, #4]
 80086b4:	6039      	str	r1, [r7, #0]
    list_node *node;

    if ((node = malloc(sizeof(*node))) == NULL)
 80086b6:	200c      	movs	r0, #12
 80086b8:	f000 fd98 	bl	80091ec <malloc>
 80086bc:	4603      	mov	r3, r0
 80086be:	60fb      	str	r3, [r7, #12]
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d101      	bne.n	80086ca <list_add_node_tail+0x1e>
        return NULL;
 80086c6:	2300      	movs	r3, #0
 80086c8:	e029      	b.n	800871e <list_add_node_tail+0x72>
    node->value = value;
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	683a      	ldr	r2, [r7, #0]
 80086ce:	609a      	str	r2, [r3, #8]
    if (list->len == 0) {
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	695b      	ldr	r3, [r3, #20]
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d10e      	bne.n	80086f6 <list_add_node_tail+0x4a>
        list->head = list->tail = node;
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	68fa      	ldr	r2, [r7, #12]
 80086dc:	605a      	str	r2, [r3, #4]
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	685a      	ldr	r2, [r3, #4]
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	601a      	str	r2, [r3, #0]
        node->prev = node->next = NULL;
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	2200      	movs	r2, #0
 80086ea:	605a      	str	r2, [r3, #4]
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	685a      	ldr	r2, [r3, #4]
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	601a      	str	r2, [r3, #0]
 80086f4:	e00d      	b.n	8008712 <list_add_node_tail+0x66>
    } else {
        node->prev = list->tail;
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	685a      	ldr	r2, [r3, #4]
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	601a      	str	r2, [r3, #0]
        node->next = NULL;
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	2200      	movs	r2, #0
 8008702:	605a      	str	r2, [r3, #4]
        list->tail->next = node;
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	685b      	ldr	r3, [r3, #4]
 8008708:	68fa      	ldr	r2, [r7, #12]
 800870a:	605a      	str	r2, [r3, #4]
        list->tail = node;
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	68fa      	ldr	r2, [r7, #12]
 8008710:	605a      	str	r2, [r3, #4]
    }
    list->len++;
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	695b      	ldr	r3, [r3, #20]
 8008716:	1c5a      	adds	r2, r3, #1
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	615a      	str	r2, [r3, #20]
    return list;
 800871c:	687b      	ldr	r3, [r7, #4]
}
 800871e:	4618      	mov	r0, r3
 8008720:	3710      	adds	r7, #16
 8008722:	46bd      	mov	sp, r7
 8008724:	bd80      	pop	{r7, pc}

08008726 <list_get_iterator>:
/* Returns a list iterator 'iter'. After the initialization every
 * call to list_next() will return the next element of the list.
 *
 * This function can't fail. */
list_iter *list_get_iterator(list *list, int direction)
{
 8008726:	b580      	push	{r7, lr}
 8008728:	b084      	sub	sp, #16
 800872a:	af00      	add	r7, sp, #0
 800872c:	6078      	str	r0, [r7, #4]
 800872e:	6039      	str	r1, [r7, #0]
    list_iter *iter;

    if ((iter = malloc(sizeof(*iter))) == NULL) return NULL;
 8008730:	2008      	movs	r0, #8
 8008732:	f000 fd5b 	bl	80091ec <malloc>
 8008736:	4603      	mov	r3, r0
 8008738:	60fb      	str	r3, [r7, #12]
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	2b00      	cmp	r3, #0
 800873e:	d101      	bne.n	8008744 <list_get_iterator+0x1e>
 8008740:	2300      	movs	r3, #0
 8008742:	e00f      	b.n	8008764 <list_get_iterator+0x3e>
    if (direction == START_FROM_HEAD)
 8008744:	683b      	ldr	r3, [r7, #0]
 8008746:	2b00      	cmp	r3, #0
 8008748:	d104      	bne.n	8008754 <list_get_iterator+0x2e>
        iter->next = list->head;
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	681a      	ldr	r2, [r3, #0]
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	601a      	str	r2, [r3, #0]
 8008752:	e003      	b.n	800875c <list_get_iterator+0x36>
    else
        iter->next = list->tail;
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	685a      	ldr	r2, [r3, #4]
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	601a      	str	r2, [r3, #0]
    iter->direction = direction;
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	683a      	ldr	r2, [r7, #0]
 8008760:	605a      	str	r2, [r3, #4]
    return iter;
 8008762:	68fb      	ldr	r3, [r7, #12]
}
 8008764:	4618      	mov	r0, r3
 8008766:	3710      	adds	r7, #16
 8008768:	46bd      	mov	sp, r7
 800876a:	bd80      	pop	{r7, pc}

0800876c <list_release_iterator>:

/* Release the iterator memory */
void list_release_iterator(list_iter *iter) {
 800876c:	b580      	push	{r7, lr}
 800876e:	b082      	sub	sp, #8
 8008770:	af00      	add	r7, sp, #0
 8008772:	6078      	str	r0, [r7, #4]
    free(iter);
 8008774:	6878      	ldr	r0, [r7, #4]
 8008776:	f000 fd41 	bl	80091fc <free>
}
 800877a:	bf00      	nop
 800877c:	3708      	adds	r7, #8
 800877e:	46bd      	mov	sp, r7
 8008780:	bd80      	pop	{r7, pc}

08008782 <list_next>:
 *     do_something_with(list_node_value(node));
 * }
 *
 * */
list_node *list_next(list_iter *iter)
{
 8008782:	b480      	push	{r7}
 8008784:	b085      	sub	sp, #20
 8008786:	af00      	add	r7, sp, #0
 8008788:	6078      	str	r0, [r7, #4]
    list_node *current = iter->next;
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	60fb      	str	r3, [r7, #12]

    if (current != NULL) {
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	2b00      	cmp	r3, #0
 8008794:	d00c      	beq.n	80087b0 <list_next+0x2e>
        if (iter->direction == START_FROM_HEAD)
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	685b      	ldr	r3, [r3, #4]
 800879a:	2b00      	cmp	r3, #0
 800879c:	d104      	bne.n	80087a8 <list_next+0x26>
            iter->next = current->next;
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	685a      	ldr	r2, [r3, #4]
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	601a      	str	r2, [r3, #0]
 80087a6:	e003      	b.n	80087b0 <list_next+0x2e>
        else
            iter->next = current->prev;
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	681a      	ldr	r2, [r3, #0]
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	601a      	str	r2, [r3, #0]
    }
    return current;
 80087b0:	68fb      	ldr	r3, [r7, #12]
}
 80087b2:	4618      	mov	r0, r3
 80087b4:	3714      	adds	r7, #20
 80087b6:	46bd      	mov	sp, r7
 80087b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087bc:	4770      	bx	lr
	...

080087c0 <cyt_log_add_tag>:

/*
 * Tag must be a static string
 */
uint8_t cyt_log_add_tag(char *tag, uint8_t level)
{
 80087c0:	b580      	push	{r7, lr}
 80087c2:	b084      	sub	sp, #16
 80087c4:	af00      	add	r7, sp, #0
 80087c6:	6078      	str	r0, [r7, #4]
 80087c8:	460b      	mov	r3, r1
 80087ca:	70fb      	strb	r3, [r7, #3]
	cyt_tag_level_t *priv;
	cyt_tag_level_t *this;

	if (level >= CYT_LOG_MAX)
 80087cc:	78fb      	ldrb	r3, [r7, #3]
 80087ce:	2b04      	cmp	r3, #4
 80087d0:	d901      	bls.n	80087d6 <cyt_log_add_tag+0x16>
	{
		return false;
 80087d2:	2300      	movs	r3, #0
 80087d4:	e02a      	b.n	800882c <cyt_log_add_tag+0x6c>
	}

	this = malloc(sizeof(cyt_tag_level_t));
 80087d6:	200c      	movs	r0, #12
 80087d8:	f000 fd08 	bl	80091ec <malloc>
 80087dc:	4603      	mov	r3, r0
 80087de:	60bb      	str	r3, [r7, #8]
	if (this != NULL)
 80087e0:	68bb      	ldr	r3, [r7, #8]
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d01f      	beq.n	8008826 <cyt_log_add_tag+0x66>
	{

		this->tag = tag;
 80087e6:	68bb      	ldr	r3, [r7, #8]
 80087e8:	687a      	ldr	r2, [r7, #4]
 80087ea:	601a      	str	r2, [r3, #0]
		this->level = level;
 80087ec:	68bb      	ldr	r3, [r7, #8]
 80087ee:	78fa      	ldrb	r2, [r7, #3]
 80087f0:	711a      	strb	r2, [r3, #4]
		this->next = NULL;
 80087f2:	68bb      	ldr	r3, [r7, #8]
 80087f4:	2200      	movs	r2, #0
 80087f6:	609a      	str	r2, [r3, #8]
		if (tag_level == NULL)
 80087f8:	4b0e      	ldr	r3, [pc, #56]	; (8008834 <cyt_log_add_tag+0x74>)
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d103      	bne.n	8008808 <cyt_log_add_tag+0x48>
		{
			tag_level = this;
 8008800:	4a0c      	ldr	r2, [pc, #48]	; (8008834 <cyt_log_add_tag+0x74>)
 8008802:	68bb      	ldr	r3, [r7, #8]
 8008804:	6013      	str	r3, [r2, #0]
 8008806:	e010      	b.n	800882a <cyt_log_add_tag+0x6a>
		}
		else
		{
			priv = tag_level;
 8008808:	4b0a      	ldr	r3, [pc, #40]	; (8008834 <cyt_log_add_tag+0x74>)
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	60fb      	str	r3, [r7, #12]
			while (priv->next != NULL)
 800880e:	e002      	b.n	8008816 <cyt_log_add_tag+0x56>
			{
				priv = priv->next;
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	689b      	ldr	r3, [r3, #8]
 8008814:	60fb      	str	r3, [r7, #12]
			while (priv->next != NULL)
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	689b      	ldr	r3, [r3, #8]
 800881a:	2b00      	cmp	r3, #0
 800881c:	d1f8      	bne.n	8008810 <cyt_log_add_tag+0x50>
			}
			priv->next = this;
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	68ba      	ldr	r2, [r7, #8]
 8008822:	609a      	str	r2, [r3, #8]
 8008824:	e001      	b.n	800882a <cyt_log_add_tag+0x6a>
		}
	}
	else
	{
		return false;
 8008826:	2300      	movs	r3, #0
 8008828:	e000      	b.n	800882c <cyt_log_add_tag+0x6c>
	}

	return (true);
 800882a:	2301      	movs	r3, #1
}
 800882c:	4618      	mov	r0, r3
 800882e:	3710      	adds	r7, #16
 8008830:	46bd      	mov	sp, r7
 8008832:	bd80      	pop	{r7, pc}
 8008834:	2000d5d0 	.word	0x2000d5d0

08008838 <cyt_log_find_tag>:

cyt_tag_level_t *cyt_log_find_tag(const char *tag)
{
 8008838:	b590      	push	{r4, r7, lr}
 800883a:	b085      	sub	sp, #20
 800883c:	af00      	add	r7, sp, #0
 800883e:	6078      	str	r0, [r7, #4]
	cyt_tag_level_t *priv = tag_level;
 8008840:	4b15      	ldr	r3, [pc, #84]	; (8008898 <cyt_log_find_tag+0x60>)
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	60fb      	str	r3, [r7, #12]

	while (priv != NULL)
 8008846:	e01e      	b.n	8008886 <cyt_log_find_tag+0x4e>
	{
		if ((strlen(priv->tag) == strlen(tag))
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	4618      	mov	r0, r3
 800884e:	f7f7 fcbf 	bl	80001d0 <strlen>
 8008852:	4604      	mov	r4, r0
 8008854:	6878      	ldr	r0, [r7, #4]
 8008856:	f7f7 fcbb 	bl	80001d0 <strlen>
 800885a:	4603      	mov	r3, r0
 800885c:	429c      	cmp	r4, r3
 800885e:	d10f      	bne.n	8008880 <cyt_log_find_tag+0x48>
				&& (strncmp(priv->tag, tag, strlen(tag)) == 0))
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	681c      	ldr	r4, [r3, #0]
 8008864:	6878      	ldr	r0, [r7, #4]
 8008866:	f7f7 fcb3 	bl	80001d0 <strlen>
 800886a:	4603      	mov	r3, r0
 800886c:	461a      	mov	r2, r3
 800886e:	6879      	ldr	r1, [r7, #4]
 8008870:	4620      	mov	r0, r4
 8008872:	f000 fe47 	bl	8009504 <strncmp>
 8008876:	4603      	mov	r3, r0
 8008878:	2b00      	cmp	r3, #0
 800887a:	d101      	bne.n	8008880 <cyt_log_find_tag+0x48>
		{
			return priv;
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	e006      	b.n	800888e <cyt_log_find_tag+0x56>
		}
		priv = priv->next;
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	689b      	ldr	r3, [r3, #8]
 8008884:	60fb      	str	r3, [r7, #12]
	while (priv != NULL)
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	2b00      	cmp	r3, #0
 800888a:	d1dd      	bne.n	8008848 <cyt_log_find_tag+0x10>
	}

	return NULL;
 800888c:	2300      	movs	r3, #0
}
 800888e:	4618      	mov	r0, r3
 8008890:	3714      	adds	r7, #20
 8008892:	46bd      	mov	sp, r7
 8008894:	bd90      	pop	{r4, r7, pc}
 8008896:	bf00      	nop
 8008898:	2000d5d0 	.word	0x2000d5d0

0800889c <cyt_log_write_str>:

static int cyt_log_write_str(const char *s)
{
 800889c:	b580      	push	{r7, lr}
 800889e:	b084      	sub	sp, #16
 80088a0:	af00      	add	r7, sp, #0
 80088a2:	6078      	str	r0, [r7, #4]
	int ret;

	do
	{
		ret = putchar(*s);
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	781b      	ldrb	r3, [r3, #0]
 80088a8:	4618      	mov	r0, r3
 80088aa:	f000 fd83 	bl	80093b4 <putchar>
 80088ae:	60f8      	str	r0, [r7, #12]
	} while (ret != EOF && *++s);
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088b6:	d006      	beq.n	80088c6 <cyt_log_write_str+0x2a>
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	3301      	adds	r3, #1
 80088bc:	607b      	str	r3, [r7, #4]
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	781b      	ldrb	r3, [r3, #0]
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d1ee      	bne.n	80088a4 <cyt_log_write_str+0x8>

	return ret;
 80088c6:	68fb      	ldr	r3, [r7, #12]
}
 80088c8:	4618      	mov	r0, r3
 80088ca:	3710      	adds	r7, #16
 80088cc:	46bd      	mov	sp, r7
 80088ce:	bd80      	pop	{r7, pc}

080088d0 <cyt_log_write>:
/*
 * log printf
 */
uint8_t cyt_log_write(cyt_log_level_t level, const char *tag, const char *fmt,
		...)
{
 80088d0:	b40c      	push	{r2, r3}
 80088d2:	b580      	push	{r7, lr}
 80088d4:	f5ad 7d06 	sub.w	sp, sp, #536	; 0x218
 80088d8:	af00      	add	r7, sp, #0
 80088da:	4602      	mov	r2, r0
 80088dc:	463b      	mov	r3, r7
 80088de:	6019      	str	r1, [r3, #0]
 80088e0:	1dfb      	adds	r3, r7, #7
 80088e2:	701a      	strb	r2, [r3, #0]

	cyt_tag_level_t *info_tag = NULL;
 80088e4:	2300      	movs	r3, #0
 80088e6:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214

	int ret;
	va_list va;
	char pbuf[512];

	info_tag = cyt_log_find_tag(tag);
 80088ea:	463b      	mov	r3, r7
 80088ec:	6818      	ldr	r0, [r3, #0]
 80088ee:	f7ff ffa3 	bl	8008838 <cyt_log_find_tag>
 80088f2:	f8c7 0214 	str.w	r0, [r7, #532]	; 0x214
	if ((info_tag == NULL) || (info_tag->level < level))
 80088f6:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d006      	beq.n	800890c <cyt_log_write+0x3c>
 80088fe:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8008902:	791b      	ldrb	r3, [r3, #4]
 8008904:	1dfa      	adds	r2, r7, #7
 8008906:	7812      	ldrb	r2, [r2, #0]
 8008908:	429a      	cmp	r2, r3
 800890a:	d901      	bls.n	8008910 <cyt_log_write+0x40>
	{
		return false;
 800890c:	2300      	movs	r3, #0
 800890e:	e048      	b.n	80089a2 <cyt_log_write+0xd2>
	}

	static char buf[16];
	uint8_t color = level >= CYT_LOG_MAX ? 0 : s_log_color[level];
 8008910:	1dfb      	adds	r3, r7, #7
 8008912:	781b      	ldrb	r3, [r3, #0]
 8008914:	2b04      	cmp	r3, #4
 8008916:	d804      	bhi.n	8008922 <cyt_log_write+0x52>
 8008918:	1dfb      	adds	r3, r7, #7
 800891a:	781b      	ldrb	r3, [r3, #0]
 800891c:	4a25      	ldr	r2, [pc, #148]	; (80089b4 <cyt_log_write+0xe4>)
 800891e:	5cd3      	ldrb	r3, [r2, r3]
 8008920:	e000      	b.n	8008924 <cyt_log_write+0x54>
 8008922:	2300      	movs	r3, #0
 8008924:	f887 3213 	strb.w	r3, [r7, #531]	; 0x213

	if (color)
 8008928:	f897 3213 	ldrb.w	r3, [r7, #531]	; 0x213
 800892c:	2b00      	cmp	r3, #0
 800892e:	d009      	beq.n	8008944 <cyt_log_write+0x74>
	{
		sprintf(buf, LOG_COLOR_HEAD, color);
 8008930:	f897 3213 	ldrb.w	r3, [r7, #531]	; 0x213
 8008934:	461a      	mov	r2, r3
 8008936:	4920      	ldr	r1, [pc, #128]	; (80089b8 <cyt_log_write+0xe8>)
 8008938:	4820      	ldr	r0, [pc, #128]	; (80089bc <cyt_log_write+0xec>)
 800893a:	f000 fdc3 	bl	80094c4 <siprintf>
		cyt_log_write_str(buf);
 800893e:	481f      	ldr	r0, [pc, #124]	; (80089bc <cyt_log_write+0xec>)
 8008940:	f7ff ffac 	bl	800889c <cyt_log_write_str>
	}

	cyt_log_write_str(tag);
 8008944:	463b      	mov	r3, r7
 8008946:	6818      	ldr	r0, [r3, #0]
 8008948:	f7ff ffa8 	bl	800889c <cyt_log_write_str>
	cyt_log_write_str(" : ");
 800894c:	481c      	ldr	r0, [pc, #112]	; (80089c0 <cyt_log_write+0xf0>)
 800894e:	f7ff ffa5 	bl	800889c <cyt_log_write_str>

	memset(pbuf, 0x00, 512);
 8008952:	f107 0308 	add.w	r3, r7, #8
 8008956:	f44f 7200 	mov.w	r2, #512	; 0x200
 800895a:	2100      	movs	r1, #0
 800895c:	4618      	mov	r0, r3
 800895e:	f000 fc60 	bl	8009222 <memset>
	va_start(va, fmt);
 8008962:	f507 7309 	add.w	r3, r7, #548	; 0x224
 8008966:	f8c7 3208 	str.w	r3, [r7, #520]	; 0x208
	ret = vsprintf(pbuf, fmt, va);
 800896a:	f107 0308 	add.w	r3, r7, #8
 800896e:	f8d7 2208 	ldr.w	r2, [r7, #520]	; 0x208
 8008972:	f8d7 1220 	ldr.w	r1, [r7, #544]	; 0x220
 8008976:	4618      	mov	r0, r3
 8008978:	f000 fdec 	bl	8009554 <vsiprintf>
 800897c:	f8c7 020c 	str.w	r0, [r7, #524]	; 0x20c
	va_end(va);
	if (ret < 0)
 8008980:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8008984:	2b00      	cmp	r3, #0
 8008986:	da01      	bge.n	800898c <cyt_log_write+0xbc>
	{
		return false;
 8008988:	2300      	movs	r3, #0
 800898a:	e00a      	b.n	80089a2 <cyt_log_write+0xd2>
	}
	ret = cyt_log_write_str(pbuf);
 800898c:	f107 0308 	add.w	r3, r7, #8
 8008990:	4618      	mov	r0, r3
 8008992:	f7ff ff83 	bl	800889c <cyt_log_write_str>
 8008996:	f8c7 020c 	str.w	r0, [r7, #524]	; 0x20c

	cyt_log_write_str(LOG_COLOR_END);
 800899a:	480a      	ldr	r0, [pc, #40]	; (80089c4 <cyt_log_write+0xf4>)
 800899c:	f7ff ff7e 	bl	800889c <cyt_log_write_str>

	return true;
 80089a0:	2301      	movs	r3, #1
}
 80089a2:	4618      	mov	r0, r3
 80089a4:	f507 7706 	add.w	r7, r7, #536	; 0x218
 80089a8:	46bd      	mov	sp, r7
 80089aa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80089ae:	b002      	add	sp, #8
 80089b0:	4770      	bx	lr
 80089b2:	bf00      	nop
 80089b4:	0800a954 	.word	0x0800a954
 80089b8:	0800a8e8 	.word	0x0800a8e8
 80089bc:	2000d5d4 	.word	0x2000d5d4
 80089c0:	0800a8f0 	.word	0x0800a8f0
 80089c4:	0800a8f4 	.word	0x0800a8f4

080089c8 <in_isr_mode>:
#include "priv_os.h"

/* Determine whether we are in thread mode or handler mode. */
static int in_isr_mode(void)
{
 80089c8:	b480      	push	{r7}
 80089ca:	b083      	sub	sp, #12
 80089cc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80089ce:	f3ef 8305 	mrs	r3, IPSR
 80089d2:	607b      	str	r3, [r7, #4]
  return(result);
 80089d4:	687b      	ldr	r3, [r7, #4]
    return (__get_IPSR() != 0?1:0);
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	bf14      	ite	ne
 80089da:	2301      	movne	r3, #1
 80089dc:	2300      	moveq	r3, #0
 80089de:	b2db      	uxtb	r3, r3
}
 80089e0:	4618      	mov	r0, r3
 80089e2:	370c      	adds	r7, #12
 80089e4:	46bd      	mov	sp, r7
 80089e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ea:	4770      	bx	lr

080089ec <creat_semqphore>:
}



sc_semaphore_t creat_semqphore( void )
{
 80089ec:	b580      	push	{r7, lr}
 80089ee:	b082      	sub	sp, #8
 80089f0:	af00      	add	r7, sp, #0
    sc_semaphore_t seamp;

    configASSERT((seamp = xSemaphoreCreateBinary()));
 80089f2:	2203      	movs	r2, #3
 80089f4:	2100      	movs	r1, #0
 80089f6:	2001      	movs	r0, #1
 80089f8:	f7fc fd6a 	bl	80054d0 <xQueueGenericCreate>
 80089fc:	6078      	str	r0, [r7, #4]
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d109      	bne.n	8008a18 <creat_semqphore+0x2c>
 8008a04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a08:	f383 8811 	msr	BASEPRI, r3
 8008a0c:	f3bf 8f6f 	isb	sy
 8008a10:	f3bf 8f4f 	dsb	sy
 8008a14:	603b      	str	r3, [r7, #0]
 8008a16:	e7fe      	b.n	8008a16 <creat_semqphore+0x2a>

    return seamp;
 8008a18:	687b      	ldr	r3, [r7, #4]
}
 8008a1a:	4618      	mov	r0, r3
 8008a1c:	3708      	adds	r7, #8
 8008a1e:	46bd      	mov	sp, r7
 8008a20:	bd80      	pop	{r7, pc}
	...

08008a24 <read_semaphore>:

int read_semaphore(sc_semaphore_t id, uint32_t millisec)
{
 8008a24:	b580      	push	{r7, lr}
 8008a26:	b084      	sub	sp, #16
 8008a28:	af00      	add	r7, sp, #0
 8008a2a:	6078      	str	r0, [r7, #4]
 8008a2c:	6039      	str	r1, [r7, #0]
    portBASE_TYPE taskWoken = pdFALSE;
 8008a2e:	2300      	movs	r3, #0
 8008a30:	60bb      	str	r3, [r7, #8]
    TickType_t ticks = 0;
 8008a32:	2300      	movs	r3, #0
 8008a34:	60fb      	str	r3, [r7, #12]
 
    if (millisec == WAIT_FOR_EVER)
 8008a36:	683b      	ldr	r3, [r7, #0]
 8008a38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a3c:	d103      	bne.n	8008a46 <read_semaphore+0x22>
    {
        ticks = portMAX_DELAY;
 8008a3e:	f04f 33ff 	mov.w	r3, #4294967295
 8008a42:	60fb      	str	r3, [r7, #12]
 8008a44:	e009      	b.n	8008a5a <read_semaphore+0x36>
    }
    else if (millisec != 0)
 8008a46:	683b      	ldr	r3, [r7, #0]
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	d006      	beq.n	8008a5a <read_semaphore+0x36>
    {
        ticks = millisec / portTICK_PERIOD_MS;
 8008a4c:	683b      	ldr	r3, [r7, #0]
 8008a4e:	60fb      	str	r3, [r7, #12]
        if (ticks == 0)
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d101      	bne.n	8008a5a <read_semaphore+0x36>
        {
            ticks = 1;
 8008a56:	2301      	movs	r3, #1
 8008a58:	60fb      	str	r3, [r7, #12]
        }
    }

    if (in_isr_mode())
 8008a5a:	f7ff ffb5 	bl	80089c8 <in_isr_mode>
 8008a5e:	4603      	mov	r3, r0
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d018      	beq.n	8008a96 <read_semaphore+0x72>
    {
        if (xSemaphoreTakeFromISR(id, &taskWoken) != pdTRUE)
 8008a64:	f107 0308 	add.w	r3, r7, #8
 8008a68:	461a      	mov	r2, r3
 8008a6a:	2100      	movs	r1, #0
 8008a6c:	6878      	ldr	r0, [r7, #4]
 8008a6e:	f7fd f9bd 	bl	8005dec <xQueueReceiveFromISR>
 8008a72:	4603      	mov	r3, r0
 8008a74:	2b01      	cmp	r3, #1
 8008a76:	d002      	beq.n	8008a7e <read_semaphore+0x5a>
        {
            return -1;
 8008a78:	f04f 33ff 	mov.w	r3, #4294967295
 8008a7c:	e016      	b.n	8008aac <read_semaphore+0x88>
        }
        portEND_SWITCHING_ISR(taskWoken);
 8008a7e:	68bb      	ldr	r3, [r7, #8]
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d012      	beq.n	8008aaa <read_semaphore+0x86>
 8008a84:	4b0b      	ldr	r3, [pc, #44]	; (8008ab4 <read_semaphore+0x90>)
 8008a86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008a8a:	601a      	str	r2, [r3, #0]
 8008a8c:	f3bf 8f4f 	dsb	sy
 8008a90:	f3bf 8f6f 	isb	sy
 8008a94:	e009      	b.n	8008aaa <read_semaphore+0x86>
    }
    else if (xSemaphoreTake(id, ticks) != pdTRUE)
 8008a96:	68f9      	ldr	r1, [r7, #12]
 8008a98:	6878      	ldr	r0, [r7, #4]
 8008a9a:	f7fd f89f 	bl	8005bdc <xQueueSemaphoreTake>
 8008a9e:	4603      	mov	r3, r0
 8008aa0:	2b01      	cmp	r3, #1
 8008aa2:	d002      	beq.n	8008aaa <read_semaphore+0x86>
    {
        return -1;
 8008aa4:	f04f 33ff 	mov.w	r3, #4294967295
 8008aa8:	e000      	b.n	8008aac <read_semaphore+0x88>
    }

    return 0;
 8008aaa:	2300      	movs	r3, #0
}
 8008aac:	4618      	mov	r0, r3
 8008aae:	3710      	adds	r7, #16
 8008ab0:	46bd      	mov	sp, r7
 8008ab2:	bd80      	pop	{r7, pc}
 8008ab4:	e000ed04 	.word	0xe000ed04

08008ab8 <send_semaphore>:

int send_semaphore(sc_semaphore_t id)
{
 8008ab8:	b580      	push	{r7, lr}
 8008aba:	b084      	sub	sp, #16
 8008abc:	af00      	add	r7, sp, #0
 8008abe:	6078      	str	r0, [r7, #4]
    portBASE_TYPE taskWoken = pdFALSE;
 8008ac0:	2300      	movs	r3, #0
 8008ac2:	60fb      	str	r3, [r7, #12]

    if (in_isr_mode())
 8008ac4:	f7ff ff80 	bl	80089c8 <in_isr_mode>
 8008ac8:	4603      	mov	r3, r0
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d017      	beq.n	8008afe <send_semaphore+0x46>
    {
        if (xSemaphoreGiveFromISR(id, &taskWoken) != pdTRUE)
 8008ace:	f107 030c 	add.w	r3, r7, #12
 8008ad2:	4619      	mov	r1, r3
 8008ad4:	6878      	ldr	r0, [r7, #4]
 8008ad6:	f7fc ff1b 	bl	8005910 <xQueueGiveFromISR>
 8008ada:	4603      	mov	r3, r0
 8008adc:	2b01      	cmp	r3, #1
 8008ade:	d002      	beq.n	8008ae6 <send_semaphore+0x2e>
        {
            return -1;
 8008ae0:	f04f 33ff 	mov.w	r3, #4294967295
 8008ae4:	e018      	b.n	8008b18 <send_semaphore+0x60>
        }
        portEND_SWITCHING_ISR(taskWoken);
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d014      	beq.n	8008b16 <send_semaphore+0x5e>
 8008aec:	4b0c      	ldr	r3, [pc, #48]	; (8008b20 <send_semaphore+0x68>)
 8008aee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008af2:	601a      	str	r2, [r3, #0]
 8008af4:	f3bf 8f4f 	dsb	sy
 8008af8:	f3bf 8f6f 	isb	sy
 8008afc:	e00b      	b.n	8008b16 <send_semaphore+0x5e>
    }
    else
    {
        if (xSemaphoreGive(id) != pdTRUE)
 8008afe:	2300      	movs	r3, #0
 8008b00:	2200      	movs	r2, #0
 8008b02:	2100      	movs	r1, #0
 8008b04:	6878      	ldr	r0, [r7, #4]
 8008b06:	f7fc fd75 	bl	80055f4 <xQueueGenericSend>
 8008b0a:	4603      	mov	r3, r0
 8008b0c:	2b01      	cmp	r3, #1
 8008b0e:	d002      	beq.n	8008b16 <send_semaphore+0x5e>
        {
            return  -1;
 8008b10:	f04f 33ff 	mov.w	r3, #4294967295
 8008b14:	e000      	b.n	8008b18 <send_semaphore+0x60>
        }
    }

    return 0;
 8008b16:	2300      	movs	r3, #0
}
 8008b18:	4618      	mov	r0, r3
 8008b1a:	3710      	adds	r7, #16
 8008b1c:	46bd      	mov	sp, r7
 8008b1e:	bd80      	pop	{r7, pc}
 8008b20:	e000ed04 	.word	0xe000ed04

08008b24 <misc_init>:
static list_iter *msicdev_list_iter;
static uint8_t DYNAMIC_MINORS = DYNAMIC_MINORS_MAX + 1;
sc_mutex_t misc_mtx;

int misc_init(void)
{
 8008b24:	b580      	push	{r7, lr}
 8008b26:	af00      	add	r7, sp, #0
	msicdev_list = list_create();
 8008b28:	f7ff fd9b 	bl	8008662 <list_create>
 8008b2c:	4602      	mov	r2, r0
 8008b2e:	4b0b      	ldr	r3, [pc, #44]	; (8008b5c <misc_init+0x38>)
 8008b30:	601a      	str	r2, [r3, #0]
	msicdev_list_iter = list_get_iterator(msicdev_list, START_FROM_HEAD);
 8008b32:	4b0a      	ldr	r3, [pc, #40]	; (8008b5c <misc_init+0x38>)
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	2100      	movs	r1, #0
 8008b38:	4618      	mov	r0, r3
 8008b3a:	f7ff fdf4 	bl	8008726 <list_get_iterator>
 8008b3e:	4602      	mov	r2, r0
 8008b40:	4b07      	ldr	r3, [pc, #28]	; (8008b60 <misc_init+0x3c>)
 8008b42:	601a      	str	r2, [r3, #0]

	if ((msicdev_list == NULL) || (msicdev_list_iter == NULL))
 8008b44:	4b05      	ldr	r3, [pc, #20]	; (8008b5c <misc_init+0x38>)
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	2b00      	cmp	r3, #0
	{
		/*msicdev列表初始化失败,系统重启*/
		//soft_system_resert(__func__);
	}
    
    misc_mtx = creat_mutex();
 8008b4a:	2001      	movs	r0, #1
 8008b4c:	f7fc fd3a 	bl	80055c4 <xQueueCreateMutex>
 8008b50:	4602      	mov	r2, r0
 8008b52:	4b04      	ldr	r3, [pc, #16]	; (8008b64 <misc_init+0x40>)
 8008b54:	601a      	str	r2, [r3, #0]
    
    return 0;
 8008b56:	2300      	movs	r3, #0
}
 8008b58:	4618      	mov	r0, r3
 8008b5a:	bd80      	pop	{r7, pc}
 8008b5c:	2000d5e4 	.word	0x2000d5e4
 8008b60:	2000d5e8 	.word	0x2000d5e8
 8008b64:	2000d6d4 	.word	0x2000d6d4

08008b68 <misc_list_empty>:
{
	return msicdev_list;
}

static list_node *misc_list_empty(struct miscdevice *misc)
{
 8008b68:	b580      	push	{r7, lr}
 8008b6a:	b084      	sub	sp, #16
 8008b6c:	af00      	add	r7, sp, #0
 8008b6e:	6078      	str	r0, [r7, #4]
	list_iter *iter;
	list_node *node;

	iter = list_get_iterator(msicdev_list, START_FROM_HEAD);
 8008b70:	4b10      	ldr	r3, [pc, #64]	; (8008bb4 <misc_list_empty+0x4c>)
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	2100      	movs	r1, #0
 8008b76:	4618      	mov	r0, r3
 8008b78:	f7ff fdd5 	bl	8008726 <list_get_iterator>
 8008b7c:	60f8      	str	r0, [r7, #12]
	while ((node = list_next(iter)) != NULL)
 8008b7e:	e009      	b.n	8008b94 <misc_list_empty+0x2c>
	{
		if (misc == node->value)
 8008b80:	68bb      	ldr	r3, [r7, #8]
 8008b82:	689b      	ldr	r3, [r3, #8]
 8008b84:	687a      	ldr	r2, [r7, #4]
 8008b86:	429a      	cmp	r2, r3
 8008b88:	d104      	bne.n	8008b94 <misc_list_empty+0x2c>
		{
			list_release_iterator(iter);
 8008b8a:	68f8      	ldr	r0, [r7, #12]
 8008b8c:	f7ff fdee 	bl	800876c <list_release_iterator>
			return node;
 8008b90:	68bb      	ldr	r3, [r7, #8]
 8008b92:	e00a      	b.n	8008baa <misc_list_empty+0x42>
	while ((node = list_next(iter)) != NULL)
 8008b94:	68f8      	ldr	r0, [r7, #12]
 8008b96:	f7ff fdf4 	bl	8008782 <list_next>
 8008b9a:	60b8      	str	r0, [r7, #8]
 8008b9c:	68bb      	ldr	r3, [r7, #8]
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d1ee      	bne.n	8008b80 <misc_list_empty+0x18>
		}
	}
	list_release_iterator(iter);
 8008ba2:	68f8      	ldr	r0, [r7, #12]
 8008ba4:	f7ff fde2 	bl	800876c <list_release_iterator>
	return NULL;
 8008ba8:	2300      	movs	r3, #0
}
 8008baa:	4618      	mov	r0, r3
 8008bac:	3710      	adds	r7, #16
 8008bae:	46bd      	mov	sp, r7
 8008bb0:	bd80      	pop	{r7, pc}
 8008bb2:	bf00      	nop
 8008bb4:	2000d5e4 	.word	0x2000d5e4

08008bb8 <misc_search_enter>:

static bool misc_search_enter(uint8_t minor)
{
 8008bb8:	b580      	push	{r7, lr}
 8008bba:	b086      	sub	sp, #24
 8008bbc:	af00      	add	r7, sp, #0
 8008bbe:	4603      	mov	r3, r0
 8008bc0:	71fb      	strb	r3, [r7, #7]
	list_iter *iter;
	list_node *node;
	struct miscdevice *misc;

	iter = list_get_iterator(msicdev_list, START_FROM_HEAD);
 8008bc2:	4b12      	ldr	r3, [pc, #72]	; (8008c0c <misc_search_enter+0x54>)
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	2100      	movs	r1, #0
 8008bc8:	4618      	mov	r0, r3
 8008bca:	f7ff fdac 	bl	8008726 <list_get_iterator>
 8008bce:	6178      	str	r0, [r7, #20]
	while ((node = list_next(iter)) != NULL)
 8008bd0:	e00c      	b.n	8008bec <misc_search_enter+0x34>
	{
		misc = (struct miscdevice *)(node->value);
 8008bd2:	693b      	ldr	r3, [r7, #16]
 8008bd4:	689b      	ldr	r3, [r3, #8]
 8008bd6:	60fb      	str	r3, [r7, #12]
		if (misc->minor == minor)
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	785b      	ldrb	r3, [r3, #1]
 8008bdc:	79fa      	ldrb	r2, [r7, #7]
 8008bde:	429a      	cmp	r2, r3
 8008be0:	d104      	bne.n	8008bec <misc_search_enter+0x34>
		{
			list_release_iterator(iter);
 8008be2:	6978      	ldr	r0, [r7, #20]
 8008be4:	f7ff fdc2 	bl	800876c <list_release_iterator>
			return true;
 8008be8:	2301      	movs	r3, #1
 8008bea:	e00a      	b.n	8008c02 <misc_search_enter+0x4a>
	while ((node = list_next(iter)) != NULL)
 8008bec:	6978      	ldr	r0, [r7, #20]
 8008bee:	f7ff fdc8 	bl	8008782 <list_next>
 8008bf2:	6138      	str	r0, [r7, #16]
 8008bf4:	693b      	ldr	r3, [r7, #16]
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d1eb      	bne.n	8008bd2 <misc_search_enter+0x1a>
		}
	}
	list_release_iterator(iter);
 8008bfa:	6978      	ldr	r0, [r7, #20]
 8008bfc:	f7ff fdb6 	bl	800876c <list_release_iterator>
	return false;
 8008c00:	2300      	movs	r3, #0
}
 8008c02:	4618      	mov	r0, r3
 8008c04:	3718      	adds	r7, #24
 8008c06:	46bd      	mov	sp, r7
 8008c08:	bd80      	pop	{r7, pc}
 8008c0a:	bf00      	nop
 8008c0c:	2000d5e4 	.word	0x2000d5e4

08008c10 <misc_register>:

int misc_register(struct miscdevice *misc)
{
 8008c10:	b580      	push	{r7, lr}
 8008c12:	b084      	sub	sp, #16
 8008c14:	af00      	add	r7, sp, #0
 8008c16:	6078      	str	r0, [r7, #4]
	int err = 0;
 8008c18:	2300      	movs	r3, #0
 8008c1a:	60fb      	str	r3, [r7, #12]
    
    if ( misc_list_empty(misc) != NULL )
 8008c1c:	6878      	ldr	r0, [r7, #4]
 8008c1e:	f7ff ffa3 	bl	8008b68 <misc_list_empty>
 8008c22:	4603      	mov	r3, r0
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d002      	beq.n	8008c2e <misc_register+0x1e>
    {
        //INIT_PRINT(INIT_FAIL,"%s hasbeen register" , misc->name);
		return -EINVAL;
 8008c28:	f06f 0315 	mvn.w	r3, #21
 8008c2c:	e026      	b.n	8008c7c <misc_register+0x6c>
    }
	if (misc->minor != MISC_DYNAMIC_MINOR)
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	785b      	ldrb	r3, [r3, #1]
 8008c32:	2bff      	cmp	r3, #255	; 0xff
 8008c34:	d00a      	beq.n	8008c4c <misc_register+0x3c>
	{
		if (misc_search_enter(misc->minor) == true)
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	785b      	ldrb	r3, [r3, #1]
 8008c3a:	4618      	mov	r0, r3
 8008c3c:	f7ff ffbc 	bl	8008bb8 <misc_search_enter>
 8008c40:	4603      	mov	r3, r0
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d00a      	beq.n	8008c5c <misc_register+0x4c>
		{
            //INIT_PRINT(INIT_FAIL,"%s have the same minor=%d" , misc->name ,misc->minor);
			return -EBUSY;
 8008c46:	f06f 030f 	mvn.w	r3, #15
 8008c4a:	e017      	b.n	8008c7c <misc_register+0x6c>
		}
	}
	else
	{
		misc->minor = DYNAMIC_MINORS++;
 8008c4c:	4b0d      	ldr	r3, [pc, #52]	; (8008c84 <misc_register+0x74>)
 8008c4e:	781b      	ldrb	r3, [r3, #0]
 8008c50:	1c5a      	adds	r2, r3, #1
 8008c52:	b2d1      	uxtb	r1, r2
 8008c54:	4a0b      	ldr	r2, [pc, #44]	; (8008c84 <misc_register+0x74>)
 8008c56:	7011      	strb	r1, [r2, #0]
 8008c58:	687a      	ldr	r2, [r7, #4]
 8008c5a:	7053      	strb	r3, [r2, #1]
	}

	misc->major = MISC_MAJOR;
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	2200      	movs	r2, #0
 8008c60:	701a      	strb	r2, [r3, #0]
	if (list_add_node_tail(msicdev_list, misc) == NULL)
 8008c62:	4b09      	ldr	r3, [pc, #36]	; (8008c88 <misc_register+0x78>)
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	6879      	ldr	r1, [r7, #4]
 8008c68:	4618      	mov	r0, r3
 8008c6a:	f7ff fd1f 	bl	80086ac <list_add_node_tail>
 8008c6e:	4603      	mov	r3, r0
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d102      	bne.n	8008c7a <misc_register+0x6a>
	{
        //INIT_PRINT(INIT_FAIL,"%s register" , misc->name);
		return -ENOMEM;
 8008c74:	f06f 030b 	mvn.w	r3, #11
 8008c78:	e000      	b.n	8008c7c <misc_register+0x6c>
	}
    
    //INIT_PRINT(INIT_OK,"%s register" , misc->name);

	return err;
 8008c7a:	68fb      	ldr	r3, [r7, #12]
}
 8008c7c:	4618      	mov	r0, r3
 8008c7e:	3710      	adds	r7, #16
 8008c80:	46bd      	mov	sp, r7
 8008c82:	bd80      	pop	{r7, pc}
 8008c84:	20000010 	.word	0x20000010
 8008c88:	2000d5e4 	.word	0x2000d5e4

08008c8c <USART1_IRQHandler>:
static uint8_t serdbg_msg[DEBUG_RX_MAX];
static uint32_t ser_read_mode = WAIT_FOR_EVER;
static uint32_t temp;

void USART1_IRQHandler(void)
{
 8008c8c:	b580      	push	{r7, lr}
 8008c8e:	af00      	add	r7, sp, #0

    if (((__HAL_UART_GET_FLAG(&SD_PORT, UART_FLAG_IDLE)) != RESET))
 8008c90:	4b12      	ldr	r3, [pc, #72]	; (8008cdc <USART1_IRQHandler+0x50>)
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	69db      	ldr	r3, [r3, #28]
 8008c96:	f003 0310 	and.w	r3, r3, #16
 8008c9a:	2b10      	cmp	r3, #16
 8008c9c:	d118      	bne.n	8008cd0 <USART1_IRQHandler+0x44>
    {
        __HAL_UART_CLEAR_IDLEFLAG(&SD_PORT);
 8008c9e:	4b0f      	ldr	r3, [pc, #60]	; (8008cdc <USART1_IRQHandler+0x50>)
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	2210      	movs	r2, #16
 8008ca4:	621a      	str	r2, [r3, #32]
        temp = SD_PORT.Instance->ISR;
 8008ca6:	4b0d      	ldr	r3, [pc, #52]	; (8008cdc <USART1_IRQHandler+0x50>)
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	69db      	ldr	r3, [r3, #28]
 8008cac:	4a0c      	ldr	r2, [pc, #48]	; (8008ce0 <USART1_IRQHandler+0x54>)
 8008cae:	6013      	str	r3, [r2, #0]
        temp = SD_PORT.Instance->RDR;
 8008cb0:	4b0a      	ldr	r3, [pc, #40]	; (8008cdc <USART1_IRQHandler+0x50>)
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8008cb6:	b29b      	uxth	r3, r3
 8008cb8:	461a      	mov	r2, r3
 8008cba:	4b09      	ldr	r3, [pc, #36]	; (8008ce0 <USART1_IRQHandler+0x54>)
 8008cbc:	601a      	str	r2, [r3, #0]

        if (serdbg_semap != NULL)
 8008cbe:	4b09      	ldr	r3, [pc, #36]	; (8008ce4 <USART1_IRQHandler+0x58>)
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d004      	beq.n	8008cd0 <USART1_IRQHandler+0x44>
        {
            send_semaphore(serdbg_semap);
 8008cc6:	4b07      	ldr	r3, [pc, #28]	; (8008ce4 <USART1_IRQHandler+0x58>)
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	4618      	mov	r0, r3
 8008ccc:	f7ff fef4 	bl	8008ab8 <send_semaphore>
        }
    }

    HAL_UART_IRQHandler(&SD_PORT);
 8008cd0:	4802      	ldr	r0, [pc, #8]	; (8008cdc <USART1_IRQHandler+0x50>)
 8008cd2:	f7fb f861 	bl	8003d98 <HAL_UART_IRQHandler>
}
 8008cd6:	bf00      	nop
 8008cd8:	bd80      	pop	{r7, pc}
 8008cda:	bf00      	nop
 8008cdc:	2000d720 	.word	0x2000d720
 8008ce0:	2000d630 	.word	0x2000d630
 8008ce4:	2000d5ec 	.word	0x2000d5ec

08008ce8 <serial1_dma_init>:
    __HAL_UART_CLEAR_IDLEFLAG(&SD_PORT);
    __HAL_UART_ENABLE_IT(&SD_PORT, UART_IT_IDLE);
}

void serial1_dma_init(void)
{
 8008ce8:	b480      	push	{r7}
 8008cea:	b083      	sub	sp, #12
 8008cec:	af00      	add	r7, sp, #0
    HAL_RCC_DMA_CLOCK_ENABLE();
 8008cee:	4b09      	ldr	r3, [pc, #36]	; (8008d14 <serial1_dma_init+0x2c>)
 8008cf0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008cf2:	4a08      	ldr	r2, [pc, #32]	; (8008d14 <serial1_dma_init+0x2c>)
 8008cf4:	f043 0301 	orr.w	r3, r3, #1
 8008cf8:	6493      	str	r3, [r2, #72]	; 0x48
 8008cfa:	4b06      	ldr	r3, [pc, #24]	; (8008d14 <serial1_dma_init+0x2c>)
 8008cfc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008cfe:	f003 0301 	and.w	r3, r3, #1
 8008d02:	607b      	str	r3, [r7, #4]
 8008d04:	687b      	ldr	r3, [r7, #4]
}
 8008d06:	bf00      	nop
 8008d08:	370c      	adds	r7, #12
 8008d0a:	46bd      	mov	sp, r7
 8008d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d10:	4770      	bx	lr
 8008d12:	bf00      	nop
 8008d14:	40021000 	.word	0x40021000

08008d18 <serial1_gpio_init>:

void serial1_gpio_init(void)
{
 8008d18:	b580      	push	{r7, lr}
 8008d1a:	b086      	sub	sp, #24
 8008d1c:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008d1e:	1d3b      	adds	r3, r7, #4
 8008d20:	2200      	movs	r2, #0
 8008d22:	601a      	str	r2, [r3, #0]
 8008d24:	605a      	str	r2, [r3, #4]
 8008d26:	609a      	str	r2, [r3, #8]
 8008d28:	60da      	str	r2, [r3, #12]
 8008d2a:	611a      	str	r2, [r3, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008d2c:	4b14      	ldr	r3, [pc, #80]	; (8008d80 <serial1_gpio_init+0x68>)
 8008d2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008d30:	4a13      	ldr	r2, [pc, #76]	; (8008d80 <serial1_gpio_init+0x68>)
 8008d32:	f043 0301 	orr.w	r3, r3, #1
 8008d36:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008d38:	4b11      	ldr	r3, [pc, #68]	; (8008d80 <serial1_gpio_init+0x68>)
 8008d3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008d3c:	f003 0301 	and.w	r3, r3, #1
 8008d40:	603b      	str	r3, [r7, #0]
 8008d42:	683b      	ldr	r3, [r7, #0]

    GPIO_InitStruct.Pin = HAL_TX_PIN;
 8008d44:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008d48:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008d4a:	2302      	movs	r3, #2
 8008d4c:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008d4e:	2300      	movs	r3, #0
 8008d50:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008d52:	2303      	movs	r3, #3
 8008d54:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8008d56:	2307      	movs	r3, #7
 8008d58:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(HAL_TX_PORT, &GPIO_InitStruct);
 8008d5a:	1d3b      	adds	r3, r7, #4
 8008d5c:	4619      	mov	r1, r3
 8008d5e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8008d62:	f7f8 f813 	bl	8000d8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HAL_RX_PIN;
 8008d66:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008d6a:	607b      	str	r3, [r7, #4]
    HAL_GPIO_Init(HAL_RX_PORT, &GPIO_InitStruct);
 8008d6c:	1d3b      	adds	r3, r7, #4
 8008d6e:	4619      	mov	r1, r3
 8008d70:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8008d74:	f7f8 f80a 	bl	8000d8c <HAL_GPIO_Init>
}
 8008d78:	bf00      	nop
 8008d7a:	3718      	adds	r7, #24
 8008d7c:	46bd      	mov	sp, r7
 8008d7e:	bd80      	pop	{r7, pc}
 8008d80:	40021000 	.word	0x40021000

08008d84 <serial1_gpio_deinit>:

void serial1_gpio_deinit(void)
{
 8008d84:	b580      	push	{r7, lr}
 8008d86:	b086      	sub	sp, #24
 8008d88:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStructure = {0};
 8008d8a:	1d3b      	adds	r3, r7, #4
 8008d8c:	2200      	movs	r2, #0
 8008d8e:	601a      	str	r2, [r3, #0]
 8008d90:	605a      	str	r2, [r3, #4]
 8008d92:	609a      	str	r2, [r3, #8]
 8008d94:	60da      	str	r2, [r3, #12]
 8008d96:	611a      	str	r2, [r3, #16]
    
    GPIO_InitStructure.Pin = HAL_RX_PIN;      
 8008d98:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008d9c:	607b      	str	r3, [r7, #4]
    GPIO_InitStructure.Mode = GPIO_MODE_ANALOG; 
 8008d9e:	2303      	movs	r3, #3
 8008da0:	60bb      	str	r3, [r7, #8]
    GPIO_InitStructure.Pull = GPIO_NOPULL;      
 8008da2:	2300      	movs	r3, #0
 8008da4:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(HAL_RX_PORT, &GPIO_InitStructure);  
 8008da6:	1d3b      	adds	r3, r7, #4
 8008da8:	4619      	mov	r1, r3
 8008daa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8008dae:	f7f7 ffed 	bl	8000d8c <HAL_GPIO_Init>
    
    GPIO_InitStructure.Pin = HAL_TX_PIN; 
 8008db2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008db6:	607b      	str	r3, [r7, #4]
    HAL_GPIO_Init(HAL_TX_PORT, &GPIO_InitStructure);  
 8008db8:	1d3b      	adds	r3, r7, #4
 8008dba:	4619      	mov	r1, r3
 8008dbc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8008dc0:	f7f7 ffe4 	bl	8000d8c <HAL_GPIO_Init>
}
 8008dc4:	bf00      	nop
 8008dc6:	3718      	adds	r7, #24
 8008dc8:	46bd      	mov	sp, r7
 8008dca:	bd80      	pop	{r7, pc}

08008dcc <serial_1_mspinit>:

void serial_1_mspinit(UART_HandleTypeDef *uartHandle)
{
 8008dcc:	b580      	push	{r7, lr}
 8008dce:	b08a      	sub	sp, #40	; 0x28
 8008dd0:	af00      	add	r7, sp, #0
 8008dd2:	6078      	str	r0, [r7, #4]
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008dd4:	f107 0314 	add.w	r3, r7, #20
 8008dd8:	2200      	movs	r2, #0
 8008dda:	601a      	str	r2, [r3, #0]
 8008ddc:	605a      	str	r2, [r3, #4]
 8008dde:	609a      	str	r2, [r3, #8]
 8008de0:	60da      	str	r2, [r3, #12]
 8008de2:	611a      	str	r2, [r3, #16]

    __HAL_RCC_USART1_CLK_ENABLE();
 8008de4:	4b2f      	ldr	r3, [pc, #188]	; (8008ea4 <serial_1_mspinit+0xd8>)
 8008de6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008de8:	4a2e      	ldr	r2, [pc, #184]	; (8008ea4 <serial_1_mspinit+0xd8>)
 8008dea:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008dee:	6613      	str	r3, [r2, #96]	; 0x60
 8008df0:	4b2c      	ldr	r3, [pc, #176]	; (8008ea4 <serial_1_mspinit+0xd8>)
 8008df2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008df4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008df8:	613b      	str	r3, [r7, #16]
 8008dfa:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008dfc:	4b29      	ldr	r3, [pc, #164]	; (8008ea4 <serial_1_mspinit+0xd8>)
 8008dfe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008e00:	4a28      	ldr	r2, [pc, #160]	; (8008ea4 <serial_1_mspinit+0xd8>)
 8008e02:	f043 0301 	orr.w	r3, r3, #1
 8008e06:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008e08:	4b26      	ldr	r3, [pc, #152]	; (8008ea4 <serial_1_mspinit+0xd8>)
 8008e0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008e0c:	f003 0301 	and.w	r3, r3, #1
 8008e10:	60fb      	str	r3, [r7, #12]
 8008e12:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9 | GPIO_PIN_10;
 8008e14:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8008e18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008e1a:	2302      	movs	r3, #2
 8008e1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008e1e:	2300      	movs	r3, #0
 8008e20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008e22:	2303      	movs	r3, #3
 8008e24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8008e26:	2307      	movs	r3, #7
 8008e28:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008e2a:	f107 0314 	add.w	r3, r7, #20
 8008e2e:	4619      	mov	r1, r3
 8008e30:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8008e34:	f7f7 ffaa 	bl	8000d8c <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8008e38:	4b1b      	ldr	r3, [pc, #108]	; (8008ea8 <serial_1_mspinit+0xdc>)
 8008e3a:	4a1c      	ldr	r2, [pc, #112]	; (8008eac <serial_1_mspinit+0xe0>)
 8008e3c:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_2;
 8008e3e:	4b1a      	ldr	r3, [pc, #104]	; (8008ea8 <serial_1_mspinit+0xdc>)
 8008e40:	2202      	movs	r2, #2
 8008e42:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8008e44:	4b18      	ldr	r3, [pc, #96]	; (8008ea8 <serial_1_mspinit+0xdc>)
 8008e46:	2200      	movs	r2, #0
 8008e48:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8008e4a:	4b17      	ldr	r3, [pc, #92]	; (8008ea8 <serial_1_mspinit+0xdc>)
 8008e4c:	2200      	movs	r2, #0
 8008e4e:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8008e50:	4b15      	ldr	r3, [pc, #84]	; (8008ea8 <serial_1_mspinit+0xdc>)
 8008e52:	2280      	movs	r2, #128	; 0x80
 8008e54:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8008e56:	4b14      	ldr	r3, [pc, #80]	; (8008ea8 <serial_1_mspinit+0xdc>)
 8008e58:	2200      	movs	r2, #0
 8008e5a:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8008e5c:	4b12      	ldr	r3, [pc, #72]	; (8008ea8 <serial_1_mspinit+0xdc>)
 8008e5e:	2200      	movs	r2, #0
 8008e60:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8008e62:	4b11      	ldr	r3, [pc, #68]	; (8008ea8 <serial_1_mspinit+0xdc>)
 8008e64:	2200      	movs	r2, #0
 8008e66:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8008e68:	4b0f      	ldr	r3, [pc, #60]	; (8008ea8 <serial_1_mspinit+0xdc>)
 8008e6a:	2200      	movs	r2, #0
 8008e6c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8008e6e:	480e      	ldr	r0, [pc, #56]	; (8008ea8 <serial_1_mspinit+0xdc>)
 8008e70:	f7f7 fcf4 	bl	800085c <HAL_DMA_Init>
 8008e74:	4603      	mov	r3, r0
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d001      	beq.n	8008e7e <serial_1_mspinit+0xb2>
    {
        Error_Handler();
 8008e7a:	f7ff f9cd 	bl	8008218 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle, hdmarx, hdma_usart1_rx);
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	4a09      	ldr	r2, [pc, #36]	; (8008ea8 <serial_1_mspinit+0xdc>)
 8008e82:	66da      	str	r2, [r3, #108]	; 0x6c
 8008e84:	4a08      	ldr	r2, [pc, #32]	; (8008ea8 <serial_1_mspinit+0xdc>)
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8008e8a:	2200      	movs	r2, #0
 8008e8c:	2105      	movs	r1, #5
 8008e8e:	2025      	movs	r0, #37	; 0x25
 8008e90:	f7f7 fca0 	bl	80007d4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8008e94:	2025      	movs	r0, #37	; 0x25
 8008e96:	f7f7 fcc9 	bl	800082c <HAL_NVIC_EnableIRQ>
}
 8008e9a:	bf00      	nop
 8008e9c:	3728      	adds	r7, #40	; 0x28
 8008e9e:	46bd      	mov	sp, r7
 8008ea0:	bd80      	pop	{r7, pc}
 8008ea2:	bf00      	nop
 8008ea4:	40021000 	.word	0x40021000
 8008ea8:	2000d6d8 	.word	0x2000d6d8
 8008eac:	40020058 	.word	0x40020058

08008eb0 <serial_1_init>:

void serial_1_init(void)
{
 8008eb0:	b580      	push	{r7, lr}
 8008eb2:	af00      	add	r7, sp, #0
    SD_PORT.Instance = USART1;
 8008eb4:	4b1a      	ldr	r3, [pc, #104]	; (8008f20 <serial_1_init+0x70>)
 8008eb6:	4a1b      	ldr	r2, [pc, #108]	; (8008f24 <serial_1_init+0x74>)
 8008eb8:	601a      	str	r2, [r3, #0]
    SD_PORT.Init.BaudRate = 921600;
 8008eba:	4b19      	ldr	r3, [pc, #100]	; (8008f20 <serial_1_init+0x70>)
 8008ebc:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 8008ec0:	605a      	str	r2, [r3, #4]
    SD_PORT.Init.WordLength = UART_WORDLENGTH_8B;
 8008ec2:	4b17      	ldr	r3, [pc, #92]	; (8008f20 <serial_1_init+0x70>)
 8008ec4:	2200      	movs	r2, #0
 8008ec6:	609a      	str	r2, [r3, #8]
    SD_PORT.Init.StopBits = UART_STOPBITS_1;
 8008ec8:	4b15      	ldr	r3, [pc, #84]	; (8008f20 <serial_1_init+0x70>)
 8008eca:	2200      	movs	r2, #0
 8008ecc:	60da      	str	r2, [r3, #12]
    SD_PORT.Init.Parity = UART_PARITY_NONE;
 8008ece:	4b14      	ldr	r3, [pc, #80]	; (8008f20 <serial_1_init+0x70>)
 8008ed0:	2200      	movs	r2, #0
 8008ed2:	611a      	str	r2, [r3, #16]
    SD_PORT.Init.Mode = UART_MODE_TX_RX;
 8008ed4:	4b12      	ldr	r3, [pc, #72]	; (8008f20 <serial_1_init+0x70>)
 8008ed6:	220c      	movs	r2, #12
 8008ed8:	615a      	str	r2, [r3, #20]
    SD_PORT.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8008eda:	4b11      	ldr	r3, [pc, #68]	; (8008f20 <serial_1_init+0x70>)
 8008edc:	2200      	movs	r2, #0
 8008ede:	619a      	str	r2, [r3, #24]
    SD_PORT.Init.OverSampling = UART_OVERSAMPLING_16;
 8008ee0:	4b0f      	ldr	r3, [pc, #60]	; (8008f20 <serial_1_init+0x70>)
 8008ee2:	2200      	movs	r2, #0
 8008ee4:	61da      	str	r2, [r3, #28]
    SD_PORT.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8008ee6:	4b0e      	ldr	r3, [pc, #56]	; (8008f20 <serial_1_init+0x70>)
 8008ee8:	2200      	movs	r2, #0
 8008eea:	621a      	str	r2, [r3, #32]
    SD_PORT.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT | UART_ADVFEATURE_DMADISABLEONERROR_INIT;
 8008eec:	4b0c      	ldr	r3, [pc, #48]	; (8008f20 <serial_1_init+0x70>)
 8008eee:	2230      	movs	r2, #48	; 0x30
 8008ef0:	625a      	str	r2, [r3, #36]	; 0x24
    SD_PORT.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 8008ef2:	4b0b      	ldr	r3, [pc, #44]	; (8008f20 <serial_1_init+0x70>)
 8008ef4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8008ef8:	639a      	str	r2, [r3, #56]	; 0x38
    SD_PORT.AdvancedInit.DMADisableonRxError = UART_ADVFEATURE_DMA_DISABLEONRXERROR;
 8008efa:	4b09      	ldr	r3, [pc, #36]	; (8008f20 <serial_1_init+0x70>)
 8008efc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8008f00:	63da      	str	r2, [r3, #60]	; 0x3c
    SD_PORT.MspInitCallback = serial_1_mspinit;
 8008f02:	4b07      	ldr	r3, [pc, #28]	; (8008f20 <serial_1_init+0x70>)
 8008f04:	4a08      	ldr	r2, [pc, #32]	; (8008f28 <serial_1_init+0x78>)
 8008f06:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
    if (HAL_UART_Init(&SD_PORT) != HAL_OK)
 8008f0a:	4805      	ldr	r0, [pc, #20]	; (8008f20 <serial_1_init+0x70>)
 8008f0c:	f7fa fd6a 	bl	80039e4 <HAL_UART_Init>
 8008f10:	4603      	mov	r3, r0
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d001      	beq.n	8008f1a <serial_1_init+0x6a>
    {
        Error_Handler();
 8008f16:	f7ff f97f 	bl	8008218 <Error_Handler>
    }
}
 8008f1a:	bf00      	nop
 8008f1c:	bd80      	pop	{r7, pc}
 8008f1e:	bf00      	nop
 8008f20:	2000d720 	.word	0x2000d720
 8008f24:	40013800 	.word	0x40013800
 8008f28:	08008dcd 	.word	0x08008dcd

08008f2c <serial_1_start>:

int serial_1_start(void)
{
 8008f2c:	b580      	push	{r7, lr}
 8008f2e:	af00      	add	r7, sp, #0
    serdbg_semap = creat_semqphore();
 8008f30:	f7ff fd5c 	bl	80089ec <creat_semqphore>
 8008f34:	4602      	mov	r2, r0
 8008f36:	4b0b      	ldr	r3, [pc, #44]	; (8008f64 <serial_1_start+0x38>)
 8008f38:	601a      	str	r2, [r3, #0]
    //INIT_PRINT((serdbg_semap == NULL) ? INIT_FAIL : INIT_OK, "serial debug semqphore creat");

    HAL_UART_Receive_DMA(&SD_PORT, serdbg_msg, DEBUG_RX_MAX);
 8008f3a:	2240      	movs	r2, #64	; 0x40
 8008f3c:	490a      	ldr	r1, [pc, #40]	; (8008f68 <serial_1_start+0x3c>)
 8008f3e:	480b      	ldr	r0, [pc, #44]	; (8008f6c <serial_1_start+0x40>)
 8008f40:	f7fa fea6 	bl	8003c90 <HAL_UART_Receive_DMA>
    __HAL_UART_CLEAR_IDLEFLAG(&SD_PORT);
 8008f44:	4b09      	ldr	r3, [pc, #36]	; (8008f6c <serial_1_start+0x40>)
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	2210      	movs	r2, #16
 8008f4a:	621a      	str	r2, [r3, #32]
    __HAL_UART_ENABLE_IT(&SD_PORT, UART_IT_IDLE);
 8008f4c:	4b07      	ldr	r3, [pc, #28]	; (8008f6c <serial_1_start+0x40>)
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	681a      	ldr	r2, [r3, #0]
 8008f52:	4b06      	ldr	r3, [pc, #24]	; (8008f6c <serial_1_start+0x40>)
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	f042 0210 	orr.w	r2, r2, #16
 8008f5a:	601a      	str	r2, [r3, #0]

    return 0;
 8008f5c:	2300      	movs	r3, #0
}
 8008f5e:	4618      	mov	r0, r3
 8008f60:	bd80      	pop	{r7, pc}
 8008f62:	bf00      	nop
 8008f64:	2000d5ec 	.word	0x2000d5ec
 8008f68:	2000d5f0 	.word	0x2000d5f0
 8008f6c:	2000d720 	.word	0x2000d720

08008f70 <serial1_hal_init>:

void serial1_hal_init(void)
{
 8008f70:	b580      	push	{r7, lr}
 8008f72:	af00      	add	r7, sp, #0
    serial1_dma_init();
 8008f74:	f7ff feb8 	bl	8008ce8 <serial1_dma_init>
    serial_1_init();
 8008f78:	f7ff ff9a 	bl	8008eb0 <serial_1_init>
    serial_1_start();
 8008f7c:	f7ff ffd6 	bl	8008f2c <serial_1_start>
}
 8008f80:	bf00      	nop
 8008f82:	bd80      	pop	{r7, pc}

08008f84 <serial_1_open>:

int serial_1_open(FIL_HAND *fd)
{
 8008f84:	b480      	push	{r7}
 8008f86:	b083      	sub	sp, #12
 8008f88:	af00      	add	r7, sp, #0
 8008f8a:	6078      	str	r0, [r7, #4]

    return 0;
 8008f8c:	2300      	movs	r3, #0
}
 8008f8e:	4618      	mov	r0, r3
 8008f90:	370c      	adds	r7, #12
 8008f92:	46bd      	mov	sp, r7
 8008f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f98:	4770      	bx	lr
	...

08008f9c <serial_1_write>:

int serial_1_write(FIL_HAND *fd, const void *buf, uint32_t count)
{
 8008f9c:	b580      	push	{r7, lr}
 8008f9e:	b084      	sub	sp, #16
 8008fa0:	af00      	add	r7, sp, #0
 8008fa2:	60f8      	str	r0, [r7, #12]
 8008fa4:	60b9      	str	r1, [r7, #8]
 8008fa6:	607a      	str	r2, [r7, #4]
    if ((HAL_UART_Transmit(&SD_PORT, (uint8_t *)buf, count, 500)) != HAL_OK)
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	b29a      	uxth	r2, r3
 8008fac:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8008fb0:	68b9      	ldr	r1, [r7, #8]
 8008fb2:	4807      	ldr	r0, [pc, #28]	; (8008fd0 <serial_1_write+0x34>)
 8008fb4:	f7fa fdd8 	bl	8003b68 <HAL_UART_Transmit>
 8008fb8:	4603      	mov	r3, r0
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d002      	beq.n	8008fc4 <serial_1_write+0x28>
    {
        return -EIO;
 8008fbe:	f06f 0304 	mvn.w	r3, #4
 8008fc2:	e000      	b.n	8008fc6 <serial_1_write+0x2a>
    }

    return 0;
 8008fc4:	2300      	movs	r3, #0
}
 8008fc6:	4618      	mov	r0, r3
 8008fc8:	3710      	adds	r7, #16
 8008fca:	46bd      	mov	sp, r7
 8008fcc:	bd80      	pop	{r7, pc}
 8008fce:	bf00      	nop
 8008fd0:	2000d720 	.word	0x2000d720

08008fd4 <serial_1_read>:

int serial_1_read(FIL_HAND *fd, void *data, uint32_t count)
{
 8008fd4:	b580      	push	{r7, lr}
 8008fd6:	b096      	sub	sp, #88	; 0x58
 8008fd8:	af00      	add	r7, sp, #0
 8008fda:	60f8      	str	r0, [r7, #12]
 8008fdc:	60b9      	str	r1, [r7, #8]
 8008fde:	607a      	str	r2, [r7, #4]
    uint32_t rxsize = 0;
 8008fe0:	2300      	movs	r3, #0
 8008fe2:	657b      	str	r3, [r7, #84]	; 0x54
    uint32_t rxlen = 0;
 8008fe4:	2300      	movs	r3, #0
 8008fe6:	653b      	str	r3, [r7, #80]	; 0x50
    uint8_t temp[DEBUG_RX_MAX];

    if (SD_PORT.hdmarx->Instance->CNDTR == DEBUG_RX_MAX) //缓存没有数据
 8008fe8:	4b48      	ldr	r3, [pc, #288]	; (800910c <serial_1_read+0x138>)
 8008fea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	685b      	ldr	r3, [r3, #4]
 8008ff0:	2b40      	cmp	r3, #64	; 0x40
 8008ff2:	d110      	bne.n	8009016 <serial_1_read+0x42>
    {
        //如果接收停止，开启接收
        if (SD_PORT.RxState == HAL_UART_STATE_READY)
 8008ff4:	4b45      	ldr	r3, [pc, #276]	; (800910c <serial_1_read+0x138>)
 8008ff6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008ff8:	2b20      	cmp	r3, #32
 8008ffa:	d104      	bne.n	8009006 <serial_1_read+0x32>
        {
            //log(DEBUG, "rx state is ready , start receive\n");
            HAL_UART_Receive_DMA(&SD_PORT, serdbg_msg, DEBUG_RX_MAX);
 8008ffc:	2240      	movs	r2, #64	; 0x40
 8008ffe:	4944      	ldr	r1, [pc, #272]	; (8009110 <serial_1_read+0x13c>)
 8009000:	4842      	ldr	r0, [pc, #264]	; (800910c <serial_1_read+0x138>)
 8009002:	f7fa fe45 	bl	8003c90 <HAL_UART_Receive_DMA>
        }
        //等待接收完成信号
        read_semaphore(serdbg_semap, ser_read_mode);
 8009006:	4b43      	ldr	r3, [pc, #268]	; (8009114 <serial_1_read+0x140>)
 8009008:	681a      	ldr	r2, [r3, #0]
 800900a:	4b43      	ldr	r3, [pc, #268]	; (8009118 <serial_1_read+0x144>)
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	4619      	mov	r1, r3
 8009010:	4610      	mov	r0, r2
 8009012:	f7ff fd07 	bl	8008a24 <read_semaphore>
    }

    rxsize = DEBUG_RX_MAX - SD_PORT.hdmarx->Instance->CNDTR;
 8009016:	4b3d      	ldr	r3, [pc, #244]	; (800910c <serial_1_read+0x138>)
 8009018:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	685b      	ldr	r3, [r3, #4]
 800901e:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8009022:	657b      	str	r3, [r7, #84]	; 0x54
    if (rxsize >= count) //接受到的总长度大于read希望获取的长度
 8009024:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	429a      	cmp	r2, r3
 800902a:	d329      	bcc.n	8009080 <serial_1_read+0xac>
    {
        memcpy(data, serdbg_msg, count); //提取数据
 800902c:	687a      	ldr	r2, [r7, #4]
 800902e:	4938      	ldr	r1, [pc, #224]	; (8009110 <serial_1_read+0x13c>)
 8009030:	68b8      	ldr	r0, [r7, #8]
 8009032:	f000 f8eb 	bl	800920c <memcpy>
        rxsize -= count;
 8009036:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	1ad3      	subs	r3, r2, r3
 800903c:	657b      	str	r3, [r7, #84]	; 0x54

        if (rxsize > 0) //还有剩余的数据
 800903e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009040:	2b00      	cmp	r3, #0
 8009042:	d015      	beq.n	8009070 <serial_1_read+0x9c>
        {
            memcpy(temp, serdbg_msg + count, rxsize); //其余数据放入临时缓存
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	4a32      	ldr	r2, [pc, #200]	; (8009110 <serial_1_read+0x13c>)
 8009048:	1899      	adds	r1, r3, r2
 800904a:	f107 0310 	add.w	r3, r7, #16
 800904e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009050:	4618      	mov	r0, r3
 8009052:	f000 f8db 	bl	800920c <memcpy>
            memset(serdbg_msg, 0x00, DEBUG_RX_MAX);   //清空接收缓存
 8009056:	2240      	movs	r2, #64	; 0x40
 8009058:	2100      	movs	r1, #0
 800905a:	482d      	ldr	r0, [pc, #180]	; (8009110 <serial_1_read+0x13c>)
 800905c:	f000 f8e1 	bl	8009222 <memset>
            memcpy(serdbg_msg, temp, rxsize);
 8009060:	f107 0310 	add.w	r3, r7, #16
 8009064:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009066:	4619      	mov	r1, r3
 8009068:	4829      	ldr	r0, [pc, #164]	; (8009110 <serial_1_read+0x13c>)
 800906a:	f000 f8cf 	bl	800920c <memcpy>
 800906e:	e004      	b.n	800907a <serial_1_read+0xa6>
        }
        else
        {
            memset(serdbg_msg, 0x00, DEBUG_RX_MAX); //清空接收缓存
 8009070:	2240      	movs	r2, #64	; 0x40
 8009072:	2100      	movs	r1, #0
 8009074:	4826      	ldr	r0, [pc, #152]	; (8009110 <serial_1_read+0x13c>)
 8009076:	f000 f8d4 	bl	8009222 <memset>
        }

        rxlen = count;
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	653b      	str	r3, [r7, #80]	; 0x50
 800907e:	e00d      	b.n	800909c <serial_1_read+0xc8>
    }
    else //接收到的数据长度小于read希望获取的长度
    {
        memcpy(data, serdbg_msg, rxsize);       //提取数据
 8009080:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009082:	4923      	ldr	r1, [pc, #140]	; (8009110 <serial_1_read+0x13c>)
 8009084:	68b8      	ldr	r0, [r7, #8]
 8009086:	f000 f8c1 	bl	800920c <memcpy>
        memset(serdbg_msg, 0x00, DEBUG_RX_MAX); //清空接收缓存
 800908a:	2240      	movs	r2, #64	; 0x40
 800908c:	2100      	movs	r1, #0
 800908e:	4820      	ldr	r0, [pc, #128]	; (8009110 <serial_1_read+0x13c>)
 8009090:	f000 f8c7 	bl	8009222 <memset>

        rxlen = rxsize;
 8009094:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009096:	653b      	str	r3, [r7, #80]	; 0x50
        rxsize = 0;
 8009098:	2300      	movs	r3, #0
 800909a:	657b      	str	r3, [r7, #84]	; 0x54
    }

    if (SD_PORT.RxState == HAL_UART_STATE_READY)
 800909c:	4b1b      	ldr	r3, [pc, #108]	; (800910c <serial_1_read+0x138>)
 800909e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80090a0:	2b20      	cmp	r3, #32
 80090a2:	d10c      	bne.n	80090be <serial_1_read+0xea>
    {
        HAL_UART_Receive_DMA(&SD_PORT, serdbg_msg + rxsize, DEBUG_RX_MAX - rxsize);
 80090a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80090a6:	4a1a      	ldr	r2, [pc, #104]	; (8009110 <serial_1_read+0x13c>)
 80090a8:	1899      	adds	r1, r3, r2
 80090aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80090ac:	b29b      	uxth	r3, r3
 80090ae:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 80090b2:	b29b      	uxth	r3, r3
 80090b4:	461a      	mov	r2, r3
 80090b6:	4815      	ldr	r0, [pc, #84]	; (800910c <serial_1_read+0x138>)
 80090b8:	f7fa fdea 	bl	8003c90 <HAL_UART_Receive_DMA>
 80090bc:	e021      	b.n	8009102 <serial_1_read+0x12e>
    }
    else
    {
        __HAL_DMA_DISABLE(SD_PORT.hdmarx);
 80090be:	4b13      	ldr	r3, [pc, #76]	; (800910c <serial_1_read+0x138>)
 80090c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	681a      	ldr	r2, [r3, #0]
 80090c6:	4b11      	ldr	r3, [pc, #68]	; (800910c <serial_1_read+0x138>)
 80090c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	f022 0201 	bic.w	r2, r2, #1
 80090d0:	601a      	str	r2, [r3, #0]
        SD_PORT.hdmarx->Instance->CMAR = (uint32_t)(serdbg_msg + rxsize);
 80090d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80090d4:	4a0e      	ldr	r2, [pc, #56]	; (8009110 <serial_1_read+0x13c>)
 80090d6:	441a      	add	r2, r3
 80090d8:	4b0c      	ldr	r3, [pc, #48]	; (800910c <serial_1_read+0x138>)
 80090da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	60da      	str	r2, [r3, #12]
        SD_PORT.hdmarx->Instance->CNDTR = DEBUG_RX_MAX - rxsize;
 80090e0:	4b0a      	ldr	r3, [pc, #40]	; (800910c <serial_1_read+0x138>)
 80090e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80090e8:	f1c2 0240 	rsb	r2, r2, #64	; 0x40
 80090ec:	605a      	str	r2, [r3, #4]
        __HAL_DMA_ENABLE(SD_PORT.hdmarx);
 80090ee:	4b07      	ldr	r3, [pc, #28]	; (800910c <serial_1_read+0x138>)
 80090f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	681a      	ldr	r2, [r3, #0]
 80090f6:	4b05      	ldr	r3, [pc, #20]	; (800910c <serial_1_read+0x138>)
 80090f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	f042 0201 	orr.w	r2, r2, #1
 8009100:	601a      	str	r2, [r3, #0]
    }
    return rxlen;
 8009102:	6d3b      	ldr	r3, [r7, #80]	; 0x50
}
 8009104:	4618      	mov	r0, r3
 8009106:	3758      	adds	r7, #88	; 0x58
 8009108:	46bd      	mov	sp, r7
 800910a:	bd80      	pop	{r7, pc}
 800910c:	2000d720 	.word	0x2000d720
 8009110:	2000d5f0 	.word	0x2000d5f0
 8009114:	2000d5ec 	.word	0x2000d5ec
 8009118:	20000014 	.word	0x20000014

0800911c <serial1_resume>:


int serial1_resume(FIL_HAND *fd)
{
 800911c:	b580      	push	{r7, lr}
 800911e:	b082      	sub	sp, #8
 8009120:	af00      	add	r7, sp, #0
 8009122:	6078      	str	r0, [r7, #4]
    HAL_Sysclk_Init();
 8009124:	f7ff f8b0 	bl	8008288 <HAL_Sysclk_Init>
    serial1_gpio_init();
 8009128:	f7ff fdf6 	bl	8008d18 <serial1_gpio_init>

    return 0;
 800912c:	2300      	movs	r3, #0
}
 800912e:	4618      	mov	r0, r3
 8009130:	3708      	adds	r7, #8
 8009132:	46bd      	mov	sp, r7
 8009134:	bd80      	pop	{r7, pc}

08009136 <serial1_suspend>:

int serial1_suspend(FIL_HAND *fd)
{
 8009136:	b580      	push	{r7, lr}
 8009138:	b082      	sub	sp, #8
 800913a:	af00      	add	r7, sp, #0
 800913c:	6078      	str	r0, [r7, #4]
    serial1_gpio_deinit();
 800913e:	f7ff fe21 	bl	8008d84 <serial1_gpio_deinit>
    
    return 0;
 8009142:	2300      	movs	r3, #0
}
 8009144:	4618      	mov	r0, r3
 8009146:	3708      	adds	r7, #8
 8009148:	46bd      	mov	sp, r7
 800914a:	bd80      	pop	{r7, pc}

0800914c <serial1_ioctl>:


int serial1_ioctl(FIL_HAND *fd, void *buf, uint32_t count, uint32_t flag)
{
 800914c:	b580      	push	{r7, lr}
 800914e:	b084      	sub	sp, #16
 8009150:	af00      	add	r7, sp, #0
 8009152:	60f8      	str	r0, [r7, #12]
 8009154:	60b9      	str	r1, [r7, #8]
 8009156:	607a      	str	r2, [r7, #4]
 8009158:	603b      	str	r3, [r7, #0]
    if( flag & IOCTL_FLAG_RESUME)
 800915a:	683b      	ldr	r3, [r7, #0]
 800915c:	f003 0301 	and.w	r3, r3, #1
 8009160:	2b00      	cmp	r3, #0
 8009162:	d002      	beq.n	800916a <serial1_ioctl+0x1e>
    {
        serial1_resume(fd);
 8009164:	68f8      	ldr	r0, [r7, #12]
 8009166:	f7ff ffd9 	bl	800911c <serial1_resume>
    }
    if( flag & IOCTL_FLAG_SUSPEND)
 800916a:	683b      	ldr	r3, [r7, #0]
 800916c:	f003 0302 	and.w	r3, r3, #2
 8009170:	2b00      	cmp	r3, #0
 8009172:	d002      	beq.n	800917a <serial1_ioctl+0x2e>
    {
        serial1_suspend(fd);
 8009174:	68f8      	ldr	r0, [r7, #12]
 8009176:	f7ff ffde 	bl	8009136 <serial1_suspend>
    }
    
    return 0;
 800917a:	2300      	movs	r3, #0
}
 800917c:	4618      	mov	r0, r3
 800917e:	3710      	adds	r7, #16
 8009180:	46bd      	mov	sp, r7
 8009182:	bd80      	pop	{r7, pc}

08009184 <serial1_init>:
    .fops = &serial1_fops,
    .nodename = "device",
};

int serial1_init(void)
{
 8009184:	b580      	push	{r7, lr}
 8009186:	af00      	add	r7, sp, #0
    return (misc_register(&serial1));
 8009188:	4802      	ldr	r0, [pc, #8]	; (8009194 <serial1_init+0x10>)
 800918a:	f7ff fd41 	bl	8008c10 <misc_register>
 800918e:	4603      	mov	r3, r0
}
 8009190:	4618      	mov	r0, r3
 8009192:	bd80      	pop	{r7, pc}
 8009194:	20000034 	.word	0x20000034

08009198 <__errno>:
 8009198:	4b01      	ldr	r3, [pc, #4]	; (80091a0 <__errno+0x8>)
 800919a:	6818      	ldr	r0, [r3, #0]
 800919c:	4770      	bx	lr
 800919e:	bf00      	nop
 80091a0:	20000044 	.word	0x20000044

080091a4 <__libc_init_array>:
 80091a4:	b570      	push	{r4, r5, r6, lr}
 80091a6:	4e0d      	ldr	r6, [pc, #52]	; (80091dc <__libc_init_array+0x38>)
 80091a8:	4c0d      	ldr	r4, [pc, #52]	; (80091e0 <__libc_init_array+0x3c>)
 80091aa:	1ba4      	subs	r4, r4, r6
 80091ac:	10a4      	asrs	r4, r4, #2
 80091ae:	2500      	movs	r5, #0
 80091b0:	42a5      	cmp	r5, r4
 80091b2:	d109      	bne.n	80091c8 <__libc_init_array+0x24>
 80091b4:	4e0b      	ldr	r6, [pc, #44]	; (80091e4 <__libc_init_array+0x40>)
 80091b6:	4c0c      	ldr	r4, [pc, #48]	; (80091e8 <__libc_init_array+0x44>)
 80091b8:	f001 f9ba 	bl	800a530 <_init>
 80091bc:	1ba4      	subs	r4, r4, r6
 80091be:	10a4      	asrs	r4, r4, #2
 80091c0:	2500      	movs	r5, #0
 80091c2:	42a5      	cmp	r5, r4
 80091c4:	d105      	bne.n	80091d2 <__libc_init_array+0x2e>
 80091c6:	bd70      	pop	{r4, r5, r6, pc}
 80091c8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80091cc:	4798      	blx	r3
 80091ce:	3501      	adds	r5, #1
 80091d0:	e7ee      	b.n	80091b0 <__libc_init_array+0xc>
 80091d2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80091d6:	4798      	blx	r3
 80091d8:	3501      	adds	r5, #1
 80091da:	e7f2      	b.n	80091c2 <__libc_init_array+0x1e>
 80091dc:	0800a9fc 	.word	0x0800a9fc
 80091e0:	0800a9fc 	.word	0x0800a9fc
 80091e4:	0800a9fc 	.word	0x0800a9fc
 80091e8:	0800aa00 	.word	0x0800aa00

080091ec <malloc>:
 80091ec:	4b02      	ldr	r3, [pc, #8]	; (80091f8 <malloc+0xc>)
 80091ee:	4601      	mov	r1, r0
 80091f0:	6818      	ldr	r0, [r3, #0]
 80091f2:	f000 b86d 	b.w	80092d0 <_malloc_r>
 80091f6:	bf00      	nop
 80091f8:	20000044 	.word	0x20000044

080091fc <free>:
 80091fc:	4b02      	ldr	r3, [pc, #8]	; (8009208 <free+0xc>)
 80091fe:	4601      	mov	r1, r0
 8009200:	6818      	ldr	r0, [r3, #0]
 8009202:	f000 b817 	b.w	8009234 <_free_r>
 8009206:	bf00      	nop
 8009208:	20000044 	.word	0x20000044

0800920c <memcpy>:
 800920c:	b510      	push	{r4, lr}
 800920e:	1e43      	subs	r3, r0, #1
 8009210:	440a      	add	r2, r1
 8009212:	4291      	cmp	r1, r2
 8009214:	d100      	bne.n	8009218 <memcpy+0xc>
 8009216:	bd10      	pop	{r4, pc}
 8009218:	f811 4b01 	ldrb.w	r4, [r1], #1
 800921c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009220:	e7f7      	b.n	8009212 <memcpy+0x6>

08009222 <memset>:
 8009222:	4402      	add	r2, r0
 8009224:	4603      	mov	r3, r0
 8009226:	4293      	cmp	r3, r2
 8009228:	d100      	bne.n	800922c <memset+0xa>
 800922a:	4770      	bx	lr
 800922c:	f803 1b01 	strb.w	r1, [r3], #1
 8009230:	e7f9      	b.n	8009226 <memset+0x4>
	...

08009234 <_free_r>:
 8009234:	b538      	push	{r3, r4, r5, lr}
 8009236:	4605      	mov	r5, r0
 8009238:	2900      	cmp	r1, #0
 800923a:	d045      	beq.n	80092c8 <_free_r+0x94>
 800923c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009240:	1f0c      	subs	r4, r1, #4
 8009242:	2b00      	cmp	r3, #0
 8009244:	bfb8      	it	lt
 8009246:	18e4      	addlt	r4, r4, r3
 8009248:	f000 fc2c 	bl	8009aa4 <__malloc_lock>
 800924c:	4a1f      	ldr	r2, [pc, #124]	; (80092cc <_free_r+0x98>)
 800924e:	6813      	ldr	r3, [r2, #0]
 8009250:	4610      	mov	r0, r2
 8009252:	b933      	cbnz	r3, 8009262 <_free_r+0x2e>
 8009254:	6063      	str	r3, [r4, #4]
 8009256:	6014      	str	r4, [r2, #0]
 8009258:	4628      	mov	r0, r5
 800925a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800925e:	f000 bc22 	b.w	8009aa6 <__malloc_unlock>
 8009262:	42a3      	cmp	r3, r4
 8009264:	d90c      	bls.n	8009280 <_free_r+0x4c>
 8009266:	6821      	ldr	r1, [r4, #0]
 8009268:	1862      	adds	r2, r4, r1
 800926a:	4293      	cmp	r3, r2
 800926c:	bf04      	itt	eq
 800926e:	681a      	ldreq	r2, [r3, #0]
 8009270:	685b      	ldreq	r3, [r3, #4]
 8009272:	6063      	str	r3, [r4, #4]
 8009274:	bf04      	itt	eq
 8009276:	1852      	addeq	r2, r2, r1
 8009278:	6022      	streq	r2, [r4, #0]
 800927a:	6004      	str	r4, [r0, #0]
 800927c:	e7ec      	b.n	8009258 <_free_r+0x24>
 800927e:	4613      	mov	r3, r2
 8009280:	685a      	ldr	r2, [r3, #4]
 8009282:	b10a      	cbz	r2, 8009288 <_free_r+0x54>
 8009284:	42a2      	cmp	r2, r4
 8009286:	d9fa      	bls.n	800927e <_free_r+0x4a>
 8009288:	6819      	ldr	r1, [r3, #0]
 800928a:	1858      	adds	r0, r3, r1
 800928c:	42a0      	cmp	r0, r4
 800928e:	d10b      	bne.n	80092a8 <_free_r+0x74>
 8009290:	6820      	ldr	r0, [r4, #0]
 8009292:	4401      	add	r1, r0
 8009294:	1858      	adds	r0, r3, r1
 8009296:	4282      	cmp	r2, r0
 8009298:	6019      	str	r1, [r3, #0]
 800929a:	d1dd      	bne.n	8009258 <_free_r+0x24>
 800929c:	6810      	ldr	r0, [r2, #0]
 800929e:	6852      	ldr	r2, [r2, #4]
 80092a0:	605a      	str	r2, [r3, #4]
 80092a2:	4401      	add	r1, r0
 80092a4:	6019      	str	r1, [r3, #0]
 80092a6:	e7d7      	b.n	8009258 <_free_r+0x24>
 80092a8:	d902      	bls.n	80092b0 <_free_r+0x7c>
 80092aa:	230c      	movs	r3, #12
 80092ac:	602b      	str	r3, [r5, #0]
 80092ae:	e7d3      	b.n	8009258 <_free_r+0x24>
 80092b0:	6820      	ldr	r0, [r4, #0]
 80092b2:	1821      	adds	r1, r4, r0
 80092b4:	428a      	cmp	r2, r1
 80092b6:	bf04      	itt	eq
 80092b8:	6811      	ldreq	r1, [r2, #0]
 80092ba:	6852      	ldreq	r2, [r2, #4]
 80092bc:	6062      	str	r2, [r4, #4]
 80092be:	bf04      	itt	eq
 80092c0:	1809      	addeq	r1, r1, r0
 80092c2:	6021      	streq	r1, [r4, #0]
 80092c4:	605c      	str	r4, [r3, #4]
 80092c6:	e7c7      	b.n	8009258 <_free_r+0x24>
 80092c8:	bd38      	pop	{r3, r4, r5, pc}
 80092ca:	bf00      	nop
 80092cc:	2000d634 	.word	0x2000d634

080092d0 <_malloc_r>:
 80092d0:	b570      	push	{r4, r5, r6, lr}
 80092d2:	1ccd      	adds	r5, r1, #3
 80092d4:	f025 0503 	bic.w	r5, r5, #3
 80092d8:	3508      	adds	r5, #8
 80092da:	2d0c      	cmp	r5, #12
 80092dc:	bf38      	it	cc
 80092de:	250c      	movcc	r5, #12
 80092e0:	2d00      	cmp	r5, #0
 80092e2:	4606      	mov	r6, r0
 80092e4:	db01      	blt.n	80092ea <_malloc_r+0x1a>
 80092e6:	42a9      	cmp	r1, r5
 80092e8:	d903      	bls.n	80092f2 <_malloc_r+0x22>
 80092ea:	230c      	movs	r3, #12
 80092ec:	6033      	str	r3, [r6, #0]
 80092ee:	2000      	movs	r0, #0
 80092f0:	bd70      	pop	{r4, r5, r6, pc}
 80092f2:	f000 fbd7 	bl	8009aa4 <__malloc_lock>
 80092f6:	4a21      	ldr	r2, [pc, #132]	; (800937c <_malloc_r+0xac>)
 80092f8:	6814      	ldr	r4, [r2, #0]
 80092fa:	4621      	mov	r1, r4
 80092fc:	b991      	cbnz	r1, 8009324 <_malloc_r+0x54>
 80092fe:	4c20      	ldr	r4, [pc, #128]	; (8009380 <_malloc_r+0xb0>)
 8009300:	6823      	ldr	r3, [r4, #0]
 8009302:	b91b      	cbnz	r3, 800930c <_malloc_r+0x3c>
 8009304:	4630      	mov	r0, r6
 8009306:	f000 f8cd 	bl	80094a4 <_sbrk_r>
 800930a:	6020      	str	r0, [r4, #0]
 800930c:	4629      	mov	r1, r5
 800930e:	4630      	mov	r0, r6
 8009310:	f000 f8c8 	bl	80094a4 <_sbrk_r>
 8009314:	1c43      	adds	r3, r0, #1
 8009316:	d124      	bne.n	8009362 <_malloc_r+0x92>
 8009318:	230c      	movs	r3, #12
 800931a:	6033      	str	r3, [r6, #0]
 800931c:	4630      	mov	r0, r6
 800931e:	f000 fbc2 	bl	8009aa6 <__malloc_unlock>
 8009322:	e7e4      	b.n	80092ee <_malloc_r+0x1e>
 8009324:	680b      	ldr	r3, [r1, #0]
 8009326:	1b5b      	subs	r3, r3, r5
 8009328:	d418      	bmi.n	800935c <_malloc_r+0x8c>
 800932a:	2b0b      	cmp	r3, #11
 800932c:	d90f      	bls.n	800934e <_malloc_r+0x7e>
 800932e:	600b      	str	r3, [r1, #0]
 8009330:	50cd      	str	r5, [r1, r3]
 8009332:	18cc      	adds	r4, r1, r3
 8009334:	4630      	mov	r0, r6
 8009336:	f000 fbb6 	bl	8009aa6 <__malloc_unlock>
 800933a:	f104 000b 	add.w	r0, r4, #11
 800933e:	1d23      	adds	r3, r4, #4
 8009340:	f020 0007 	bic.w	r0, r0, #7
 8009344:	1ac3      	subs	r3, r0, r3
 8009346:	d0d3      	beq.n	80092f0 <_malloc_r+0x20>
 8009348:	425a      	negs	r2, r3
 800934a:	50e2      	str	r2, [r4, r3]
 800934c:	e7d0      	b.n	80092f0 <_malloc_r+0x20>
 800934e:	428c      	cmp	r4, r1
 8009350:	684b      	ldr	r3, [r1, #4]
 8009352:	bf16      	itet	ne
 8009354:	6063      	strne	r3, [r4, #4]
 8009356:	6013      	streq	r3, [r2, #0]
 8009358:	460c      	movne	r4, r1
 800935a:	e7eb      	b.n	8009334 <_malloc_r+0x64>
 800935c:	460c      	mov	r4, r1
 800935e:	6849      	ldr	r1, [r1, #4]
 8009360:	e7cc      	b.n	80092fc <_malloc_r+0x2c>
 8009362:	1cc4      	adds	r4, r0, #3
 8009364:	f024 0403 	bic.w	r4, r4, #3
 8009368:	42a0      	cmp	r0, r4
 800936a:	d005      	beq.n	8009378 <_malloc_r+0xa8>
 800936c:	1a21      	subs	r1, r4, r0
 800936e:	4630      	mov	r0, r6
 8009370:	f000 f898 	bl	80094a4 <_sbrk_r>
 8009374:	3001      	adds	r0, #1
 8009376:	d0cf      	beq.n	8009318 <_malloc_r+0x48>
 8009378:	6025      	str	r5, [r4, #0]
 800937a:	e7db      	b.n	8009334 <_malloc_r+0x64>
 800937c:	2000d634 	.word	0x2000d634
 8009380:	2000d638 	.word	0x2000d638

08009384 <iprintf>:
 8009384:	b40f      	push	{r0, r1, r2, r3}
 8009386:	4b0a      	ldr	r3, [pc, #40]	; (80093b0 <iprintf+0x2c>)
 8009388:	b513      	push	{r0, r1, r4, lr}
 800938a:	681c      	ldr	r4, [r3, #0]
 800938c:	b124      	cbz	r4, 8009398 <iprintf+0x14>
 800938e:	69a3      	ldr	r3, [r4, #24]
 8009390:	b913      	cbnz	r3, 8009398 <iprintf+0x14>
 8009392:	4620      	mov	r0, r4
 8009394:	f000 fa98 	bl	80098c8 <__sinit>
 8009398:	ab05      	add	r3, sp, #20
 800939a:	9a04      	ldr	r2, [sp, #16]
 800939c:	68a1      	ldr	r1, [r4, #8]
 800939e:	9301      	str	r3, [sp, #4]
 80093a0:	4620      	mov	r0, r4
 80093a2:	f000 fcfd 	bl	8009da0 <_vfiprintf_r>
 80093a6:	b002      	add	sp, #8
 80093a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80093ac:	b004      	add	sp, #16
 80093ae:	4770      	bx	lr
 80093b0:	20000044 	.word	0x20000044

080093b4 <putchar>:
 80093b4:	b538      	push	{r3, r4, r5, lr}
 80093b6:	4b08      	ldr	r3, [pc, #32]	; (80093d8 <putchar+0x24>)
 80093b8:	681c      	ldr	r4, [r3, #0]
 80093ba:	4605      	mov	r5, r0
 80093bc:	b124      	cbz	r4, 80093c8 <putchar+0x14>
 80093be:	69a3      	ldr	r3, [r4, #24]
 80093c0:	b913      	cbnz	r3, 80093c8 <putchar+0x14>
 80093c2:	4620      	mov	r0, r4
 80093c4:	f000 fa80 	bl	80098c8 <__sinit>
 80093c8:	68a2      	ldr	r2, [r4, #8]
 80093ca:	4629      	mov	r1, r5
 80093cc:	4620      	mov	r0, r4
 80093ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80093d2:	f000 bf83 	b.w	800a2dc <_putc_r>
 80093d6:	bf00      	nop
 80093d8:	20000044 	.word	0x20000044

080093dc <_puts_r>:
 80093dc:	b570      	push	{r4, r5, r6, lr}
 80093de:	460e      	mov	r6, r1
 80093e0:	4605      	mov	r5, r0
 80093e2:	b118      	cbz	r0, 80093ec <_puts_r+0x10>
 80093e4:	6983      	ldr	r3, [r0, #24]
 80093e6:	b90b      	cbnz	r3, 80093ec <_puts_r+0x10>
 80093e8:	f000 fa6e 	bl	80098c8 <__sinit>
 80093ec:	69ab      	ldr	r3, [r5, #24]
 80093ee:	68ac      	ldr	r4, [r5, #8]
 80093f0:	b913      	cbnz	r3, 80093f8 <_puts_r+0x1c>
 80093f2:	4628      	mov	r0, r5
 80093f4:	f000 fa68 	bl	80098c8 <__sinit>
 80093f8:	4b23      	ldr	r3, [pc, #140]	; (8009488 <_puts_r+0xac>)
 80093fa:	429c      	cmp	r4, r3
 80093fc:	d117      	bne.n	800942e <_puts_r+0x52>
 80093fe:	686c      	ldr	r4, [r5, #4]
 8009400:	89a3      	ldrh	r3, [r4, #12]
 8009402:	071b      	lsls	r3, r3, #28
 8009404:	d51d      	bpl.n	8009442 <_puts_r+0x66>
 8009406:	6923      	ldr	r3, [r4, #16]
 8009408:	b1db      	cbz	r3, 8009442 <_puts_r+0x66>
 800940a:	3e01      	subs	r6, #1
 800940c:	68a3      	ldr	r3, [r4, #8]
 800940e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8009412:	3b01      	subs	r3, #1
 8009414:	60a3      	str	r3, [r4, #8]
 8009416:	b9e9      	cbnz	r1, 8009454 <_puts_r+0x78>
 8009418:	2b00      	cmp	r3, #0
 800941a:	da2e      	bge.n	800947a <_puts_r+0x9e>
 800941c:	4622      	mov	r2, r4
 800941e:	210a      	movs	r1, #10
 8009420:	4628      	mov	r0, r5
 8009422:	f000 f8a1 	bl	8009568 <__swbuf_r>
 8009426:	3001      	adds	r0, #1
 8009428:	d011      	beq.n	800944e <_puts_r+0x72>
 800942a:	200a      	movs	r0, #10
 800942c:	e011      	b.n	8009452 <_puts_r+0x76>
 800942e:	4b17      	ldr	r3, [pc, #92]	; (800948c <_puts_r+0xb0>)
 8009430:	429c      	cmp	r4, r3
 8009432:	d101      	bne.n	8009438 <_puts_r+0x5c>
 8009434:	68ac      	ldr	r4, [r5, #8]
 8009436:	e7e3      	b.n	8009400 <_puts_r+0x24>
 8009438:	4b15      	ldr	r3, [pc, #84]	; (8009490 <_puts_r+0xb4>)
 800943a:	429c      	cmp	r4, r3
 800943c:	bf08      	it	eq
 800943e:	68ec      	ldreq	r4, [r5, #12]
 8009440:	e7de      	b.n	8009400 <_puts_r+0x24>
 8009442:	4621      	mov	r1, r4
 8009444:	4628      	mov	r0, r5
 8009446:	f000 f8e1 	bl	800960c <__swsetup_r>
 800944a:	2800      	cmp	r0, #0
 800944c:	d0dd      	beq.n	800940a <_puts_r+0x2e>
 800944e:	f04f 30ff 	mov.w	r0, #4294967295
 8009452:	bd70      	pop	{r4, r5, r6, pc}
 8009454:	2b00      	cmp	r3, #0
 8009456:	da04      	bge.n	8009462 <_puts_r+0x86>
 8009458:	69a2      	ldr	r2, [r4, #24]
 800945a:	429a      	cmp	r2, r3
 800945c:	dc06      	bgt.n	800946c <_puts_r+0x90>
 800945e:	290a      	cmp	r1, #10
 8009460:	d004      	beq.n	800946c <_puts_r+0x90>
 8009462:	6823      	ldr	r3, [r4, #0]
 8009464:	1c5a      	adds	r2, r3, #1
 8009466:	6022      	str	r2, [r4, #0]
 8009468:	7019      	strb	r1, [r3, #0]
 800946a:	e7cf      	b.n	800940c <_puts_r+0x30>
 800946c:	4622      	mov	r2, r4
 800946e:	4628      	mov	r0, r5
 8009470:	f000 f87a 	bl	8009568 <__swbuf_r>
 8009474:	3001      	adds	r0, #1
 8009476:	d1c9      	bne.n	800940c <_puts_r+0x30>
 8009478:	e7e9      	b.n	800944e <_puts_r+0x72>
 800947a:	6823      	ldr	r3, [r4, #0]
 800947c:	200a      	movs	r0, #10
 800947e:	1c5a      	adds	r2, r3, #1
 8009480:	6022      	str	r2, [r4, #0]
 8009482:	7018      	strb	r0, [r3, #0]
 8009484:	e7e5      	b.n	8009452 <_puts_r+0x76>
 8009486:	bf00      	nop
 8009488:	0800a980 	.word	0x0800a980
 800948c:	0800a9a0 	.word	0x0800a9a0
 8009490:	0800a960 	.word	0x0800a960

08009494 <puts>:
 8009494:	4b02      	ldr	r3, [pc, #8]	; (80094a0 <puts+0xc>)
 8009496:	4601      	mov	r1, r0
 8009498:	6818      	ldr	r0, [r3, #0]
 800949a:	f7ff bf9f 	b.w	80093dc <_puts_r>
 800949e:	bf00      	nop
 80094a0:	20000044 	.word	0x20000044

080094a4 <_sbrk_r>:
 80094a4:	b538      	push	{r3, r4, r5, lr}
 80094a6:	4c06      	ldr	r4, [pc, #24]	; (80094c0 <_sbrk_r+0x1c>)
 80094a8:	2300      	movs	r3, #0
 80094aa:	4605      	mov	r5, r0
 80094ac:	4608      	mov	r0, r1
 80094ae:	6023      	str	r3, [r4, #0]
 80094b0:	f7ff f84c 	bl	800854c <_sbrk>
 80094b4:	1c43      	adds	r3, r0, #1
 80094b6:	d102      	bne.n	80094be <_sbrk_r+0x1a>
 80094b8:	6823      	ldr	r3, [r4, #0]
 80094ba:	b103      	cbz	r3, 80094be <_sbrk_r+0x1a>
 80094bc:	602b      	str	r3, [r5, #0]
 80094be:	bd38      	pop	{r3, r4, r5, pc}
 80094c0:	2000d7cc 	.word	0x2000d7cc

080094c4 <siprintf>:
 80094c4:	b40e      	push	{r1, r2, r3}
 80094c6:	b500      	push	{lr}
 80094c8:	b09c      	sub	sp, #112	; 0x70
 80094ca:	ab1d      	add	r3, sp, #116	; 0x74
 80094cc:	9002      	str	r0, [sp, #8]
 80094ce:	9006      	str	r0, [sp, #24]
 80094d0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80094d4:	4809      	ldr	r0, [pc, #36]	; (80094fc <siprintf+0x38>)
 80094d6:	9107      	str	r1, [sp, #28]
 80094d8:	9104      	str	r1, [sp, #16]
 80094da:	4909      	ldr	r1, [pc, #36]	; (8009500 <siprintf+0x3c>)
 80094dc:	f853 2b04 	ldr.w	r2, [r3], #4
 80094e0:	9105      	str	r1, [sp, #20]
 80094e2:	6800      	ldr	r0, [r0, #0]
 80094e4:	9301      	str	r3, [sp, #4]
 80094e6:	a902      	add	r1, sp, #8
 80094e8:	f000 fb38 	bl	8009b5c <_svfiprintf_r>
 80094ec:	9b02      	ldr	r3, [sp, #8]
 80094ee:	2200      	movs	r2, #0
 80094f0:	701a      	strb	r2, [r3, #0]
 80094f2:	b01c      	add	sp, #112	; 0x70
 80094f4:	f85d eb04 	ldr.w	lr, [sp], #4
 80094f8:	b003      	add	sp, #12
 80094fa:	4770      	bx	lr
 80094fc:	20000044 	.word	0x20000044
 8009500:	ffff0208 	.word	0xffff0208

08009504 <strncmp>:
 8009504:	b510      	push	{r4, lr}
 8009506:	b16a      	cbz	r2, 8009524 <strncmp+0x20>
 8009508:	3901      	subs	r1, #1
 800950a:	1884      	adds	r4, r0, r2
 800950c:	f810 3b01 	ldrb.w	r3, [r0], #1
 8009510:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8009514:	4293      	cmp	r3, r2
 8009516:	d103      	bne.n	8009520 <strncmp+0x1c>
 8009518:	42a0      	cmp	r0, r4
 800951a:	d001      	beq.n	8009520 <strncmp+0x1c>
 800951c:	2b00      	cmp	r3, #0
 800951e:	d1f5      	bne.n	800950c <strncmp+0x8>
 8009520:	1a98      	subs	r0, r3, r2
 8009522:	bd10      	pop	{r4, pc}
 8009524:	4610      	mov	r0, r2
 8009526:	e7fc      	b.n	8009522 <strncmp+0x1e>

08009528 <_vsiprintf_r>:
 8009528:	b500      	push	{lr}
 800952a:	b09b      	sub	sp, #108	; 0x6c
 800952c:	9100      	str	r1, [sp, #0]
 800952e:	9104      	str	r1, [sp, #16]
 8009530:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009534:	9105      	str	r1, [sp, #20]
 8009536:	9102      	str	r1, [sp, #8]
 8009538:	4905      	ldr	r1, [pc, #20]	; (8009550 <_vsiprintf_r+0x28>)
 800953a:	9103      	str	r1, [sp, #12]
 800953c:	4669      	mov	r1, sp
 800953e:	f000 fb0d 	bl	8009b5c <_svfiprintf_r>
 8009542:	9b00      	ldr	r3, [sp, #0]
 8009544:	2200      	movs	r2, #0
 8009546:	701a      	strb	r2, [r3, #0]
 8009548:	b01b      	add	sp, #108	; 0x6c
 800954a:	f85d fb04 	ldr.w	pc, [sp], #4
 800954e:	bf00      	nop
 8009550:	ffff0208 	.word	0xffff0208

08009554 <vsiprintf>:
 8009554:	4613      	mov	r3, r2
 8009556:	460a      	mov	r2, r1
 8009558:	4601      	mov	r1, r0
 800955a:	4802      	ldr	r0, [pc, #8]	; (8009564 <vsiprintf+0x10>)
 800955c:	6800      	ldr	r0, [r0, #0]
 800955e:	f7ff bfe3 	b.w	8009528 <_vsiprintf_r>
 8009562:	bf00      	nop
 8009564:	20000044 	.word	0x20000044

08009568 <__swbuf_r>:
 8009568:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800956a:	460e      	mov	r6, r1
 800956c:	4614      	mov	r4, r2
 800956e:	4605      	mov	r5, r0
 8009570:	b118      	cbz	r0, 800957a <__swbuf_r+0x12>
 8009572:	6983      	ldr	r3, [r0, #24]
 8009574:	b90b      	cbnz	r3, 800957a <__swbuf_r+0x12>
 8009576:	f000 f9a7 	bl	80098c8 <__sinit>
 800957a:	4b21      	ldr	r3, [pc, #132]	; (8009600 <__swbuf_r+0x98>)
 800957c:	429c      	cmp	r4, r3
 800957e:	d12a      	bne.n	80095d6 <__swbuf_r+0x6e>
 8009580:	686c      	ldr	r4, [r5, #4]
 8009582:	69a3      	ldr	r3, [r4, #24]
 8009584:	60a3      	str	r3, [r4, #8]
 8009586:	89a3      	ldrh	r3, [r4, #12]
 8009588:	071a      	lsls	r2, r3, #28
 800958a:	d52e      	bpl.n	80095ea <__swbuf_r+0x82>
 800958c:	6923      	ldr	r3, [r4, #16]
 800958e:	b363      	cbz	r3, 80095ea <__swbuf_r+0x82>
 8009590:	6923      	ldr	r3, [r4, #16]
 8009592:	6820      	ldr	r0, [r4, #0]
 8009594:	1ac0      	subs	r0, r0, r3
 8009596:	6963      	ldr	r3, [r4, #20]
 8009598:	b2f6      	uxtb	r6, r6
 800959a:	4283      	cmp	r3, r0
 800959c:	4637      	mov	r7, r6
 800959e:	dc04      	bgt.n	80095aa <__swbuf_r+0x42>
 80095a0:	4621      	mov	r1, r4
 80095a2:	4628      	mov	r0, r5
 80095a4:	f000 f926 	bl	80097f4 <_fflush_r>
 80095a8:	bb28      	cbnz	r0, 80095f6 <__swbuf_r+0x8e>
 80095aa:	68a3      	ldr	r3, [r4, #8]
 80095ac:	3b01      	subs	r3, #1
 80095ae:	60a3      	str	r3, [r4, #8]
 80095b0:	6823      	ldr	r3, [r4, #0]
 80095b2:	1c5a      	adds	r2, r3, #1
 80095b4:	6022      	str	r2, [r4, #0]
 80095b6:	701e      	strb	r6, [r3, #0]
 80095b8:	6963      	ldr	r3, [r4, #20]
 80095ba:	3001      	adds	r0, #1
 80095bc:	4283      	cmp	r3, r0
 80095be:	d004      	beq.n	80095ca <__swbuf_r+0x62>
 80095c0:	89a3      	ldrh	r3, [r4, #12]
 80095c2:	07db      	lsls	r3, r3, #31
 80095c4:	d519      	bpl.n	80095fa <__swbuf_r+0x92>
 80095c6:	2e0a      	cmp	r6, #10
 80095c8:	d117      	bne.n	80095fa <__swbuf_r+0x92>
 80095ca:	4621      	mov	r1, r4
 80095cc:	4628      	mov	r0, r5
 80095ce:	f000 f911 	bl	80097f4 <_fflush_r>
 80095d2:	b190      	cbz	r0, 80095fa <__swbuf_r+0x92>
 80095d4:	e00f      	b.n	80095f6 <__swbuf_r+0x8e>
 80095d6:	4b0b      	ldr	r3, [pc, #44]	; (8009604 <__swbuf_r+0x9c>)
 80095d8:	429c      	cmp	r4, r3
 80095da:	d101      	bne.n	80095e0 <__swbuf_r+0x78>
 80095dc:	68ac      	ldr	r4, [r5, #8]
 80095de:	e7d0      	b.n	8009582 <__swbuf_r+0x1a>
 80095e0:	4b09      	ldr	r3, [pc, #36]	; (8009608 <__swbuf_r+0xa0>)
 80095e2:	429c      	cmp	r4, r3
 80095e4:	bf08      	it	eq
 80095e6:	68ec      	ldreq	r4, [r5, #12]
 80095e8:	e7cb      	b.n	8009582 <__swbuf_r+0x1a>
 80095ea:	4621      	mov	r1, r4
 80095ec:	4628      	mov	r0, r5
 80095ee:	f000 f80d 	bl	800960c <__swsetup_r>
 80095f2:	2800      	cmp	r0, #0
 80095f4:	d0cc      	beq.n	8009590 <__swbuf_r+0x28>
 80095f6:	f04f 37ff 	mov.w	r7, #4294967295
 80095fa:	4638      	mov	r0, r7
 80095fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80095fe:	bf00      	nop
 8009600:	0800a980 	.word	0x0800a980
 8009604:	0800a9a0 	.word	0x0800a9a0
 8009608:	0800a960 	.word	0x0800a960

0800960c <__swsetup_r>:
 800960c:	4b32      	ldr	r3, [pc, #200]	; (80096d8 <__swsetup_r+0xcc>)
 800960e:	b570      	push	{r4, r5, r6, lr}
 8009610:	681d      	ldr	r5, [r3, #0]
 8009612:	4606      	mov	r6, r0
 8009614:	460c      	mov	r4, r1
 8009616:	b125      	cbz	r5, 8009622 <__swsetup_r+0x16>
 8009618:	69ab      	ldr	r3, [r5, #24]
 800961a:	b913      	cbnz	r3, 8009622 <__swsetup_r+0x16>
 800961c:	4628      	mov	r0, r5
 800961e:	f000 f953 	bl	80098c8 <__sinit>
 8009622:	4b2e      	ldr	r3, [pc, #184]	; (80096dc <__swsetup_r+0xd0>)
 8009624:	429c      	cmp	r4, r3
 8009626:	d10f      	bne.n	8009648 <__swsetup_r+0x3c>
 8009628:	686c      	ldr	r4, [r5, #4]
 800962a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800962e:	b29a      	uxth	r2, r3
 8009630:	0715      	lsls	r5, r2, #28
 8009632:	d42c      	bmi.n	800968e <__swsetup_r+0x82>
 8009634:	06d0      	lsls	r0, r2, #27
 8009636:	d411      	bmi.n	800965c <__swsetup_r+0x50>
 8009638:	2209      	movs	r2, #9
 800963a:	6032      	str	r2, [r6, #0]
 800963c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009640:	81a3      	strh	r3, [r4, #12]
 8009642:	f04f 30ff 	mov.w	r0, #4294967295
 8009646:	e03e      	b.n	80096c6 <__swsetup_r+0xba>
 8009648:	4b25      	ldr	r3, [pc, #148]	; (80096e0 <__swsetup_r+0xd4>)
 800964a:	429c      	cmp	r4, r3
 800964c:	d101      	bne.n	8009652 <__swsetup_r+0x46>
 800964e:	68ac      	ldr	r4, [r5, #8]
 8009650:	e7eb      	b.n	800962a <__swsetup_r+0x1e>
 8009652:	4b24      	ldr	r3, [pc, #144]	; (80096e4 <__swsetup_r+0xd8>)
 8009654:	429c      	cmp	r4, r3
 8009656:	bf08      	it	eq
 8009658:	68ec      	ldreq	r4, [r5, #12]
 800965a:	e7e6      	b.n	800962a <__swsetup_r+0x1e>
 800965c:	0751      	lsls	r1, r2, #29
 800965e:	d512      	bpl.n	8009686 <__swsetup_r+0x7a>
 8009660:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009662:	b141      	cbz	r1, 8009676 <__swsetup_r+0x6a>
 8009664:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009668:	4299      	cmp	r1, r3
 800966a:	d002      	beq.n	8009672 <__swsetup_r+0x66>
 800966c:	4630      	mov	r0, r6
 800966e:	f7ff fde1 	bl	8009234 <_free_r>
 8009672:	2300      	movs	r3, #0
 8009674:	6363      	str	r3, [r4, #52]	; 0x34
 8009676:	89a3      	ldrh	r3, [r4, #12]
 8009678:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800967c:	81a3      	strh	r3, [r4, #12]
 800967e:	2300      	movs	r3, #0
 8009680:	6063      	str	r3, [r4, #4]
 8009682:	6923      	ldr	r3, [r4, #16]
 8009684:	6023      	str	r3, [r4, #0]
 8009686:	89a3      	ldrh	r3, [r4, #12]
 8009688:	f043 0308 	orr.w	r3, r3, #8
 800968c:	81a3      	strh	r3, [r4, #12]
 800968e:	6923      	ldr	r3, [r4, #16]
 8009690:	b94b      	cbnz	r3, 80096a6 <__swsetup_r+0x9a>
 8009692:	89a3      	ldrh	r3, [r4, #12]
 8009694:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009698:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800969c:	d003      	beq.n	80096a6 <__swsetup_r+0x9a>
 800969e:	4621      	mov	r1, r4
 80096a0:	4630      	mov	r0, r6
 80096a2:	f000 f9bf 	bl	8009a24 <__smakebuf_r>
 80096a6:	89a2      	ldrh	r2, [r4, #12]
 80096a8:	f012 0301 	ands.w	r3, r2, #1
 80096ac:	d00c      	beq.n	80096c8 <__swsetup_r+0xbc>
 80096ae:	2300      	movs	r3, #0
 80096b0:	60a3      	str	r3, [r4, #8]
 80096b2:	6963      	ldr	r3, [r4, #20]
 80096b4:	425b      	negs	r3, r3
 80096b6:	61a3      	str	r3, [r4, #24]
 80096b8:	6923      	ldr	r3, [r4, #16]
 80096ba:	b953      	cbnz	r3, 80096d2 <__swsetup_r+0xc6>
 80096bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80096c0:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80096c4:	d1ba      	bne.n	800963c <__swsetup_r+0x30>
 80096c6:	bd70      	pop	{r4, r5, r6, pc}
 80096c8:	0792      	lsls	r2, r2, #30
 80096ca:	bf58      	it	pl
 80096cc:	6963      	ldrpl	r3, [r4, #20]
 80096ce:	60a3      	str	r3, [r4, #8]
 80096d0:	e7f2      	b.n	80096b8 <__swsetup_r+0xac>
 80096d2:	2000      	movs	r0, #0
 80096d4:	e7f7      	b.n	80096c6 <__swsetup_r+0xba>
 80096d6:	bf00      	nop
 80096d8:	20000044 	.word	0x20000044
 80096dc:	0800a980 	.word	0x0800a980
 80096e0:	0800a9a0 	.word	0x0800a9a0
 80096e4:	0800a960 	.word	0x0800a960

080096e8 <__sflush_r>:
 80096e8:	898a      	ldrh	r2, [r1, #12]
 80096ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80096ee:	4605      	mov	r5, r0
 80096f0:	0710      	lsls	r0, r2, #28
 80096f2:	460c      	mov	r4, r1
 80096f4:	d458      	bmi.n	80097a8 <__sflush_r+0xc0>
 80096f6:	684b      	ldr	r3, [r1, #4]
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	dc05      	bgt.n	8009708 <__sflush_r+0x20>
 80096fc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80096fe:	2b00      	cmp	r3, #0
 8009700:	dc02      	bgt.n	8009708 <__sflush_r+0x20>
 8009702:	2000      	movs	r0, #0
 8009704:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009708:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800970a:	2e00      	cmp	r6, #0
 800970c:	d0f9      	beq.n	8009702 <__sflush_r+0x1a>
 800970e:	2300      	movs	r3, #0
 8009710:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009714:	682f      	ldr	r7, [r5, #0]
 8009716:	6a21      	ldr	r1, [r4, #32]
 8009718:	602b      	str	r3, [r5, #0]
 800971a:	d032      	beq.n	8009782 <__sflush_r+0x9a>
 800971c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800971e:	89a3      	ldrh	r3, [r4, #12]
 8009720:	075a      	lsls	r2, r3, #29
 8009722:	d505      	bpl.n	8009730 <__sflush_r+0x48>
 8009724:	6863      	ldr	r3, [r4, #4]
 8009726:	1ac0      	subs	r0, r0, r3
 8009728:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800972a:	b10b      	cbz	r3, 8009730 <__sflush_r+0x48>
 800972c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800972e:	1ac0      	subs	r0, r0, r3
 8009730:	2300      	movs	r3, #0
 8009732:	4602      	mov	r2, r0
 8009734:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009736:	6a21      	ldr	r1, [r4, #32]
 8009738:	4628      	mov	r0, r5
 800973a:	47b0      	blx	r6
 800973c:	1c43      	adds	r3, r0, #1
 800973e:	89a3      	ldrh	r3, [r4, #12]
 8009740:	d106      	bne.n	8009750 <__sflush_r+0x68>
 8009742:	6829      	ldr	r1, [r5, #0]
 8009744:	291d      	cmp	r1, #29
 8009746:	d848      	bhi.n	80097da <__sflush_r+0xf2>
 8009748:	4a29      	ldr	r2, [pc, #164]	; (80097f0 <__sflush_r+0x108>)
 800974a:	40ca      	lsrs	r2, r1
 800974c:	07d6      	lsls	r6, r2, #31
 800974e:	d544      	bpl.n	80097da <__sflush_r+0xf2>
 8009750:	2200      	movs	r2, #0
 8009752:	6062      	str	r2, [r4, #4]
 8009754:	04d9      	lsls	r1, r3, #19
 8009756:	6922      	ldr	r2, [r4, #16]
 8009758:	6022      	str	r2, [r4, #0]
 800975a:	d504      	bpl.n	8009766 <__sflush_r+0x7e>
 800975c:	1c42      	adds	r2, r0, #1
 800975e:	d101      	bne.n	8009764 <__sflush_r+0x7c>
 8009760:	682b      	ldr	r3, [r5, #0]
 8009762:	b903      	cbnz	r3, 8009766 <__sflush_r+0x7e>
 8009764:	6560      	str	r0, [r4, #84]	; 0x54
 8009766:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009768:	602f      	str	r7, [r5, #0]
 800976a:	2900      	cmp	r1, #0
 800976c:	d0c9      	beq.n	8009702 <__sflush_r+0x1a>
 800976e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009772:	4299      	cmp	r1, r3
 8009774:	d002      	beq.n	800977c <__sflush_r+0x94>
 8009776:	4628      	mov	r0, r5
 8009778:	f7ff fd5c 	bl	8009234 <_free_r>
 800977c:	2000      	movs	r0, #0
 800977e:	6360      	str	r0, [r4, #52]	; 0x34
 8009780:	e7c0      	b.n	8009704 <__sflush_r+0x1c>
 8009782:	2301      	movs	r3, #1
 8009784:	4628      	mov	r0, r5
 8009786:	47b0      	blx	r6
 8009788:	1c41      	adds	r1, r0, #1
 800978a:	d1c8      	bne.n	800971e <__sflush_r+0x36>
 800978c:	682b      	ldr	r3, [r5, #0]
 800978e:	2b00      	cmp	r3, #0
 8009790:	d0c5      	beq.n	800971e <__sflush_r+0x36>
 8009792:	2b1d      	cmp	r3, #29
 8009794:	d001      	beq.n	800979a <__sflush_r+0xb2>
 8009796:	2b16      	cmp	r3, #22
 8009798:	d101      	bne.n	800979e <__sflush_r+0xb6>
 800979a:	602f      	str	r7, [r5, #0]
 800979c:	e7b1      	b.n	8009702 <__sflush_r+0x1a>
 800979e:	89a3      	ldrh	r3, [r4, #12]
 80097a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80097a4:	81a3      	strh	r3, [r4, #12]
 80097a6:	e7ad      	b.n	8009704 <__sflush_r+0x1c>
 80097a8:	690f      	ldr	r7, [r1, #16]
 80097aa:	2f00      	cmp	r7, #0
 80097ac:	d0a9      	beq.n	8009702 <__sflush_r+0x1a>
 80097ae:	0793      	lsls	r3, r2, #30
 80097b0:	680e      	ldr	r6, [r1, #0]
 80097b2:	bf08      	it	eq
 80097b4:	694b      	ldreq	r3, [r1, #20]
 80097b6:	600f      	str	r7, [r1, #0]
 80097b8:	bf18      	it	ne
 80097ba:	2300      	movne	r3, #0
 80097bc:	eba6 0807 	sub.w	r8, r6, r7
 80097c0:	608b      	str	r3, [r1, #8]
 80097c2:	f1b8 0f00 	cmp.w	r8, #0
 80097c6:	dd9c      	ble.n	8009702 <__sflush_r+0x1a>
 80097c8:	4643      	mov	r3, r8
 80097ca:	463a      	mov	r2, r7
 80097cc:	6a21      	ldr	r1, [r4, #32]
 80097ce:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80097d0:	4628      	mov	r0, r5
 80097d2:	47b0      	blx	r6
 80097d4:	2800      	cmp	r0, #0
 80097d6:	dc06      	bgt.n	80097e6 <__sflush_r+0xfe>
 80097d8:	89a3      	ldrh	r3, [r4, #12]
 80097da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80097de:	81a3      	strh	r3, [r4, #12]
 80097e0:	f04f 30ff 	mov.w	r0, #4294967295
 80097e4:	e78e      	b.n	8009704 <__sflush_r+0x1c>
 80097e6:	4407      	add	r7, r0
 80097e8:	eba8 0800 	sub.w	r8, r8, r0
 80097ec:	e7e9      	b.n	80097c2 <__sflush_r+0xda>
 80097ee:	bf00      	nop
 80097f0:	20400001 	.word	0x20400001

080097f4 <_fflush_r>:
 80097f4:	b538      	push	{r3, r4, r5, lr}
 80097f6:	690b      	ldr	r3, [r1, #16]
 80097f8:	4605      	mov	r5, r0
 80097fa:	460c      	mov	r4, r1
 80097fc:	b1db      	cbz	r3, 8009836 <_fflush_r+0x42>
 80097fe:	b118      	cbz	r0, 8009808 <_fflush_r+0x14>
 8009800:	6983      	ldr	r3, [r0, #24]
 8009802:	b90b      	cbnz	r3, 8009808 <_fflush_r+0x14>
 8009804:	f000 f860 	bl	80098c8 <__sinit>
 8009808:	4b0c      	ldr	r3, [pc, #48]	; (800983c <_fflush_r+0x48>)
 800980a:	429c      	cmp	r4, r3
 800980c:	d109      	bne.n	8009822 <_fflush_r+0x2e>
 800980e:	686c      	ldr	r4, [r5, #4]
 8009810:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009814:	b17b      	cbz	r3, 8009836 <_fflush_r+0x42>
 8009816:	4621      	mov	r1, r4
 8009818:	4628      	mov	r0, r5
 800981a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800981e:	f7ff bf63 	b.w	80096e8 <__sflush_r>
 8009822:	4b07      	ldr	r3, [pc, #28]	; (8009840 <_fflush_r+0x4c>)
 8009824:	429c      	cmp	r4, r3
 8009826:	d101      	bne.n	800982c <_fflush_r+0x38>
 8009828:	68ac      	ldr	r4, [r5, #8]
 800982a:	e7f1      	b.n	8009810 <_fflush_r+0x1c>
 800982c:	4b05      	ldr	r3, [pc, #20]	; (8009844 <_fflush_r+0x50>)
 800982e:	429c      	cmp	r4, r3
 8009830:	bf08      	it	eq
 8009832:	68ec      	ldreq	r4, [r5, #12]
 8009834:	e7ec      	b.n	8009810 <_fflush_r+0x1c>
 8009836:	2000      	movs	r0, #0
 8009838:	bd38      	pop	{r3, r4, r5, pc}
 800983a:	bf00      	nop
 800983c:	0800a980 	.word	0x0800a980
 8009840:	0800a9a0 	.word	0x0800a9a0
 8009844:	0800a960 	.word	0x0800a960

08009848 <std>:
 8009848:	2300      	movs	r3, #0
 800984a:	b510      	push	{r4, lr}
 800984c:	4604      	mov	r4, r0
 800984e:	e9c0 3300 	strd	r3, r3, [r0]
 8009852:	6083      	str	r3, [r0, #8]
 8009854:	8181      	strh	r1, [r0, #12]
 8009856:	6643      	str	r3, [r0, #100]	; 0x64
 8009858:	81c2      	strh	r2, [r0, #14]
 800985a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800985e:	6183      	str	r3, [r0, #24]
 8009860:	4619      	mov	r1, r3
 8009862:	2208      	movs	r2, #8
 8009864:	305c      	adds	r0, #92	; 0x5c
 8009866:	f7ff fcdc 	bl	8009222 <memset>
 800986a:	4b05      	ldr	r3, [pc, #20]	; (8009880 <std+0x38>)
 800986c:	6263      	str	r3, [r4, #36]	; 0x24
 800986e:	4b05      	ldr	r3, [pc, #20]	; (8009884 <std+0x3c>)
 8009870:	62a3      	str	r3, [r4, #40]	; 0x28
 8009872:	4b05      	ldr	r3, [pc, #20]	; (8009888 <std+0x40>)
 8009874:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009876:	4b05      	ldr	r3, [pc, #20]	; (800988c <std+0x44>)
 8009878:	6224      	str	r4, [r4, #32]
 800987a:	6323      	str	r3, [r4, #48]	; 0x30
 800987c:	bd10      	pop	{r4, pc}
 800987e:	bf00      	nop
 8009880:	0800a349 	.word	0x0800a349
 8009884:	0800a36b 	.word	0x0800a36b
 8009888:	0800a3a3 	.word	0x0800a3a3
 800988c:	0800a3c7 	.word	0x0800a3c7

08009890 <_cleanup_r>:
 8009890:	4901      	ldr	r1, [pc, #4]	; (8009898 <_cleanup_r+0x8>)
 8009892:	f000 b885 	b.w	80099a0 <_fwalk_reent>
 8009896:	bf00      	nop
 8009898:	080097f5 	.word	0x080097f5

0800989c <__sfmoreglue>:
 800989c:	b570      	push	{r4, r5, r6, lr}
 800989e:	1e4a      	subs	r2, r1, #1
 80098a0:	2568      	movs	r5, #104	; 0x68
 80098a2:	4355      	muls	r5, r2
 80098a4:	460e      	mov	r6, r1
 80098a6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80098aa:	f7ff fd11 	bl	80092d0 <_malloc_r>
 80098ae:	4604      	mov	r4, r0
 80098b0:	b140      	cbz	r0, 80098c4 <__sfmoreglue+0x28>
 80098b2:	2100      	movs	r1, #0
 80098b4:	e9c0 1600 	strd	r1, r6, [r0]
 80098b8:	300c      	adds	r0, #12
 80098ba:	60a0      	str	r0, [r4, #8]
 80098bc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80098c0:	f7ff fcaf 	bl	8009222 <memset>
 80098c4:	4620      	mov	r0, r4
 80098c6:	bd70      	pop	{r4, r5, r6, pc}

080098c8 <__sinit>:
 80098c8:	6983      	ldr	r3, [r0, #24]
 80098ca:	b510      	push	{r4, lr}
 80098cc:	4604      	mov	r4, r0
 80098ce:	bb33      	cbnz	r3, 800991e <__sinit+0x56>
 80098d0:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80098d4:	6503      	str	r3, [r0, #80]	; 0x50
 80098d6:	4b12      	ldr	r3, [pc, #72]	; (8009920 <__sinit+0x58>)
 80098d8:	4a12      	ldr	r2, [pc, #72]	; (8009924 <__sinit+0x5c>)
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	6282      	str	r2, [r0, #40]	; 0x28
 80098de:	4298      	cmp	r0, r3
 80098e0:	bf04      	itt	eq
 80098e2:	2301      	moveq	r3, #1
 80098e4:	6183      	streq	r3, [r0, #24]
 80098e6:	f000 f81f 	bl	8009928 <__sfp>
 80098ea:	6060      	str	r0, [r4, #4]
 80098ec:	4620      	mov	r0, r4
 80098ee:	f000 f81b 	bl	8009928 <__sfp>
 80098f2:	60a0      	str	r0, [r4, #8]
 80098f4:	4620      	mov	r0, r4
 80098f6:	f000 f817 	bl	8009928 <__sfp>
 80098fa:	2200      	movs	r2, #0
 80098fc:	60e0      	str	r0, [r4, #12]
 80098fe:	2104      	movs	r1, #4
 8009900:	6860      	ldr	r0, [r4, #4]
 8009902:	f7ff ffa1 	bl	8009848 <std>
 8009906:	2201      	movs	r2, #1
 8009908:	2109      	movs	r1, #9
 800990a:	68a0      	ldr	r0, [r4, #8]
 800990c:	f7ff ff9c 	bl	8009848 <std>
 8009910:	2202      	movs	r2, #2
 8009912:	2112      	movs	r1, #18
 8009914:	68e0      	ldr	r0, [r4, #12]
 8009916:	f7ff ff97 	bl	8009848 <std>
 800991a:	2301      	movs	r3, #1
 800991c:	61a3      	str	r3, [r4, #24]
 800991e:	bd10      	pop	{r4, pc}
 8009920:	0800a95c 	.word	0x0800a95c
 8009924:	08009891 	.word	0x08009891

08009928 <__sfp>:
 8009928:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800992a:	4b1b      	ldr	r3, [pc, #108]	; (8009998 <__sfp+0x70>)
 800992c:	681e      	ldr	r6, [r3, #0]
 800992e:	69b3      	ldr	r3, [r6, #24]
 8009930:	4607      	mov	r7, r0
 8009932:	b913      	cbnz	r3, 800993a <__sfp+0x12>
 8009934:	4630      	mov	r0, r6
 8009936:	f7ff ffc7 	bl	80098c8 <__sinit>
 800993a:	3648      	adds	r6, #72	; 0x48
 800993c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009940:	3b01      	subs	r3, #1
 8009942:	d503      	bpl.n	800994c <__sfp+0x24>
 8009944:	6833      	ldr	r3, [r6, #0]
 8009946:	b133      	cbz	r3, 8009956 <__sfp+0x2e>
 8009948:	6836      	ldr	r6, [r6, #0]
 800994a:	e7f7      	b.n	800993c <__sfp+0x14>
 800994c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009950:	b16d      	cbz	r5, 800996e <__sfp+0x46>
 8009952:	3468      	adds	r4, #104	; 0x68
 8009954:	e7f4      	b.n	8009940 <__sfp+0x18>
 8009956:	2104      	movs	r1, #4
 8009958:	4638      	mov	r0, r7
 800995a:	f7ff ff9f 	bl	800989c <__sfmoreglue>
 800995e:	6030      	str	r0, [r6, #0]
 8009960:	2800      	cmp	r0, #0
 8009962:	d1f1      	bne.n	8009948 <__sfp+0x20>
 8009964:	230c      	movs	r3, #12
 8009966:	603b      	str	r3, [r7, #0]
 8009968:	4604      	mov	r4, r0
 800996a:	4620      	mov	r0, r4
 800996c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800996e:	4b0b      	ldr	r3, [pc, #44]	; (800999c <__sfp+0x74>)
 8009970:	6665      	str	r5, [r4, #100]	; 0x64
 8009972:	e9c4 5500 	strd	r5, r5, [r4]
 8009976:	60a5      	str	r5, [r4, #8]
 8009978:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800997c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8009980:	2208      	movs	r2, #8
 8009982:	4629      	mov	r1, r5
 8009984:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009988:	f7ff fc4b 	bl	8009222 <memset>
 800998c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009990:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009994:	e7e9      	b.n	800996a <__sfp+0x42>
 8009996:	bf00      	nop
 8009998:	0800a95c 	.word	0x0800a95c
 800999c:	ffff0001 	.word	0xffff0001

080099a0 <_fwalk_reent>:
 80099a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80099a4:	4680      	mov	r8, r0
 80099a6:	4689      	mov	r9, r1
 80099a8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80099ac:	2600      	movs	r6, #0
 80099ae:	b914      	cbnz	r4, 80099b6 <_fwalk_reent+0x16>
 80099b0:	4630      	mov	r0, r6
 80099b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80099b6:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80099ba:	3f01      	subs	r7, #1
 80099bc:	d501      	bpl.n	80099c2 <_fwalk_reent+0x22>
 80099be:	6824      	ldr	r4, [r4, #0]
 80099c0:	e7f5      	b.n	80099ae <_fwalk_reent+0xe>
 80099c2:	89ab      	ldrh	r3, [r5, #12]
 80099c4:	2b01      	cmp	r3, #1
 80099c6:	d907      	bls.n	80099d8 <_fwalk_reent+0x38>
 80099c8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80099cc:	3301      	adds	r3, #1
 80099ce:	d003      	beq.n	80099d8 <_fwalk_reent+0x38>
 80099d0:	4629      	mov	r1, r5
 80099d2:	4640      	mov	r0, r8
 80099d4:	47c8      	blx	r9
 80099d6:	4306      	orrs	r6, r0
 80099d8:	3568      	adds	r5, #104	; 0x68
 80099da:	e7ee      	b.n	80099ba <_fwalk_reent+0x1a>

080099dc <__swhatbuf_r>:
 80099dc:	b570      	push	{r4, r5, r6, lr}
 80099de:	460e      	mov	r6, r1
 80099e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80099e4:	2900      	cmp	r1, #0
 80099e6:	b096      	sub	sp, #88	; 0x58
 80099e8:	4614      	mov	r4, r2
 80099ea:	461d      	mov	r5, r3
 80099ec:	da07      	bge.n	80099fe <__swhatbuf_r+0x22>
 80099ee:	2300      	movs	r3, #0
 80099f0:	602b      	str	r3, [r5, #0]
 80099f2:	89b3      	ldrh	r3, [r6, #12]
 80099f4:	061a      	lsls	r2, r3, #24
 80099f6:	d410      	bmi.n	8009a1a <__swhatbuf_r+0x3e>
 80099f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80099fc:	e00e      	b.n	8009a1c <__swhatbuf_r+0x40>
 80099fe:	466a      	mov	r2, sp
 8009a00:	f000 fd08 	bl	800a414 <_fstat_r>
 8009a04:	2800      	cmp	r0, #0
 8009a06:	dbf2      	blt.n	80099ee <__swhatbuf_r+0x12>
 8009a08:	9a01      	ldr	r2, [sp, #4]
 8009a0a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009a0e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009a12:	425a      	negs	r2, r3
 8009a14:	415a      	adcs	r2, r3
 8009a16:	602a      	str	r2, [r5, #0]
 8009a18:	e7ee      	b.n	80099f8 <__swhatbuf_r+0x1c>
 8009a1a:	2340      	movs	r3, #64	; 0x40
 8009a1c:	2000      	movs	r0, #0
 8009a1e:	6023      	str	r3, [r4, #0]
 8009a20:	b016      	add	sp, #88	; 0x58
 8009a22:	bd70      	pop	{r4, r5, r6, pc}

08009a24 <__smakebuf_r>:
 8009a24:	898b      	ldrh	r3, [r1, #12]
 8009a26:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009a28:	079d      	lsls	r5, r3, #30
 8009a2a:	4606      	mov	r6, r0
 8009a2c:	460c      	mov	r4, r1
 8009a2e:	d507      	bpl.n	8009a40 <__smakebuf_r+0x1c>
 8009a30:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009a34:	6023      	str	r3, [r4, #0]
 8009a36:	6123      	str	r3, [r4, #16]
 8009a38:	2301      	movs	r3, #1
 8009a3a:	6163      	str	r3, [r4, #20]
 8009a3c:	b002      	add	sp, #8
 8009a3e:	bd70      	pop	{r4, r5, r6, pc}
 8009a40:	ab01      	add	r3, sp, #4
 8009a42:	466a      	mov	r2, sp
 8009a44:	f7ff ffca 	bl	80099dc <__swhatbuf_r>
 8009a48:	9900      	ldr	r1, [sp, #0]
 8009a4a:	4605      	mov	r5, r0
 8009a4c:	4630      	mov	r0, r6
 8009a4e:	f7ff fc3f 	bl	80092d0 <_malloc_r>
 8009a52:	b948      	cbnz	r0, 8009a68 <__smakebuf_r+0x44>
 8009a54:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009a58:	059a      	lsls	r2, r3, #22
 8009a5a:	d4ef      	bmi.n	8009a3c <__smakebuf_r+0x18>
 8009a5c:	f023 0303 	bic.w	r3, r3, #3
 8009a60:	f043 0302 	orr.w	r3, r3, #2
 8009a64:	81a3      	strh	r3, [r4, #12]
 8009a66:	e7e3      	b.n	8009a30 <__smakebuf_r+0xc>
 8009a68:	4b0d      	ldr	r3, [pc, #52]	; (8009aa0 <__smakebuf_r+0x7c>)
 8009a6a:	62b3      	str	r3, [r6, #40]	; 0x28
 8009a6c:	89a3      	ldrh	r3, [r4, #12]
 8009a6e:	6020      	str	r0, [r4, #0]
 8009a70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009a74:	81a3      	strh	r3, [r4, #12]
 8009a76:	9b00      	ldr	r3, [sp, #0]
 8009a78:	6163      	str	r3, [r4, #20]
 8009a7a:	9b01      	ldr	r3, [sp, #4]
 8009a7c:	6120      	str	r0, [r4, #16]
 8009a7e:	b15b      	cbz	r3, 8009a98 <__smakebuf_r+0x74>
 8009a80:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009a84:	4630      	mov	r0, r6
 8009a86:	f000 fcd7 	bl	800a438 <_isatty_r>
 8009a8a:	b128      	cbz	r0, 8009a98 <__smakebuf_r+0x74>
 8009a8c:	89a3      	ldrh	r3, [r4, #12]
 8009a8e:	f023 0303 	bic.w	r3, r3, #3
 8009a92:	f043 0301 	orr.w	r3, r3, #1
 8009a96:	81a3      	strh	r3, [r4, #12]
 8009a98:	89a3      	ldrh	r3, [r4, #12]
 8009a9a:	431d      	orrs	r5, r3
 8009a9c:	81a5      	strh	r5, [r4, #12]
 8009a9e:	e7cd      	b.n	8009a3c <__smakebuf_r+0x18>
 8009aa0:	08009891 	.word	0x08009891

08009aa4 <__malloc_lock>:
 8009aa4:	4770      	bx	lr

08009aa6 <__malloc_unlock>:
 8009aa6:	4770      	bx	lr

08009aa8 <__ssputs_r>:
 8009aa8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009aac:	688e      	ldr	r6, [r1, #8]
 8009aae:	429e      	cmp	r6, r3
 8009ab0:	4682      	mov	sl, r0
 8009ab2:	460c      	mov	r4, r1
 8009ab4:	4690      	mov	r8, r2
 8009ab6:	4699      	mov	r9, r3
 8009ab8:	d837      	bhi.n	8009b2a <__ssputs_r+0x82>
 8009aba:	898a      	ldrh	r2, [r1, #12]
 8009abc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009ac0:	d031      	beq.n	8009b26 <__ssputs_r+0x7e>
 8009ac2:	6825      	ldr	r5, [r4, #0]
 8009ac4:	6909      	ldr	r1, [r1, #16]
 8009ac6:	1a6f      	subs	r7, r5, r1
 8009ac8:	6965      	ldr	r5, [r4, #20]
 8009aca:	2302      	movs	r3, #2
 8009acc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009ad0:	fb95 f5f3 	sdiv	r5, r5, r3
 8009ad4:	f109 0301 	add.w	r3, r9, #1
 8009ad8:	443b      	add	r3, r7
 8009ada:	429d      	cmp	r5, r3
 8009adc:	bf38      	it	cc
 8009ade:	461d      	movcc	r5, r3
 8009ae0:	0553      	lsls	r3, r2, #21
 8009ae2:	d530      	bpl.n	8009b46 <__ssputs_r+0x9e>
 8009ae4:	4629      	mov	r1, r5
 8009ae6:	f7ff fbf3 	bl	80092d0 <_malloc_r>
 8009aea:	4606      	mov	r6, r0
 8009aec:	b950      	cbnz	r0, 8009b04 <__ssputs_r+0x5c>
 8009aee:	230c      	movs	r3, #12
 8009af0:	f8ca 3000 	str.w	r3, [sl]
 8009af4:	89a3      	ldrh	r3, [r4, #12]
 8009af6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009afa:	81a3      	strh	r3, [r4, #12]
 8009afc:	f04f 30ff 	mov.w	r0, #4294967295
 8009b00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b04:	463a      	mov	r2, r7
 8009b06:	6921      	ldr	r1, [r4, #16]
 8009b08:	f7ff fb80 	bl	800920c <memcpy>
 8009b0c:	89a3      	ldrh	r3, [r4, #12]
 8009b0e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009b12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009b16:	81a3      	strh	r3, [r4, #12]
 8009b18:	6126      	str	r6, [r4, #16]
 8009b1a:	6165      	str	r5, [r4, #20]
 8009b1c:	443e      	add	r6, r7
 8009b1e:	1bed      	subs	r5, r5, r7
 8009b20:	6026      	str	r6, [r4, #0]
 8009b22:	60a5      	str	r5, [r4, #8]
 8009b24:	464e      	mov	r6, r9
 8009b26:	454e      	cmp	r6, r9
 8009b28:	d900      	bls.n	8009b2c <__ssputs_r+0x84>
 8009b2a:	464e      	mov	r6, r9
 8009b2c:	4632      	mov	r2, r6
 8009b2e:	4641      	mov	r1, r8
 8009b30:	6820      	ldr	r0, [r4, #0]
 8009b32:	f000 fca3 	bl	800a47c <memmove>
 8009b36:	68a3      	ldr	r3, [r4, #8]
 8009b38:	1b9b      	subs	r3, r3, r6
 8009b3a:	60a3      	str	r3, [r4, #8]
 8009b3c:	6823      	ldr	r3, [r4, #0]
 8009b3e:	441e      	add	r6, r3
 8009b40:	6026      	str	r6, [r4, #0]
 8009b42:	2000      	movs	r0, #0
 8009b44:	e7dc      	b.n	8009b00 <__ssputs_r+0x58>
 8009b46:	462a      	mov	r2, r5
 8009b48:	f000 fcb1 	bl	800a4ae <_realloc_r>
 8009b4c:	4606      	mov	r6, r0
 8009b4e:	2800      	cmp	r0, #0
 8009b50:	d1e2      	bne.n	8009b18 <__ssputs_r+0x70>
 8009b52:	6921      	ldr	r1, [r4, #16]
 8009b54:	4650      	mov	r0, sl
 8009b56:	f7ff fb6d 	bl	8009234 <_free_r>
 8009b5a:	e7c8      	b.n	8009aee <__ssputs_r+0x46>

08009b5c <_svfiprintf_r>:
 8009b5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b60:	461d      	mov	r5, r3
 8009b62:	898b      	ldrh	r3, [r1, #12]
 8009b64:	061f      	lsls	r7, r3, #24
 8009b66:	b09d      	sub	sp, #116	; 0x74
 8009b68:	4680      	mov	r8, r0
 8009b6a:	460c      	mov	r4, r1
 8009b6c:	4616      	mov	r6, r2
 8009b6e:	d50f      	bpl.n	8009b90 <_svfiprintf_r+0x34>
 8009b70:	690b      	ldr	r3, [r1, #16]
 8009b72:	b96b      	cbnz	r3, 8009b90 <_svfiprintf_r+0x34>
 8009b74:	2140      	movs	r1, #64	; 0x40
 8009b76:	f7ff fbab 	bl	80092d0 <_malloc_r>
 8009b7a:	6020      	str	r0, [r4, #0]
 8009b7c:	6120      	str	r0, [r4, #16]
 8009b7e:	b928      	cbnz	r0, 8009b8c <_svfiprintf_r+0x30>
 8009b80:	230c      	movs	r3, #12
 8009b82:	f8c8 3000 	str.w	r3, [r8]
 8009b86:	f04f 30ff 	mov.w	r0, #4294967295
 8009b8a:	e0c8      	b.n	8009d1e <_svfiprintf_r+0x1c2>
 8009b8c:	2340      	movs	r3, #64	; 0x40
 8009b8e:	6163      	str	r3, [r4, #20]
 8009b90:	2300      	movs	r3, #0
 8009b92:	9309      	str	r3, [sp, #36]	; 0x24
 8009b94:	2320      	movs	r3, #32
 8009b96:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009b9a:	2330      	movs	r3, #48	; 0x30
 8009b9c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009ba0:	9503      	str	r5, [sp, #12]
 8009ba2:	f04f 0b01 	mov.w	fp, #1
 8009ba6:	4637      	mov	r7, r6
 8009ba8:	463d      	mov	r5, r7
 8009baa:	f815 3b01 	ldrb.w	r3, [r5], #1
 8009bae:	b10b      	cbz	r3, 8009bb4 <_svfiprintf_r+0x58>
 8009bb0:	2b25      	cmp	r3, #37	; 0x25
 8009bb2:	d13e      	bne.n	8009c32 <_svfiprintf_r+0xd6>
 8009bb4:	ebb7 0a06 	subs.w	sl, r7, r6
 8009bb8:	d00b      	beq.n	8009bd2 <_svfiprintf_r+0x76>
 8009bba:	4653      	mov	r3, sl
 8009bbc:	4632      	mov	r2, r6
 8009bbe:	4621      	mov	r1, r4
 8009bc0:	4640      	mov	r0, r8
 8009bc2:	f7ff ff71 	bl	8009aa8 <__ssputs_r>
 8009bc6:	3001      	adds	r0, #1
 8009bc8:	f000 80a4 	beq.w	8009d14 <_svfiprintf_r+0x1b8>
 8009bcc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009bce:	4453      	add	r3, sl
 8009bd0:	9309      	str	r3, [sp, #36]	; 0x24
 8009bd2:	783b      	ldrb	r3, [r7, #0]
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	f000 809d 	beq.w	8009d14 <_svfiprintf_r+0x1b8>
 8009bda:	2300      	movs	r3, #0
 8009bdc:	f04f 32ff 	mov.w	r2, #4294967295
 8009be0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009be4:	9304      	str	r3, [sp, #16]
 8009be6:	9307      	str	r3, [sp, #28]
 8009be8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009bec:	931a      	str	r3, [sp, #104]	; 0x68
 8009bee:	462f      	mov	r7, r5
 8009bf0:	2205      	movs	r2, #5
 8009bf2:	f817 1b01 	ldrb.w	r1, [r7], #1
 8009bf6:	4850      	ldr	r0, [pc, #320]	; (8009d38 <_svfiprintf_r+0x1dc>)
 8009bf8:	f7f6 faf2 	bl	80001e0 <memchr>
 8009bfc:	9b04      	ldr	r3, [sp, #16]
 8009bfe:	b9d0      	cbnz	r0, 8009c36 <_svfiprintf_r+0xda>
 8009c00:	06d9      	lsls	r1, r3, #27
 8009c02:	bf44      	itt	mi
 8009c04:	2220      	movmi	r2, #32
 8009c06:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009c0a:	071a      	lsls	r2, r3, #28
 8009c0c:	bf44      	itt	mi
 8009c0e:	222b      	movmi	r2, #43	; 0x2b
 8009c10:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009c14:	782a      	ldrb	r2, [r5, #0]
 8009c16:	2a2a      	cmp	r2, #42	; 0x2a
 8009c18:	d015      	beq.n	8009c46 <_svfiprintf_r+0xea>
 8009c1a:	9a07      	ldr	r2, [sp, #28]
 8009c1c:	462f      	mov	r7, r5
 8009c1e:	2000      	movs	r0, #0
 8009c20:	250a      	movs	r5, #10
 8009c22:	4639      	mov	r1, r7
 8009c24:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009c28:	3b30      	subs	r3, #48	; 0x30
 8009c2a:	2b09      	cmp	r3, #9
 8009c2c:	d94d      	bls.n	8009cca <_svfiprintf_r+0x16e>
 8009c2e:	b1b8      	cbz	r0, 8009c60 <_svfiprintf_r+0x104>
 8009c30:	e00f      	b.n	8009c52 <_svfiprintf_r+0xf6>
 8009c32:	462f      	mov	r7, r5
 8009c34:	e7b8      	b.n	8009ba8 <_svfiprintf_r+0x4c>
 8009c36:	4a40      	ldr	r2, [pc, #256]	; (8009d38 <_svfiprintf_r+0x1dc>)
 8009c38:	1a80      	subs	r0, r0, r2
 8009c3a:	fa0b f000 	lsl.w	r0, fp, r0
 8009c3e:	4318      	orrs	r0, r3
 8009c40:	9004      	str	r0, [sp, #16]
 8009c42:	463d      	mov	r5, r7
 8009c44:	e7d3      	b.n	8009bee <_svfiprintf_r+0x92>
 8009c46:	9a03      	ldr	r2, [sp, #12]
 8009c48:	1d11      	adds	r1, r2, #4
 8009c4a:	6812      	ldr	r2, [r2, #0]
 8009c4c:	9103      	str	r1, [sp, #12]
 8009c4e:	2a00      	cmp	r2, #0
 8009c50:	db01      	blt.n	8009c56 <_svfiprintf_r+0xfa>
 8009c52:	9207      	str	r2, [sp, #28]
 8009c54:	e004      	b.n	8009c60 <_svfiprintf_r+0x104>
 8009c56:	4252      	negs	r2, r2
 8009c58:	f043 0302 	orr.w	r3, r3, #2
 8009c5c:	9207      	str	r2, [sp, #28]
 8009c5e:	9304      	str	r3, [sp, #16]
 8009c60:	783b      	ldrb	r3, [r7, #0]
 8009c62:	2b2e      	cmp	r3, #46	; 0x2e
 8009c64:	d10c      	bne.n	8009c80 <_svfiprintf_r+0x124>
 8009c66:	787b      	ldrb	r3, [r7, #1]
 8009c68:	2b2a      	cmp	r3, #42	; 0x2a
 8009c6a:	d133      	bne.n	8009cd4 <_svfiprintf_r+0x178>
 8009c6c:	9b03      	ldr	r3, [sp, #12]
 8009c6e:	1d1a      	adds	r2, r3, #4
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	9203      	str	r2, [sp, #12]
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	bfb8      	it	lt
 8009c78:	f04f 33ff 	movlt.w	r3, #4294967295
 8009c7c:	3702      	adds	r7, #2
 8009c7e:	9305      	str	r3, [sp, #20]
 8009c80:	4d2e      	ldr	r5, [pc, #184]	; (8009d3c <_svfiprintf_r+0x1e0>)
 8009c82:	7839      	ldrb	r1, [r7, #0]
 8009c84:	2203      	movs	r2, #3
 8009c86:	4628      	mov	r0, r5
 8009c88:	f7f6 faaa 	bl	80001e0 <memchr>
 8009c8c:	b138      	cbz	r0, 8009c9e <_svfiprintf_r+0x142>
 8009c8e:	2340      	movs	r3, #64	; 0x40
 8009c90:	1b40      	subs	r0, r0, r5
 8009c92:	fa03 f000 	lsl.w	r0, r3, r0
 8009c96:	9b04      	ldr	r3, [sp, #16]
 8009c98:	4303      	orrs	r3, r0
 8009c9a:	3701      	adds	r7, #1
 8009c9c:	9304      	str	r3, [sp, #16]
 8009c9e:	7839      	ldrb	r1, [r7, #0]
 8009ca0:	4827      	ldr	r0, [pc, #156]	; (8009d40 <_svfiprintf_r+0x1e4>)
 8009ca2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009ca6:	2206      	movs	r2, #6
 8009ca8:	1c7e      	adds	r6, r7, #1
 8009caa:	f7f6 fa99 	bl	80001e0 <memchr>
 8009cae:	2800      	cmp	r0, #0
 8009cb0:	d038      	beq.n	8009d24 <_svfiprintf_r+0x1c8>
 8009cb2:	4b24      	ldr	r3, [pc, #144]	; (8009d44 <_svfiprintf_r+0x1e8>)
 8009cb4:	bb13      	cbnz	r3, 8009cfc <_svfiprintf_r+0x1a0>
 8009cb6:	9b03      	ldr	r3, [sp, #12]
 8009cb8:	3307      	adds	r3, #7
 8009cba:	f023 0307 	bic.w	r3, r3, #7
 8009cbe:	3308      	adds	r3, #8
 8009cc0:	9303      	str	r3, [sp, #12]
 8009cc2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009cc4:	444b      	add	r3, r9
 8009cc6:	9309      	str	r3, [sp, #36]	; 0x24
 8009cc8:	e76d      	b.n	8009ba6 <_svfiprintf_r+0x4a>
 8009cca:	fb05 3202 	mla	r2, r5, r2, r3
 8009cce:	2001      	movs	r0, #1
 8009cd0:	460f      	mov	r7, r1
 8009cd2:	e7a6      	b.n	8009c22 <_svfiprintf_r+0xc6>
 8009cd4:	2300      	movs	r3, #0
 8009cd6:	3701      	adds	r7, #1
 8009cd8:	9305      	str	r3, [sp, #20]
 8009cda:	4619      	mov	r1, r3
 8009cdc:	250a      	movs	r5, #10
 8009cde:	4638      	mov	r0, r7
 8009ce0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009ce4:	3a30      	subs	r2, #48	; 0x30
 8009ce6:	2a09      	cmp	r2, #9
 8009ce8:	d903      	bls.n	8009cf2 <_svfiprintf_r+0x196>
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d0c8      	beq.n	8009c80 <_svfiprintf_r+0x124>
 8009cee:	9105      	str	r1, [sp, #20]
 8009cf0:	e7c6      	b.n	8009c80 <_svfiprintf_r+0x124>
 8009cf2:	fb05 2101 	mla	r1, r5, r1, r2
 8009cf6:	2301      	movs	r3, #1
 8009cf8:	4607      	mov	r7, r0
 8009cfa:	e7f0      	b.n	8009cde <_svfiprintf_r+0x182>
 8009cfc:	ab03      	add	r3, sp, #12
 8009cfe:	9300      	str	r3, [sp, #0]
 8009d00:	4622      	mov	r2, r4
 8009d02:	4b11      	ldr	r3, [pc, #68]	; (8009d48 <_svfiprintf_r+0x1ec>)
 8009d04:	a904      	add	r1, sp, #16
 8009d06:	4640      	mov	r0, r8
 8009d08:	f3af 8000 	nop.w
 8009d0c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8009d10:	4681      	mov	r9, r0
 8009d12:	d1d6      	bne.n	8009cc2 <_svfiprintf_r+0x166>
 8009d14:	89a3      	ldrh	r3, [r4, #12]
 8009d16:	065b      	lsls	r3, r3, #25
 8009d18:	f53f af35 	bmi.w	8009b86 <_svfiprintf_r+0x2a>
 8009d1c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009d1e:	b01d      	add	sp, #116	; 0x74
 8009d20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d24:	ab03      	add	r3, sp, #12
 8009d26:	9300      	str	r3, [sp, #0]
 8009d28:	4622      	mov	r2, r4
 8009d2a:	4b07      	ldr	r3, [pc, #28]	; (8009d48 <_svfiprintf_r+0x1ec>)
 8009d2c:	a904      	add	r1, sp, #16
 8009d2e:	4640      	mov	r0, r8
 8009d30:	f000 f9c2 	bl	800a0b8 <_printf_i>
 8009d34:	e7ea      	b.n	8009d0c <_svfiprintf_r+0x1b0>
 8009d36:	bf00      	nop
 8009d38:	0800a9c0 	.word	0x0800a9c0
 8009d3c:	0800a9c6 	.word	0x0800a9c6
 8009d40:	0800a9ca 	.word	0x0800a9ca
 8009d44:	00000000 	.word	0x00000000
 8009d48:	08009aa9 	.word	0x08009aa9

08009d4c <__sfputc_r>:
 8009d4c:	6893      	ldr	r3, [r2, #8]
 8009d4e:	3b01      	subs	r3, #1
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	b410      	push	{r4}
 8009d54:	6093      	str	r3, [r2, #8]
 8009d56:	da08      	bge.n	8009d6a <__sfputc_r+0x1e>
 8009d58:	6994      	ldr	r4, [r2, #24]
 8009d5a:	42a3      	cmp	r3, r4
 8009d5c:	db01      	blt.n	8009d62 <__sfputc_r+0x16>
 8009d5e:	290a      	cmp	r1, #10
 8009d60:	d103      	bne.n	8009d6a <__sfputc_r+0x1e>
 8009d62:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009d66:	f7ff bbff 	b.w	8009568 <__swbuf_r>
 8009d6a:	6813      	ldr	r3, [r2, #0]
 8009d6c:	1c58      	adds	r0, r3, #1
 8009d6e:	6010      	str	r0, [r2, #0]
 8009d70:	7019      	strb	r1, [r3, #0]
 8009d72:	4608      	mov	r0, r1
 8009d74:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009d78:	4770      	bx	lr

08009d7a <__sfputs_r>:
 8009d7a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d7c:	4606      	mov	r6, r0
 8009d7e:	460f      	mov	r7, r1
 8009d80:	4614      	mov	r4, r2
 8009d82:	18d5      	adds	r5, r2, r3
 8009d84:	42ac      	cmp	r4, r5
 8009d86:	d101      	bne.n	8009d8c <__sfputs_r+0x12>
 8009d88:	2000      	movs	r0, #0
 8009d8a:	e007      	b.n	8009d9c <__sfputs_r+0x22>
 8009d8c:	463a      	mov	r2, r7
 8009d8e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009d92:	4630      	mov	r0, r6
 8009d94:	f7ff ffda 	bl	8009d4c <__sfputc_r>
 8009d98:	1c43      	adds	r3, r0, #1
 8009d9a:	d1f3      	bne.n	8009d84 <__sfputs_r+0xa>
 8009d9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009da0 <_vfiprintf_r>:
 8009da0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009da4:	460c      	mov	r4, r1
 8009da6:	b09d      	sub	sp, #116	; 0x74
 8009da8:	4617      	mov	r7, r2
 8009daa:	461d      	mov	r5, r3
 8009dac:	4606      	mov	r6, r0
 8009dae:	b118      	cbz	r0, 8009db8 <_vfiprintf_r+0x18>
 8009db0:	6983      	ldr	r3, [r0, #24]
 8009db2:	b90b      	cbnz	r3, 8009db8 <_vfiprintf_r+0x18>
 8009db4:	f7ff fd88 	bl	80098c8 <__sinit>
 8009db8:	4b7c      	ldr	r3, [pc, #496]	; (8009fac <_vfiprintf_r+0x20c>)
 8009dba:	429c      	cmp	r4, r3
 8009dbc:	d158      	bne.n	8009e70 <_vfiprintf_r+0xd0>
 8009dbe:	6874      	ldr	r4, [r6, #4]
 8009dc0:	89a3      	ldrh	r3, [r4, #12]
 8009dc2:	0718      	lsls	r0, r3, #28
 8009dc4:	d55e      	bpl.n	8009e84 <_vfiprintf_r+0xe4>
 8009dc6:	6923      	ldr	r3, [r4, #16]
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	d05b      	beq.n	8009e84 <_vfiprintf_r+0xe4>
 8009dcc:	2300      	movs	r3, #0
 8009dce:	9309      	str	r3, [sp, #36]	; 0x24
 8009dd0:	2320      	movs	r3, #32
 8009dd2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009dd6:	2330      	movs	r3, #48	; 0x30
 8009dd8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009ddc:	9503      	str	r5, [sp, #12]
 8009dde:	f04f 0b01 	mov.w	fp, #1
 8009de2:	46b8      	mov	r8, r7
 8009de4:	4645      	mov	r5, r8
 8009de6:	f815 3b01 	ldrb.w	r3, [r5], #1
 8009dea:	b10b      	cbz	r3, 8009df0 <_vfiprintf_r+0x50>
 8009dec:	2b25      	cmp	r3, #37	; 0x25
 8009dee:	d154      	bne.n	8009e9a <_vfiprintf_r+0xfa>
 8009df0:	ebb8 0a07 	subs.w	sl, r8, r7
 8009df4:	d00b      	beq.n	8009e0e <_vfiprintf_r+0x6e>
 8009df6:	4653      	mov	r3, sl
 8009df8:	463a      	mov	r2, r7
 8009dfa:	4621      	mov	r1, r4
 8009dfc:	4630      	mov	r0, r6
 8009dfe:	f7ff ffbc 	bl	8009d7a <__sfputs_r>
 8009e02:	3001      	adds	r0, #1
 8009e04:	f000 80c2 	beq.w	8009f8c <_vfiprintf_r+0x1ec>
 8009e08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009e0a:	4453      	add	r3, sl
 8009e0c:	9309      	str	r3, [sp, #36]	; 0x24
 8009e0e:	f898 3000 	ldrb.w	r3, [r8]
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	f000 80ba 	beq.w	8009f8c <_vfiprintf_r+0x1ec>
 8009e18:	2300      	movs	r3, #0
 8009e1a:	f04f 32ff 	mov.w	r2, #4294967295
 8009e1e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009e22:	9304      	str	r3, [sp, #16]
 8009e24:	9307      	str	r3, [sp, #28]
 8009e26:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009e2a:	931a      	str	r3, [sp, #104]	; 0x68
 8009e2c:	46a8      	mov	r8, r5
 8009e2e:	2205      	movs	r2, #5
 8009e30:	f818 1b01 	ldrb.w	r1, [r8], #1
 8009e34:	485e      	ldr	r0, [pc, #376]	; (8009fb0 <_vfiprintf_r+0x210>)
 8009e36:	f7f6 f9d3 	bl	80001e0 <memchr>
 8009e3a:	9b04      	ldr	r3, [sp, #16]
 8009e3c:	bb78      	cbnz	r0, 8009e9e <_vfiprintf_r+0xfe>
 8009e3e:	06d9      	lsls	r1, r3, #27
 8009e40:	bf44      	itt	mi
 8009e42:	2220      	movmi	r2, #32
 8009e44:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009e48:	071a      	lsls	r2, r3, #28
 8009e4a:	bf44      	itt	mi
 8009e4c:	222b      	movmi	r2, #43	; 0x2b
 8009e4e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009e52:	782a      	ldrb	r2, [r5, #0]
 8009e54:	2a2a      	cmp	r2, #42	; 0x2a
 8009e56:	d02a      	beq.n	8009eae <_vfiprintf_r+0x10e>
 8009e58:	9a07      	ldr	r2, [sp, #28]
 8009e5a:	46a8      	mov	r8, r5
 8009e5c:	2000      	movs	r0, #0
 8009e5e:	250a      	movs	r5, #10
 8009e60:	4641      	mov	r1, r8
 8009e62:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009e66:	3b30      	subs	r3, #48	; 0x30
 8009e68:	2b09      	cmp	r3, #9
 8009e6a:	d969      	bls.n	8009f40 <_vfiprintf_r+0x1a0>
 8009e6c:	b360      	cbz	r0, 8009ec8 <_vfiprintf_r+0x128>
 8009e6e:	e024      	b.n	8009eba <_vfiprintf_r+0x11a>
 8009e70:	4b50      	ldr	r3, [pc, #320]	; (8009fb4 <_vfiprintf_r+0x214>)
 8009e72:	429c      	cmp	r4, r3
 8009e74:	d101      	bne.n	8009e7a <_vfiprintf_r+0xda>
 8009e76:	68b4      	ldr	r4, [r6, #8]
 8009e78:	e7a2      	b.n	8009dc0 <_vfiprintf_r+0x20>
 8009e7a:	4b4f      	ldr	r3, [pc, #316]	; (8009fb8 <_vfiprintf_r+0x218>)
 8009e7c:	429c      	cmp	r4, r3
 8009e7e:	bf08      	it	eq
 8009e80:	68f4      	ldreq	r4, [r6, #12]
 8009e82:	e79d      	b.n	8009dc0 <_vfiprintf_r+0x20>
 8009e84:	4621      	mov	r1, r4
 8009e86:	4630      	mov	r0, r6
 8009e88:	f7ff fbc0 	bl	800960c <__swsetup_r>
 8009e8c:	2800      	cmp	r0, #0
 8009e8e:	d09d      	beq.n	8009dcc <_vfiprintf_r+0x2c>
 8009e90:	f04f 30ff 	mov.w	r0, #4294967295
 8009e94:	b01d      	add	sp, #116	; 0x74
 8009e96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e9a:	46a8      	mov	r8, r5
 8009e9c:	e7a2      	b.n	8009de4 <_vfiprintf_r+0x44>
 8009e9e:	4a44      	ldr	r2, [pc, #272]	; (8009fb0 <_vfiprintf_r+0x210>)
 8009ea0:	1a80      	subs	r0, r0, r2
 8009ea2:	fa0b f000 	lsl.w	r0, fp, r0
 8009ea6:	4318      	orrs	r0, r3
 8009ea8:	9004      	str	r0, [sp, #16]
 8009eaa:	4645      	mov	r5, r8
 8009eac:	e7be      	b.n	8009e2c <_vfiprintf_r+0x8c>
 8009eae:	9a03      	ldr	r2, [sp, #12]
 8009eb0:	1d11      	adds	r1, r2, #4
 8009eb2:	6812      	ldr	r2, [r2, #0]
 8009eb4:	9103      	str	r1, [sp, #12]
 8009eb6:	2a00      	cmp	r2, #0
 8009eb8:	db01      	blt.n	8009ebe <_vfiprintf_r+0x11e>
 8009eba:	9207      	str	r2, [sp, #28]
 8009ebc:	e004      	b.n	8009ec8 <_vfiprintf_r+0x128>
 8009ebe:	4252      	negs	r2, r2
 8009ec0:	f043 0302 	orr.w	r3, r3, #2
 8009ec4:	9207      	str	r2, [sp, #28]
 8009ec6:	9304      	str	r3, [sp, #16]
 8009ec8:	f898 3000 	ldrb.w	r3, [r8]
 8009ecc:	2b2e      	cmp	r3, #46	; 0x2e
 8009ece:	d10e      	bne.n	8009eee <_vfiprintf_r+0x14e>
 8009ed0:	f898 3001 	ldrb.w	r3, [r8, #1]
 8009ed4:	2b2a      	cmp	r3, #42	; 0x2a
 8009ed6:	d138      	bne.n	8009f4a <_vfiprintf_r+0x1aa>
 8009ed8:	9b03      	ldr	r3, [sp, #12]
 8009eda:	1d1a      	adds	r2, r3, #4
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	9203      	str	r2, [sp, #12]
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	bfb8      	it	lt
 8009ee4:	f04f 33ff 	movlt.w	r3, #4294967295
 8009ee8:	f108 0802 	add.w	r8, r8, #2
 8009eec:	9305      	str	r3, [sp, #20]
 8009eee:	4d33      	ldr	r5, [pc, #204]	; (8009fbc <_vfiprintf_r+0x21c>)
 8009ef0:	f898 1000 	ldrb.w	r1, [r8]
 8009ef4:	2203      	movs	r2, #3
 8009ef6:	4628      	mov	r0, r5
 8009ef8:	f7f6 f972 	bl	80001e0 <memchr>
 8009efc:	b140      	cbz	r0, 8009f10 <_vfiprintf_r+0x170>
 8009efe:	2340      	movs	r3, #64	; 0x40
 8009f00:	1b40      	subs	r0, r0, r5
 8009f02:	fa03 f000 	lsl.w	r0, r3, r0
 8009f06:	9b04      	ldr	r3, [sp, #16]
 8009f08:	4303      	orrs	r3, r0
 8009f0a:	f108 0801 	add.w	r8, r8, #1
 8009f0e:	9304      	str	r3, [sp, #16]
 8009f10:	f898 1000 	ldrb.w	r1, [r8]
 8009f14:	482a      	ldr	r0, [pc, #168]	; (8009fc0 <_vfiprintf_r+0x220>)
 8009f16:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009f1a:	2206      	movs	r2, #6
 8009f1c:	f108 0701 	add.w	r7, r8, #1
 8009f20:	f7f6 f95e 	bl	80001e0 <memchr>
 8009f24:	2800      	cmp	r0, #0
 8009f26:	d037      	beq.n	8009f98 <_vfiprintf_r+0x1f8>
 8009f28:	4b26      	ldr	r3, [pc, #152]	; (8009fc4 <_vfiprintf_r+0x224>)
 8009f2a:	bb1b      	cbnz	r3, 8009f74 <_vfiprintf_r+0x1d4>
 8009f2c:	9b03      	ldr	r3, [sp, #12]
 8009f2e:	3307      	adds	r3, #7
 8009f30:	f023 0307 	bic.w	r3, r3, #7
 8009f34:	3308      	adds	r3, #8
 8009f36:	9303      	str	r3, [sp, #12]
 8009f38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f3a:	444b      	add	r3, r9
 8009f3c:	9309      	str	r3, [sp, #36]	; 0x24
 8009f3e:	e750      	b.n	8009de2 <_vfiprintf_r+0x42>
 8009f40:	fb05 3202 	mla	r2, r5, r2, r3
 8009f44:	2001      	movs	r0, #1
 8009f46:	4688      	mov	r8, r1
 8009f48:	e78a      	b.n	8009e60 <_vfiprintf_r+0xc0>
 8009f4a:	2300      	movs	r3, #0
 8009f4c:	f108 0801 	add.w	r8, r8, #1
 8009f50:	9305      	str	r3, [sp, #20]
 8009f52:	4619      	mov	r1, r3
 8009f54:	250a      	movs	r5, #10
 8009f56:	4640      	mov	r0, r8
 8009f58:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009f5c:	3a30      	subs	r2, #48	; 0x30
 8009f5e:	2a09      	cmp	r2, #9
 8009f60:	d903      	bls.n	8009f6a <_vfiprintf_r+0x1ca>
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	d0c3      	beq.n	8009eee <_vfiprintf_r+0x14e>
 8009f66:	9105      	str	r1, [sp, #20]
 8009f68:	e7c1      	b.n	8009eee <_vfiprintf_r+0x14e>
 8009f6a:	fb05 2101 	mla	r1, r5, r1, r2
 8009f6e:	2301      	movs	r3, #1
 8009f70:	4680      	mov	r8, r0
 8009f72:	e7f0      	b.n	8009f56 <_vfiprintf_r+0x1b6>
 8009f74:	ab03      	add	r3, sp, #12
 8009f76:	9300      	str	r3, [sp, #0]
 8009f78:	4622      	mov	r2, r4
 8009f7a:	4b13      	ldr	r3, [pc, #76]	; (8009fc8 <_vfiprintf_r+0x228>)
 8009f7c:	a904      	add	r1, sp, #16
 8009f7e:	4630      	mov	r0, r6
 8009f80:	f3af 8000 	nop.w
 8009f84:	f1b0 3fff 	cmp.w	r0, #4294967295
 8009f88:	4681      	mov	r9, r0
 8009f8a:	d1d5      	bne.n	8009f38 <_vfiprintf_r+0x198>
 8009f8c:	89a3      	ldrh	r3, [r4, #12]
 8009f8e:	065b      	lsls	r3, r3, #25
 8009f90:	f53f af7e 	bmi.w	8009e90 <_vfiprintf_r+0xf0>
 8009f94:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009f96:	e77d      	b.n	8009e94 <_vfiprintf_r+0xf4>
 8009f98:	ab03      	add	r3, sp, #12
 8009f9a:	9300      	str	r3, [sp, #0]
 8009f9c:	4622      	mov	r2, r4
 8009f9e:	4b0a      	ldr	r3, [pc, #40]	; (8009fc8 <_vfiprintf_r+0x228>)
 8009fa0:	a904      	add	r1, sp, #16
 8009fa2:	4630      	mov	r0, r6
 8009fa4:	f000 f888 	bl	800a0b8 <_printf_i>
 8009fa8:	e7ec      	b.n	8009f84 <_vfiprintf_r+0x1e4>
 8009faa:	bf00      	nop
 8009fac:	0800a980 	.word	0x0800a980
 8009fb0:	0800a9c0 	.word	0x0800a9c0
 8009fb4:	0800a9a0 	.word	0x0800a9a0
 8009fb8:	0800a960 	.word	0x0800a960
 8009fbc:	0800a9c6 	.word	0x0800a9c6
 8009fc0:	0800a9ca 	.word	0x0800a9ca
 8009fc4:	00000000 	.word	0x00000000
 8009fc8:	08009d7b 	.word	0x08009d7b

08009fcc <_printf_common>:
 8009fcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009fd0:	4691      	mov	r9, r2
 8009fd2:	461f      	mov	r7, r3
 8009fd4:	688a      	ldr	r2, [r1, #8]
 8009fd6:	690b      	ldr	r3, [r1, #16]
 8009fd8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009fdc:	4293      	cmp	r3, r2
 8009fde:	bfb8      	it	lt
 8009fe0:	4613      	movlt	r3, r2
 8009fe2:	f8c9 3000 	str.w	r3, [r9]
 8009fe6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009fea:	4606      	mov	r6, r0
 8009fec:	460c      	mov	r4, r1
 8009fee:	b112      	cbz	r2, 8009ff6 <_printf_common+0x2a>
 8009ff0:	3301      	adds	r3, #1
 8009ff2:	f8c9 3000 	str.w	r3, [r9]
 8009ff6:	6823      	ldr	r3, [r4, #0]
 8009ff8:	0699      	lsls	r1, r3, #26
 8009ffa:	bf42      	ittt	mi
 8009ffc:	f8d9 3000 	ldrmi.w	r3, [r9]
 800a000:	3302      	addmi	r3, #2
 800a002:	f8c9 3000 	strmi.w	r3, [r9]
 800a006:	6825      	ldr	r5, [r4, #0]
 800a008:	f015 0506 	ands.w	r5, r5, #6
 800a00c:	d107      	bne.n	800a01e <_printf_common+0x52>
 800a00e:	f104 0a19 	add.w	sl, r4, #25
 800a012:	68e3      	ldr	r3, [r4, #12]
 800a014:	f8d9 2000 	ldr.w	r2, [r9]
 800a018:	1a9b      	subs	r3, r3, r2
 800a01a:	42ab      	cmp	r3, r5
 800a01c:	dc28      	bgt.n	800a070 <_printf_common+0xa4>
 800a01e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800a022:	6822      	ldr	r2, [r4, #0]
 800a024:	3300      	adds	r3, #0
 800a026:	bf18      	it	ne
 800a028:	2301      	movne	r3, #1
 800a02a:	0692      	lsls	r2, r2, #26
 800a02c:	d42d      	bmi.n	800a08a <_printf_common+0xbe>
 800a02e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a032:	4639      	mov	r1, r7
 800a034:	4630      	mov	r0, r6
 800a036:	47c0      	blx	r8
 800a038:	3001      	adds	r0, #1
 800a03a:	d020      	beq.n	800a07e <_printf_common+0xb2>
 800a03c:	6823      	ldr	r3, [r4, #0]
 800a03e:	68e5      	ldr	r5, [r4, #12]
 800a040:	f8d9 2000 	ldr.w	r2, [r9]
 800a044:	f003 0306 	and.w	r3, r3, #6
 800a048:	2b04      	cmp	r3, #4
 800a04a:	bf08      	it	eq
 800a04c:	1aad      	subeq	r5, r5, r2
 800a04e:	68a3      	ldr	r3, [r4, #8]
 800a050:	6922      	ldr	r2, [r4, #16]
 800a052:	bf0c      	ite	eq
 800a054:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a058:	2500      	movne	r5, #0
 800a05a:	4293      	cmp	r3, r2
 800a05c:	bfc4      	itt	gt
 800a05e:	1a9b      	subgt	r3, r3, r2
 800a060:	18ed      	addgt	r5, r5, r3
 800a062:	f04f 0900 	mov.w	r9, #0
 800a066:	341a      	adds	r4, #26
 800a068:	454d      	cmp	r5, r9
 800a06a:	d11a      	bne.n	800a0a2 <_printf_common+0xd6>
 800a06c:	2000      	movs	r0, #0
 800a06e:	e008      	b.n	800a082 <_printf_common+0xb6>
 800a070:	2301      	movs	r3, #1
 800a072:	4652      	mov	r2, sl
 800a074:	4639      	mov	r1, r7
 800a076:	4630      	mov	r0, r6
 800a078:	47c0      	blx	r8
 800a07a:	3001      	adds	r0, #1
 800a07c:	d103      	bne.n	800a086 <_printf_common+0xba>
 800a07e:	f04f 30ff 	mov.w	r0, #4294967295
 800a082:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a086:	3501      	adds	r5, #1
 800a088:	e7c3      	b.n	800a012 <_printf_common+0x46>
 800a08a:	18e1      	adds	r1, r4, r3
 800a08c:	1c5a      	adds	r2, r3, #1
 800a08e:	2030      	movs	r0, #48	; 0x30
 800a090:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a094:	4422      	add	r2, r4
 800a096:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a09a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a09e:	3302      	adds	r3, #2
 800a0a0:	e7c5      	b.n	800a02e <_printf_common+0x62>
 800a0a2:	2301      	movs	r3, #1
 800a0a4:	4622      	mov	r2, r4
 800a0a6:	4639      	mov	r1, r7
 800a0a8:	4630      	mov	r0, r6
 800a0aa:	47c0      	blx	r8
 800a0ac:	3001      	adds	r0, #1
 800a0ae:	d0e6      	beq.n	800a07e <_printf_common+0xb2>
 800a0b0:	f109 0901 	add.w	r9, r9, #1
 800a0b4:	e7d8      	b.n	800a068 <_printf_common+0x9c>
	...

0800a0b8 <_printf_i>:
 800a0b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a0bc:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800a0c0:	460c      	mov	r4, r1
 800a0c2:	7e09      	ldrb	r1, [r1, #24]
 800a0c4:	b085      	sub	sp, #20
 800a0c6:	296e      	cmp	r1, #110	; 0x6e
 800a0c8:	4617      	mov	r7, r2
 800a0ca:	4606      	mov	r6, r0
 800a0cc:	4698      	mov	r8, r3
 800a0ce:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a0d0:	f000 80b3 	beq.w	800a23a <_printf_i+0x182>
 800a0d4:	d822      	bhi.n	800a11c <_printf_i+0x64>
 800a0d6:	2963      	cmp	r1, #99	; 0x63
 800a0d8:	d036      	beq.n	800a148 <_printf_i+0x90>
 800a0da:	d80a      	bhi.n	800a0f2 <_printf_i+0x3a>
 800a0dc:	2900      	cmp	r1, #0
 800a0de:	f000 80b9 	beq.w	800a254 <_printf_i+0x19c>
 800a0e2:	2958      	cmp	r1, #88	; 0x58
 800a0e4:	f000 8083 	beq.w	800a1ee <_printf_i+0x136>
 800a0e8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a0ec:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800a0f0:	e032      	b.n	800a158 <_printf_i+0xa0>
 800a0f2:	2964      	cmp	r1, #100	; 0x64
 800a0f4:	d001      	beq.n	800a0fa <_printf_i+0x42>
 800a0f6:	2969      	cmp	r1, #105	; 0x69
 800a0f8:	d1f6      	bne.n	800a0e8 <_printf_i+0x30>
 800a0fa:	6820      	ldr	r0, [r4, #0]
 800a0fc:	6813      	ldr	r3, [r2, #0]
 800a0fe:	0605      	lsls	r5, r0, #24
 800a100:	f103 0104 	add.w	r1, r3, #4
 800a104:	d52a      	bpl.n	800a15c <_printf_i+0xa4>
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	6011      	str	r1, [r2, #0]
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	da03      	bge.n	800a116 <_printf_i+0x5e>
 800a10e:	222d      	movs	r2, #45	; 0x2d
 800a110:	425b      	negs	r3, r3
 800a112:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800a116:	486f      	ldr	r0, [pc, #444]	; (800a2d4 <_printf_i+0x21c>)
 800a118:	220a      	movs	r2, #10
 800a11a:	e039      	b.n	800a190 <_printf_i+0xd8>
 800a11c:	2973      	cmp	r1, #115	; 0x73
 800a11e:	f000 809d 	beq.w	800a25c <_printf_i+0x1a4>
 800a122:	d808      	bhi.n	800a136 <_printf_i+0x7e>
 800a124:	296f      	cmp	r1, #111	; 0x6f
 800a126:	d020      	beq.n	800a16a <_printf_i+0xb2>
 800a128:	2970      	cmp	r1, #112	; 0x70
 800a12a:	d1dd      	bne.n	800a0e8 <_printf_i+0x30>
 800a12c:	6823      	ldr	r3, [r4, #0]
 800a12e:	f043 0320 	orr.w	r3, r3, #32
 800a132:	6023      	str	r3, [r4, #0]
 800a134:	e003      	b.n	800a13e <_printf_i+0x86>
 800a136:	2975      	cmp	r1, #117	; 0x75
 800a138:	d017      	beq.n	800a16a <_printf_i+0xb2>
 800a13a:	2978      	cmp	r1, #120	; 0x78
 800a13c:	d1d4      	bne.n	800a0e8 <_printf_i+0x30>
 800a13e:	2378      	movs	r3, #120	; 0x78
 800a140:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a144:	4864      	ldr	r0, [pc, #400]	; (800a2d8 <_printf_i+0x220>)
 800a146:	e055      	b.n	800a1f4 <_printf_i+0x13c>
 800a148:	6813      	ldr	r3, [r2, #0]
 800a14a:	1d19      	adds	r1, r3, #4
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	6011      	str	r1, [r2, #0]
 800a150:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a154:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a158:	2301      	movs	r3, #1
 800a15a:	e08c      	b.n	800a276 <_printf_i+0x1be>
 800a15c:	681b      	ldr	r3, [r3, #0]
 800a15e:	6011      	str	r1, [r2, #0]
 800a160:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a164:	bf18      	it	ne
 800a166:	b21b      	sxthne	r3, r3
 800a168:	e7cf      	b.n	800a10a <_printf_i+0x52>
 800a16a:	6813      	ldr	r3, [r2, #0]
 800a16c:	6825      	ldr	r5, [r4, #0]
 800a16e:	1d18      	adds	r0, r3, #4
 800a170:	6010      	str	r0, [r2, #0]
 800a172:	0628      	lsls	r0, r5, #24
 800a174:	d501      	bpl.n	800a17a <_printf_i+0xc2>
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	e002      	b.n	800a180 <_printf_i+0xc8>
 800a17a:	0668      	lsls	r0, r5, #25
 800a17c:	d5fb      	bpl.n	800a176 <_printf_i+0xbe>
 800a17e:	881b      	ldrh	r3, [r3, #0]
 800a180:	4854      	ldr	r0, [pc, #336]	; (800a2d4 <_printf_i+0x21c>)
 800a182:	296f      	cmp	r1, #111	; 0x6f
 800a184:	bf14      	ite	ne
 800a186:	220a      	movne	r2, #10
 800a188:	2208      	moveq	r2, #8
 800a18a:	2100      	movs	r1, #0
 800a18c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a190:	6865      	ldr	r5, [r4, #4]
 800a192:	60a5      	str	r5, [r4, #8]
 800a194:	2d00      	cmp	r5, #0
 800a196:	f2c0 8095 	blt.w	800a2c4 <_printf_i+0x20c>
 800a19a:	6821      	ldr	r1, [r4, #0]
 800a19c:	f021 0104 	bic.w	r1, r1, #4
 800a1a0:	6021      	str	r1, [r4, #0]
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	d13d      	bne.n	800a222 <_printf_i+0x16a>
 800a1a6:	2d00      	cmp	r5, #0
 800a1a8:	f040 808e 	bne.w	800a2c8 <_printf_i+0x210>
 800a1ac:	4665      	mov	r5, ip
 800a1ae:	2a08      	cmp	r2, #8
 800a1b0:	d10b      	bne.n	800a1ca <_printf_i+0x112>
 800a1b2:	6823      	ldr	r3, [r4, #0]
 800a1b4:	07db      	lsls	r3, r3, #31
 800a1b6:	d508      	bpl.n	800a1ca <_printf_i+0x112>
 800a1b8:	6923      	ldr	r3, [r4, #16]
 800a1ba:	6862      	ldr	r2, [r4, #4]
 800a1bc:	429a      	cmp	r2, r3
 800a1be:	bfde      	ittt	le
 800a1c0:	2330      	movle	r3, #48	; 0x30
 800a1c2:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a1c6:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a1ca:	ebac 0305 	sub.w	r3, ip, r5
 800a1ce:	6123      	str	r3, [r4, #16]
 800a1d0:	f8cd 8000 	str.w	r8, [sp]
 800a1d4:	463b      	mov	r3, r7
 800a1d6:	aa03      	add	r2, sp, #12
 800a1d8:	4621      	mov	r1, r4
 800a1da:	4630      	mov	r0, r6
 800a1dc:	f7ff fef6 	bl	8009fcc <_printf_common>
 800a1e0:	3001      	adds	r0, #1
 800a1e2:	d14d      	bne.n	800a280 <_printf_i+0x1c8>
 800a1e4:	f04f 30ff 	mov.w	r0, #4294967295
 800a1e8:	b005      	add	sp, #20
 800a1ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a1ee:	4839      	ldr	r0, [pc, #228]	; (800a2d4 <_printf_i+0x21c>)
 800a1f0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800a1f4:	6813      	ldr	r3, [r2, #0]
 800a1f6:	6821      	ldr	r1, [r4, #0]
 800a1f8:	1d1d      	adds	r5, r3, #4
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	6015      	str	r5, [r2, #0]
 800a1fe:	060a      	lsls	r2, r1, #24
 800a200:	d50b      	bpl.n	800a21a <_printf_i+0x162>
 800a202:	07ca      	lsls	r2, r1, #31
 800a204:	bf44      	itt	mi
 800a206:	f041 0120 	orrmi.w	r1, r1, #32
 800a20a:	6021      	strmi	r1, [r4, #0]
 800a20c:	b91b      	cbnz	r3, 800a216 <_printf_i+0x15e>
 800a20e:	6822      	ldr	r2, [r4, #0]
 800a210:	f022 0220 	bic.w	r2, r2, #32
 800a214:	6022      	str	r2, [r4, #0]
 800a216:	2210      	movs	r2, #16
 800a218:	e7b7      	b.n	800a18a <_printf_i+0xd2>
 800a21a:	064d      	lsls	r5, r1, #25
 800a21c:	bf48      	it	mi
 800a21e:	b29b      	uxthmi	r3, r3
 800a220:	e7ef      	b.n	800a202 <_printf_i+0x14a>
 800a222:	4665      	mov	r5, ip
 800a224:	fbb3 f1f2 	udiv	r1, r3, r2
 800a228:	fb02 3311 	mls	r3, r2, r1, r3
 800a22c:	5cc3      	ldrb	r3, [r0, r3]
 800a22e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800a232:	460b      	mov	r3, r1
 800a234:	2900      	cmp	r1, #0
 800a236:	d1f5      	bne.n	800a224 <_printf_i+0x16c>
 800a238:	e7b9      	b.n	800a1ae <_printf_i+0xf6>
 800a23a:	6813      	ldr	r3, [r2, #0]
 800a23c:	6825      	ldr	r5, [r4, #0]
 800a23e:	6961      	ldr	r1, [r4, #20]
 800a240:	1d18      	adds	r0, r3, #4
 800a242:	6010      	str	r0, [r2, #0]
 800a244:	0628      	lsls	r0, r5, #24
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	d501      	bpl.n	800a24e <_printf_i+0x196>
 800a24a:	6019      	str	r1, [r3, #0]
 800a24c:	e002      	b.n	800a254 <_printf_i+0x19c>
 800a24e:	066a      	lsls	r2, r5, #25
 800a250:	d5fb      	bpl.n	800a24a <_printf_i+0x192>
 800a252:	8019      	strh	r1, [r3, #0]
 800a254:	2300      	movs	r3, #0
 800a256:	6123      	str	r3, [r4, #16]
 800a258:	4665      	mov	r5, ip
 800a25a:	e7b9      	b.n	800a1d0 <_printf_i+0x118>
 800a25c:	6813      	ldr	r3, [r2, #0]
 800a25e:	1d19      	adds	r1, r3, #4
 800a260:	6011      	str	r1, [r2, #0]
 800a262:	681d      	ldr	r5, [r3, #0]
 800a264:	6862      	ldr	r2, [r4, #4]
 800a266:	2100      	movs	r1, #0
 800a268:	4628      	mov	r0, r5
 800a26a:	f7f5 ffb9 	bl	80001e0 <memchr>
 800a26e:	b108      	cbz	r0, 800a274 <_printf_i+0x1bc>
 800a270:	1b40      	subs	r0, r0, r5
 800a272:	6060      	str	r0, [r4, #4]
 800a274:	6863      	ldr	r3, [r4, #4]
 800a276:	6123      	str	r3, [r4, #16]
 800a278:	2300      	movs	r3, #0
 800a27a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a27e:	e7a7      	b.n	800a1d0 <_printf_i+0x118>
 800a280:	6923      	ldr	r3, [r4, #16]
 800a282:	462a      	mov	r2, r5
 800a284:	4639      	mov	r1, r7
 800a286:	4630      	mov	r0, r6
 800a288:	47c0      	blx	r8
 800a28a:	3001      	adds	r0, #1
 800a28c:	d0aa      	beq.n	800a1e4 <_printf_i+0x12c>
 800a28e:	6823      	ldr	r3, [r4, #0]
 800a290:	079b      	lsls	r3, r3, #30
 800a292:	d413      	bmi.n	800a2bc <_printf_i+0x204>
 800a294:	68e0      	ldr	r0, [r4, #12]
 800a296:	9b03      	ldr	r3, [sp, #12]
 800a298:	4298      	cmp	r0, r3
 800a29a:	bfb8      	it	lt
 800a29c:	4618      	movlt	r0, r3
 800a29e:	e7a3      	b.n	800a1e8 <_printf_i+0x130>
 800a2a0:	2301      	movs	r3, #1
 800a2a2:	464a      	mov	r2, r9
 800a2a4:	4639      	mov	r1, r7
 800a2a6:	4630      	mov	r0, r6
 800a2a8:	47c0      	blx	r8
 800a2aa:	3001      	adds	r0, #1
 800a2ac:	d09a      	beq.n	800a1e4 <_printf_i+0x12c>
 800a2ae:	3501      	adds	r5, #1
 800a2b0:	68e3      	ldr	r3, [r4, #12]
 800a2b2:	9a03      	ldr	r2, [sp, #12]
 800a2b4:	1a9b      	subs	r3, r3, r2
 800a2b6:	42ab      	cmp	r3, r5
 800a2b8:	dcf2      	bgt.n	800a2a0 <_printf_i+0x1e8>
 800a2ba:	e7eb      	b.n	800a294 <_printf_i+0x1dc>
 800a2bc:	2500      	movs	r5, #0
 800a2be:	f104 0919 	add.w	r9, r4, #25
 800a2c2:	e7f5      	b.n	800a2b0 <_printf_i+0x1f8>
 800a2c4:	2b00      	cmp	r3, #0
 800a2c6:	d1ac      	bne.n	800a222 <_printf_i+0x16a>
 800a2c8:	7803      	ldrb	r3, [r0, #0]
 800a2ca:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a2ce:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a2d2:	e76c      	b.n	800a1ae <_printf_i+0xf6>
 800a2d4:	0800a9d1 	.word	0x0800a9d1
 800a2d8:	0800a9e2 	.word	0x0800a9e2

0800a2dc <_putc_r>:
 800a2dc:	b570      	push	{r4, r5, r6, lr}
 800a2de:	460d      	mov	r5, r1
 800a2e0:	4614      	mov	r4, r2
 800a2e2:	4606      	mov	r6, r0
 800a2e4:	b118      	cbz	r0, 800a2ee <_putc_r+0x12>
 800a2e6:	6983      	ldr	r3, [r0, #24]
 800a2e8:	b90b      	cbnz	r3, 800a2ee <_putc_r+0x12>
 800a2ea:	f7ff faed 	bl	80098c8 <__sinit>
 800a2ee:	4b13      	ldr	r3, [pc, #76]	; (800a33c <_putc_r+0x60>)
 800a2f0:	429c      	cmp	r4, r3
 800a2f2:	d112      	bne.n	800a31a <_putc_r+0x3e>
 800a2f4:	6874      	ldr	r4, [r6, #4]
 800a2f6:	68a3      	ldr	r3, [r4, #8]
 800a2f8:	3b01      	subs	r3, #1
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	60a3      	str	r3, [r4, #8]
 800a2fe:	da16      	bge.n	800a32e <_putc_r+0x52>
 800a300:	69a2      	ldr	r2, [r4, #24]
 800a302:	4293      	cmp	r3, r2
 800a304:	db02      	blt.n	800a30c <_putc_r+0x30>
 800a306:	b2eb      	uxtb	r3, r5
 800a308:	2b0a      	cmp	r3, #10
 800a30a:	d110      	bne.n	800a32e <_putc_r+0x52>
 800a30c:	4622      	mov	r2, r4
 800a30e:	4629      	mov	r1, r5
 800a310:	4630      	mov	r0, r6
 800a312:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a316:	f7ff b927 	b.w	8009568 <__swbuf_r>
 800a31a:	4b09      	ldr	r3, [pc, #36]	; (800a340 <_putc_r+0x64>)
 800a31c:	429c      	cmp	r4, r3
 800a31e:	d101      	bne.n	800a324 <_putc_r+0x48>
 800a320:	68b4      	ldr	r4, [r6, #8]
 800a322:	e7e8      	b.n	800a2f6 <_putc_r+0x1a>
 800a324:	4b07      	ldr	r3, [pc, #28]	; (800a344 <_putc_r+0x68>)
 800a326:	429c      	cmp	r4, r3
 800a328:	bf08      	it	eq
 800a32a:	68f4      	ldreq	r4, [r6, #12]
 800a32c:	e7e3      	b.n	800a2f6 <_putc_r+0x1a>
 800a32e:	6823      	ldr	r3, [r4, #0]
 800a330:	1c5a      	adds	r2, r3, #1
 800a332:	6022      	str	r2, [r4, #0]
 800a334:	701d      	strb	r5, [r3, #0]
 800a336:	b2e8      	uxtb	r0, r5
 800a338:	bd70      	pop	{r4, r5, r6, pc}
 800a33a:	bf00      	nop
 800a33c:	0800a980 	.word	0x0800a980
 800a340:	0800a9a0 	.word	0x0800a9a0
 800a344:	0800a960 	.word	0x0800a960

0800a348 <__sread>:
 800a348:	b510      	push	{r4, lr}
 800a34a:	460c      	mov	r4, r1
 800a34c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a350:	f000 f8d4 	bl	800a4fc <_read_r>
 800a354:	2800      	cmp	r0, #0
 800a356:	bfab      	itete	ge
 800a358:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a35a:	89a3      	ldrhlt	r3, [r4, #12]
 800a35c:	181b      	addge	r3, r3, r0
 800a35e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a362:	bfac      	ite	ge
 800a364:	6563      	strge	r3, [r4, #84]	; 0x54
 800a366:	81a3      	strhlt	r3, [r4, #12]
 800a368:	bd10      	pop	{r4, pc}

0800a36a <__swrite>:
 800a36a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a36e:	461f      	mov	r7, r3
 800a370:	898b      	ldrh	r3, [r1, #12]
 800a372:	05db      	lsls	r3, r3, #23
 800a374:	4605      	mov	r5, r0
 800a376:	460c      	mov	r4, r1
 800a378:	4616      	mov	r6, r2
 800a37a:	d505      	bpl.n	800a388 <__swrite+0x1e>
 800a37c:	2302      	movs	r3, #2
 800a37e:	2200      	movs	r2, #0
 800a380:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a384:	f000 f868 	bl	800a458 <_lseek_r>
 800a388:	89a3      	ldrh	r3, [r4, #12]
 800a38a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a38e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a392:	81a3      	strh	r3, [r4, #12]
 800a394:	4632      	mov	r2, r6
 800a396:	463b      	mov	r3, r7
 800a398:	4628      	mov	r0, r5
 800a39a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a39e:	f000 b817 	b.w	800a3d0 <_write_r>

0800a3a2 <__sseek>:
 800a3a2:	b510      	push	{r4, lr}
 800a3a4:	460c      	mov	r4, r1
 800a3a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a3aa:	f000 f855 	bl	800a458 <_lseek_r>
 800a3ae:	1c43      	adds	r3, r0, #1
 800a3b0:	89a3      	ldrh	r3, [r4, #12]
 800a3b2:	bf15      	itete	ne
 800a3b4:	6560      	strne	r0, [r4, #84]	; 0x54
 800a3b6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a3ba:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a3be:	81a3      	strheq	r3, [r4, #12]
 800a3c0:	bf18      	it	ne
 800a3c2:	81a3      	strhne	r3, [r4, #12]
 800a3c4:	bd10      	pop	{r4, pc}

0800a3c6 <__sclose>:
 800a3c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a3ca:	f000 b813 	b.w	800a3f4 <_close_r>
	...

0800a3d0 <_write_r>:
 800a3d0:	b538      	push	{r3, r4, r5, lr}
 800a3d2:	4c07      	ldr	r4, [pc, #28]	; (800a3f0 <_write_r+0x20>)
 800a3d4:	4605      	mov	r5, r0
 800a3d6:	4608      	mov	r0, r1
 800a3d8:	4611      	mov	r1, r2
 800a3da:	2200      	movs	r2, #0
 800a3dc:	6022      	str	r2, [r4, #0]
 800a3de:	461a      	mov	r2, r3
 800a3e0:	f7fe f864 	bl	80084ac <_write>
 800a3e4:	1c43      	adds	r3, r0, #1
 800a3e6:	d102      	bne.n	800a3ee <_write_r+0x1e>
 800a3e8:	6823      	ldr	r3, [r4, #0]
 800a3ea:	b103      	cbz	r3, 800a3ee <_write_r+0x1e>
 800a3ec:	602b      	str	r3, [r5, #0]
 800a3ee:	bd38      	pop	{r3, r4, r5, pc}
 800a3f0:	2000d7cc 	.word	0x2000d7cc

0800a3f4 <_close_r>:
 800a3f4:	b538      	push	{r3, r4, r5, lr}
 800a3f6:	4c06      	ldr	r4, [pc, #24]	; (800a410 <_close_r+0x1c>)
 800a3f8:	2300      	movs	r3, #0
 800a3fa:	4605      	mov	r5, r0
 800a3fc:	4608      	mov	r0, r1
 800a3fe:	6023      	str	r3, [r4, #0]
 800a400:	f7fe f870 	bl	80084e4 <_close>
 800a404:	1c43      	adds	r3, r0, #1
 800a406:	d102      	bne.n	800a40e <_close_r+0x1a>
 800a408:	6823      	ldr	r3, [r4, #0]
 800a40a:	b103      	cbz	r3, 800a40e <_close_r+0x1a>
 800a40c:	602b      	str	r3, [r5, #0]
 800a40e:	bd38      	pop	{r3, r4, r5, pc}
 800a410:	2000d7cc 	.word	0x2000d7cc

0800a414 <_fstat_r>:
 800a414:	b538      	push	{r3, r4, r5, lr}
 800a416:	4c07      	ldr	r4, [pc, #28]	; (800a434 <_fstat_r+0x20>)
 800a418:	2300      	movs	r3, #0
 800a41a:	4605      	mov	r5, r0
 800a41c:	4608      	mov	r0, r1
 800a41e:	4611      	mov	r1, r2
 800a420:	6023      	str	r3, [r4, #0]
 800a422:	f7fe f86b 	bl	80084fc <_fstat>
 800a426:	1c43      	adds	r3, r0, #1
 800a428:	d102      	bne.n	800a430 <_fstat_r+0x1c>
 800a42a:	6823      	ldr	r3, [r4, #0]
 800a42c:	b103      	cbz	r3, 800a430 <_fstat_r+0x1c>
 800a42e:	602b      	str	r3, [r5, #0]
 800a430:	bd38      	pop	{r3, r4, r5, pc}
 800a432:	bf00      	nop
 800a434:	2000d7cc 	.word	0x2000d7cc

0800a438 <_isatty_r>:
 800a438:	b538      	push	{r3, r4, r5, lr}
 800a43a:	4c06      	ldr	r4, [pc, #24]	; (800a454 <_isatty_r+0x1c>)
 800a43c:	2300      	movs	r3, #0
 800a43e:	4605      	mov	r5, r0
 800a440:	4608      	mov	r0, r1
 800a442:	6023      	str	r3, [r4, #0]
 800a444:	f7fe f86a 	bl	800851c <_isatty>
 800a448:	1c43      	adds	r3, r0, #1
 800a44a:	d102      	bne.n	800a452 <_isatty_r+0x1a>
 800a44c:	6823      	ldr	r3, [r4, #0]
 800a44e:	b103      	cbz	r3, 800a452 <_isatty_r+0x1a>
 800a450:	602b      	str	r3, [r5, #0]
 800a452:	bd38      	pop	{r3, r4, r5, pc}
 800a454:	2000d7cc 	.word	0x2000d7cc

0800a458 <_lseek_r>:
 800a458:	b538      	push	{r3, r4, r5, lr}
 800a45a:	4c07      	ldr	r4, [pc, #28]	; (800a478 <_lseek_r+0x20>)
 800a45c:	4605      	mov	r5, r0
 800a45e:	4608      	mov	r0, r1
 800a460:	4611      	mov	r1, r2
 800a462:	2200      	movs	r2, #0
 800a464:	6022      	str	r2, [r4, #0]
 800a466:	461a      	mov	r2, r3
 800a468:	f7fe f863 	bl	8008532 <_lseek>
 800a46c:	1c43      	adds	r3, r0, #1
 800a46e:	d102      	bne.n	800a476 <_lseek_r+0x1e>
 800a470:	6823      	ldr	r3, [r4, #0]
 800a472:	b103      	cbz	r3, 800a476 <_lseek_r+0x1e>
 800a474:	602b      	str	r3, [r5, #0]
 800a476:	bd38      	pop	{r3, r4, r5, pc}
 800a478:	2000d7cc 	.word	0x2000d7cc

0800a47c <memmove>:
 800a47c:	4288      	cmp	r0, r1
 800a47e:	b510      	push	{r4, lr}
 800a480:	eb01 0302 	add.w	r3, r1, r2
 800a484:	d807      	bhi.n	800a496 <memmove+0x1a>
 800a486:	1e42      	subs	r2, r0, #1
 800a488:	4299      	cmp	r1, r3
 800a48a:	d00a      	beq.n	800a4a2 <memmove+0x26>
 800a48c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a490:	f802 4f01 	strb.w	r4, [r2, #1]!
 800a494:	e7f8      	b.n	800a488 <memmove+0xc>
 800a496:	4283      	cmp	r3, r0
 800a498:	d9f5      	bls.n	800a486 <memmove+0xa>
 800a49a:	1881      	adds	r1, r0, r2
 800a49c:	1ad2      	subs	r2, r2, r3
 800a49e:	42d3      	cmn	r3, r2
 800a4a0:	d100      	bne.n	800a4a4 <memmove+0x28>
 800a4a2:	bd10      	pop	{r4, pc}
 800a4a4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a4a8:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800a4ac:	e7f7      	b.n	800a49e <memmove+0x22>

0800a4ae <_realloc_r>:
 800a4ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a4b0:	4607      	mov	r7, r0
 800a4b2:	4614      	mov	r4, r2
 800a4b4:	460e      	mov	r6, r1
 800a4b6:	b921      	cbnz	r1, 800a4c2 <_realloc_r+0x14>
 800a4b8:	4611      	mov	r1, r2
 800a4ba:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800a4be:	f7fe bf07 	b.w	80092d0 <_malloc_r>
 800a4c2:	b922      	cbnz	r2, 800a4ce <_realloc_r+0x20>
 800a4c4:	f7fe feb6 	bl	8009234 <_free_r>
 800a4c8:	4625      	mov	r5, r4
 800a4ca:	4628      	mov	r0, r5
 800a4cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a4ce:	f000 f827 	bl	800a520 <_malloc_usable_size_r>
 800a4d2:	42a0      	cmp	r0, r4
 800a4d4:	d20f      	bcs.n	800a4f6 <_realloc_r+0x48>
 800a4d6:	4621      	mov	r1, r4
 800a4d8:	4638      	mov	r0, r7
 800a4da:	f7fe fef9 	bl	80092d0 <_malloc_r>
 800a4de:	4605      	mov	r5, r0
 800a4e0:	2800      	cmp	r0, #0
 800a4e2:	d0f2      	beq.n	800a4ca <_realloc_r+0x1c>
 800a4e4:	4631      	mov	r1, r6
 800a4e6:	4622      	mov	r2, r4
 800a4e8:	f7fe fe90 	bl	800920c <memcpy>
 800a4ec:	4631      	mov	r1, r6
 800a4ee:	4638      	mov	r0, r7
 800a4f0:	f7fe fea0 	bl	8009234 <_free_r>
 800a4f4:	e7e9      	b.n	800a4ca <_realloc_r+0x1c>
 800a4f6:	4635      	mov	r5, r6
 800a4f8:	e7e7      	b.n	800a4ca <_realloc_r+0x1c>
	...

0800a4fc <_read_r>:
 800a4fc:	b538      	push	{r3, r4, r5, lr}
 800a4fe:	4c07      	ldr	r4, [pc, #28]	; (800a51c <_read_r+0x20>)
 800a500:	4605      	mov	r5, r0
 800a502:	4608      	mov	r0, r1
 800a504:	4611      	mov	r1, r2
 800a506:	2200      	movs	r2, #0
 800a508:	6022      	str	r2, [r4, #0]
 800a50a:	461a      	mov	r2, r3
 800a50c:	f7fd ffb1 	bl	8008472 <_read>
 800a510:	1c43      	adds	r3, r0, #1
 800a512:	d102      	bne.n	800a51a <_read_r+0x1e>
 800a514:	6823      	ldr	r3, [r4, #0]
 800a516:	b103      	cbz	r3, 800a51a <_read_r+0x1e>
 800a518:	602b      	str	r3, [r5, #0]
 800a51a:	bd38      	pop	{r3, r4, r5, pc}
 800a51c:	2000d7cc 	.word	0x2000d7cc

0800a520 <_malloc_usable_size_r>:
 800a520:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a524:	1f18      	subs	r0, r3, #4
 800a526:	2b00      	cmp	r3, #0
 800a528:	bfbc      	itt	lt
 800a52a:	580b      	ldrlt	r3, [r1, r0]
 800a52c:	18c0      	addlt	r0, r0, r3
 800a52e:	4770      	bx	lr

0800a530 <_init>:
 800a530:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a532:	bf00      	nop
 800a534:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a536:	bc08      	pop	{r3}
 800a538:	469e      	mov	lr, r3
 800a53a:	4770      	bx	lr

0800a53c <_fini>:
 800a53c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a53e:	bf00      	nop
 800a540:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a542:	bc08      	pop	{r3}
 800a544:	469e      	mov	lr, r3
 800a546:	4770      	bx	lr
