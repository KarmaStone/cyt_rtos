
test1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009a94  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000478  08009c24  08009c24  00019c24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a09c  0800a09c  000200a8  2**0
                  CONTENTS
  4 .ARM          00000008  0800a09c  0800a09c  0001a09c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a0a4  0800a0a4  000200a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a0a4  0800a0a4  0001a0a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a0a8  0800a0a8  0001a0a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fn1          00000004  0800a0ac  0800a0ac  0001a0ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .fn2          00000004  0800a0b0  0800a0b0  0001a0b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .fn3          00000000  0800a0b4  0800a0b4  000200a8  2**0
                  CONTENTS
 11 .fn4          00000000  0800a0b4  0800a0b4  000200a8  2**0
                  CONTENTS
 12 .fn5          00000000  0800a0b4  0800a0b4  000200a8  2**0
                  CONTENTS
 13 .fn6          00000000  0800a0b4  0800a0b4  000200a8  2**0
                  CONTENTS
 14 .fn7          00000000  0800a0b4  0800a0b4  000200a8  2**0
                  CONTENTS
 15 .data         000000a8  20000000  0800a0b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 16 .bss          00001acc  200000a8  0800a15c  000200a8  2**2
                  ALLOC
 17 ._user_heap_stack 00000600  10000000  10000000  00030000  2**0
                  ALLOC
 18 .ARM.attributes 00000030  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY
 19 .debug_info   00020bc8  00000000  00000000  000200d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_abbrev 000041bd  00000000  00000000  00040ca0  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_aranges 000018c8  00000000  00000000  00044e60  2**3
                  CONTENTS, READONLY, DEBUGGING
 22 .debug_ranges 000016e0  00000000  00000000  00046728  2**3
                  CONTENTS, READONLY, DEBUGGING
 23 .debug_macro  00006876  00000000  00000000  00047e08  2**0
                  CONTENTS, READONLY, DEBUGGING
 24 .debug_line   00018977  00000000  00000000  0004e67e  2**0
                  CONTENTS, READONLY, DEBUGGING
 25 .debug_str    000ed09b  00000000  00000000  00066ff5  2**0
                  CONTENTS, READONLY, DEBUGGING
 26 .comment      0000007b  00000000  00000000  00154090  2**0
                  CONTENTS, READONLY
 27 .debug_frame  00006e04  00000000  00000000  0015410c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000a8 	.word	0x200000a8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009c0c 	.word	0x08009c0c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000ac 	.word	0x200000ac
 80001cc:	08009c0c 	.word	0x08009c0c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b972 	b.w	800056c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	4688      	mov	r8, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14b      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4615      	mov	r5, r2
 80002b2:	d967      	bls.n	8000384 <__udivmoddi4+0xe4>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0720 	rsb	r7, r2, #32
 80002be:	fa01 f302 	lsl.w	r3, r1, r2
 80002c2:	fa20 f707 	lsr.w	r7, r0, r7
 80002c6:	4095      	lsls	r5, r2
 80002c8:	ea47 0803 	orr.w	r8, r7, r3
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002d8:	fa1f fc85 	uxth.w	ip, r5
 80002dc:	fb0e 8817 	mls	r8, lr, r7, r8
 80002e0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002e4:	fb07 f10c 	mul.w	r1, r7, ip
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18eb      	adds	r3, r5, r3
 80002ee:	f107 30ff 	add.w	r0, r7, #4294967295
 80002f2:	f080 811b 	bcs.w	800052c <__udivmoddi4+0x28c>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8118 	bls.w	800052c <__udivmoddi4+0x28c>
 80002fc:	3f02      	subs	r7, #2
 80002fe:	442b      	add	r3, r5
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0fe 	udiv	r0, r3, lr
 8000308:	fb0e 3310 	mls	r3, lr, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fc0c 	mul.w	ip, r0, ip
 8000314:	45a4      	cmp	ip, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	192c      	adds	r4, r5, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	f080 8107 	bcs.w	8000530 <__udivmoddi4+0x290>
 8000322:	45a4      	cmp	ip, r4
 8000324:	f240 8104 	bls.w	8000530 <__udivmoddi4+0x290>
 8000328:	3802      	subs	r0, #2
 800032a:	442c      	add	r4, r5
 800032c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000330:	eba4 040c 	sub.w	r4, r4, ip
 8000334:	2700      	movs	r7, #0
 8000336:	b11e      	cbz	r6, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c6 4300 	strd	r4, r3, [r6]
 8000340:	4639      	mov	r1, r7
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d909      	bls.n	800035e <__udivmoddi4+0xbe>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80eb 	beq.w	8000526 <__udivmoddi4+0x286>
 8000350:	2700      	movs	r7, #0
 8000352:	e9c6 0100 	strd	r0, r1, [r6]
 8000356:	4638      	mov	r0, r7
 8000358:	4639      	mov	r1, r7
 800035a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035e:	fab3 f783 	clz	r7, r3
 8000362:	2f00      	cmp	r7, #0
 8000364:	d147      	bne.n	80003f6 <__udivmoddi4+0x156>
 8000366:	428b      	cmp	r3, r1
 8000368:	d302      	bcc.n	8000370 <__udivmoddi4+0xd0>
 800036a:	4282      	cmp	r2, r0
 800036c:	f200 80fa 	bhi.w	8000564 <__udivmoddi4+0x2c4>
 8000370:	1a84      	subs	r4, r0, r2
 8000372:	eb61 0303 	sbc.w	r3, r1, r3
 8000376:	2001      	movs	r0, #1
 8000378:	4698      	mov	r8, r3
 800037a:	2e00      	cmp	r6, #0
 800037c:	d0e0      	beq.n	8000340 <__udivmoddi4+0xa0>
 800037e:	e9c6 4800 	strd	r4, r8, [r6]
 8000382:	e7dd      	b.n	8000340 <__udivmoddi4+0xa0>
 8000384:	b902      	cbnz	r2, 8000388 <__udivmoddi4+0xe8>
 8000386:	deff      	udf	#255	; 0xff
 8000388:	fab2 f282 	clz	r2, r2
 800038c:	2a00      	cmp	r2, #0
 800038e:	f040 808f 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000392:	1b49      	subs	r1, r1, r5
 8000394:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000398:	fa1f f885 	uxth.w	r8, r5
 800039c:	2701      	movs	r7, #1
 800039e:	fbb1 fcfe 	udiv	ip, r1, lr
 80003a2:	0c23      	lsrs	r3, r4, #16
 80003a4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003a8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ac:	fb08 f10c 	mul.w	r1, r8, ip
 80003b0:	4299      	cmp	r1, r3
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b4:	18eb      	adds	r3, r5, r3
 80003b6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4299      	cmp	r1, r3
 80003be:	f200 80cd 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003c2:	4684      	mov	ip, r0
 80003c4:	1a59      	subs	r1, r3, r1
 80003c6:	b2a3      	uxth	r3, r4
 80003c8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003cc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003d0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003d4:	fb08 f800 	mul.w	r8, r8, r0
 80003d8:	45a0      	cmp	r8, r4
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0x14c>
 80003dc:	192c      	adds	r4, r5, r4
 80003de:	f100 33ff 	add.w	r3, r0, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x14a>
 80003e4:	45a0      	cmp	r8, r4
 80003e6:	f200 80b6 	bhi.w	8000556 <__udivmoddi4+0x2b6>
 80003ea:	4618      	mov	r0, r3
 80003ec:	eba4 0408 	sub.w	r4, r4, r8
 80003f0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003f4:	e79f      	b.n	8000336 <__udivmoddi4+0x96>
 80003f6:	f1c7 0c20 	rsb	ip, r7, #32
 80003fa:	40bb      	lsls	r3, r7
 80003fc:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000400:	ea4e 0e03 	orr.w	lr, lr, r3
 8000404:	fa01 f407 	lsl.w	r4, r1, r7
 8000408:	fa20 f50c 	lsr.w	r5, r0, ip
 800040c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000410:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000414:	4325      	orrs	r5, r4
 8000416:	fbb3 f9f8 	udiv	r9, r3, r8
 800041a:	0c2c      	lsrs	r4, r5, #16
 800041c:	fb08 3319 	mls	r3, r8, r9, r3
 8000420:	fa1f fa8e 	uxth.w	sl, lr
 8000424:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000428:	fb09 f40a 	mul.w	r4, r9, sl
 800042c:	429c      	cmp	r4, r3
 800042e:	fa02 f207 	lsl.w	r2, r2, r7
 8000432:	fa00 f107 	lsl.w	r1, r0, r7
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1e 0303 	adds.w	r3, lr, r3
 800043c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000440:	f080 8087 	bcs.w	8000552 <__udivmoddi4+0x2b2>
 8000444:	429c      	cmp	r4, r3
 8000446:	f240 8084 	bls.w	8000552 <__udivmoddi4+0x2b2>
 800044a:	f1a9 0902 	sub.w	r9, r9, #2
 800044e:	4473      	add	r3, lr
 8000450:	1b1b      	subs	r3, r3, r4
 8000452:	b2ad      	uxth	r5, r5
 8000454:	fbb3 f0f8 	udiv	r0, r3, r8
 8000458:	fb08 3310 	mls	r3, r8, r0, r3
 800045c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000460:	fb00 fa0a 	mul.w	sl, r0, sl
 8000464:	45a2      	cmp	sl, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1e 0404 	adds.w	r4, lr, r4
 800046c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000470:	d26b      	bcs.n	800054a <__udivmoddi4+0x2aa>
 8000472:	45a2      	cmp	sl, r4
 8000474:	d969      	bls.n	800054a <__udivmoddi4+0x2aa>
 8000476:	3802      	subs	r0, #2
 8000478:	4474      	add	r4, lr
 800047a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800047e:	fba0 8902 	umull	r8, r9, r0, r2
 8000482:	eba4 040a 	sub.w	r4, r4, sl
 8000486:	454c      	cmp	r4, r9
 8000488:	46c2      	mov	sl, r8
 800048a:	464b      	mov	r3, r9
 800048c:	d354      	bcc.n	8000538 <__udivmoddi4+0x298>
 800048e:	d051      	beq.n	8000534 <__udivmoddi4+0x294>
 8000490:	2e00      	cmp	r6, #0
 8000492:	d069      	beq.n	8000568 <__udivmoddi4+0x2c8>
 8000494:	ebb1 050a 	subs.w	r5, r1, sl
 8000498:	eb64 0403 	sbc.w	r4, r4, r3
 800049c:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004a0:	40fd      	lsrs	r5, r7
 80004a2:	40fc      	lsrs	r4, r7
 80004a4:	ea4c 0505 	orr.w	r5, ip, r5
 80004a8:	e9c6 5400 	strd	r5, r4, [r6]
 80004ac:	2700      	movs	r7, #0
 80004ae:	e747      	b.n	8000340 <__udivmoddi4+0xa0>
 80004b0:	f1c2 0320 	rsb	r3, r2, #32
 80004b4:	fa20 f703 	lsr.w	r7, r0, r3
 80004b8:	4095      	lsls	r5, r2
 80004ba:	fa01 f002 	lsl.w	r0, r1, r2
 80004be:	fa21 f303 	lsr.w	r3, r1, r3
 80004c2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004c6:	4338      	orrs	r0, r7
 80004c8:	0c01      	lsrs	r1, r0, #16
 80004ca:	fbb3 f7fe 	udiv	r7, r3, lr
 80004ce:	fa1f f885 	uxth.w	r8, r5
 80004d2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004d6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004da:	fb07 f308 	mul.w	r3, r7, r8
 80004de:	428b      	cmp	r3, r1
 80004e0:	fa04 f402 	lsl.w	r4, r4, r2
 80004e4:	d907      	bls.n	80004f6 <__udivmoddi4+0x256>
 80004e6:	1869      	adds	r1, r5, r1
 80004e8:	f107 3cff 	add.w	ip, r7, #4294967295
 80004ec:	d22f      	bcs.n	800054e <__udivmoddi4+0x2ae>
 80004ee:	428b      	cmp	r3, r1
 80004f0:	d92d      	bls.n	800054e <__udivmoddi4+0x2ae>
 80004f2:	3f02      	subs	r7, #2
 80004f4:	4429      	add	r1, r5
 80004f6:	1acb      	subs	r3, r1, r3
 80004f8:	b281      	uxth	r1, r0
 80004fa:	fbb3 f0fe 	udiv	r0, r3, lr
 80004fe:	fb0e 3310 	mls	r3, lr, r0, r3
 8000502:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000506:	fb00 f308 	mul.w	r3, r0, r8
 800050a:	428b      	cmp	r3, r1
 800050c:	d907      	bls.n	800051e <__udivmoddi4+0x27e>
 800050e:	1869      	adds	r1, r5, r1
 8000510:	f100 3cff 	add.w	ip, r0, #4294967295
 8000514:	d217      	bcs.n	8000546 <__udivmoddi4+0x2a6>
 8000516:	428b      	cmp	r3, r1
 8000518:	d915      	bls.n	8000546 <__udivmoddi4+0x2a6>
 800051a:	3802      	subs	r0, #2
 800051c:	4429      	add	r1, r5
 800051e:	1ac9      	subs	r1, r1, r3
 8000520:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000524:	e73b      	b.n	800039e <__udivmoddi4+0xfe>
 8000526:	4637      	mov	r7, r6
 8000528:	4630      	mov	r0, r6
 800052a:	e709      	b.n	8000340 <__udivmoddi4+0xa0>
 800052c:	4607      	mov	r7, r0
 800052e:	e6e7      	b.n	8000300 <__udivmoddi4+0x60>
 8000530:	4618      	mov	r0, r3
 8000532:	e6fb      	b.n	800032c <__udivmoddi4+0x8c>
 8000534:	4541      	cmp	r1, r8
 8000536:	d2ab      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 8000538:	ebb8 0a02 	subs.w	sl, r8, r2
 800053c:	eb69 020e 	sbc.w	r2, r9, lr
 8000540:	3801      	subs	r0, #1
 8000542:	4613      	mov	r3, r2
 8000544:	e7a4      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000546:	4660      	mov	r0, ip
 8000548:	e7e9      	b.n	800051e <__udivmoddi4+0x27e>
 800054a:	4618      	mov	r0, r3
 800054c:	e795      	b.n	800047a <__udivmoddi4+0x1da>
 800054e:	4667      	mov	r7, ip
 8000550:	e7d1      	b.n	80004f6 <__udivmoddi4+0x256>
 8000552:	4681      	mov	r9, r0
 8000554:	e77c      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000556:	3802      	subs	r0, #2
 8000558:	442c      	add	r4, r5
 800055a:	e747      	b.n	80003ec <__udivmoddi4+0x14c>
 800055c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000560:	442b      	add	r3, r5
 8000562:	e72f      	b.n	80003c4 <__udivmoddi4+0x124>
 8000564:	4638      	mov	r0, r7
 8000566:	e708      	b.n	800037a <__udivmoddi4+0xda>
 8000568:	4637      	mov	r7, r6
 800056a:	e6e9      	b.n	8000340 <__udivmoddi4+0xa0>

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b082      	sub	sp, #8
 8000574:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000576:	2300      	movs	r3, #0
 8000578:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800057a:	2003      	movs	r0, #3
 800057c:	f000 f924 	bl	80007c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000580:	200f      	movs	r0, #15
 8000582:	f003 f9f5 	bl	8003970 <HAL_InitTick>
 8000586:	4603      	mov	r3, r0
 8000588:	2b00      	cmp	r3, #0
 800058a:	d002      	beq.n	8000592 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800058c:	2301      	movs	r3, #1
 800058e:	71fb      	strb	r3, [r7, #7]
 8000590:	e001      	b.n	8000596 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000592:	f007 fd7f 	bl	8008094 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000596:	79fb      	ldrb	r3, [r7, #7]
}
 8000598:	4618      	mov	r0, r3
 800059a:	3708      	adds	r7, #8
 800059c:	46bd      	mov	sp, r7
 800059e:	bd80      	pop	{r7, pc}

080005a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80005a0:	b480      	push	{r7}
 80005a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80005a4:	4b05      	ldr	r3, [pc, #20]	; (80005bc <HAL_IncTick+0x1c>)
 80005a6:	681a      	ldr	r2, [r3, #0]
 80005a8:	4b05      	ldr	r3, [pc, #20]	; (80005c0 <HAL_IncTick+0x20>)
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	4413      	add	r3, r2
 80005ae:	4a03      	ldr	r2, [pc, #12]	; (80005bc <HAL_IncTick+0x1c>)
 80005b0:	6013      	str	r3, [r2, #0]
}
 80005b2:	bf00      	nop
 80005b4:	46bd      	mov	sp, r7
 80005b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ba:	4770      	bx	lr
 80005bc:	200019e0 	.word	0x200019e0
 80005c0:	20000004 	.word	0x20000004

080005c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005c4:	b480      	push	{r7}
 80005c6:	af00      	add	r7, sp, #0
  return uwTick;
 80005c8:	4b03      	ldr	r3, [pc, #12]	; (80005d8 <HAL_GetTick+0x14>)
 80005ca:	681b      	ldr	r3, [r3, #0]
}
 80005cc:	4618      	mov	r0, r3
 80005ce:	46bd      	mov	sp, r7
 80005d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop
 80005d8:	200019e0 	.word	0x200019e0

080005dc <HAL_GetHalVersion>:
/**
  * @brief  Return the HAL revision.
  * @retval version : 0xXYZR (8bits for each decimal, R for RC)
  */
uint32_t HAL_GetHalVersion(void)
{
 80005dc:	b480      	push	{r7}
 80005de:	af00      	add	r7, sp, #0
  return STM32L4XX_HAL_VERSION;
 80005e0:	f04f 7385 	mov.w	r3, #17432576	; 0x10a0000
}
 80005e4:	4618      	mov	r0, r3
 80005e6:	46bd      	mov	sp, r7
 80005e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ec:	4770      	bx	lr
	...

080005f0 <HAL_GetREVID>:
/**
  * @brief  Return the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80005f0:	b480      	push	{r7}
 80005f2:	af00      	add	r7, sp, #0
  return((DBGMCU->IDCODE & DBGMCU_IDCODE_REV_ID) >> 16);
 80005f4:	4b04      	ldr	r3, [pc, #16]	; (8000608 <HAL_GetREVID+0x18>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	0c1b      	lsrs	r3, r3, #16
 80005fa:	b29b      	uxth	r3, r3
}
 80005fc:	4618      	mov	r0, r3
 80005fe:	46bd      	mov	sp, r7
 8000600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000604:	4770      	bx	lr
 8000606:	bf00      	nop
 8000608:	e0042000 	.word	0xe0042000

0800060c <HAL_GetDEVID>:
/**
  * @brief  Return the device identifier.
  * @retval Device identifier
  */
uint32_t HAL_GetDEVID(void)
{
 800060c:	b480      	push	{r7}
 800060e:	af00      	add	r7, sp, #0
  return(DBGMCU->IDCODE & DBGMCU_IDCODE_DEV_ID);
 8000610:	4b04      	ldr	r3, [pc, #16]	; (8000624 <HAL_GetDEVID+0x18>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
 8000618:	4618      	mov	r0, r3
 800061a:	46bd      	mov	sp, r7
 800061c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000620:	4770      	bx	lr
 8000622:	bf00      	nop
 8000624:	e0042000 	.word	0xe0042000

08000628 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000628:	b480      	push	{r7}
 800062a:	b085      	sub	sp, #20
 800062c:	af00      	add	r7, sp, #0
 800062e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	f003 0307 	and.w	r3, r3, #7
 8000636:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000638:	4b0c      	ldr	r3, [pc, #48]	; (800066c <__NVIC_SetPriorityGrouping+0x44>)
 800063a:	68db      	ldr	r3, [r3, #12]
 800063c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800063e:	68ba      	ldr	r2, [r7, #8]
 8000640:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000644:	4013      	ands	r3, r2
 8000646:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000648:	68fb      	ldr	r3, [r7, #12]
 800064a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800064c:	68bb      	ldr	r3, [r7, #8]
 800064e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000650:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000654:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000658:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800065a:	4a04      	ldr	r2, [pc, #16]	; (800066c <__NVIC_SetPriorityGrouping+0x44>)
 800065c:	68bb      	ldr	r3, [r7, #8]
 800065e:	60d3      	str	r3, [r2, #12]
}
 8000660:	bf00      	nop
 8000662:	3714      	adds	r7, #20
 8000664:	46bd      	mov	sp, r7
 8000666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066a:	4770      	bx	lr
 800066c:	e000ed00 	.word	0xe000ed00

08000670 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000670:	b480      	push	{r7}
 8000672:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000674:	4b04      	ldr	r3, [pc, #16]	; (8000688 <__NVIC_GetPriorityGrouping+0x18>)
 8000676:	68db      	ldr	r3, [r3, #12]
 8000678:	0a1b      	lsrs	r3, r3, #8
 800067a:	f003 0307 	and.w	r3, r3, #7
}
 800067e:	4618      	mov	r0, r3
 8000680:	46bd      	mov	sp, r7
 8000682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000686:	4770      	bx	lr
 8000688:	e000ed00 	.word	0xe000ed00

0800068c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800068c:	b480      	push	{r7}
 800068e:	b083      	sub	sp, #12
 8000690:	af00      	add	r7, sp, #0
 8000692:	4603      	mov	r3, r0
 8000694:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000696:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800069a:	2b00      	cmp	r3, #0
 800069c:	db0b      	blt.n	80006b6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800069e:	79fb      	ldrb	r3, [r7, #7]
 80006a0:	f003 021f 	and.w	r2, r3, #31
 80006a4:	4907      	ldr	r1, [pc, #28]	; (80006c4 <__NVIC_EnableIRQ+0x38>)
 80006a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006aa:	095b      	lsrs	r3, r3, #5
 80006ac:	2001      	movs	r0, #1
 80006ae:	fa00 f202 	lsl.w	r2, r0, r2
 80006b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80006b6:	bf00      	nop
 80006b8:	370c      	adds	r7, #12
 80006ba:	46bd      	mov	sp, r7
 80006bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c0:	4770      	bx	lr
 80006c2:	bf00      	nop
 80006c4:	e000e100 	.word	0xe000e100

080006c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80006c8:	b480      	push	{r7}
 80006ca:	b083      	sub	sp, #12
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	4603      	mov	r3, r0
 80006d0:	6039      	str	r1, [r7, #0]
 80006d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006d8:	2b00      	cmp	r3, #0
 80006da:	db0a      	blt.n	80006f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006dc:	683b      	ldr	r3, [r7, #0]
 80006de:	b2da      	uxtb	r2, r3
 80006e0:	490c      	ldr	r1, [pc, #48]	; (8000714 <__NVIC_SetPriority+0x4c>)
 80006e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006e6:	0112      	lsls	r2, r2, #4
 80006e8:	b2d2      	uxtb	r2, r2
 80006ea:	440b      	add	r3, r1
 80006ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80006f0:	e00a      	b.n	8000708 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006f2:	683b      	ldr	r3, [r7, #0]
 80006f4:	b2da      	uxtb	r2, r3
 80006f6:	4908      	ldr	r1, [pc, #32]	; (8000718 <__NVIC_SetPriority+0x50>)
 80006f8:	79fb      	ldrb	r3, [r7, #7]
 80006fa:	f003 030f 	and.w	r3, r3, #15
 80006fe:	3b04      	subs	r3, #4
 8000700:	0112      	lsls	r2, r2, #4
 8000702:	b2d2      	uxtb	r2, r2
 8000704:	440b      	add	r3, r1
 8000706:	761a      	strb	r2, [r3, #24]
}
 8000708:	bf00      	nop
 800070a:	370c      	adds	r7, #12
 800070c:	46bd      	mov	sp, r7
 800070e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000712:	4770      	bx	lr
 8000714:	e000e100 	.word	0xe000e100
 8000718:	e000ed00 	.word	0xe000ed00

0800071c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800071c:	b480      	push	{r7}
 800071e:	b089      	sub	sp, #36	; 0x24
 8000720:	af00      	add	r7, sp, #0
 8000722:	60f8      	str	r0, [r7, #12]
 8000724:	60b9      	str	r1, [r7, #8]
 8000726:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000728:	68fb      	ldr	r3, [r7, #12]
 800072a:	f003 0307 	and.w	r3, r3, #7
 800072e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000730:	69fb      	ldr	r3, [r7, #28]
 8000732:	f1c3 0307 	rsb	r3, r3, #7
 8000736:	2b04      	cmp	r3, #4
 8000738:	bf28      	it	cs
 800073a:	2304      	movcs	r3, #4
 800073c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800073e:	69fb      	ldr	r3, [r7, #28]
 8000740:	3304      	adds	r3, #4
 8000742:	2b06      	cmp	r3, #6
 8000744:	d902      	bls.n	800074c <NVIC_EncodePriority+0x30>
 8000746:	69fb      	ldr	r3, [r7, #28]
 8000748:	3b03      	subs	r3, #3
 800074a:	e000      	b.n	800074e <NVIC_EncodePriority+0x32>
 800074c:	2300      	movs	r3, #0
 800074e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000750:	f04f 32ff 	mov.w	r2, #4294967295
 8000754:	69bb      	ldr	r3, [r7, #24]
 8000756:	fa02 f303 	lsl.w	r3, r2, r3
 800075a:	43da      	mvns	r2, r3
 800075c:	68bb      	ldr	r3, [r7, #8]
 800075e:	401a      	ands	r2, r3
 8000760:	697b      	ldr	r3, [r7, #20]
 8000762:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000764:	f04f 31ff 	mov.w	r1, #4294967295
 8000768:	697b      	ldr	r3, [r7, #20]
 800076a:	fa01 f303 	lsl.w	r3, r1, r3
 800076e:	43d9      	mvns	r1, r3
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000774:	4313      	orrs	r3, r2
         );
}
 8000776:	4618      	mov	r0, r3
 8000778:	3724      	adds	r7, #36	; 0x24
 800077a:	46bd      	mov	sp, r7
 800077c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000780:	4770      	bx	lr
	...

08000784 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b082      	sub	sp, #8
 8000788:	af00      	add	r7, sp, #0
 800078a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	3b01      	subs	r3, #1
 8000790:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000794:	d301      	bcc.n	800079a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000796:	2301      	movs	r3, #1
 8000798:	e00f      	b.n	80007ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800079a:	4a0a      	ldr	r2, [pc, #40]	; (80007c4 <SysTick_Config+0x40>)
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	3b01      	subs	r3, #1
 80007a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80007a2:	210f      	movs	r1, #15
 80007a4:	f04f 30ff 	mov.w	r0, #4294967295
 80007a8:	f7ff ff8e 	bl	80006c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80007ac:	4b05      	ldr	r3, [pc, #20]	; (80007c4 <SysTick_Config+0x40>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80007b2:	4b04      	ldr	r3, [pc, #16]	; (80007c4 <SysTick_Config+0x40>)
 80007b4:	2207      	movs	r2, #7
 80007b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80007b8:	2300      	movs	r3, #0
}
 80007ba:	4618      	mov	r0, r3
 80007bc:	3708      	adds	r7, #8
 80007be:	46bd      	mov	sp, r7
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	bf00      	nop
 80007c4:	e000e010 	.word	0xe000e010

080007c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b082      	sub	sp, #8
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	2b07      	cmp	r3, #7
 80007d4:	d00f      	beq.n	80007f6 <HAL_NVIC_SetPriorityGrouping+0x2e>
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	2b06      	cmp	r3, #6
 80007da:	d00c      	beq.n	80007f6 <HAL_NVIC_SetPriorityGrouping+0x2e>
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	2b05      	cmp	r3, #5
 80007e0:	d009      	beq.n	80007f6 <HAL_NVIC_SetPriorityGrouping+0x2e>
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	2b04      	cmp	r3, #4
 80007e6:	d006      	beq.n	80007f6 <HAL_NVIC_SetPriorityGrouping+0x2e>
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	2b03      	cmp	r3, #3
 80007ec:	d003      	beq.n	80007f6 <HAL_NVIC_SetPriorityGrouping+0x2e>
 80007ee:	21a7      	movs	r1, #167	; 0xa7
 80007f0:	4804      	ldr	r0, [pc, #16]	; (8000804 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 80007f2:	f007 fb7b 	bl	8007eec <assert_failed>

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80007f6:	6878      	ldr	r0, [r7, #4]
 80007f8:	f7ff ff16 	bl	8000628 <__NVIC_SetPriorityGrouping>
}
 80007fc:	bf00      	nop
 80007fe:	3708      	adds	r7, #8
 8000800:	46bd      	mov	sp, r7
 8000802:	bd80      	pop	{r7, pc}
 8000804:	08009c24 	.word	0x08009c24

08000808 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b086      	sub	sp, #24
 800080c:	af00      	add	r7, sp, #0
 800080e:	4603      	mov	r3, r0
 8000810:	60b9      	str	r1, [r7, #8]
 8000812:	607a      	str	r2, [r7, #4]
 8000814:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000816:	2300      	movs	r3, #0
 8000818:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	2b0f      	cmp	r3, #15
 800081e:	d903      	bls.n	8000828 <HAL_NVIC_SetPriority+0x20>
 8000820:	21bf      	movs	r1, #191	; 0xbf
 8000822:	480e      	ldr	r0, [pc, #56]	; (800085c <HAL_NVIC_SetPriority+0x54>)
 8000824:	f007 fb62 	bl	8007eec <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8000828:	68bb      	ldr	r3, [r7, #8]
 800082a:	2b0f      	cmp	r3, #15
 800082c:	d903      	bls.n	8000836 <HAL_NVIC_SetPriority+0x2e>
 800082e:	21c0      	movs	r1, #192	; 0xc0
 8000830:	480a      	ldr	r0, [pc, #40]	; (800085c <HAL_NVIC_SetPriority+0x54>)
 8000832:	f007 fb5b 	bl	8007eec <assert_failed>

  prioritygroup = NVIC_GetPriorityGrouping();
 8000836:	f7ff ff1b 	bl	8000670 <__NVIC_GetPriorityGrouping>
 800083a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800083c:	687a      	ldr	r2, [r7, #4]
 800083e:	68b9      	ldr	r1, [r7, #8]
 8000840:	6978      	ldr	r0, [r7, #20]
 8000842:	f7ff ff6b 	bl	800071c <NVIC_EncodePriority>
 8000846:	4602      	mov	r2, r0
 8000848:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800084c:	4611      	mov	r1, r2
 800084e:	4618      	mov	r0, r3
 8000850:	f7ff ff3a 	bl	80006c8 <__NVIC_SetPriority>
}
 8000854:	bf00      	nop
 8000856:	3718      	adds	r7, #24
 8000858:	46bd      	mov	sp, r7
 800085a:	bd80      	pop	{r7, pc}
 800085c:	08009c24 	.word	0x08009c24

08000860 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b082      	sub	sp, #8
 8000864:	af00      	add	r7, sp, #0
 8000866:	4603      	mov	r3, r0
 8000868:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 800086a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800086e:	2b00      	cmp	r3, #0
 8000870:	da03      	bge.n	800087a <HAL_NVIC_EnableIRQ+0x1a>
 8000872:	21d3      	movs	r1, #211	; 0xd3
 8000874:	4805      	ldr	r0, [pc, #20]	; (800088c <HAL_NVIC_EnableIRQ+0x2c>)
 8000876:	f007 fb39 	bl	8007eec <assert_failed>

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800087a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800087e:	4618      	mov	r0, r3
 8000880:	f7ff ff04 	bl	800068c <__NVIC_EnableIRQ>
}
 8000884:	bf00      	nop
 8000886:	3708      	adds	r7, #8
 8000888:	46bd      	mov	sp, r7
 800088a:	bd80      	pop	{r7, pc}
 800088c:	08009c24 	.word	0x08009c24

08000890 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b082      	sub	sp, #8
 8000894:	af00      	add	r7, sp, #0
 8000896:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000898:	6878      	ldr	r0, [r7, #4]
 800089a:	f7ff ff73 	bl	8000784 <SysTick_Config>
 800089e:	4603      	mov	r3, r0
}
 80008a0:	4618      	mov	r0, r3
 80008a2:	3708      	adds	r7, #8
 80008a4:	46bd      	mov	sp, r7
 80008a6:	bd80      	pop	{r7, pc}

080008a8 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b082      	sub	sp, #8
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	2b04      	cmp	r3, #4
 80008b4:	d007      	beq.n	80008c6 <HAL_SYSTICK_CLKSourceConfig+0x1e>
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d004      	beq.n	80008c6 <HAL_SYSTICK_CLKSourceConfig+0x1e>
 80008bc:	f44f 71c2 	mov.w	r1, #388	; 0x184
 80008c0:	480b      	ldr	r0, [pc, #44]	; (80008f0 <HAL_SYSTICK_CLKSourceConfig+0x48>)
 80008c2:	f007 fb13 	bl	8007eec <assert_failed>
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	2b04      	cmp	r3, #4
 80008ca:	d106      	bne.n	80008da <HAL_SYSTICK_CLKSourceConfig+0x32>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80008cc:	4b09      	ldr	r3, [pc, #36]	; (80008f4 <HAL_SYSTICK_CLKSourceConfig+0x4c>)
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	4a08      	ldr	r2, [pc, #32]	; (80008f4 <HAL_SYSTICK_CLKSourceConfig+0x4c>)
 80008d2:	f043 0304 	orr.w	r3, r3, #4
 80008d6:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 80008d8:	e005      	b.n	80008e6 <HAL_SYSTICK_CLKSourceConfig+0x3e>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 80008da:	4b06      	ldr	r3, [pc, #24]	; (80008f4 <HAL_SYSTICK_CLKSourceConfig+0x4c>)
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	4a05      	ldr	r2, [pc, #20]	; (80008f4 <HAL_SYSTICK_CLKSourceConfig+0x4c>)
 80008e0:	f023 0304 	bic.w	r3, r3, #4
 80008e4:	6013      	str	r3, [r2, #0]
}
 80008e6:	bf00      	nop
 80008e8:	3708      	adds	r7, #8
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bd80      	pop	{r7, pc}
 80008ee:	bf00      	nop
 80008f0:	08009c24 	.word	0x08009c24
 80008f4:	e000e010 	.word	0xe000e010

080008f8 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b084      	sub	sp, #16
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	2b00      	cmp	r3, #0
 8000904:	d101      	bne.n	800090a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8000906:	2301      	movs	r3, #1
 8000908:	e19d      	b.n	8000c46 <HAL_DMA_Init+0x34e>
  }

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	4a79      	ldr	r2, [pc, #484]	; (8000af4 <HAL_DMA_Init+0x1fc>)
 8000910:	4293      	cmp	r3, r2
 8000912:	d044      	beq.n	800099e <HAL_DMA_Init+0xa6>
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	4a77      	ldr	r2, [pc, #476]	; (8000af8 <HAL_DMA_Init+0x200>)
 800091a:	4293      	cmp	r3, r2
 800091c:	d03f      	beq.n	800099e <HAL_DMA_Init+0xa6>
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	4a76      	ldr	r2, [pc, #472]	; (8000afc <HAL_DMA_Init+0x204>)
 8000924:	4293      	cmp	r3, r2
 8000926:	d03a      	beq.n	800099e <HAL_DMA_Init+0xa6>
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	4a74      	ldr	r2, [pc, #464]	; (8000b00 <HAL_DMA_Init+0x208>)
 800092e:	4293      	cmp	r3, r2
 8000930:	d035      	beq.n	800099e <HAL_DMA_Init+0xa6>
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	681b      	ldr	r3, [r3, #0]
 8000936:	4a73      	ldr	r2, [pc, #460]	; (8000b04 <HAL_DMA_Init+0x20c>)
 8000938:	4293      	cmp	r3, r2
 800093a:	d030      	beq.n	800099e <HAL_DMA_Init+0xa6>
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	4a71      	ldr	r2, [pc, #452]	; (8000b08 <HAL_DMA_Init+0x210>)
 8000942:	4293      	cmp	r3, r2
 8000944:	d02b      	beq.n	800099e <HAL_DMA_Init+0xa6>
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	4a70      	ldr	r2, [pc, #448]	; (8000b0c <HAL_DMA_Init+0x214>)
 800094c:	4293      	cmp	r3, r2
 800094e:	d026      	beq.n	800099e <HAL_DMA_Init+0xa6>
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	4a6e      	ldr	r2, [pc, #440]	; (8000b10 <HAL_DMA_Init+0x218>)
 8000956:	4293      	cmp	r3, r2
 8000958:	d021      	beq.n	800099e <HAL_DMA_Init+0xa6>
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	681b      	ldr	r3, [r3, #0]
 800095e:	4a6d      	ldr	r2, [pc, #436]	; (8000b14 <HAL_DMA_Init+0x21c>)
 8000960:	4293      	cmp	r3, r2
 8000962:	d01c      	beq.n	800099e <HAL_DMA_Init+0xa6>
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	4a6b      	ldr	r2, [pc, #428]	; (8000b18 <HAL_DMA_Init+0x220>)
 800096a:	4293      	cmp	r3, r2
 800096c:	d017      	beq.n	800099e <HAL_DMA_Init+0xa6>
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	681b      	ldr	r3, [r3, #0]
 8000972:	4a6a      	ldr	r2, [pc, #424]	; (8000b1c <HAL_DMA_Init+0x224>)
 8000974:	4293      	cmp	r3, r2
 8000976:	d012      	beq.n	800099e <HAL_DMA_Init+0xa6>
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	4a68      	ldr	r2, [pc, #416]	; (8000b20 <HAL_DMA_Init+0x228>)
 800097e:	4293      	cmp	r3, r2
 8000980:	d00d      	beq.n	800099e <HAL_DMA_Init+0xa6>
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	681b      	ldr	r3, [r3, #0]
 8000986:	4a67      	ldr	r2, [pc, #412]	; (8000b24 <HAL_DMA_Init+0x22c>)
 8000988:	4293      	cmp	r3, r2
 800098a:	d008      	beq.n	800099e <HAL_DMA_Init+0xa6>
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	4a65      	ldr	r2, [pc, #404]	; (8000b28 <HAL_DMA_Init+0x230>)
 8000992:	4293      	cmp	r3, r2
 8000994:	d003      	beq.n	800099e <HAL_DMA_Init+0xa6>
 8000996:	21a4      	movs	r1, #164	; 0xa4
 8000998:	4864      	ldr	r0, [pc, #400]	; (8000b2c <HAL_DMA_Init+0x234>)
 800099a:	f007 faa7 	bl	8007eec <assert_failed>
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	689b      	ldr	r3, [r3, #8]
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d00c      	beq.n	80009c0 <HAL_DMA_Init+0xc8>
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	689b      	ldr	r3, [r3, #8]
 80009aa:	2b10      	cmp	r3, #16
 80009ac:	d008      	beq.n	80009c0 <HAL_DMA_Init+0xc8>
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	689b      	ldr	r3, [r3, #8]
 80009b2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80009b6:	d003      	beq.n	80009c0 <HAL_DMA_Init+0xc8>
 80009b8:	21a5      	movs	r1, #165	; 0xa5
 80009ba:	485c      	ldr	r0, [pc, #368]	; (8000b2c <HAL_DMA_Init+0x234>)
 80009bc:	f007 fa96 	bl	8007eec <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	68db      	ldr	r3, [r3, #12]
 80009c4:	2b40      	cmp	r3, #64	; 0x40
 80009c6:	d007      	beq.n	80009d8 <HAL_DMA_Init+0xe0>
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	68db      	ldr	r3, [r3, #12]
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d003      	beq.n	80009d8 <HAL_DMA_Init+0xe0>
 80009d0:	21a6      	movs	r1, #166	; 0xa6
 80009d2:	4856      	ldr	r0, [pc, #344]	; (8000b2c <HAL_DMA_Init+0x234>)
 80009d4:	f007 fa8a 	bl	8007eec <assert_failed>
  assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	691b      	ldr	r3, [r3, #16]
 80009dc:	2b80      	cmp	r3, #128	; 0x80
 80009de:	d007      	beq.n	80009f0 <HAL_DMA_Init+0xf8>
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	691b      	ldr	r3, [r3, #16]
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d003      	beq.n	80009f0 <HAL_DMA_Init+0xf8>
 80009e8:	21a7      	movs	r1, #167	; 0xa7
 80009ea:	4850      	ldr	r0, [pc, #320]	; (8000b2c <HAL_DMA_Init+0x234>)
 80009ec:	f007 fa7e 	bl	8007eec <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	695b      	ldr	r3, [r3, #20]
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d00d      	beq.n	8000a14 <HAL_DMA_Init+0x11c>
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	695b      	ldr	r3, [r3, #20]
 80009fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000a00:	d008      	beq.n	8000a14 <HAL_DMA_Init+0x11c>
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	695b      	ldr	r3, [r3, #20]
 8000a06:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000a0a:	d003      	beq.n	8000a14 <HAL_DMA_Init+0x11c>
 8000a0c:	21a8      	movs	r1, #168	; 0xa8
 8000a0e:	4847      	ldr	r0, [pc, #284]	; (8000b2c <HAL_DMA_Init+0x234>)
 8000a10:	f007 fa6c 	bl	8007eec <assert_failed>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	699b      	ldr	r3, [r3, #24]
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d00d      	beq.n	8000a38 <HAL_DMA_Init+0x140>
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	699b      	ldr	r3, [r3, #24]
 8000a20:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000a24:	d008      	beq.n	8000a38 <HAL_DMA_Init+0x140>
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	699b      	ldr	r3, [r3, #24]
 8000a2a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000a2e:	d003      	beq.n	8000a38 <HAL_DMA_Init+0x140>
 8000a30:	21a9      	movs	r1, #169	; 0xa9
 8000a32:	483e      	ldr	r0, [pc, #248]	; (8000b2c <HAL_DMA_Init+0x234>)
 8000a34:	f007 fa5a 	bl	8007eec <assert_failed>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	69db      	ldr	r3, [r3, #28]
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d007      	beq.n	8000a50 <HAL_DMA_Init+0x158>
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	69db      	ldr	r3, [r3, #28]
 8000a44:	2b20      	cmp	r3, #32
 8000a46:	d003      	beq.n	8000a50 <HAL_DMA_Init+0x158>
 8000a48:	21aa      	movs	r1, #170	; 0xaa
 8000a4a:	4838      	ldr	r0, [pc, #224]	; (8000b2c <HAL_DMA_Init+0x234>)
 8000a4c:	f007 fa4e 	bl	8007eec <assert_failed>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	6a1b      	ldr	r3, [r3, #32]
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d012      	beq.n	8000a7e <HAL_DMA_Init+0x186>
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	6a1b      	ldr	r3, [r3, #32]
 8000a5c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000a60:	d00d      	beq.n	8000a7e <HAL_DMA_Init+0x186>
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	6a1b      	ldr	r3, [r3, #32]
 8000a66:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000a6a:	d008      	beq.n	8000a7e <HAL_DMA_Init+0x186>
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	6a1b      	ldr	r3, [r3, #32]
 8000a70:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8000a74:	d003      	beq.n	8000a7e <HAL_DMA_Init+0x186>
 8000a76:	21ab      	movs	r1, #171	; 0xab
 8000a78:	482c      	ldr	r0, [pc, #176]	; (8000b2c <HAL_DMA_Init+0x234>)
 8000a7a:	f007 fa37 	bl	8007eec <assert_failed>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	685b      	ldr	r3, [r3, #4]
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d01f      	beq.n	8000ac6 <HAL_DMA_Init+0x1ce>
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	685b      	ldr	r3, [r3, #4]
 8000a8a:	2b01      	cmp	r3, #1
 8000a8c:	d01b      	beq.n	8000ac6 <HAL_DMA_Init+0x1ce>
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	685b      	ldr	r3, [r3, #4]
 8000a92:	2b02      	cmp	r3, #2
 8000a94:	d017      	beq.n	8000ac6 <HAL_DMA_Init+0x1ce>
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	685b      	ldr	r3, [r3, #4]
 8000a9a:	2b03      	cmp	r3, #3
 8000a9c:	d013      	beq.n	8000ac6 <HAL_DMA_Init+0x1ce>
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	685b      	ldr	r3, [r3, #4]
 8000aa2:	2b04      	cmp	r3, #4
 8000aa4:	d00f      	beq.n	8000ac6 <HAL_DMA_Init+0x1ce>
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	685b      	ldr	r3, [r3, #4]
 8000aaa:	2b05      	cmp	r3, #5
 8000aac:	d00b      	beq.n	8000ac6 <HAL_DMA_Init+0x1ce>
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	685b      	ldr	r3, [r3, #4]
 8000ab2:	2b06      	cmp	r3, #6
 8000ab4:	d007      	beq.n	8000ac6 <HAL_DMA_Init+0x1ce>
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	685b      	ldr	r3, [r3, #4]
 8000aba:	2b07      	cmp	r3, #7
 8000abc:	d003      	beq.n	8000ac6 <HAL_DMA_Init+0x1ce>
 8000abe:	21ad      	movs	r1, #173	; 0xad
 8000ac0:	481a      	ldr	r0, [pc, #104]	; (8000b2c <HAL_DMA_Init+0x234>)
 8000ac2:	f007 fa13 	bl	8007eec <assert_failed>

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	461a      	mov	r2, r3
 8000acc:	4b18      	ldr	r3, [pc, #96]	; (8000b30 <HAL_DMA_Init+0x238>)
 8000ace:	429a      	cmp	r2, r3
 8000ad0:	d836      	bhi.n	8000b40 <HAL_DMA_Init+0x248>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	461a      	mov	r2, r3
 8000ad8:	4b16      	ldr	r3, [pc, #88]	; (8000b34 <HAL_DMA_Init+0x23c>)
 8000ada:	4413      	add	r3, r2
 8000adc:	4a16      	ldr	r2, [pc, #88]	; (8000b38 <HAL_DMA_Init+0x240>)
 8000ade:	fba2 2303 	umull	r2, r3, r2, r3
 8000ae2:	091b      	lsrs	r3, r3, #4
 8000ae4:	009a      	lsls	r2, r3, #2
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	4a13      	ldr	r2, [pc, #76]	; (8000b3c <HAL_DMA_Init+0x244>)
 8000aee:	641a      	str	r2, [r3, #64]	; 0x40
 8000af0:	e035      	b.n	8000b5e <HAL_DMA_Init+0x266>
 8000af2:	bf00      	nop
 8000af4:	40020008 	.word	0x40020008
 8000af8:	4002001c 	.word	0x4002001c
 8000afc:	40020030 	.word	0x40020030
 8000b00:	40020044 	.word	0x40020044
 8000b04:	40020058 	.word	0x40020058
 8000b08:	4002006c 	.word	0x4002006c
 8000b0c:	40020080 	.word	0x40020080
 8000b10:	40020408 	.word	0x40020408
 8000b14:	4002041c 	.word	0x4002041c
 8000b18:	40020430 	.word	0x40020430
 8000b1c:	40020444 	.word	0x40020444
 8000b20:	40020458 	.word	0x40020458
 8000b24:	4002046c 	.word	0x4002046c
 8000b28:	40020480 	.word	0x40020480
 8000b2c:	08009c60 	.word	0x08009c60
 8000b30:	40020407 	.word	0x40020407
 8000b34:	bffdfff8 	.word	0xbffdfff8
 8000b38:	cccccccd 	.word	0xcccccccd
 8000b3c:	40020000 	.word	0x40020000
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	461a      	mov	r2, r3
 8000b46:	4b42      	ldr	r3, [pc, #264]	; (8000c50 <HAL_DMA_Init+0x358>)
 8000b48:	4413      	add	r3, r2
 8000b4a:	4a42      	ldr	r2, [pc, #264]	; (8000c54 <HAL_DMA_Init+0x35c>)
 8000b4c:	fba2 2303 	umull	r2, r3, r2, r3
 8000b50:	091b      	lsrs	r3, r3, #4
 8000b52:	009a      	lsls	r2, r3, #2
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	4a3f      	ldr	r2, [pc, #252]	; (8000c58 <HAL_DMA_Init+0x360>)
 8000b5c:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	2202      	movs	r2, #2
 8000b62:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8000b6e:	68fb      	ldr	r3, [r7, #12]
 8000b70:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8000b74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000b78:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8000b82:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	691b      	ldr	r3, [r3, #16]
 8000b88:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000b8e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	699b      	ldr	r3, [r3, #24]
 8000b94:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000b9a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	6a1b      	ldr	r3, [r3, #32]
 8000ba0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000ba2:	68fa      	ldr	r2, [r7, #12]
 8000ba4:	4313      	orrs	r3, r2
 8000ba6:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	68fa      	ldr	r2, [r7, #12]
 8000bae:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	689b      	ldr	r3, [r3, #8]
 8000bb4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000bb8:	d039      	beq.n	8000c2e <HAL_DMA_Init+0x336>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bbe:	4a27      	ldr	r2, [pc, #156]	; (8000c5c <HAL_DMA_Init+0x364>)
 8000bc0:	4293      	cmp	r3, r2
 8000bc2:	d11a      	bne.n	8000bfa <HAL_DMA_Init+0x302>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8000bc4:	4b26      	ldr	r3, [pc, #152]	; (8000c60 <HAL_DMA_Init+0x368>)
 8000bc6:	681a      	ldr	r2, [r3, #0]
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bcc:	f003 031c 	and.w	r3, r3, #28
 8000bd0:	210f      	movs	r1, #15
 8000bd2:	fa01 f303 	lsl.w	r3, r1, r3
 8000bd6:	43db      	mvns	r3, r3
 8000bd8:	4921      	ldr	r1, [pc, #132]	; (8000c60 <HAL_DMA_Init+0x368>)
 8000bda:	4013      	ands	r3, r2
 8000bdc:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8000bde:	4b20      	ldr	r3, [pc, #128]	; (8000c60 <HAL_DMA_Init+0x368>)
 8000be0:	681a      	ldr	r2, [r3, #0]
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	6859      	ldr	r1, [r3, #4]
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bea:	f003 031c 	and.w	r3, r3, #28
 8000bee:	fa01 f303 	lsl.w	r3, r1, r3
 8000bf2:	491b      	ldr	r1, [pc, #108]	; (8000c60 <HAL_DMA_Init+0x368>)
 8000bf4:	4313      	orrs	r3, r2
 8000bf6:	600b      	str	r3, [r1, #0]
 8000bf8:	e019      	b.n	8000c2e <HAL_DMA_Init+0x336>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8000bfa:	4b1a      	ldr	r3, [pc, #104]	; (8000c64 <HAL_DMA_Init+0x36c>)
 8000bfc:	681a      	ldr	r2, [r3, #0]
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c02:	f003 031c 	and.w	r3, r3, #28
 8000c06:	210f      	movs	r1, #15
 8000c08:	fa01 f303 	lsl.w	r3, r1, r3
 8000c0c:	43db      	mvns	r3, r3
 8000c0e:	4915      	ldr	r1, [pc, #84]	; (8000c64 <HAL_DMA_Init+0x36c>)
 8000c10:	4013      	ands	r3, r2
 8000c12:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8000c14:	4b13      	ldr	r3, [pc, #76]	; (8000c64 <HAL_DMA_Init+0x36c>)
 8000c16:	681a      	ldr	r2, [r3, #0]
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	6859      	ldr	r1, [r3, #4]
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c20:	f003 031c 	and.w	r3, r3, #28
 8000c24:	fa01 f303 	lsl.w	r3, r1, r3
 8000c28:	490e      	ldr	r1, [pc, #56]	; (8000c64 <HAL_DMA_Init+0x36c>)
 8000c2a:	4313      	orrs	r3, r2
 8000c2c:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	2200      	movs	r2, #0
 8000c32:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	2201      	movs	r2, #1
 8000c38:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	2200      	movs	r2, #0
 8000c40:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8000c44:	2300      	movs	r3, #0
}
 8000c46:	4618      	mov	r0, r3
 8000c48:	3710      	adds	r7, #16
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bd80      	pop	{r7, pc}
 8000c4e:	bf00      	nop
 8000c50:	bffdfbf8 	.word	0xbffdfbf8
 8000c54:	cccccccd 	.word	0xcccccccd
 8000c58:	40020400 	.word	0x40020400
 8000c5c:	40020000 	.word	0x40020000
 8000c60:	400200a8 	.word	0x400200a8
 8000c64:	400204a8 	.word	0x400204a8

08000c68 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b086      	sub	sp, #24
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	60f8      	str	r0, [r7, #12]
 8000c70:	60b9      	str	r1, [r7, #8]
 8000c72:	607a      	str	r2, [r7, #4]
 8000c74:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000c76:	2300      	movs	r3, #0
 8000c78:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 8000c7a:	683b      	ldr	r3, [r7, #0]
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d003      	beq.n	8000c88 <HAL_DMA_Start_IT+0x20>
 8000c80:	683b      	ldr	r3, [r7, #0]
 8000c82:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000c86:	d304      	bcc.n	8000c92 <HAL_DMA_Start_IT+0x2a>
 8000c88:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8000c8c:	482c      	ldr	r0, [pc, #176]	; (8000d40 <HAL_DMA_Start_IT+0xd8>)
 8000c8e:	f007 f92d 	bl	8007eec <assert_failed>

  /* Process locked */
  __HAL_LOCK(hdma);
 8000c92:	68fb      	ldr	r3, [r7, #12]
 8000c94:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000c98:	2b01      	cmp	r3, #1
 8000c9a:	d101      	bne.n	8000ca0 <HAL_DMA_Start_IT+0x38>
 8000c9c:	2302      	movs	r3, #2
 8000c9e:	e04b      	b.n	8000d38 <HAL_DMA_Start_IT+0xd0>
 8000ca0:	68fb      	ldr	r3, [r7, #12]
 8000ca2:	2201      	movs	r2, #1
 8000ca4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8000ca8:	68fb      	ldr	r3, [r7, #12]
 8000caa:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000cae:	b2db      	uxtb	r3, r3
 8000cb0:	2b01      	cmp	r3, #1
 8000cb2:	d13a      	bne.n	8000d2a <HAL_DMA_Start_IT+0xc2>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000cb4:	68fb      	ldr	r3, [r7, #12]
 8000cb6:	2202      	movs	r2, #2
 8000cb8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000cbc:	68fb      	ldr	r3, [r7, #12]
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8000cc2:	68fb      	ldr	r3, [r7, #12]
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	681a      	ldr	r2, [r3, #0]
 8000cc8:	68fb      	ldr	r3, [r7, #12]
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	f022 0201 	bic.w	r2, r2, #1
 8000cd0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000cd2:	683b      	ldr	r3, [r7, #0]
 8000cd4:	687a      	ldr	r2, [r7, #4]
 8000cd6:	68b9      	ldr	r1, [r7, #8]
 8000cd8:	68f8      	ldr	r0, [r7, #12]
 8000cda:	f000 f874 	bl	8000dc6 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8000cde:	68fb      	ldr	r3, [r7, #12]
 8000ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d008      	beq.n	8000cf8 <HAL_DMA_Start_IT+0x90>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000ce6:	68fb      	ldr	r3, [r7, #12]
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	681a      	ldr	r2, [r3, #0]
 8000cec:	68fb      	ldr	r3, [r7, #12]
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	f042 020e 	orr.w	r2, r2, #14
 8000cf4:	601a      	str	r2, [r3, #0]
 8000cf6:	e00f      	b.n	8000d18 <HAL_DMA_Start_IT+0xb0>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000cf8:	68fb      	ldr	r3, [r7, #12]
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	681a      	ldr	r2, [r3, #0]
 8000cfe:	68fb      	ldr	r3, [r7, #12]
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	f022 0204 	bic.w	r2, r2, #4
 8000d06:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8000d08:	68fb      	ldr	r3, [r7, #12]
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	681a      	ldr	r2, [r3, #0]
 8000d0e:	68fb      	ldr	r3, [r7, #12]
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	f042 020a 	orr.w	r2, r2, #10
 8000d16:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000d18:	68fb      	ldr	r3, [r7, #12]
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	681a      	ldr	r2, [r3, #0]
 8000d1e:	68fb      	ldr	r3, [r7, #12]
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	f042 0201 	orr.w	r2, r2, #1
 8000d26:	601a      	str	r2, [r3, #0]
 8000d28:	e005      	b.n	8000d36 <HAL_DMA_Start_IT+0xce>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d2a:	68fb      	ldr	r3, [r7, #12]
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8000d32:	2302      	movs	r3, #2
 8000d34:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8000d36:	7dfb      	ldrb	r3, [r7, #23]
}
 8000d38:	4618      	mov	r0, r3
 8000d3a:	3718      	adds	r7, #24
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	bd80      	pop	{r7, pc}
 8000d40:	08009c60 	.word	0x08009c60

08000d44 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b084      	sub	sp, #16
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000d56:	b2db      	uxtb	r3, r3
 8000d58:	2b02      	cmp	r3, #2
 8000d5a:	d005      	beq.n	8000d68 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	2204      	movs	r2, #4
 8000d60:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8000d62:	2301      	movs	r3, #1
 8000d64:	73fb      	strb	r3, [r7, #15]
 8000d66:	e029      	b.n	8000dbc <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	681a      	ldr	r2, [r3, #0]
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	f022 020e 	bic.w	r2, r2, #14
 8000d76:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	681a      	ldr	r2, [r3, #0]
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	f022 0201 	bic.w	r2, r2, #1
 8000d86:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d8c:	f003 021c 	and.w	r2, r3, #28
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d94:	2101      	movs	r1, #1
 8000d96:	fa01 f202 	lsl.w	r2, r1, r2
 8000d9a:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	2201      	movs	r2, #1
 8000da0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	2200      	movs	r2, #0
 8000da8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d003      	beq.n	8000dbc <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000db8:	6878      	ldr	r0, [r7, #4]
 8000dba:	4798      	blx	r3
    }
  }
  return status;
 8000dbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	3710      	adds	r7, #16
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bd80      	pop	{r7, pc}

08000dc6 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000dc6:	b480      	push	{r7}
 8000dc8:	b085      	sub	sp, #20
 8000dca:	af00      	add	r7, sp, #0
 8000dcc:	60f8      	str	r0, [r7, #12]
 8000dce:	60b9      	str	r1, [r7, #8]
 8000dd0:	607a      	str	r2, [r7, #4]
 8000dd2:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000dd4:	68fb      	ldr	r3, [r7, #12]
 8000dd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dd8:	f003 021c 	and.w	r2, r3, #28
 8000ddc:	68fb      	ldr	r3, [r7, #12]
 8000dde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000de0:	2101      	movs	r1, #1
 8000de2:	fa01 f202 	lsl.w	r2, r1, r2
 8000de6:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8000de8:	68fb      	ldr	r3, [r7, #12]
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	683a      	ldr	r2, [r7, #0]
 8000dee:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000df0:	68fb      	ldr	r3, [r7, #12]
 8000df2:	689b      	ldr	r3, [r3, #8]
 8000df4:	2b10      	cmp	r3, #16
 8000df6:	d108      	bne.n	8000e0a <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8000df8:	68fb      	ldr	r3, [r7, #12]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	687a      	ldr	r2, [r7, #4]
 8000dfe:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8000e00:	68fb      	ldr	r3, [r7, #12]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	68ba      	ldr	r2, [r7, #8]
 8000e06:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8000e08:	e007      	b.n	8000e1a <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8000e0a:	68fb      	ldr	r3, [r7, #12]
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	68ba      	ldr	r2, [r7, #8]
 8000e10:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8000e12:	68fb      	ldr	r3, [r7, #12]
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	687a      	ldr	r2, [r7, #4]
 8000e18:	60da      	str	r2, [r3, #12]
}
 8000e1a:	bf00      	nop
 8000e1c:	3714      	adds	r7, #20
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e24:	4770      	bx	lr
	...

08000e28 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b086      	sub	sp, #24
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
 8000e30:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000e32:	2300      	movs	r3, #0
 8000e34:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent;
  uint32_t temp;

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000e3c:	d01f      	beq.n	8000e7e <HAL_GPIO_Init+0x56>
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	4a3f      	ldr	r2, [pc, #252]	; (8000f40 <HAL_GPIO_Init+0x118>)
 8000e42:	4293      	cmp	r3, r2
 8000e44:	d01b      	beq.n	8000e7e <HAL_GPIO_Init+0x56>
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	4a3e      	ldr	r2, [pc, #248]	; (8000f44 <HAL_GPIO_Init+0x11c>)
 8000e4a:	4293      	cmp	r3, r2
 8000e4c:	d017      	beq.n	8000e7e <HAL_GPIO_Init+0x56>
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	4a3d      	ldr	r2, [pc, #244]	; (8000f48 <HAL_GPIO_Init+0x120>)
 8000e52:	4293      	cmp	r3, r2
 8000e54:	d013      	beq.n	8000e7e <HAL_GPIO_Init+0x56>
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	4a3c      	ldr	r2, [pc, #240]	; (8000f4c <HAL_GPIO_Init+0x124>)
 8000e5a:	4293      	cmp	r3, r2
 8000e5c:	d00f      	beq.n	8000e7e <HAL_GPIO_Init+0x56>
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	4a3b      	ldr	r2, [pc, #236]	; (8000f50 <HAL_GPIO_Init+0x128>)
 8000e62:	4293      	cmp	r3, r2
 8000e64:	d00b      	beq.n	8000e7e <HAL_GPIO_Init+0x56>
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	4a3a      	ldr	r2, [pc, #232]	; (8000f54 <HAL_GPIO_Init+0x12c>)
 8000e6a:	4293      	cmp	r3, r2
 8000e6c:	d007      	beq.n	8000e7e <HAL_GPIO_Init+0x56>
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	4a39      	ldr	r2, [pc, #228]	; (8000f58 <HAL_GPIO_Init+0x130>)
 8000e72:	4293      	cmp	r3, r2
 8000e74:	d003      	beq.n	8000e7e <HAL_GPIO_Init+0x56>
 8000e76:	21b3      	movs	r1, #179	; 0xb3
 8000e78:	4838      	ldr	r0, [pc, #224]	; (8000f5c <HAL_GPIO_Init+0x134>)
 8000e7a:	f007 f837 	bl	8007eec <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8000e7e:	683b      	ldr	r3, [r7, #0]
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	b29b      	uxth	r3, r3
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d005      	beq.n	8000e94 <HAL_GPIO_Init+0x6c>
 8000e88:	683b      	ldr	r3, [r7, #0]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	0c1b      	lsrs	r3, r3, #16
 8000e8e:	041b      	lsls	r3, r3, #16
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d003      	beq.n	8000e9c <HAL_GPIO_Init+0x74>
 8000e94:	21b4      	movs	r1, #180	; 0xb4
 8000e96:	4831      	ldr	r0, [pc, #196]	; (8000f5c <HAL_GPIO_Init+0x134>)
 8000e98:	f007 f828 	bl	8007eec <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8000e9c:	683b      	ldr	r3, [r7, #0]
 8000e9e:	685b      	ldr	r3, [r3, #4]
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d039      	beq.n	8000f18 <HAL_GPIO_Init+0xf0>
 8000ea4:	683b      	ldr	r3, [r7, #0]
 8000ea6:	685b      	ldr	r3, [r3, #4]
 8000ea8:	2b01      	cmp	r3, #1
 8000eaa:	d035      	beq.n	8000f18 <HAL_GPIO_Init+0xf0>
 8000eac:	683b      	ldr	r3, [r7, #0]
 8000eae:	685b      	ldr	r3, [r3, #4]
 8000eb0:	2b11      	cmp	r3, #17
 8000eb2:	d031      	beq.n	8000f18 <HAL_GPIO_Init+0xf0>
 8000eb4:	683b      	ldr	r3, [r7, #0]
 8000eb6:	685b      	ldr	r3, [r3, #4]
 8000eb8:	2b02      	cmp	r3, #2
 8000eba:	d02d      	beq.n	8000f18 <HAL_GPIO_Init+0xf0>
 8000ebc:	683b      	ldr	r3, [r7, #0]
 8000ebe:	685b      	ldr	r3, [r3, #4]
 8000ec0:	2b12      	cmp	r3, #18
 8000ec2:	d029      	beq.n	8000f18 <HAL_GPIO_Init+0xf0>
 8000ec4:	683b      	ldr	r3, [r7, #0]
 8000ec6:	685b      	ldr	r3, [r3, #4]
 8000ec8:	4a25      	ldr	r2, [pc, #148]	; (8000f60 <HAL_GPIO_Init+0x138>)
 8000eca:	4293      	cmp	r3, r2
 8000ecc:	d024      	beq.n	8000f18 <HAL_GPIO_Init+0xf0>
 8000ece:	683b      	ldr	r3, [r7, #0]
 8000ed0:	685b      	ldr	r3, [r3, #4]
 8000ed2:	4a24      	ldr	r2, [pc, #144]	; (8000f64 <HAL_GPIO_Init+0x13c>)
 8000ed4:	4293      	cmp	r3, r2
 8000ed6:	d01f      	beq.n	8000f18 <HAL_GPIO_Init+0xf0>
 8000ed8:	683b      	ldr	r3, [r7, #0]
 8000eda:	685b      	ldr	r3, [r3, #4]
 8000edc:	4a22      	ldr	r2, [pc, #136]	; (8000f68 <HAL_GPIO_Init+0x140>)
 8000ede:	4293      	cmp	r3, r2
 8000ee0:	d01a      	beq.n	8000f18 <HAL_GPIO_Init+0xf0>
 8000ee2:	683b      	ldr	r3, [r7, #0]
 8000ee4:	685b      	ldr	r3, [r3, #4]
 8000ee6:	4a21      	ldr	r2, [pc, #132]	; (8000f6c <HAL_GPIO_Init+0x144>)
 8000ee8:	4293      	cmp	r3, r2
 8000eea:	d015      	beq.n	8000f18 <HAL_GPIO_Init+0xf0>
 8000eec:	683b      	ldr	r3, [r7, #0]
 8000eee:	685b      	ldr	r3, [r3, #4]
 8000ef0:	4a1f      	ldr	r2, [pc, #124]	; (8000f70 <HAL_GPIO_Init+0x148>)
 8000ef2:	4293      	cmp	r3, r2
 8000ef4:	d010      	beq.n	8000f18 <HAL_GPIO_Init+0xf0>
 8000ef6:	683b      	ldr	r3, [r7, #0]
 8000ef8:	685b      	ldr	r3, [r3, #4]
 8000efa:	4a1e      	ldr	r2, [pc, #120]	; (8000f74 <HAL_GPIO_Init+0x14c>)
 8000efc:	4293      	cmp	r3, r2
 8000efe:	d00b      	beq.n	8000f18 <HAL_GPIO_Init+0xf0>
 8000f00:	683b      	ldr	r3, [r7, #0]
 8000f02:	685b      	ldr	r3, [r3, #4]
 8000f04:	2b03      	cmp	r3, #3
 8000f06:	d007      	beq.n	8000f18 <HAL_GPIO_Init+0xf0>
 8000f08:	683b      	ldr	r3, [r7, #0]
 8000f0a:	685b      	ldr	r3, [r3, #4]
 8000f0c:	2b0b      	cmp	r3, #11
 8000f0e:	d003      	beq.n	8000f18 <HAL_GPIO_Init+0xf0>
 8000f10:	21b5      	movs	r1, #181	; 0xb5
 8000f12:	4812      	ldr	r0, [pc, #72]	; (8000f5c <HAL_GPIO_Init+0x134>)
 8000f14:	f006 ffea 	bl	8007eec <assert_failed>
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8000f18:	683b      	ldr	r3, [r7, #0]
 8000f1a:	689b      	ldr	r3, [r3, #8]
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	f000 8200 	beq.w	8001322 <HAL_GPIO_Init+0x4fa>
 8000f22:	683b      	ldr	r3, [r7, #0]
 8000f24:	689b      	ldr	r3, [r3, #8]
 8000f26:	2b01      	cmp	r3, #1
 8000f28:	f000 81fb 	beq.w	8001322 <HAL_GPIO_Init+0x4fa>
 8000f2c:	683b      	ldr	r3, [r7, #0]
 8000f2e:	689b      	ldr	r3, [r3, #8]
 8000f30:	2b02      	cmp	r3, #2
 8000f32:	f000 81f6 	beq.w	8001322 <HAL_GPIO_Init+0x4fa>
 8000f36:	21b6      	movs	r1, #182	; 0xb6
 8000f38:	4808      	ldr	r0, [pc, #32]	; (8000f5c <HAL_GPIO_Init+0x134>)
 8000f3a:	f006 ffd7 	bl	8007eec <assert_failed>

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f3e:	e1f0      	b.n	8001322 <HAL_GPIO_Init+0x4fa>
 8000f40:	48000400 	.word	0x48000400
 8000f44:	48000800 	.word	0x48000800
 8000f48:	48000c00 	.word	0x48000c00
 8000f4c:	48001000 	.word	0x48001000
 8000f50:	48001400 	.word	0x48001400
 8000f54:	48001800 	.word	0x48001800
 8000f58:	48001c00 	.word	0x48001c00
 8000f5c:	08009c98 	.word	0x08009c98
 8000f60:	10110000 	.word	0x10110000
 8000f64:	10210000 	.word	0x10210000
 8000f68:	10310000 	.word	0x10310000
 8000f6c:	10120000 	.word	0x10120000
 8000f70:	10220000 	.word	0x10220000
 8000f74:	10320000 	.word	0x10320000
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000f78:	683b      	ldr	r3, [r7, #0]
 8000f7a:	681a      	ldr	r2, [r3, #0]
 8000f7c:	2101      	movs	r1, #1
 8000f7e:	697b      	ldr	r3, [r7, #20]
 8000f80:	fa01 f303 	lsl.w	r3, r1, r3
 8000f84:	4013      	ands	r3, r2
 8000f86:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	f000 81c6 	beq.w	800131c <HAL_GPIO_Init+0x4f4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f90:	683b      	ldr	r3, [r7, #0]
 8000f92:	685b      	ldr	r3, [r3, #4]
 8000f94:	2b02      	cmp	r3, #2
 8000f96:	d003      	beq.n	8000fa0 <HAL_GPIO_Init+0x178>
 8000f98:	683b      	ldr	r3, [r7, #0]
 8000f9a:	685b      	ldr	r3, [r3, #4]
 8000f9c:	2b12      	cmp	r3, #18
 8000f9e:	d14f      	bne.n	8001040 <HAL_GPIO_Init+0x218>
      {
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000fa6:	d01f      	beq.n	8000fe8 <HAL_GPIO_Init+0x1c0>
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	4aa0      	ldr	r2, [pc, #640]	; (800122c <HAL_GPIO_Init+0x404>)
 8000fac:	4293      	cmp	r3, r2
 8000fae:	d01b      	beq.n	8000fe8 <HAL_GPIO_Init+0x1c0>
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	4a9f      	ldr	r2, [pc, #636]	; (8001230 <HAL_GPIO_Init+0x408>)
 8000fb4:	4293      	cmp	r3, r2
 8000fb6:	d017      	beq.n	8000fe8 <HAL_GPIO_Init+0x1c0>
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	4a9e      	ldr	r2, [pc, #632]	; (8001234 <HAL_GPIO_Init+0x40c>)
 8000fbc:	4293      	cmp	r3, r2
 8000fbe:	d013      	beq.n	8000fe8 <HAL_GPIO_Init+0x1c0>
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	4a9d      	ldr	r2, [pc, #628]	; (8001238 <HAL_GPIO_Init+0x410>)
 8000fc4:	4293      	cmp	r3, r2
 8000fc6:	d00f      	beq.n	8000fe8 <HAL_GPIO_Init+0x1c0>
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	4a9c      	ldr	r2, [pc, #624]	; (800123c <HAL_GPIO_Init+0x414>)
 8000fcc:	4293      	cmp	r3, r2
 8000fce:	d00b      	beq.n	8000fe8 <HAL_GPIO_Init+0x1c0>
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	4a9b      	ldr	r2, [pc, #620]	; (8001240 <HAL_GPIO_Init+0x418>)
 8000fd4:	4293      	cmp	r3, r2
 8000fd6:	d007      	beq.n	8000fe8 <HAL_GPIO_Init+0x1c0>
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	4a9a      	ldr	r2, [pc, #616]	; (8001244 <HAL_GPIO_Init+0x41c>)
 8000fdc:	4293      	cmp	r3, r2
 8000fde:	d003      	beq.n	8000fe8 <HAL_GPIO_Init+0x1c0>
 8000fe0:	21c5      	movs	r1, #197	; 0xc5
 8000fe2:	4899      	ldr	r0, [pc, #612]	; (8001248 <HAL_GPIO_Init+0x420>)
 8000fe4:	f006 ff82 	bl	8007eec <assert_failed>
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	691b      	ldr	r3, [r3, #16]
 8000fec:	2b0f      	cmp	r3, #15
 8000fee:	d903      	bls.n	8000ff8 <HAL_GPIO_Init+0x1d0>
 8000ff0:	21c6      	movs	r1, #198	; 0xc6
 8000ff2:	4895      	ldr	r0, [pc, #596]	; (8001248 <HAL_GPIO_Init+0x420>)
 8000ff4:	f006 ff7a 	bl	8007eec <assert_failed>

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000ff8:	697b      	ldr	r3, [r7, #20]
 8000ffa:	08da      	lsrs	r2, r3, #3
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	3208      	adds	r2, #8
 8001000:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001004:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001006:	697b      	ldr	r3, [r7, #20]
 8001008:	f003 0307 	and.w	r3, r3, #7
 800100c:	009b      	lsls	r3, r3, #2
 800100e:	220f      	movs	r2, #15
 8001010:	fa02 f303 	lsl.w	r3, r2, r3
 8001014:	43db      	mvns	r3, r3
 8001016:	693a      	ldr	r2, [r7, #16]
 8001018:	4013      	ands	r3, r2
 800101a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	691a      	ldr	r2, [r3, #16]
 8001020:	697b      	ldr	r3, [r7, #20]
 8001022:	f003 0307 	and.w	r3, r3, #7
 8001026:	009b      	lsls	r3, r3, #2
 8001028:	fa02 f303 	lsl.w	r3, r2, r3
 800102c:	693a      	ldr	r2, [r7, #16]
 800102e:	4313      	orrs	r3, r2
 8001030:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001032:	697b      	ldr	r3, [r7, #20]
 8001034:	08da      	lsrs	r2, r3, #3
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	3208      	adds	r2, #8
 800103a:	6939      	ldr	r1, [r7, #16]
 800103c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001046:	697b      	ldr	r3, [r7, #20]
 8001048:	005b      	lsls	r3, r3, #1
 800104a:	2203      	movs	r2, #3
 800104c:	fa02 f303 	lsl.w	r3, r2, r3
 8001050:	43db      	mvns	r3, r3
 8001052:	693a      	ldr	r2, [r7, #16]
 8001054:	4013      	ands	r3, r2
 8001056:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001058:	683b      	ldr	r3, [r7, #0]
 800105a:	685b      	ldr	r3, [r3, #4]
 800105c:	f003 0203 	and.w	r2, r3, #3
 8001060:	697b      	ldr	r3, [r7, #20]
 8001062:	005b      	lsls	r3, r3, #1
 8001064:	fa02 f303 	lsl.w	r3, r2, r3
 8001068:	693a      	ldr	r2, [r7, #16]
 800106a:	4313      	orrs	r3, r2
 800106c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	693a      	ldr	r2, [r7, #16]
 8001072:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001074:	683b      	ldr	r3, [r7, #0]
 8001076:	685b      	ldr	r3, [r3, #4]
 8001078:	2b01      	cmp	r3, #1
 800107a:	d00b      	beq.n	8001094 <HAL_GPIO_Init+0x26c>
 800107c:	683b      	ldr	r3, [r7, #0]
 800107e:	685b      	ldr	r3, [r3, #4]
 8001080:	2b02      	cmp	r3, #2
 8001082:	d007      	beq.n	8001094 <HAL_GPIO_Init+0x26c>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001088:	2b11      	cmp	r3, #17
 800108a:	d003      	beq.n	8001094 <HAL_GPIO_Init+0x26c>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	685b      	ldr	r3, [r3, #4]
 8001090:	2b12      	cmp	r3, #18
 8001092:	d144      	bne.n	800111e <HAL_GPIO_Init+0x2f6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	68db      	ldr	r3, [r3, #12]
 8001098:	2b00      	cmp	r3, #0
 800109a:	d00f      	beq.n	80010bc <HAL_GPIO_Init+0x294>
 800109c:	683b      	ldr	r3, [r7, #0]
 800109e:	68db      	ldr	r3, [r3, #12]
 80010a0:	2b01      	cmp	r3, #1
 80010a2:	d00b      	beq.n	80010bc <HAL_GPIO_Init+0x294>
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	68db      	ldr	r3, [r3, #12]
 80010a8:	2b02      	cmp	r3, #2
 80010aa:	d007      	beq.n	80010bc <HAL_GPIO_Init+0x294>
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	68db      	ldr	r3, [r3, #12]
 80010b0:	2b03      	cmp	r3, #3
 80010b2:	d003      	beq.n	80010bc <HAL_GPIO_Init+0x294>
 80010b4:	21da      	movs	r1, #218	; 0xda
 80010b6:	4864      	ldr	r0, [pc, #400]	; (8001248 <HAL_GPIO_Init+0x420>)
 80010b8:	f006 ff18 	bl	8007eec <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	689b      	ldr	r3, [r3, #8]
 80010c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80010c2:	697b      	ldr	r3, [r7, #20]
 80010c4:	005b      	lsls	r3, r3, #1
 80010c6:	2203      	movs	r2, #3
 80010c8:	fa02 f303 	lsl.w	r3, r2, r3
 80010cc:	43db      	mvns	r3, r3
 80010ce:	693a      	ldr	r2, [r7, #16]
 80010d0:	4013      	ands	r3, r2
 80010d2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80010d4:	683b      	ldr	r3, [r7, #0]
 80010d6:	68da      	ldr	r2, [r3, #12]
 80010d8:	697b      	ldr	r3, [r7, #20]
 80010da:	005b      	lsls	r3, r3, #1
 80010dc:	fa02 f303 	lsl.w	r3, r2, r3
 80010e0:	693a      	ldr	r2, [r7, #16]
 80010e2:	4313      	orrs	r3, r2
 80010e4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	693a      	ldr	r2, [r7, #16]
 80010ea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	685b      	ldr	r3, [r3, #4]
 80010f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80010f2:	2201      	movs	r2, #1
 80010f4:	697b      	ldr	r3, [r7, #20]
 80010f6:	fa02 f303 	lsl.w	r3, r2, r3
 80010fa:	43db      	mvns	r3, r3
 80010fc:	693a      	ldr	r2, [r7, #16]
 80010fe:	4013      	ands	r3, r2
 8001100:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001102:	683b      	ldr	r3, [r7, #0]
 8001104:	685b      	ldr	r3, [r3, #4]
 8001106:	091b      	lsrs	r3, r3, #4
 8001108:	f003 0201 	and.w	r2, r3, #1
 800110c:	697b      	ldr	r3, [r7, #20]
 800110e:	fa02 f303 	lsl.w	r3, r2, r3
 8001112:	693a      	ldr	r2, [r7, #16]
 8001114:	4313      	orrs	r3, r2
 8001116:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	693a      	ldr	r2, [r7, #16]
 800111c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800111e:	683b      	ldr	r3, [r7, #0]
 8001120:	685b      	ldr	r3, [r3, #4]
 8001122:	f003 0303 	and.w	r3, r3, #3
 8001126:	2b03      	cmp	r3, #3
 8001128:	d118      	bne.n	800115c <HAL_GPIO_Init+0x334>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800112e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001130:	2201      	movs	r2, #1
 8001132:	697b      	ldr	r3, [r7, #20]
 8001134:	fa02 f303 	lsl.w	r3, r2, r3
 8001138:	43db      	mvns	r3, r3
 800113a:	693a      	ldr	r2, [r7, #16]
 800113c:	4013      	ands	r3, r2
 800113e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	685b      	ldr	r3, [r3, #4]
 8001144:	08db      	lsrs	r3, r3, #3
 8001146:	f003 0201 	and.w	r2, r3, #1
 800114a:	697b      	ldr	r3, [r7, #20]
 800114c:	fa02 f303 	lsl.w	r3, r2, r3
 8001150:	693a      	ldr	r2, [r7, #16]
 8001152:	4313      	orrs	r3, r2
 8001154:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	693a      	ldr	r2, [r7, #16]
 800115a:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	68db      	ldr	r3, [r3, #12]
 8001160:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001162:	697b      	ldr	r3, [r7, #20]
 8001164:	005b      	lsls	r3, r3, #1
 8001166:	2203      	movs	r2, #3
 8001168:	fa02 f303 	lsl.w	r3, r2, r3
 800116c:	43db      	mvns	r3, r3
 800116e:	693a      	ldr	r2, [r7, #16]
 8001170:	4013      	ands	r3, r2
 8001172:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	689a      	ldr	r2, [r3, #8]
 8001178:	697b      	ldr	r3, [r7, #20]
 800117a:	005b      	lsls	r3, r3, #1
 800117c:	fa02 f303 	lsl.w	r3, r2, r3
 8001180:	693a      	ldr	r2, [r7, #16]
 8001182:	4313      	orrs	r3, r2
 8001184:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	693a      	ldr	r2, [r7, #16]
 800118a:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	685b      	ldr	r3, [r3, #4]
 8001190:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001194:	2b00      	cmp	r3, #0
 8001196:	f000 80c1 	beq.w	800131c <HAL_GPIO_Init+0x4f4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800119a:	4b2c      	ldr	r3, [pc, #176]	; (800124c <HAL_GPIO_Init+0x424>)
 800119c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800119e:	4a2b      	ldr	r2, [pc, #172]	; (800124c <HAL_GPIO_Init+0x424>)
 80011a0:	f043 0301 	orr.w	r3, r3, #1
 80011a4:	6613      	str	r3, [r2, #96]	; 0x60
 80011a6:	4b29      	ldr	r3, [pc, #164]	; (800124c <HAL_GPIO_Init+0x424>)
 80011a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011aa:	f003 0301 	and.w	r3, r3, #1
 80011ae:	60bb      	str	r3, [r7, #8]
 80011b0:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80011b2:	4a27      	ldr	r2, [pc, #156]	; (8001250 <HAL_GPIO_Init+0x428>)
 80011b4:	697b      	ldr	r3, [r7, #20]
 80011b6:	089b      	lsrs	r3, r3, #2
 80011b8:	3302      	adds	r3, #2
 80011ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011be:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80011c0:	697b      	ldr	r3, [r7, #20]
 80011c2:	f003 0303 	and.w	r3, r3, #3
 80011c6:	009b      	lsls	r3, r3, #2
 80011c8:	220f      	movs	r2, #15
 80011ca:	fa02 f303 	lsl.w	r3, r2, r3
 80011ce:	43db      	mvns	r3, r3
 80011d0:	693a      	ldr	r2, [r7, #16]
 80011d2:	4013      	ands	r3, r2
 80011d4:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80011dc:	d03a      	beq.n	8001254 <HAL_GPIO_Init+0x42c>
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	4a12      	ldr	r2, [pc, #72]	; (800122c <HAL_GPIO_Init+0x404>)
 80011e2:	4293      	cmp	r3, r2
 80011e4:	d01f      	beq.n	8001226 <HAL_GPIO_Init+0x3fe>
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	4a11      	ldr	r2, [pc, #68]	; (8001230 <HAL_GPIO_Init+0x408>)
 80011ea:	4293      	cmp	r3, r2
 80011ec:	d019      	beq.n	8001222 <HAL_GPIO_Init+0x3fa>
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	4a10      	ldr	r2, [pc, #64]	; (8001234 <HAL_GPIO_Init+0x40c>)
 80011f2:	4293      	cmp	r3, r2
 80011f4:	d013      	beq.n	800121e <HAL_GPIO_Init+0x3f6>
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	4a0f      	ldr	r2, [pc, #60]	; (8001238 <HAL_GPIO_Init+0x410>)
 80011fa:	4293      	cmp	r3, r2
 80011fc:	d00d      	beq.n	800121a <HAL_GPIO_Init+0x3f2>
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	4a0e      	ldr	r2, [pc, #56]	; (800123c <HAL_GPIO_Init+0x414>)
 8001202:	4293      	cmp	r3, r2
 8001204:	d007      	beq.n	8001216 <HAL_GPIO_Init+0x3ee>
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	4a0d      	ldr	r2, [pc, #52]	; (8001240 <HAL_GPIO_Init+0x418>)
 800120a:	4293      	cmp	r3, r2
 800120c:	d101      	bne.n	8001212 <HAL_GPIO_Init+0x3ea>
 800120e:	2306      	movs	r3, #6
 8001210:	e021      	b.n	8001256 <HAL_GPIO_Init+0x42e>
 8001212:	2307      	movs	r3, #7
 8001214:	e01f      	b.n	8001256 <HAL_GPIO_Init+0x42e>
 8001216:	2305      	movs	r3, #5
 8001218:	e01d      	b.n	8001256 <HAL_GPIO_Init+0x42e>
 800121a:	2304      	movs	r3, #4
 800121c:	e01b      	b.n	8001256 <HAL_GPIO_Init+0x42e>
 800121e:	2303      	movs	r3, #3
 8001220:	e019      	b.n	8001256 <HAL_GPIO_Init+0x42e>
 8001222:	2302      	movs	r3, #2
 8001224:	e017      	b.n	8001256 <HAL_GPIO_Init+0x42e>
 8001226:	2301      	movs	r3, #1
 8001228:	e015      	b.n	8001256 <HAL_GPIO_Init+0x42e>
 800122a:	bf00      	nop
 800122c:	48000400 	.word	0x48000400
 8001230:	48000800 	.word	0x48000800
 8001234:	48000c00 	.word	0x48000c00
 8001238:	48001000 	.word	0x48001000
 800123c:	48001400 	.word	0x48001400
 8001240:	48001800 	.word	0x48001800
 8001244:	48001c00 	.word	0x48001c00
 8001248:	08009c98 	.word	0x08009c98
 800124c:	40021000 	.word	0x40021000
 8001250:	40010000 	.word	0x40010000
 8001254:	2300      	movs	r3, #0
 8001256:	697a      	ldr	r2, [r7, #20]
 8001258:	f002 0203 	and.w	r2, r2, #3
 800125c:	0092      	lsls	r2, r2, #2
 800125e:	4093      	lsls	r3, r2
 8001260:	693a      	ldr	r2, [r7, #16]
 8001262:	4313      	orrs	r3, r2
 8001264:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001266:	4935      	ldr	r1, [pc, #212]	; (800133c <HAL_GPIO_Init+0x514>)
 8001268:	697b      	ldr	r3, [r7, #20]
 800126a:	089b      	lsrs	r3, r3, #2
 800126c:	3302      	adds	r3, #2
 800126e:	693a      	ldr	r2, [r7, #16]
 8001270:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001274:	4b32      	ldr	r3, [pc, #200]	; (8001340 <HAL_GPIO_Init+0x518>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	43db      	mvns	r3, r3
 800127e:	693a      	ldr	r2, [r7, #16]
 8001280:	4013      	ands	r3, r2
 8001282:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	685b      	ldr	r3, [r3, #4]
 8001288:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800128c:	2b00      	cmp	r3, #0
 800128e:	d003      	beq.n	8001298 <HAL_GPIO_Init+0x470>
        {
          temp |= iocurrent;
 8001290:	693a      	ldr	r2, [r7, #16]
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	4313      	orrs	r3, r2
 8001296:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001298:	4a29      	ldr	r2, [pc, #164]	; (8001340 <HAL_GPIO_Init+0x518>)
 800129a:	693b      	ldr	r3, [r7, #16]
 800129c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800129e:	4b28      	ldr	r3, [pc, #160]	; (8001340 <HAL_GPIO_Init+0x518>)
 80012a0:	685b      	ldr	r3, [r3, #4]
 80012a2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	43db      	mvns	r3, r3
 80012a8:	693a      	ldr	r2, [r7, #16]
 80012aa:	4013      	ands	r3, r2
 80012ac:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	685b      	ldr	r3, [r3, #4]
 80012b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d003      	beq.n	80012c2 <HAL_GPIO_Init+0x49a>
        {
          temp |= iocurrent;
 80012ba:	693a      	ldr	r2, [r7, #16]
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	4313      	orrs	r3, r2
 80012c0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80012c2:	4a1f      	ldr	r2, [pc, #124]	; (8001340 <HAL_GPIO_Init+0x518>)
 80012c4:	693b      	ldr	r3, [r7, #16]
 80012c6:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80012c8:	4b1d      	ldr	r3, [pc, #116]	; (8001340 <HAL_GPIO_Init+0x518>)
 80012ca:	689b      	ldr	r3, [r3, #8]
 80012cc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	43db      	mvns	r3, r3
 80012d2:	693a      	ldr	r2, [r7, #16]
 80012d4:	4013      	ands	r3, r2
 80012d6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	685b      	ldr	r3, [r3, #4]
 80012dc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d003      	beq.n	80012ec <HAL_GPIO_Init+0x4c4>
        {
          temp |= iocurrent;
 80012e4:	693a      	ldr	r2, [r7, #16]
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	4313      	orrs	r3, r2
 80012ea:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80012ec:	4a14      	ldr	r2, [pc, #80]	; (8001340 <HAL_GPIO_Init+0x518>)
 80012ee:	693b      	ldr	r3, [r7, #16]
 80012f0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80012f2:	4b13      	ldr	r3, [pc, #76]	; (8001340 <HAL_GPIO_Init+0x518>)
 80012f4:	68db      	ldr	r3, [r3, #12]
 80012f6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	43db      	mvns	r3, r3
 80012fc:	693a      	ldr	r2, [r7, #16]
 80012fe:	4013      	ands	r3, r2
 8001300:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001302:	683b      	ldr	r3, [r7, #0]
 8001304:	685b      	ldr	r3, [r3, #4]
 8001306:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800130a:	2b00      	cmp	r3, #0
 800130c:	d003      	beq.n	8001316 <HAL_GPIO_Init+0x4ee>
        {
          temp |= iocurrent;
 800130e:	693a      	ldr	r2, [r7, #16]
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	4313      	orrs	r3, r2
 8001314:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001316:	4a0a      	ldr	r2, [pc, #40]	; (8001340 <HAL_GPIO_Init+0x518>)
 8001318:	693b      	ldr	r3, [r7, #16]
 800131a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800131c:	697b      	ldr	r3, [r7, #20]
 800131e:	3301      	adds	r3, #1
 8001320:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001322:	683b      	ldr	r3, [r7, #0]
 8001324:	681a      	ldr	r2, [r3, #0]
 8001326:	697b      	ldr	r3, [r7, #20]
 8001328:	fa22 f303 	lsr.w	r3, r2, r3
 800132c:	2b00      	cmp	r3, #0
 800132e:	f47f ae23 	bne.w	8000f78 <HAL_GPIO_Init+0x150>
  }
}
 8001332:	bf00      	nop
 8001334:	3718      	adds	r7, #24
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}
 800133a:	bf00      	nop
 800133c:	40010000 	.word	0x40010000
 8001340:	40010400 	.word	0x40010400

08001344 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001344:	b480      	push	{r7}
 8001346:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001348:	4b04      	ldr	r3, [pc, #16]	; (800135c <HAL_PWREx_GetVoltageRange+0x18>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001350:	4618      	mov	r0, r3
 8001352:	46bd      	mov	sp, r7
 8001354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001358:	4770      	bx	lr
 800135a:	bf00      	nop
 800135c:	40007000 	.word	0x40007000

08001360 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b084      	sub	sp, #16
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800136e:	d007      	beq.n	8001380 <HAL_PWREx_ControlVoltageScaling+0x20>
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001376:	d003      	beq.n	8001380 <HAL_PWREx_ControlVoltageScaling+0x20>
 8001378:	21a8      	movs	r1, #168	; 0xa8
 800137a:	4826      	ldr	r0, [pc, #152]	; (8001414 <HAL_PWREx_ControlVoltageScaling+0xb4>)
 800137c:	f006 fdb6 	bl	8007eec <assert_failed>
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001386:	d130      	bne.n	80013ea <HAL_PWREx_ControlVoltageScaling+0x8a>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001388:	4b23      	ldr	r3, [pc, #140]	; (8001418 <HAL_PWREx_ControlVoltageScaling+0xb8>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001390:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001394:	d038      	beq.n	8001408 <HAL_PWREx_ControlVoltageScaling+0xa8>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001396:	4b20      	ldr	r3, [pc, #128]	; (8001418 <HAL_PWREx_ControlVoltageScaling+0xb8>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800139e:	4a1e      	ldr	r2, [pc, #120]	; (8001418 <HAL_PWREx_ControlVoltageScaling+0xb8>)
 80013a0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80013a4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80013a6:	4b1d      	ldr	r3, [pc, #116]	; (800141c <HAL_PWREx_ControlVoltageScaling+0xbc>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	2232      	movs	r2, #50	; 0x32
 80013ac:	fb02 f303 	mul.w	r3, r2, r3
 80013b0:	4a1b      	ldr	r2, [pc, #108]	; (8001420 <HAL_PWREx_ControlVoltageScaling+0xc0>)
 80013b2:	fba2 2303 	umull	r2, r3, r2, r3
 80013b6:	0c9b      	lsrs	r3, r3, #18
 80013b8:	3301      	adds	r3, #1
 80013ba:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80013bc:	e002      	b.n	80013c4 <HAL_PWREx_ControlVoltageScaling+0x64>
      {
        wait_loop_index--;
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	3b01      	subs	r3, #1
 80013c2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80013c4:	4b14      	ldr	r3, [pc, #80]	; (8001418 <HAL_PWREx_ControlVoltageScaling+0xb8>)
 80013c6:	695b      	ldr	r3, [r3, #20]
 80013c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80013d0:	d102      	bne.n	80013d8 <HAL_PWREx_ControlVoltageScaling+0x78>
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d1f2      	bne.n	80013be <HAL_PWREx_ControlVoltageScaling+0x5e>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80013d8:	4b0f      	ldr	r3, [pc, #60]	; (8001418 <HAL_PWREx_ControlVoltageScaling+0xb8>)
 80013da:	695b      	ldr	r3, [r3, #20]
 80013dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80013e4:	d110      	bne.n	8001408 <HAL_PWREx_ControlVoltageScaling+0xa8>
      {
        return HAL_TIMEOUT;
 80013e6:	2303      	movs	r3, #3
 80013e8:	e00f      	b.n	800140a <HAL_PWREx_ControlVoltageScaling+0xaa>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80013ea:	4b0b      	ldr	r3, [pc, #44]	; (8001418 <HAL_PWREx_ControlVoltageScaling+0xb8>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80013f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80013f6:	d007      	beq.n	8001408 <HAL_PWREx_ControlVoltageScaling+0xa8>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80013f8:	4b07      	ldr	r3, [pc, #28]	; (8001418 <HAL_PWREx_ControlVoltageScaling+0xb8>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001400:	4a05      	ldr	r2, [pc, #20]	; (8001418 <HAL_PWREx_ControlVoltageScaling+0xb8>)
 8001402:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001406:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001408:	2300      	movs	r3, #0
}
 800140a:	4618      	mov	r0, r3
 800140c:	3710      	adds	r7, #16
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}
 8001412:	bf00      	nop
 8001414:	08009cd4 	.word	0x08009cd4
 8001418:	40007000 	.word	0x40007000
 800141c:	2000000c 	.word	0x2000000c
 8001420:	431bde83 	.word	0x431bde83

08001424 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b088      	sub	sp, #32
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	2b00      	cmp	r3, #0
 8001430:	d102      	bne.n	8001438 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001432:	2301      	movs	r3, #1
 8001434:	f000 bcdc 	b.w	8001df0 <HAL_RCC_OscConfig+0x9cc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	2b00      	cmp	r3, #0
 800143e:	d022      	beq.n	8001486 <HAL_RCC_OscConfig+0x62>
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	f003 0301 	and.w	r3, r3, #1
 8001448:	2b00      	cmp	r3, #0
 800144a:	d11c      	bne.n	8001486 <HAL_RCC_OscConfig+0x62>
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	f003 0302 	and.w	r3, r3, #2
 8001454:	2b00      	cmp	r3, #0
 8001456:	d116      	bne.n	8001486 <HAL_RCC_OscConfig+0x62>
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	f003 0310 	and.w	r3, r3, #16
 8001460:	2b00      	cmp	r3, #0
 8001462:	d110      	bne.n	8001486 <HAL_RCC_OscConfig+0x62>
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	f003 0308 	and.w	r3, r3, #8
 800146c:	2b00      	cmp	r3, #0
 800146e:	d10a      	bne.n	8001486 <HAL_RCC_OscConfig+0x62>
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	f003 0304 	and.w	r3, r3, #4
 8001478:	2b00      	cmp	r3, #0
 800147a:	d104      	bne.n	8001486 <HAL_RCC_OscConfig+0x62>
 800147c:	f44f 71cf 	mov.w	r1, #414	; 0x19e
 8001480:	48a0      	ldr	r0, [pc, #640]	; (8001704 <HAL_RCC_OscConfig+0x2e0>)
 8001482:	f006 fd33 	bl	8007eec <assert_failed>

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001486:	4ba0      	ldr	r3, [pc, #640]	; (8001708 <HAL_RCC_OscConfig+0x2e4>)
 8001488:	689b      	ldr	r3, [r3, #8]
 800148a:	f003 030c 	and.w	r3, r3, #12
 800148e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001490:	4b9d      	ldr	r3, [pc, #628]	; (8001708 <HAL_RCC_OscConfig+0x2e4>)
 8001492:	68db      	ldr	r3, [r3, #12]
 8001494:	f003 0303 	and.w	r3, r3, #3
 8001498:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f003 0310 	and.w	r3, r3, #16
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	f000 8139 	beq.w	800171a <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	699b      	ldr	r3, [r3, #24]
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d008      	beq.n	80014c2 <HAL_RCC_OscConfig+0x9e>
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	699b      	ldr	r3, [r3, #24]
 80014b4:	2b01      	cmp	r3, #1
 80014b6:	d004      	beq.n	80014c2 <HAL_RCC_OscConfig+0x9e>
 80014b8:	f240 11a7 	movw	r1, #423	; 0x1a7
 80014bc:	4891      	ldr	r0, [pc, #580]	; (8001704 <HAL_RCC_OscConfig+0x2e0>)
 80014be:	f006 fd15 	bl	8007eec <assert_failed>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	69db      	ldr	r3, [r3, #28]
 80014c6:	2bff      	cmp	r3, #255	; 0xff
 80014c8:	d904      	bls.n	80014d4 <HAL_RCC_OscConfig+0xb0>
 80014ca:	f44f 71d4 	mov.w	r1, #424	; 0x1a8
 80014ce:	488d      	ldr	r0, [pc, #564]	; (8001704 <HAL_RCC_OscConfig+0x2e0>)
 80014d0:	f006 fd0c 	bl	8007eec <assert_failed>
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	6a1b      	ldr	r3, [r3, #32]
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d030      	beq.n	800153e <HAL_RCC_OscConfig+0x11a>
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	6a1b      	ldr	r3, [r3, #32]
 80014e0:	2b10      	cmp	r3, #16
 80014e2:	d02c      	beq.n	800153e <HAL_RCC_OscConfig+0x11a>
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	6a1b      	ldr	r3, [r3, #32]
 80014e8:	2b20      	cmp	r3, #32
 80014ea:	d028      	beq.n	800153e <HAL_RCC_OscConfig+0x11a>
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	6a1b      	ldr	r3, [r3, #32]
 80014f0:	2b30      	cmp	r3, #48	; 0x30
 80014f2:	d024      	beq.n	800153e <HAL_RCC_OscConfig+0x11a>
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	6a1b      	ldr	r3, [r3, #32]
 80014f8:	2b40      	cmp	r3, #64	; 0x40
 80014fa:	d020      	beq.n	800153e <HAL_RCC_OscConfig+0x11a>
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	6a1b      	ldr	r3, [r3, #32]
 8001500:	2b50      	cmp	r3, #80	; 0x50
 8001502:	d01c      	beq.n	800153e <HAL_RCC_OscConfig+0x11a>
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	6a1b      	ldr	r3, [r3, #32]
 8001508:	2b60      	cmp	r3, #96	; 0x60
 800150a:	d018      	beq.n	800153e <HAL_RCC_OscConfig+0x11a>
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	6a1b      	ldr	r3, [r3, #32]
 8001510:	2b70      	cmp	r3, #112	; 0x70
 8001512:	d014      	beq.n	800153e <HAL_RCC_OscConfig+0x11a>
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	6a1b      	ldr	r3, [r3, #32]
 8001518:	2b80      	cmp	r3, #128	; 0x80
 800151a:	d010      	beq.n	800153e <HAL_RCC_OscConfig+0x11a>
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	6a1b      	ldr	r3, [r3, #32]
 8001520:	2b90      	cmp	r3, #144	; 0x90
 8001522:	d00c      	beq.n	800153e <HAL_RCC_OscConfig+0x11a>
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	6a1b      	ldr	r3, [r3, #32]
 8001528:	2ba0      	cmp	r3, #160	; 0xa0
 800152a:	d008      	beq.n	800153e <HAL_RCC_OscConfig+0x11a>
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	6a1b      	ldr	r3, [r3, #32]
 8001530:	2bb0      	cmp	r3, #176	; 0xb0
 8001532:	d004      	beq.n	800153e <HAL_RCC_OscConfig+0x11a>
 8001534:	f240 11a9 	movw	r1, #425	; 0x1a9
 8001538:	4872      	ldr	r0, [pc, #456]	; (8001704 <HAL_RCC_OscConfig+0x2e0>)
 800153a:	f006 fcd7 	bl	8007eec <assert_failed>

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800153e:	69bb      	ldr	r3, [r7, #24]
 8001540:	2b00      	cmp	r3, #0
 8001542:	d007      	beq.n	8001554 <HAL_RCC_OscConfig+0x130>
 8001544:	69bb      	ldr	r3, [r7, #24]
 8001546:	2b0c      	cmp	r3, #12
 8001548:	f040 808a 	bne.w	8001660 <HAL_RCC_OscConfig+0x23c>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800154c:	697b      	ldr	r3, [r7, #20]
 800154e:	2b01      	cmp	r3, #1
 8001550:	f040 8086 	bne.w	8001660 <HAL_RCC_OscConfig+0x23c>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001554:	4b6c      	ldr	r3, [pc, #432]	; (8001708 <HAL_RCC_OscConfig+0x2e4>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	f003 0302 	and.w	r3, r3, #2
 800155c:	2b00      	cmp	r3, #0
 800155e:	d006      	beq.n	800156e <HAL_RCC_OscConfig+0x14a>
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	699b      	ldr	r3, [r3, #24]
 8001564:	2b00      	cmp	r3, #0
 8001566:	d102      	bne.n	800156e <HAL_RCC_OscConfig+0x14a>
      {
        return HAL_ERROR;
 8001568:	2301      	movs	r3, #1
 800156a:	f000 bc41 	b.w	8001df0 <HAL_RCC_OscConfig+0x9cc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	6a1a      	ldr	r2, [r3, #32]
 8001572:	4b65      	ldr	r3, [pc, #404]	; (8001708 <HAL_RCC_OscConfig+0x2e4>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f003 0308 	and.w	r3, r3, #8
 800157a:	2b00      	cmp	r3, #0
 800157c:	d004      	beq.n	8001588 <HAL_RCC_OscConfig+0x164>
 800157e:	4b62      	ldr	r3, [pc, #392]	; (8001708 <HAL_RCC_OscConfig+0x2e4>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001586:	e005      	b.n	8001594 <HAL_RCC_OscConfig+0x170>
 8001588:	4b5f      	ldr	r3, [pc, #380]	; (8001708 <HAL_RCC_OscConfig+0x2e4>)
 800158a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800158e:	091b      	lsrs	r3, r3, #4
 8001590:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001594:	4293      	cmp	r3, r2
 8001596:	d224      	bcs.n	80015e2 <HAL_RCC_OscConfig+0x1be>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	6a1b      	ldr	r3, [r3, #32]
 800159c:	4618      	mov	r0, r3
 800159e:	f000 feb5 	bl	800230c <RCC_SetFlashLatencyFromMSIRange>
 80015a2:	4603      	mov	r3, r0
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d002      	beq.n	80015ae <HAL_RCC_OscConfig+0x18a>
          {
            return HAL_ERROR;
 80015a8:	2301      	movs	r3, #1
 80015aa:	f000 bc21 	b.w	8001df0 <HAL_RCC_OscConfig+0x9cc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80015ae:	4b56      	ldr	r3, [pc, #344]	; (8001708 <HAL_RCC_OscConfig+0x2e4>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	4a55      	ldr	r2, [pc, #340]	; (8001708 <HAL_RCC_OscConfig+0x2e4>)
 80015b4:	f043 0308 	orr.w	r3, r3, #8
 80015b8:	6013      	str	r3, [r2, #0]
 80015ba:	4b53      	ldr	r3, [pc, #332]	; (8001708 <HAL_RCC_OscConfig+0x2e4>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	6a1b      	ldr	r3, [r3, #32]
 80015c6:	4950      	ldr	r1, [pc, #320]	; (8001708 <HAL_RCC_OscConfig+0x2e4>)
 80015c8:	4313      	orrs	r3, r2
 80015ca:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80015cc:	4b4e      	ldr	r3, [pc, #312]	; (8001708 <HAL_RCC_OscConfig+0x2e4>)
 80015ce:	685b      	ldr	r3, [r3, #4]
 80015d0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	69db      	ldr	r3, [r3, #28]
 80015d8:	021b      	lsls	r3, r3, #8
 80015da:	494b      	ldr	r1, [pc, #300]	; (8001708 <HAL_RCC_OscConfig+0x2e4>)
 80015dc:	4313      	orrs	r3, r2
 80015de:	604b      	str	r3, [r1, #4]
 80015e0:	e022      	b.n	8001628 <HAL_RCC_OscConfig+0x204>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80015e2:	4b49      	ldr	r3, [pc, #292]	; (8001708 <HAL_RCC_OscConfig+0x2e4>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	4a48      	ldr	r2, [pc, #288]	; (8001708 <HAL_RCC_OscConfig+0x2e4>)
 80015e8:	f043 0308 	orr.w	r3, r3, #8
 80015ec:	6013      	str	r3, [r2, #0]
 80015ee:	4b46      	ldr	r3, [pc, #280]	; (8001708 <HAL_RCC_OscConfig+0x2e4>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	6a1b      	ldr	r3, [r3, #32]
 80015fa:	4943      	ldr	r1, [pc, #268]	; (8001708 <HAL_RCC_OscConfig+0x2e4>)
 80015fc:	4313      	orrs	r3, r2
 80015fe:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001600:	4b41      	ldr	r3, [pc, #260]	; (8001708 <HAL_RCC_OscConfig+0x2e4>)
 8001602:	685b      	ldr	r3, [r3, #4]
 8001604:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	69db      	ldr	r3, [r3, #28]
 800160c:	021b      	lsls	r3, r3, #8
 800160e:	493e      	ldr	r1, [pc, #248]	; (8001708 <HAL_RCC_OscConfig+0x2e4>)
 8001610:	4313      	orrs	r3, r2
 8001612:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	6a1b      	ldr	r3, [r3, #32]
 8001618:	4618      	mov	r0, r3
 800161a:	f000 fe77 	bl	800230c <RCC_SetFlashLatencyFromMSIRange>
 800161e:	4603      	mov	r3, r0
 8001620:	2b00      	cmp	r3, #0
 8001622:	d001      	beq.n	8001628 <HAL_RCC_OscConfig+0x204>
          {
            return HAL_ERROR;
 8001624:	2301      	movs	r3, #1
 8001626:	e3e3      	b.n	8001df0 <HAL_RCC_OscConfig+0x9cc>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001628:	f000 fd6c 	bl	8002104 <HAL_RCC_GetSysClockFreq>
 800162c:	4601      	mov	r1, r0
 800162e:	4b36      	ldr	r3, [pc, #216]	; (8001708 <HAL_RCC_OscConfig+0x2e4>)
 8001630:	689b      	ldr	r3, [r3, #8]
 8001632:	091b      	lsrs	r3, r3, #4
 8001634:	f003 030f 	and.w	r3, r3, #15
 8001638:	4a34      	ldr	r2, [pc, #208]	; (800170c <HAL_RCC_OscConfig+0x2e8>)
 800163a:	5cd3      	ldrb	r3, [r2, r3]
 800163c:	f003 031f 	and.w	r3, r3, #31
 8001640:	fa21 f303 	lsr.w	r3, r1, r3
 8001644:	4a32      	ldr	r2, [pc, #200]	; (8001710 <HAL_RCC_OscConfig+0x2ec>)
 8001646:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001648:	4b32      	ldr	r3, [pc, #200]	; (8001714 <HAL_RCC_OscConfig+0x2f0>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	4618      	mov	r0, r3
 800164e:	f002 f98f 	bl	8003970 <HAL_InitTick>
 8001652:	4603      	mov	r3, r0
 8001654:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001656:	7bfb      	ldrb	r3, [r7, #15]
 8001658:	2b00      	cmp	r3, #0
 800165a:	d05d      	beq.n	8001718 <HAL_RCC_OscConfig+0x2f4>
        {
          return status;
 800165c:	7bfb      	ldrb	r3, [r7, #15]
 800165e:	e3c7      	b.n	8001df0 <HAL_RCC_OscConfig+0x9cc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	699b      	ldr	r3, [r3, #24]
 8001664:	2b00      	cmp	r3, #0
 8001666:	d032      	beq.n	80016ce <HAL_RCC_OscConfig+0x2aa>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001668:	4b27      	ldr	r3, [pc, #156]	; (8001708 <HAL_RCC_OscConfig+0x2e4>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	4a26      	ldr	r2, [pc, #152]	; (8001708 <HAL_RCC_OscConfig+0x2e4>)
 800166e:	f043 0301 	orr.w	r3, r3, #1
 8001672:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001674:	f7fe ffa6 	bl	80005c4 <HAL_GetTick>
 8001678:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800167a:	e008      	b.n	800168e <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800167c:	f7fe ffa2 	bl	80005c4 <HAL_GetTick>
 8001680:	4602      	mov	r2, r0
 8001682:	693b      	ldr	r3, [r7, #16]
 8001684:	1ad3      	subs	r3, r2, r3
 8001686:	2b02      	cmp	r3, #2
 8001688:	d901      	bls.n	800168e <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 800168a:	2303      	movs	r3, #3
 800168c:	e3b0      	b.n	8001df0 <HAL_RCC_OscConfig+0x9cc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800168e:	4b1e      	ldr	r3, [pc, #120]	; (8001708 <HAL_RCC_OscConfig+0x2e4>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f003 0302 	and.w	r3, r3, #2
 8001696:	2b00      	cmp	r3, #0
 8001698:	d0f0      	beq.n	800167c <HAL_RCC_OscConfig+0x258>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800169a:	4b1b      	ldr	r3, [pc, #108]	; (8001708 <HAL_RCC_OscConfig+0x2e4>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	4a1a      	ldr	r2, [pc, #104]	; (8001708 <HAL_RCC_OscConfig+0x2e4>)
 80016a0:	f043 0308 	orr.w	r3, r3, #8
 80016a4:	6013      	str	r3, [r2, #0]
 80016a6:	4b18      	ldr	r3, [pc, #96]	; (8001708 <HAL_RCC_OscConfig+0x2e4>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	6a1b      	ldr	r3, [r3, #32]
 80016b2:	4915      	ldr	r1, [pc, #84]	; (8001708 <HAL_RCC_OscConfig+0x2e4>)
 80016b4:	4313      	orrs	r3, r2
 80016b6:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80016b8:	4b13      	ldr	r3, [pc, #76]	; (8001708 <HAL_RCC_OscConfig+0x2e4>)
 80016ba:	685b      	ldr	r3, [r3, #4]
 80016bc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	69db      	ldr	r3, [r3, #28]
 80016c4:	021b      	lsls	r3, r3, #8
 80016c6:	4910      	ldr	r1, [pc, #64]	; (8001708 <HAL_RCC_OscConfig+0x2e4>)
 80016c8:	4313      	orrs	r3, r2
 80016ca:	604b      	str	r3, [r1, #4]
 80016cc:	e025      	b.n	800171a <HAL_RCC_OscConfig+0x2f6>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80016ce:	4b0e      	ldr	r3, [pc, #56]	; (8001708 <HAL_RCC_OscConfig+0x2e4>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	4a0d      	ldr	r2, [pc, #52]	; (8001708 <HAL_RCC_OscConfig+0x2e4>)
 80016d4:	f023 0301 	bic.w	r3, r3, #1
 80016d8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80016da:	f7fe ff73 	bl	80005c4 <HAL_GetTick>
 80016de:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80016e0:	e008      	b.n	80016f4 <HAL_RCC_OscConfig+0x2d0>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80016e2:	f7fe ff6f 	bl	80005c4 <HAL_GetTick>
 80016e6:	4602      	mov	r2, r0
 80016e8:	693b      	ldr	r3, [r7, #16]
 80016ea:	1ad3      	subs	r3, r2, r3
 80016ec:	2b02      	cmp	r3, #2
 80016ee:	d901      	bls.n	80016f4 <HAL_RCC_OscConfig+0x2d0>
          {
            return HAL_TIMEOUT;
 80016f0:	2303      	movs	r3, #3
 80016f2:	e37d      	b.n	8001df0 <HAL_RCC_OscConfig+0x9cc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80016f4:	4b04      	ldr	r3, [pc, #16]	; (8001708 <HAL_RCC_OscConfig+0x2e4>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	f003 0302 	and.w	r3, r3, #2
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d1f0      	bne.n	80016e2 <HAL_RCC_OscConfig+0x2be>
 8001700:	e00b      	b.n	800171a <HAL_RCC_OscConfig+0x2f6>
 8001702:	bf00      	nop
 8001704:	08009d10 	.word	0x08009d10
 8001708:	40021000 	.word	0x40021000
 800170c:	08009fbc 	.word	0x08009fbc
 8001710:	2000000c 	.word	0x2000000c
 8001714:	20000000 	.word	0x20000000
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001718:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f003 0301 	and.w	r3, r3, #1
 8001722:	2b00      	cmp	r3, #0
 8001724:	d07e      	beq.n	8001824 <HAL_RCC_OscConfig+0x400>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	685b      	ldr	r3, [r3, #4]
 800172a:	2b00      	cmp	r3, #0
 800172c:	d00e      	beq.n	800174c <HAL_RCC_OscConfig+0x328>
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	685b      	ldr	r3, [r3, #4]
 8001732:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001736:	d009      	beq.n	800174c <HAL_RCC_OscConfig+0x328>
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	685b      	ldr	r3, [r3, #4]
 800173c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001740:	d004      	beq.n	800174c <HAL_RCC_OscConfig+0x328>
 8001742:	f240 2111 	movw	r1, #529	; 0x211
 8001746:	489b      	ldr	r0, [pc, #620]	; (80019b4 <HAL_RCC_OscConfig+0x590>)
 8001748:	f006 fbd0 	bl	8007eec <assert_failed>

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800174c:	69bb      	ldr	r3, [r7, #24]
 800174e:	2b08      	cmp	r3, #8
 8001750:	d005      	beq.n	800175e <HAL_RCC_OscConfig+0x33a>
 8001752:	69bb      	ldr	r3, [r7, #24]
 8001754:	2b0c      	cmp	r3, #12
 8001756:	d10e      	bne.n	8001776 <HAL_RCC_OscConfig+0x352>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001758:	697b      	ldr	r3, [r7, #20]
 800175a:	2b03      	cmp	r3, #3
 800175c:	d10b      	bne.n	8001776 <HAL_RCC_OscConfig+0x352>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800175e:	4b96      	ldr	r3, [pc, #600]	; (80019b8 <HAL_RCC_OscConfig+0x594>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001766:	2b00      	cmp	r3, #0
 8001768:	d05b      	beq.n	8001822 <HAL_RCC_OscConfig+0x3fe>
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	685b      	ldr	r3, [r3, #4]
 800176e:	2b00      	cmp	r3, #0
 8001770:	d157      	bne.n	8001822 <HAL_RCC_OscConfig+0x3fe>
      {
        return HAL_ERROR;
 8001772:	2301      	movs	r3, #1
 8001774:	e33c      	b.n	8001df0 <HAL_RCC_OscConfig+0x9cc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	685b      	ldr	r3, [r3, #4]
 800177a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800177e:	d106      	bne.n	800178e <HAL_RCC_OscConfig+0x36a>
 8001780:	4b8d      	ldr	r3, [pc, #564]	; (80019b8 <HAL_RCC_OscConfig+0x594>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	4a8c      	ldr	r2, [pc, #560]	; (80019b8 <HAL_RCC_OscConfig+0x594>)
 8001786:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800178a:	6013      	str	r3, [r2, #0]
 800178c:	e01d      	b.n	80017ca <HAL_RCC_OscConfig+0x3a6>
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	685b      	ldr	r3, [r3, #4]
 8001792:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001796:	d10c      	bne.n	80017b2 <HAL_RCC_OscConfig+0x38e>
 8001798:	4b87      	ldr	r3, [pc, #540]	; (80019b8 <HAL_RCC_OscConfig+0x594>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	4a86      	ldr	r2, [pc, #536]	; (80019b8 <HAL_RCC_OscConfig+0x594>)
 800179e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80017a2:	6013      	str	r3, [r2, #0]
 80017a4:	4b84      	ldr	r3, [pc, #528]	; (80019b8 <HAL_RCC_OscConfig+0x594>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	4a83      	ldr	r2, [pc, #524]	; (80019b8 <HAL_RCC_OscConfig+0x594>)
 80017aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017ae:	6013      	str	r3, [r2, #0]
 80017b0:	e00b      	b.n	80017ca <HAL_RCC_OscConfig+0x3a6>
 80017b2:	4b81      	ldr	r3, [pc, #516]	; (80019b8 <HAL_RCC_OscConfig+0x594>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	4a80      	ldr	r2, [pc, #512]	; (80019b8 <HAL_RCC_OscConfig+0x594>)
 80017b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017bc:	6013      	str	r3, [r2, #0]
 80017be:	4b7e      	ldr	r3, [pc, #504]	; (80019b8 <HAL_RCC_OscConfig+0x594>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	4a7d      	ldr	r2, [pc, #500]	; (80019b8 <HAL_RCC_OscConfig+0x594>)
 80017c4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017c8:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	685b      	ldr	r3, [r3, #4]
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d013      	beq.n	80017fa <HAL_RCC_OscConfig+0x3d6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017d2:	f7fe fef7 	bl	80005c4 <HAL_GetTick>
 80017d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80017d8:	e008      	b.n	80017ec <HAL_RCC_OscConfig+0x3c8>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017da:	f7fe fef3 	bl	80005c4 <HAL_GetTick>
 80017de:	4602      	mov	r2, r0
 80017e0:	693b      	ldr	r3, [r7, #16]
 80017e2:	1ad3      	subs	r3, r2, r3
 80017e4:	2b64      	cmp	r3, #100	; 0x64
 80017e6:	d901      	bls.n	80017ec <HAL_RCC_OscConfig+0x3c8>
          {
            return HAL_TIMEOUT;
 80017e8:	2303      	movs	r3, #3
 80017ea:	e301      	b.n	8001df0 <HAL_RCC_OscConfig+0x9cc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80017ec:	4b72      	ldr	r3, [pc, #456]	; (80019b8 <HAL_RCC_OscConfig+0x594>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d0f0      	beq.n	80017da <HAL_RCC_OscConfig+0x3b6>
 80017f8:	e014      	b.n	8001824 <HAL_RCC_OscConfig+0x400>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017fa:	f7fe fee3 	bl	80005c4 <HAL_GetTick>
 80017fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001800:	e008      	b.n	8001814 <HAL_RCC_OscConfig+0x3f0>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001802:	f7fe fedf 	bl	80005c4 <HAL_GetTick>
 8001806:	4602      	mov	r2, r0
 8001808:	693b      	ldr	r3, [r7, #16]
 800180a:	1ad3      	subs	r3, r2, r3
 800180c:	2b64      	cmp	r3, #100	; 0x64
 800180e:	d901      	bls.n	8001814 <HAL_RCC_OscConfig+0x3f0>
          {
            return HAL_TIMEOUT;
 8001810:	2303      	movs	r3, #3
 8001812:	e2ed      	b.n	8001df0 <HAL_RCC_OscConfig+0x9cc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001814:	4b68      	ldr	r3, [pc, #416]	; (80019b8 <HAL_RCC_OscConfig+0x594>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800181c:	2b00      	cmp	r3, #0
 800181e:	d1f0      	bne.n	8001802 <HAL_RCC_OscConfig+0x3de>
 8001820:	e000      	b.n	8001824 <HAL_RCC_OscConfig+0x400>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001822:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	f003 0302 	and.w	r3, r3, #2
 800182c:	2b00      	cmp	r3, #0
 800182e:	d077      	beq.n	8001920 <HAL_RCC_OscConfig+0x4fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	68db      	ldr	r3, [r3, #12]
 8001834:	2b00      	cmp	r3, #0
 8001836:	d009      	beq.n	800184c <HAL_RCC_OscConfig+0x428>
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	68db      	ldr	r3, [r3, #12]
 800183c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001840:	d004      	beq.n	800184c <HAL_RCC_OscConfig+0x428>
 8001842:	f44f 7111 	mov.w	r1, #580	; 0x244
 8001846:	485b      	ldr	r0, [pc, #364]	; (80019b4 <HAL_RCC_OscConfig+0x590>)
 8001848:	f006 fb50 	bl	8007eec <assert_failed>
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	691b      	ldr	r3, [r3, #16]
 8001850:	2b1f      	cmp	r3, #31
 8001852:	d904      	bls.n	800185e <HAL_RCC_OscConfig+0x43a>
 8001854:	f240 2145 	movw	r1, #581	; 0x245
 8001858:	4856      	ldr	r0, [pc, #344]	; (80019b4 <HAL_RCC_OscConfig+0x590>)
 800185a:	f006 fb47 	bl	8007eec <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800185e:	69bb      	ldr	r3, [r7, #24]
 8001860:	2b04      	cmp	r3, #4
 8001862:	d005      	beq.n	8001870 <HAL_RCC_OscConfig+0x44c>
 8001864:	69bb      	ldr	r3, [r7, #24]
 8001866:	2b0c      	cmp	r3, #12
 8001868:	d119      	bne.n	800189e <HAL_RCC_OscConfig+0x47a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800186a:	697b      	ldr	r3, [r7, #20]
 800186c:	2b02      	cmp	r3, #2
 800186e:	d116      	bne.n	800189e <HAL_RCC_OscConfig+0x47a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001870:	4b51      	ldr	r3, [pc, #324]	; (80019b8 <HAL_RCC_OscConfig+0x594>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001878:	2b00      	cmp	r3, #0
 800187a:	d005      	beq.n	8001888 <HAL_RCC_OscConfig+0x464>
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	68db      	ldr	r3, [r3, #12]
 8001880:	2b00      	cmp	r3, #0
 8001882:	d101      	bne.n	8001888 <HAL_RCC_OscConfig+0x464>
      {
        return HAL_ERROR;
 8001884:	2301      	movs	r3, #1
 8001886:	e2b3      	b.n	8001df0 <HAL_RCC_OscConfig+0x9cc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001888:	4b4b      	ldr	r3, [pc, #300]	; (80019b8 <HAL_RCC_OscConfig+0x594>)
 800188a:	685b      	ldr	r3, [r3, #4]
 800188c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	691b      	ldr	r3, [r3, #16]
 8001894:	061b      	lsls	r3, r3, #24
 8001896:	4948      	ldr	r1, [pc, #288]	; (80019b8 <HAL_RCC_OscConfig+0x594>)
 8001898:	4313      	orrs	r3, r2
 800189a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800189c:	e040      	b.n	8001920 <HAL_RCC_OscConfig+0x4fc>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	68db      	ldr	r3, [r3, #12]
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d023      	beq.n	80018ee <HAL_RCC_OscConfig+0x4ca>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80018a6:	4b44      	ldr	r3, [pc, #272]	; (80019b8 <HAL_RCC_OscConfig+0x594>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	4a43      	ldr	r2, [pc, #268]	; (80019b8 <HAL_RCC_OscConfig+0x594>)
 80018ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018b2:	f7fe fe87 	bl	80005c4 <HAL_GetTick>
 80018b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80018b8:	e008      	b.n	80018cc <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018ba:	f7fe fe83 	bl	80005c4 <HAL_GetTick>
 80018be:	4602      	mov	r2, r0
 80018c0:	693b      	ldr	r3, [r7, #16]
 80018c2:	1ad3      	subs	r3, r2, r3
 80018c4:	2b02      	cmp	r3, #2
 80018c6:	d901      	bls.n	80018cc <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 80018c8:	2303      	movs	r3, #3
 80018ca:	e291      	b.n	8001df0 <HAL_RCC_OscConfig+0x9cc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80018cc:	4b3a      	ldr	r3, [pc, #232]	; (80019b8 <HAL_RCC_OscConfig+0x594>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d0f0      	beq.n	80018ba <HAL_RCC_OscConfig+0x496>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018d8:	4b37      	ldr	r3, [pc, #220]	; (80019b8 <HAL_RCC_OscConfig+0x594>)
 80018da:	685b      	ldr	r3, [r3, #4]
 80018dc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	691b      	ldr	r3, [r3, #16]
 80018e4:	061b      	lsls	r3, r3, #24
 80018e6:	4934      	ldr	r1, [pc, #208]	; (80019b8 <HAL_RCC_OscConfig+0x594>)
 80018e8:	4313      	orrs	r3, r2
 80018ea:	604b      	str	r3, [r1, #4]
 80018ec:	e018      	b.n	8001920 <HAL_RCC_OscConfig+0x4fc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80018ee:	4b32      	ldr	r3, [pc, #200]	; (80019b8 <HAL_RCC_OscConfig+0x594>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	4a31      	ldr	r2, [pc, #196]	; (80019b8 <HAL_RCC_OscConfig+0x594>)
 80018f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80018f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018fa:	f7fe fe63 	bl	80005c4 <HAL_GetTick>
 80018fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001900:	e008      	b.n	8001914 <HAL_RCC_OscConfig+0x4f0>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001902:	f7fe fe5f 	bl	80005c4 <HAL_GetTick>
 8001906:	4602      	mov	r2, r0
 8001908:	693b      	ldr	r3, [r7, #16]
 800190a:	1ad3      	subs	r3, r2, r3
 800190c:	2b02      	cmp	r3, #2
 800190e:	d901      	bls.n	8001914 <HAL_RCC_OscConfig+0x4f0>
          {
            return HAL_TIMEOUT;
 8001910:	2303      	movs	r3, #3
 8001912:	e26d      	b.n	8001df0 <HAL_RCC_OscConfig+0x9cc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001914:	4b28      	ldr	r3, [pc, #160]	; (80019b8 <HAL_RCC_OscConfig+0x594>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800191c:	2b00      	cmp	r3, #0
 800191e:	d1f0      	bne.n	8001902 <HAL_RCC_OscConfig+0x4de>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f003 0308 	and.w	r3, r3, #8
 8001928:	2b00      	cmp	r3, #0
 800192a:	d04e      	beq.n	80019ca <HAL_RCC_OscConfig+0x5a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	695b      	ldr	r3, [r3, #20]
 8001930:	2b00      	cmp	r3, #0
 8001932:	d008      	beq.n	8001946 <HAL_RCC_OscConfig+0x522>
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	695b      	ldr	r3, [r3, #20]
 8001938:	2b01      	cmp	r3, #1
 800193a:	d004      	beq.n	8001946 <HAL_RCC_OscConfig+0x522>
 800193c:	f240 2185 	movw	r1, #645	; 0x285
 8001940:	481c      	ldr	r0, [pc, #112]	; (80019b4 <HAL_RCC_OscConfig+0x590>)
 8001942:	f006 fad3 	bl	8007eec <assert_failed>

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	695b      	ldr	r3, [r3, #20]
 800194a:	2b00      	cmp	r3, #0
 800194c:	d01c      	beq.n	8001988 <HAL_RCC_OscConfig+0x564>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800194e:	4b1a      	ldr	r3, [pc, #104]	; (80019b8 <HAL_RCC_OscConfig+0x594>)
 8001950:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001954:	4a18      	ldr	r2, [pc, #96]	; (80019b8 <HAL_RCC_OscConfig+0x594>)
 8001956:	f043 0301 	orr.w	r3, r3, #1
 800195a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800195e:	f7fe fe31 	bl	80005c4 <HAL_GetTick>
 8001962:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001964:	e008      	b.n	8001978 <HAL_RCC_OscConfig+0x554>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001966:	f7fe fe2d 	bl	80005c4 <HAL_GetTick>
 800196a:	4602      	mov	r2, r0
 800196c:	693b      	ldr	r3, [r7, #16]
 800196e:	1ad3      	subs	r3, r2, r3
 8001970:	2b02      	cmp	r3, #2
 8001972:	d901      	bls.n	8001978 <HAL_RCC_OscConfig+0x554>
        {
          return HAL_TIMEOUT;
 8001974:	2303      	movs	r3, #3
 8001976:	e23b      	b.n	8001df0 <HAL_RCC_OscConfig+0x9cc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001978:	4b0f      	ldr	r3, [pc, #60]	; (80019b8 <HAL_RCC_OscConfig+0x594>)
 800197a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800197e:	f003 0302 	and.w	r3, r3, #2
 8001982:	2b00      	cmp	r3, #0
 8001984:	d0ef      	beq.n	8001966 <HAL_RCC_OscConfig+0x542>
 8001986:	e020      	b.n	80019ca <HAL_RCC_OscConfig+0x5a6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001988:	4b0b      	ldr	r3, [pc, #44]	; (80019b8 <HAL_RCC_OscConfig+0x594>)
 800198a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800198e:	4a0a      	ldr	r2, [pc, #40]	; (80019b8 <HAL_RCC_OscConfig+0x594>)
 8001990:	f023 0301 	bic.w	r3, r3, #1
 8001994:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001998:	f7fe fe14 	bl	80005c4 <HAL_GetTick>
 800199c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800199e:	e00d      	b.n	80019bc <HAL_RCC_OscConfig+0x598>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019a0:	f7fe fe10 	bl	80005c4 <HAL_GetTick>
 80019a4:	4602      	mov	r2, r0
 80019a6:	693b      	ldr	r3, [r7, #16]
 80019a8:	1ad3      	subs	r3, r2, r3
 80019aa:	2b02      	cmp	r3, #2
 80019ac:	d906      	bls.n	80019bc <HAL_RCC_OscConfig+0x598>
        {
          return HAL_TIMEOUT;
 80019ae:	2303      	movs	r3, #3
 80019b0:	e21e      	b.n	8001df0 <HAL_RCC_OscConfig+0x9cc>
 80019b2:	bf00      	nop
 80019b4:	08009d10 	.word	0x08009d10
 80019b8:	40021000 	.word	0x40021000
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80019bc:	4ba7      	ldr	r3, [pc, #668]	; (8001c5c <HAL_RCC_OscConfig+0x838>)
 80019be:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80019c2:	f003 0302 	and.w	r3, r3, #2
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d1ea      	bne.n	80019a0 <HAL_RCC_OscConfig+0x57c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f003 0304 	and.w	r3, r3, #4
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	f000 80b2 	beq.w	8001b3c <HAL_RCC_OscConfig+0x718>
  {
    FlagStatus       pwrclkchanged = RESET;
 80019d8:	2300      	movs	r3, #0
 80019da:	77fb      	strb	r3, [r7, #31]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	689b      	ldr	r3, [r3, #8]
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d00c      	beq.n	80019fe <HAL_RCC_OscConfig+0x5da>
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	689b      	ldr	r3, [r3, #8]
 80019e8:	2b01      	cmp	r3, #1
 80019ea:	d008      	beq.n	80019fe <HAL_RCC_OscConfig+0x5da>
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	689b      	ldr	r3, [r3, #8]
 80019f0:	2b05      	cmp	r3, #5
 80019f2:	d004      	beq.n	80019fe <HAL_RCC_OscConfig+0x5da>
 80019f4:	f44f 7136 	mov.w	r1, #728	; 0x2d8
 80019f8:	4899      	ldr	r0, [pc, #612]	; (8001c60 <HAL_RCC_OscConfig+0x83c>)
 80019fa:	f006 fa77 	bl	8007eec <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80019fe:	4b97      	ldr	r3, [pc, #604]	; (8001c5c <HAL_RCC_OscConfig+0x838>)
 8001a00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d10d      	bne.n	8001a26 <HAL_RCC_OscConfig+0x602>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a0a:	4b94      	ldr	r3, [pc, #592]	; (8001c5c <HAL_RCC_OscConfig+0x838>)
 8001a0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a0e:	4a93      	ldr	r2, [pc, #588]	; (8001c5c <HAL_RCC_OscConfig+0x838>)
 8001a10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a14:	6593      	str	r3, [r2, #88]	; 0x58
 8001a16:	4b91      	ldr	r3, [pc, #580]	; (8001c5c <HAL_RCC_OscConfig+0x838>)
 8001a18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a1e:	60bb      	str	r3, [r7, #8]
 8001a20:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a22:	2301      	movs	r3, #1
 8001a24:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a26:	4b8f      	ldr	r3, [pc, #572]	; (8001c64 <HAL_RCC_OscConfig+0x840>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d118      	bne.n	8001a64 <HAL_RCC_OscConfig+0x640>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001a32:	4b8c      	ldr	r3, [pc, #560]	; (8001c64 <HAL_RCC_OscConfig+0x840>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	4a8b      	ldr	r2, [pc, #556]	; (8001c64 <HAL_RCC_OscConfig+0x840>)
 8001a38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a3c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a3e:	f7fe fdc1 	bl	80005c4 <HAL_GetTick>
 8001a42:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a44:	e008      	b.n	8001a58 <HAL_RCC_OscConfig+0x634>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a46:	f7fe fdbd 	bl	80005c4 <HAL_GetTick>
 8001a4a:	4602      	mov	r2, r0
 8001a4c:	693b      	ldr	r3, [r7, #16]
 8001a4e:	1ad3      	subs	r3, r2, r3
 8001a50:	2b02      	cmp	r3, #2
 8001a52:	d901      	bls.n	8001a58 <HAL_RCC_OscConfig+0x634>
        {
          return HAL_TIMEOUT;
 8001a54:	2303      	movs	r3, #3
 8001a56:	e1cb      	b.n	8001df0 <HAL_RCC_OscConfig+0x9cc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a58:	4b82      	ldr	r3, [pc, #520]	; (8001c64 <HAL_RCC_OscConfig+0x840>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d0f0      	beq.n	8001a46 <HAL_RCC_OscConfig+0x622>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	689b      	ldr	r3, [r3, #8]
 8001a68:	2b01      	cmp	r3, #1
 8001a6a:	d108      	bne.n	8001a7e <HAL_RCC_OscConfig+0x65a>
 8001a6c:	4b7b      	ldr	r3, [pc, #492]	; (8001c5c <HAL_RCC_OscConfig+0x838>)
 8001a6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a72:	4a7a      	ldr	r2, [pc, #488]	; (8001c5c <HAL_RCC_OscConfig+0x838>)
 8001a74:	f043 0301 	orr.w	r3, r3, #1
 8001a78:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001a7c:	e024      	b.n	8001ac8 <HAL_RCC_OscConfig+0x6a4>
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	689b      	ldr	r3, [r3, #8]
 8001a82:	2b05      	cmp	r3, #5
 8001a84:	d110      	bne.n	8001aa8 <HAL_RCC_OscConfig+0x684>
 8001a86:	4b75      	ldr	r3, [pc, #468]	; (8001c5c <HAL_RCC_OscConfig+0x838>)
 8001a88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a8c:	4a73      	ldr	r2, [pc, #460]	; (8001c5c <HAL_RCC_OscConfig+0x838>)
 8001a8e:	f043 0304 	orr.w	r3, r3, #4
 8001a92:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001a96:	4b71      	ldr	r3, [pc, #452]	; (8001c5c <HAL_RCC_OscConfig+0x838>)
 8001a98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a9c:	4a6f      	ldr	r2, [pc, #444]	; (8001c5c <HAL_RCC_OscConfig+0x838>)
 8001a9e:	f043 0301 	orr.w	r3, r3, #1
 8001aa2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001aa6:	e00f      	b.n	8001ac8 <HAL_RCC_OscConfig+0x6a4>
 8001aa8:	4b6c      	ldr	r3, [pc, #432]	; (8001c5c <HAL_RCC_OscConfig+0x838>)
 8001aaa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001aae:	4a6b      	ldr	r2, [pc, #428]	; (8001c5c <HAL_RCC_OscConfig+0x838>)
 8001ab0:	f023 0301 	bic.w	r3, r3, #1
 8001ab4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001ab8:	4b68      	ldr	r3, [pc, #416]	; (8001c5c <HAL_RCC_OscConfig+0x838>)
 8001aba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001abe:	4a67      	ldr	r2, [pc, #412]	; (8001c5c <HAL_RCC_OscConfig+0x838>)
 8001ac0:	f023 0304 	bic.w	r3, r3, #4
 8001ac4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	689b      	ldr	r3, [r3, #8]
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d016      	beq.n	8001afe <HAL_RCC_OscConfig+0x6da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ad0:	f7fe fd78 	bl	80005c4 <HAL_GetTick>
 8001ad4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ad6:	e00a      	b.n	8001aee <HAL_RCC_OscConfig+0x6ca>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ad8:	f7fe fd74 	bl	80005c4 <HAL_GetTick>
 8001adc:	4602      	mov	r2, r0
 8001ade:	693b      	ldr	r3, [r7, #16]
 8001ae0:	1ad3      	subs	r3, r2, r3
 8001ae2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ae6:	4293      	cmp	r3, r2
 8001ae8:	d901      	bls.n	8001aee <HAL_RCC_OscConfig+0x6ca>
        {
          return HAL_TIMEOUT;
 8001aea:	2303      	movs	r3, #3
 8001aec:	e180      	b.n	8001df0 <HAL_RCC_OscConfig+0x9cc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001aee:	4b5b      	ldr	r3, [pc, #364]	; (8001c5c <HAL_RCC_OscConfig+0x838>)
 8001af0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001af4:	f003 0302 	and.w	r3, r3, #2
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d0ed      	beq.n	8001ad8 <HAL_RCC_OscConfig+0x6b4>
 8001afc:	e015      	b.n	8001b2a <HAL_RCC_OscConfig+0x706>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001afe:	f7fe fd61 	bl	80005c4 <HAL_GetTick>
 8001b02:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001b04:	e00a      	b.n	8001b1c <HAL_RCC_OscConfig+0x6f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b06:	f7fe fd5d 	bl	80005c4 <HAL_GetTick>
 8001b0a:	4602      	mov	r2, r0
 8001b0c:	693b      	ldr	r3, [r7, #16]
 8001b0e:	1ad3      	subs	r3, r2, r3
 8001b10:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b14:	4293      	cmp	r3, r2
 8001b16:	d901      	bls.n	8001b1c <HAL_RCC_OscConfig+0x6f8>
        {
          return HAL_TIMEOUT;
 8001b18:	2303      	movs	r3, #3
 8001b1a:	e169      	b.n	8001df0 <HAL_RCC_OscConfig+0x9cc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001b1c:	4b4f      	ldr	r3, [pc, #316]	; (8001c5c <HAL_RCC_OscConfig+0x838>)
 8001b1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b22:	f003 0302 	and.w	r3, r3, #2
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d1ed      	bne.n	8001b06 <HAL_RCC_OscConfig+0x6e2>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001b2a:	7ffb      	ldrb	r3, [r7, #31]
 8001b2c:	2b01      	cmp	r3, #1
 8001b2e:	d105      	bne.n	8001b3c <HAL_RCC_OscConfig+0x718>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b30:	4b4a      	ldr	r3, [pc, #296]	; (8001c5c <HAL_RCC_OscConfig+0x838>)
 8001b32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b34:	4a49      	ldr	r2, [pc, #292]	; (8001c5c <HAL_RCC_OscConfig+0x838>)
 8001b36:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b3a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d00c      	beq.n	8001b5e <HAL_RCC_OscConfig+0x73a>
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b48:	2b01      	cmp	r3, #1
 8001b4a:	d008      	beq.n	8001b5e <HAL_RCC_OscConfig+0x73a>
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b50:	2b02      	cmp	r3, #2
 8001b52:	d004      	beq.n	8001b5e <HAL_RCC_OscConfig+0x73a>
 8001b54:	f240 3166 	movw	r1, #870	; 0x366
 8001b58:	4841      	ldr	r0, [pc, #260]	; (8001c60 <HAL_RCC_OscConfig+0x83c>)
 8001b5a:	f006 f9c7 	bl	8007eec <assert_failed>

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	f000 8143 	beq.w	8001dee <HAL_RCC_OscConfig+0x9ca>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001b68:	69bb      	ldr	r3, [r7, #24]
 8001b6a:	2b0c      	cmp	r3, #12
 8001b6c:	f000 80fc 	beq.w	8001d68 <HAL_RCC_OscConfig+0x944>
    {
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b74:	2b02      	cmp	r3, #2
 8001b76:	f040 80c9 	bne.w	8001d0c <HAL_RCC_OscConfig+0x8e8>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d010      	beq.n	8001ba4 <HAL_RCC_OscConfig+0x780>
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b86:	2b01      	cmp	r3, #1
 8001b88:	d00c      	beq.n	8001ba4 <HAL_RCC_OscConfig+0x780>
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b8e:	2b02      	cmp	r3, #2
 8001b90:	d008      	beq.n	8001ba4 <HAL_RCC_OscConfig+0x780>
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b96:	2b03      	cmp	r3, #3
 8001b98:	d004      	beq.n	8001ba4 <HAL_RCC_OscConfig+0x780>
 8001b9a:	f44f 715c 	mov.w	r1, #880	; 0x370
 8001b9e:	4830      	ldr	r0, [pc, #192]	; (8001c60 <HAL_RCC_OscConfig+0x83c>)
 8001ba0:	f006 f9a4 	bl	8007eec <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d003      	beq.n	8001bb4 <HAL_RCC_OscConfig+0x790>
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bb0:	2b08      	cmp	r3, #8
 8001bb2:	d904      	bls.n	8001bbe <HAL_RCC_OscConfig+0x79a>
 8001bb4:	f240 3171 	movw	r1, #881	; 0x371
 8001bb8:	4829      	ldr	r0, [pc, #164]	; (8001c60 <HAL_RCC_OscConfig+0x83c>)
 8001bba:	f006 f997 	bl	8007eec <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001bc2:	2b07      	cmp	r3, #7
 8001bc4:	d903      	bls.n	8001bce <HAL_RCC_OscConfig+0x7aa>
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001bca:	2b56      	cmp	r3, #86	; 0x56
 8001bcc:	d904      	bls.n	8001bd8 <HAL_RCC_OscConfig+0x7b4>
 8001bce:	f240 3172 	movw	r1, #882	; 0x372
 8001bd2:	4823      	ldr	r0, [pc, #140]	; (8001c60 <HAL_RCC_OscConfig+0x83c>)
 8001bd4:	f006 f98a 	bl	8007eec <assert_failed>
#if defined(RCC_PLLP_SUPPORT)
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bdc:	2b07      	cmp	r3, #7
 8001bde:	d008      	beq.n	8001bf2 <HAL_RCC_OscConfig+0x7ce>
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001be4:	2b11      	cmp	r3, #17
 8001be6:	d004      	beq.n	8001bf2 <HAL_RCC_OscConfig+0x7ce>
 8001be8:	f44f 715d 	mov.w	r1, #884	; 0x374
 8001bec:	481c      	ldr	r0, [pc, #112]	; (8001c60 <HAL_RCC_OscConfig+0x83c>)
 8001bee:	f006 f97d 	bl	8007eec <assert_failed>
#endif /* RCC_PLLP_SUPPORT */
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bf6:	2b02      	cmp	r3, #2
 8001bf8:	d010      	beq.n	8001c1c <HAL_RCC_OscConfig+0x7f8>
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bfe:	2b04      	cmp	r3, #4
 8001c00:	d00c      	beq.n	8001c1c <HAL_RCC_OscConfig+0x7f8>
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c06:	2b06      	cmp	r3, #6
 8001c08:	d008      	beq.n	8001c1c <HAL_RCC_OscConfig+0x7f8>
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c0e:	2b08      	cmp	r3, #8
 8001c10:	d004      	beq.n	8001c1c <HAL_RCC_OscConfig+0x7f8>
 8001c12:	f240 3176 	movw	r1, #886	; 0x376
 8001c16:	4812      	ldr	r0, [pc, #72]	; (8001c60 <HAL_RCC_OscConfig+0x83c>)
 8001c18:	f006 f968 	bl	8007eec <assert_failed>
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c20:	2b02      	cmp	r3, #2
 8001c22:	d010      	beq.n	8001c46 <HAL_RCC_OscConfig+0x822>
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c28:	2b04      	cmp	r3, #4
 8001c2a:	d00c      	beq.n	8001c46 <HAL_RCC_OscConfig+0x822>
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c30:	2b06      	cmp	r3, #6
 8001c32:	d008      	beq.n	8001c46 <HAL_RCC_OscConfig+0x822>
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c38:	2b08      	cmp	r3, #8
 8001c3a:	d004      	beq.n	8001c46 <HAL_RCC_OscConfig+0x822>
 8001c3c:	f240 3177 	movw	r1, #887	; 0x377
 8001c40:	4807      	ldr	r0, [pc, #28]	; (8001c60 <HAL_RCC_OscConfig+0x83c>)
 8001c42:	f006 f953 	bl	8007eec <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c46:	4b05      	ldr	r3, [pc, #20]	; (8001c5c <HAL_RCC_OscConfig+0x838>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	4a04      	ldr	r2, [pc, #16]	; (8001c5c <HAL_RCC_OscConfig+0x838>)
 8001c4c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001c50:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c52:	f7fe fcb7 	bl	80005c4 <HAL_GetTick>
 8001c56:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c58:	e00f      	b.n	8001c7a <HAL_RCC_OscConfig+0x856>
 8001c5a:	bf00      	nop
 8001c5c:	40021000 	.word	0x40021000
 8001c60:	08009d10 	.word	0x08009d10
 8001c64:	40007000 	.word	0x40007000
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c68:	f7fe fcac 	bl	80005c4 <HAL_GetTick>
 8001c6c:	4602      	mov	r2, r0
 8001c6e:	693b      	ldr	r3, [r7, #16]
 8001c70:	1ad3      	subs	r3, r2, r3
 8001c72:	2b02      	cmp	r3, #2
 8001c74:	d901      	bls.n	8001c7a <HAL_RCC_OscConfig+0x856>
          {
            return HAL_TIMEOUT;
 8001c76:	2303      	movs	r3, #3
 8001c78:	e0ba      	b.n	8001df0 <HAL_RCC_OscConfig+0x9cc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c7a:	4b5f      	ldr	r3, [pc, #380]	; (8001df8 <HAL_RCC_OscConfig+0x9d4>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d1f0      	bne.n	8001c68 <HAL_RCC_OscConfig+0x844>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c86:	4b5c      	ldr	r3, [pc, #368]	; (8001df8 <HAL_RCC_OscConfig+0x9d4>)
 8001c88:	68da      	ldr	r2, [r3, #12]
 8001c8a:	4b5c      	ldr	r3, [pc, #368]	; (8001dfc <HAL_RCC_OscConfig+0x9d8>)
 8001c8c:	4013      	ands	r3, r2
 8001c8e:	687a      	ldr	r2, [r7, #4]
 8001c90:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001c92:	687a      	ldr	r2, [r7, #4]
 8001c94:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001c96:	3a01      	subs	r2, #1
 8001c98:	0112      	lsls	r2, r2, #4
 8001c9a:	4311      	orrs	r1, r2
 8001c9c:	687a      	ldr	r2, [r7, #4]
 8001c9e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001ca0:	0212      	lsls	r2, r2, #8
 8001ca2:	4311      	orrs	r1, r2
 8001ca4:	687a      	ldr	r2, [r7, #4]
 8001ca6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001ca8:	0852      	lsrs	r2, r2, #1
 8001caa:	3a01      	subs	r2, #1
 8001cac:	0552      	lsls	r2, r2, #21
 8001cae:	4311      	orrs	r1, r2
 8001cb0:	687a      	ldr	r2, [r7, #4]
 8001cb2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001cb4:	0852      	lsrs	r2, r2, #1
 8001cb6:	3a01      	subs	r2, #1
 8001cb8:	0652      	lsls	r2, r2, #25
 8001cba:	4311      	orrs	r1, r2
 8001cbc:	687a      	ldr	r2, [r7, #4]
 8001cbe:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001cc0:	0912      	lsrs	r2, r2, #4
 8001cc2:	0452      	lsls	r2, r2, #17
 8001cc4:	430a      	orrs	r2, r1
 8001cc6:	494c      	ldr	r1, [pc, #304]	; (8001df8 <HAL_RCC_OscConfig+0x9d4>)
 8001cc8:	4313      	orrs	r3, r2
 8001cca:	60cb      	str	r3, [r1, #12]
#endif
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ccc:	4b4a      	ldr	r3, [pc, #296]	; (8001df8 <HAL_RCC_OscConfig+0x9d4>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4a49      	ldr	r2, [pc, #292]	; (8001df8 <HAL_RCC_OscConfig+0x9d4>)
 8001cd2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001cd6:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001cd8:	4b47      	ldr	r3, [pc, #284]	; (8001df8 <HAL_RCC_OscConfig+0x9d4>)
 8001cda:	68db      	ldr	r3, [r3, #12]
 8001cdc:	4a46      	ldr	r2, [pc, #280]	; (8001df8 <HAL_RCC_OscConfig+0x9d4>)
 8001cde:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001ce2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ce4:	f7fe fc6e 	bl	80005c4 <HAL_GetTick>
 8001ce8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001cea:	e008      	b.n	8001cfe <HAL_RCC_OscConfig+0x8da>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cec:	f7fe fc6a 	bl	80005c4 <HAL_GetTick>
 8001cf0:	4602      	mov	r2, r0
 8001cf2:	693b      	ldr	r3, [r7, #16]
 8001cf4:	1ad3      	subs	r3, r2, r3
 8001cf6:	2b02      	cmp	r3, #2
 8001cf8:	d901      	bls.n	8001cfe <HAL_RCC_OscConfig+0x8da>
          {
            return HAL_TIMEOUT;
 8001cfa:	2303      	movs	r3, #3
 8001cfc:	e078      	b.n	8001df0 <HAL_RCC_OscConfig+0x9cc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001cfe:	4b3e      	ldr	r3, [pc, #248]	; (8001df8 <HAL_RCC_OscConfig+0x9d4>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d0f0      	beq.n	8001cec <HAL_RCC_OscConfig+0x8c8>
 8001d0a:	e070      	b.n	8001dee <HAL_RCC_OscConfig+0x9ca>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d0c:	4b3a      	ldr	r3, [pc, #232]	; (8001df8 <HAL_RCC_OscConfig+0x9d4>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	4a39      	ldr	r2, [pc, #228]	; (8001df8 <HAL_RCC_OscConfig+0x9d4>)
 8001d12:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001d16:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8001d18:	4b37      	ldr	r3, [pc, #220]	; (8001df8 <HAL_RCC_OscConfig+0x9d4>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d105      	bne.n	8001d30 <HAL_RCC_OscConfig+0x90c>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001d24:	4b34      	ldr	r3, [pc, #208]	; (8001df8 <HAL_RCC_OscConfig+0x9d4>)
 8001d26:	68db      	ldr	r3, [r3, #12]
 8001d28:	4a33      	ldr	r2, [pc, #204]	; (8001df8 <HAL_RCC_OscConfig+0x9d4>)
 8001d2a:	f023 0303 	bic.w	r3, r3, #3
 8001d2e:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001d30:	4b31      	ldr	r3, [pc, #196]	; (8001df8 <HAL_RCC_OscConfig+0x9d4>)
 8001d32:	68db      	ldr	r3, [r3, #12]
 8001d34:	4a30      	ldr	r2, [pc, #192]	; (8001df8 <HAL_RCC_OscConfig+0x9d4>)
 8001d36:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001d3a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d3e:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d40:	f7fe fc40 	bl	80005c4 <HAL_GetTick>
 8001d44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d46:	e008      	b.n	8001d5a <HAL_RCC_OscConfig+0x936>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d48:	f7fe fc3c 	bl	80005c4 <HAL_GetTick>
 8001d4c:	4602      	mov	r2, r0
 8001d4e:	693b      	ldr	r3, [r7, #16]
 8001d50:	1ad3      	subs	r3, r2, r3
 8001d52:	2b02      	cmp	r3, #2
 8001d54:	d901      	bls.n	8001d5a <HAL_RCC_OscConfig+0x936>
          {
            return HAL_TIMEOUT;
 8001d56:	2303      	movs	r3, #3
 8001d58:	e04a      	b.n	8001df0 <HAL_RCC_OscConfig+0x9cc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d5a:	4b27      	ldr	r3, [pc, #156]	; (8001df8 <HAL_RCC_OscConfig+0x9d4>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d1f0      	bne.n	8001d48 <HAL_RCC_OscConfig+0x924>
 8001d66:	e042      	b.n	8001dee <HAL_RCC_OscConfig+0x9ca>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d6c:	2b01      	cmp	r3, #1
 8001d6e:	d101      	bne.n	8001d74 <HAL_RCC_OscConfig+0x950>
      {
        return HAL_ERROR;
 8001d70:	2301      	movs	r3, #1
 8001d72:	e03d      	b.n	8001df0 <HAL_RCC_OscConfig+0x9cc>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 8001d74:	4b20      	ldr	r3, [pc, #128]	; (8001df8 <HAL_RCC_OscConfig+0x9d4>)
 8001d76:	68db      	ldr	r3, [r3, #12]
 8001d78:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d7a:	697b      	ldr	r3, [r7, #20]
 8001d7c:	f003 0203 	and.w	r2, r3, #3
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d84:	429a      	cmp	r2, r3
 8001d86:	d130      	bne.n	8001dea <HAL_RCC_OscConfig+0x9c6>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001d88:	697b      	ldr	r3, [r7, #20]
 8001d8a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d92:	3b01      	subs	r3, #1
 8001d94:	011b      	lsls	r3, r3, #4
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d96:	429a      	cmp	r2, r3
 8001d98:	d127      	bne.n	8001dea <HAL_RCC_OscConfig+0x9c6>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001d9a:	697b      	ldr	r3, [r7, #20]
 8001d9c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001da4:	021b      	lsls	r3, r3, #8
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001da6:	429a      	cmp	r2, r3
 8001da8:	d11f      	bne.n	8001dea <HAL_RCC_OscConfig+0x9c6>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001daa:	697b      	ldr	r3, [r7, #20]
 8001dac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001db0:	687a      	ldr	r2, [r7, #4]
 8001db2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001db4:	2a07      	cmp	r2, #7
 8001db6:	bf14      	ite	ne
 8001db8:	2201      	movne	r2, #1
 8001dba:	2200      	moveq	r2, #0
 8001dbc:	b2d2      	uxtb	r2, r2
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001dbe:	4293      	cmp	r3, r2
 8001dc0:	d113      	bne.n	8001dea <HAL_RCC_OscConfig+0x9c6>
#endif
#endif
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001dc2:	697b      	ldr	r3, [r7, #20]
 8001dc4:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001dcc:	085b      	lsrs	r3, r3, #1
 8001dce:	3b01      	subs	r3, #1
 8001dd0:	055b      	lsls	r3, r3, #21
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001dd2:	429a      	cmp	r2, r3
 8001dd4:	d109      	bne.n	8001dea <HAL_RCC_OscConfig+0x9c6>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001dd6:	697b      	ldr	r3, [r7, #20]
 8001dd8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001de0:	085b      	lsrs	r3, r3, #1
 8001de2:	3b01      	subs	r3, #1
 8001de4:	065b      	lsls	r3, r3, #25
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001de6:	429a      	cmp	r2, r3
 8001de8:	d001      	beq.n	8001dee <HAL_RCC_OscConfig+0x9ca>
        {
          return HAL_ERROR;
 8001dea:	2301      	movs	r3, #1
 8001dec:	e000      	b.n	8001df0 <HAL_RCC_OscConfig+0x9cc>
        }
      }
    }
  }
  return HAL_OK;
 8001dee:	2300      	movs	r3, #0
}
 8001df0:	4618      	mov	r0, r3
 8001df2:	3720      	adds	r7, #32
 8001df4:	46bd      	mov	sp, r7
 8001df6:	bd80      	pop	{r7, pc}
 8001df8:	40021000 	.word	0x40021000
 8001dfc:	f99d808c 	.word	0xf99d808c

08001e00 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b084      	sub	sp, #16
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
 8001e08:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d101      	bne.n	8001e14 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e10:	2301      	movs	r3, #1
 8001e12:	e168      	b.n	80020e6 <HAL_RCC_ClockConfig+0x2e6>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d003      	beq.n	8001e24 <HAL_RCC_ClockConfig+0x24>
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	2b0f      	cmp	r3, #15
 8001e22:	d904      	bls.n	8001e2e <HAL_RCC_ClockConfig+0x2e>
 8001e24:	f240 412e 	movw	r1, #1070	; 0x42e
 8001e28:	4873      	ldr	r0, [pc, #460]	; (8001ff8 <HAL_RCC_ClockConfig+0x1f8>)
 8001e2a:	f006 f85f 	bl	8007eec <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d010      	beq.n	8001e56 <HAL_RCC_ClockConfig+0x56>
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	2b01      	cmp	r3, #1
 8001e38:	d00d      	beq.n	8001e56 <HAL_RCC_ClockConfig+0x56>
 8001e3a:	683b      	ldr	r3, [r7, #0]
 8001e3c:	2b02      	cmp	r3, #2
 8001e3e:	d00a      	beq.n	8001e56 <HAL_RCC_ClockConfig+0x56>
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	2b03      	cmp	r3, #3
 8001e44:	d007      	beq.n	8001e56 <HAL_RCC_ClockConfig+0x56>
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	2b04      	cmp	r3, #4
 8001e4a:	d004      	beq.n	8001e56 <HAL_RCC_ClockConfig+0x56>
 8001e4c:	f240 412f 	movw	r1, #1071	; 0x42f
 8001e50:	4869      	ldr	r0, [pc, #420]	; (8001ff8 <HAL_RCC_ClockConfig+0x1f8>)
 8001e52:	f006 f84b 	bl	8007eec <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001e56:	4b69      	ldr	r3, [pc, #420]	; (8001ffc <HAL_RCC_ClockConfig+0x1fc>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f003 0307 	and.w	r3, r3, #7
 8001e5e:	683a      	ldr	r2, [r7, #0]
 8001e60:	429a      	cmp	r2, r3
 8001e62:	d910      	bls.n	8001e86 <HAL_RCC_ClockConfig+0x86>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e64:	4b65      	ldr	r3, [pc, #404]	; (8001ffc <HAL_RCC_ClockConfig+0x1fc>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f023 0207 	bic.w	r2, r3, #7
 8001e6c:	4963      	ldr	r1, [pc, #396]	; (8001ffc <HAL_RCC_ClockConfig+0x1fc>)
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	4313      	orrs	r3, r2
 8001e72:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e74:	4b61      	ldr	r3, [pc, #388]	; (8001ffc <HAL_RCC_ClockConfig+0x1fc>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f003 0307 	and.w	r3, r3, #7
 8001e7c:	683a      	ldr	r2, [r7, #0]
 8001e7e:	429a      	cmp	r2, r3
 8001e80:	d001      	beq.n	8001e86 <HAL_RCC_ClockConfig+0x86>
    {
      return HAL_ERROR;
 8001e82:	2301      	movs	r3, #1
 8001e84:	e12f      	b.n	80020e6 <HAL_RCC_ClockConfig+0x2e6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f003 0301 	and.w	r3, r3, #1
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d061      	beq.n	8001f56 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	685b      	ldr	r3, [r3, #4]
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d010      	beq.n	8001ebc <HAL_RCC_ClockConfig+0xbc>
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	685b      	ldr	r3, [r3, #4]
 8001e9e:	2b01      	cmp	r3, #1
 8001ea0:	d00c      	beq.n	8001ebc <HAL_RCC_ClockConfig+0xbc>
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	685b      	ldr	r3, [r3, #4]
 8001ea6:	2b02      	cmp	r3, #2
 8001ea8:	d008      	beq.n	8001ebc <HAL_RCC_ClockConfig+0xbc>
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	685b      	ldr	r3, [r3, #4]
 8001eae:	2b03      	cmp	r3, #3
 8001eb0:	d004      	beq.n	8001ebc <HAL_RCC_ClockConfig+0xbc>
 8001eb2:	f240 4146 	movw	r1, #1094	; 0x446
 8001eb6:	4850      	ldr	r0, [pc, #320]	; (8001ff8 <HAL_RCC_ClockConfig+0x1f8>)
 8001eb8:	f006 f818 	bl	8007eec <assert_failed>

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	685b      	ldr	r3, [r3, #4]
 8001ec0:	2b03      	cmp	r3, #3
 8001ec2:	d107      	bne.n	8001ed4 <HAL_RCC_ClockConfig+0xd4>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ec4:	4b4e      	ldr	r3, [pc, #312]	; (8002000 <HAL_RCC_ClockConfig+0x200>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d121      	bne.n	8001f14 <HAL_RCC_ClockConfig+0x114>
      {
        return HAL_ERROR;
 8001ed0:	2301      	movs	r3, #1
 8001ed2:	e108      	b.n	80020e6 <HAL_RCC_ClockConfig+0x2e6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	685b      	ldr	r3, [r3, #4]
 8001ed8:	2b02      	cmp	r3, #2
 8001eda:	d107      	bne.n	8001eec <HAL_RCC_ClockConfig+0xec>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001edc:	4b48      	ldr	r3, [pc, #288]	; (8002000 <HAL_RCC_ClockConfig+0x200>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d115      	bne.n	8001f14 <HAL_RCC_ClockConfig+0x114>
        {
          return HAL_ERROR;
 8001ee8:	2301      	movs	r3, #1
 8001eea:	e0fc      	b.n	80020e6 <HAL_RCC_ClockConfig+0x2e6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	685b      	ldr	r3, [r3, #4]
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d107      	bne.n	8001f04 <HAL_RCC_ClockConfig+0x104>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001ef4:	4b42      	ldr	r3, [pc, #264]	; (8002000 <HAL_RCC_ClockConfig+0x200>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f003 0302 	and.w	r3, r3, #2
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d109      	bne.n	8001f14 <HAL_RCC_ClockConfig+0x114>
        {
          return HAL_ERROR;
 8001f00:	2301      	movs	r3, #1
 8001f02:	e0f0      	b.n	80020e6 <HAL_RCC_ClockConfig+0x2e6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001f04:	4b3e      	ldr	r3, [pc, #248]	; (8002000 <HAL_RCC_ClockConfig+0x200>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d101      	bne.n	8001f14 <HAL_RCC_ClockConfig+0x114>
        {
          return HAL_ERROR;
 8001f10:	2301      	movs	r3, #1
 8001f12:	e0e8      	b.n	80020e6 <HAL_RCC_ClockConfig+0x2e6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001f14:	4b3a      	ldr	r3, [pc, #232]	; (8002000 <HAL_RCC_ClockConfig+0x200>)
 8001f16:	689b      	ldr	r3, [r3, #8]
 8001f18:	f023 0203 	bic.w	r2, r3, #3
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	685b      	ldr	r3, [r3, #4]
 8001f20:	4937      	ldr	r1, [pc, #220]	; (8002000 <HAL_RCC_ClockConfig+0x200>)
 8001f22:	4313      	orrs	r3, r2
 8001f24:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001f26:	f7fe fb4d 	bl	80005c4 <HAL_GetTick>
 8001f2a:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f2c:	e00a      	b.n	8001f44 <HAL_RCC_ClockConfig+0x144>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f2e:	f7fe fb49 	bl	80005c4 <HAL_GetTick>
 8001f32:	4602      	mov	r2, r0
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	1ad3      	subs	r3, r2, r3
 8001f38:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f3c:	4293      	cmp	r3, r2
 8001f3e:	d901      	bls.n	8001f44 <HAL_RCC_ClockConfig+0x144>
      {
        return HAL_TIMEOUT;
 8001f40:	2303      	movs	r3, #3
 8001f42:	e0d0      	b.n	80020e6 <HAL_RCC_ClockConfig+0x2e6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f44:	4b2e      	ldr	r3, [pc, #184]	; (8002000 <HAL_RCC_ClockConfig+0x200>)
 8001f46:	689b      	ldr	r3, [r3, #8]
 8001f48:	f003 020c 	and.w	r2, r3, #12
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	685b      	ldr	r3, [r3, #4]
 8001f50:	009b      	lsls	r3, r3, #2
 8001f52:	429a      	cmp	r2, r3
 8001f54:	d1eb      	bne.n	8001f2e <HAL_RCC_ClockConfig+0x12e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f003 0302 	and.w	r3, r3, #2
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d031      	beq.n	8001fc6 <HAL_RCC_ClockConfig+0x1c6>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	689b      	ldr	r3, [r3, #8]
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d024      	beq.n	8001fb4 <HAL_RCC_ClockConfig+0x1b4>
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	689b      	ldr	r3, [r3, #8]
 8001f6e:	2b80      	cmp	r3, #128	; 0x80
 8001f70:	d020      	beq.n	8001fb4 <HAL_RCC_ClockConfig+0x1b4>
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	689b      	ldr	r3, [r3, #8]
 8001f76:	2b90      	cmp	r3, #144	; 0x90
 8001f78:	d01c      	beq.n	8001fb4 <HAL_RCC_ClockConfig+0x1b4>
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	689b      	ldr	r3, [r3, #8]
 8001f7e:	2ba0      	cmp	r3, #160	; 0xa0
 8001f80:	d018      	beq.n	8001fb4 <HAL_RCC_ClockConfig+0x1b4>
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	689b      	ldr	r3, [r3, #8]
 8001f86:	2bb0      	cmp	r3, #176	; 0xb0
 8001f88:	d014      	beq.n	8001fb4 <HAL_RCC_ClockConfig+0x1b4>
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	689b      	ldr	r3, [r3, #8]
 8001f8e:	2bc0      	cmp	r3, #192	; 0xc0
 8001f90:	d010      	beq.n	8001fb4 <HAL_RCC_ClockConfig+0x1b4>
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	689b      	ldr	r3, [r3, #8]
 8001f96:	2bd0      	cmp	r3, #208	; 0xd0
 8001f98:	d00c      	beq.n	8001fb4 <HAL_RCC_ClockConfig+0x1b4>
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	689b      	ldr	r3, [r3, #8]
 8001f9e:	2be0      	cmp	r3, #224	; 0xe0
 8001fa0:	d008      	beq.n	8001fb4 <HAL_RCC_ClockConfig+0x1b4>
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	689b      	ldr	r3, [r3, #8]
 8001fa6:	2bf0      	cmp	r3, #240	; 0xf0
 8001fa8:	d004      	beq.n	8001fb4 <HAL_RCC_ClockConfig+0x1b4>
 8001faa:	f240 41a2 	movw	r1, #1186	; 0x4a2
 8001fae:	4812      	ldr	r0, [pc, #72]	; (8001ff8 <HAL_RCC_ClockConfig+0x1f8>)
 8001fb0:	f005 ff9c 	bl	8007eec <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001fb4:	4b12      	ldr	r3, [pc, #72]	; (8002000 <HAL_RCC_ClockConfig+0x200>)
 8001fb6:	689b      	ldr	r3, [r3, #8]
 8001fb8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	689b      	ldr	r3, [r3, #8]
 8001fc0:	490f      	ldr	r1, [pc, #60]	; (8002000 <HAL_RCC_ClockConfig+0x200>)
 8001fc2:	4313      	orrs	r3, r2
 8001fc4:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001fc6:	4b0d      	ldr	r3, [pc, #52]	; (8001ffc <HAL_RCC_ClockConfig+0x1fc>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f003 0307 	and.w	r3, r3, #7
 8001fce:	683a      	ldr	r2, [r7, #0]
 8001fd0:	429a      	cmp	r2, r3
 8001fd2:	d217      	bcs.n	8002004 <HAL_RCC_ClockConfig+0x204>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fd4:	4b09      	ldr	r3, [pc, #36]	; (8001ffc <HAL_RCC_ClockConfig+0x1fc>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f023 0207 	bic.w	r2, r3, #7
 8001fdc:	4907      	ldr	r1, [pc, #28]	; (8001ffc <HAL_RCC_ClockConfig+0x1fc>)
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	4313      	orrs	r3, r2
 8001fe2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fe4:	4b05      	ldr	r3, [pc, #20]	; (8001ffc <HAL_RCC_ClockConfig+0x1fc>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f003 0307 	and.w	r3, r3, #7
 8001fec:	683a      	ldr	r2, [r7, #0]
 8001fee:	429a      	cmp	r2, r3
 8001ff0:	d008      	beq.n	8002004 <HAL_RCC_ClockConfig+0x204>
    {
      return HAL_ERROR;
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	e077      	b.n	80020e6 <HAL_RCC_ClockConfig+0x2e6>
 8001ff6:	bf00      	nop
 8001ff8:	08009d10 	.word	0x08009d10
 8001ffc:	40022000 	.word	0x40022000
 8002000:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f003 0304 	and.w	r3, r3, #4
 800200c:	2b00      	cmp	r3, #0
 800200e:	d025      	beq.n	800205c <HAL_RCC_ClockConfig+0x25c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	68db      	ldr	r3, [r3, #12]
 8002014:	2b00      	cmp	r3, #0
 8002016:	d018      	beq.n	800204a <HAL_RCC_ClockConfig+0x24a>
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	68db      	ldr	r3, [r3, #12]
 800201c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002020:	d013      	beq.n	800204a <HAL_RCC_ClockConfig+0x24a>
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	68db      	ldr	r3, [r3, #12]
 8002026:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800202a:	d00e      	beq.n	800204a <HAL_RCC_ClockConfig+0x24a>
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	68db      	ldr	r3, [r3, #12]
 8002030:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8002034:	d009      	beq.n	800204a <HAL_RCC_ClockConfig+0x24a>
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	68db      	ldr	r3, [r3, #12]
 800203a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800203e:	d004      	beq.n	800204a <HAL_RCC_ClockConfig+0x24a>
 8002040:	f240 41c1 	movw	r1, #1217	; 0x4c1
 8002044:	482a      	ldr	r0, [pc, #168]	; (80020f0 <HAL_RCC_ClockConfig+0x2f0>)
 8002046:	f005 ff51 	bl	8007eec <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800204a:	4b2a      	ldr	r3, [pc, #168]	; (80020f4 <HAL_RCC_ClockConfig+0x2f4>)
 800204c:	689b      	ldr	r3, [r3, #8]
 800204e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	68db      	ldr	r3, [r3, #12]
 8002056:	4927      	ldr	r1, [pc, #156]	; (80020f4 <HAL_RCC_ClockConfig+0x2f4>)
 8002058:	4313      	orrs	r3, r2
 800205a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f003 0308 	and.w	r3, r3, #8
 8002064:	2b00      	cmp	r3, #0
 8002066:	d026      	beq.n	80020b6 <HAL_RCC_ClockConfig+0x2b6>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	691b      	ldr	r3, [r3, #16]
 800206c:	2b00      	cmp	r3, #0
 800206e:	d018      	beq.n	80020a2 <HAL_RCC_ClockConfig+0x2a2>
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	691b      	ldr	r3, [r3, #16]
 8002074:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002078:	d013      	beq.n	80020a2 <HAL_RCC_ClockConfig+0x2a2>
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	691b      	ldr	r3, [r3, #16]
 800207e:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8002082:	d00e      	beq.n	80020a2 <HAL_RCC_ClockConfig+0x2a2>
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	691b      	ldr	r3, [r3, #16]
 8002088:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800208c:	d009      	beq.n	80020a2 <HAL_RCC_ClockConfig+0x2a2>
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	691b      	ldr	r3, [r3, #16]
 8002092:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002096:	d004      	beq.n	80020a2 <HAL_RCC_ClockConfig+0x2a2>
 8002098:	f44f 6199 	mov.w	r1, #1224	; 0x4c8
 800209c:	4814      	ldr	r0, [pc, #80]	; (80020f0 <HAL_RCC_ClockConfig+0x2f0>)
 800209e:	f005 ff25 	bl	8007eec <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80020a2:	4b14      	ldr	r3, [pc, #80]	; (80020f4 <HAL_RCC_ClockConfig+0x2f4>)
 80020a4:	689b      	ldr	r3, [r3, #8]
 80020a6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	691b      	ldr	r3, [r3, #16]
 80020ae:	00db      	lsls	r3, r3, #3
 80020b0:	4910      	ldr	r1, [pc, #64]	; (80020f4 <HAL_RCC_ClockConfig+0x2f4>)
 80020b2:	4313      	orrs	r3, r2
 80020b4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80020b6:	f000 f825 	bl	8002104 <HAL_RCC_GetSysClockFreq>
 80020ba:	4601      	mov	r1, r0
 80020bc:	4b0d      	ldr	r3, [pc, #52]	; (80020f4 <HAL_RCC_ClockConfig+0x2f4>)
 80020be:	689b      	ldr	r3, [r3, #8]
 80020c0:	091b      	lsrs	r3, r3, #4
 80020c2:	f003 030f 	and.w	r3, r3, #15
 80020c6:	4a0c      	ldr	r2, [pc, #48]	; (80020f8 <HAL_RCC_ClockConfig+0x2f8>)
 80020c8:	5cd3      	ldrb	r3, [r2, r3]
 80020ca:	f003 031f 	and.w	r3, r3, #31
 80020ce:	fa21 f303 	lsr.w	r3, r1, r3
 80020d2:	4a0a      	ldr	r2, [pc, #40]	; (80020fc <HAL_RCC_ClockConfig+0x2fc>)
 80020d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80020d6:	4b0a      	ldr	r3, [pc, #40]	; (8002100 <HAL_RCC_ClockConfig+0x300>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	4618      	mov	r0, r3
 80020dc:	f001 fc48 	bl	8003970 <HAL_InitTick>
 80020e0:	4603      	mov	r3, r0
 80020e2:	72fb      	strb	r3, [r7, #11]

  return status;
 80020e4:	7afb      	ldrb	r3, [r7, #11]
}
 80020e6:	4618      	mov	r0, r3
 80020e8:	3710      	adds	r7, #16
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bd80      	pop	{r7, pc}
 80020ee:	bf00      	nop
 80020f0:	08009d10 	.word	0x08009d10
 80020f4:	40021000 	.word	0x40021000
 80020f8:	08009fbc 	.word	0x08009fbc
 80020fc:	2000000c 	.word	0x2000000c
 8002100:	20000000 	.word	0x20000000

08002104 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002104:	b480      	push	{r7}
 8002106:	b089      	sub	sp, #36	; 0x24
 8002108:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800210a:	2300      	movs	r3, #0
 800210c:	61fb      	str	r3, [r7, #28]
 800210e:	2300      	movs	r3, #0
 8002110:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002112:	4b3d      	ldr	r3, [pc, #244]	; (8002208 <HAL_RCC_GetSysClockFreq+0x104>)
 8002114:	689b      	ldr	r3, [r3, #8]
 8002116:	f003 030c 	and.w	r3, r3, #12
 800211a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800211c:	4b3a      	ldr	r3, [pc, #232]	; (8002208 <HAL_RCC_GetSysClockFreq+0x104>)
 800211e:	68db      	ldr	r3, [r3, #12]
 8002120:	f003 0303 	and.w	r3, r3, #3
 8002124:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002126:	693b      	ldr	r3, [r7, #16]
 8002128:	2b00      	cmp	r3, #0
 800212a:	d005      	beq.n	8002138 <HAL_RCC_GetSysClockFreq+0x34>
 800212c:	693b      	ldr	r3, [r7, #16]
 800212e:	2b0c      	cmp	r3, #12
 8002130:	d121      	bne.n	8002176 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	2b01      	cmp	r3, #1
 8002136:	d11e      	bne.n	8002176 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002138:	4b33      	ldr	r3, [pc, #204]	; (8002208 <HAL_RCC_GetSysClockFreq+0x104>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f003 0308 	and.w	r3, r3, #8
 8002140:	2b00      	cmp	r3, #0
 8002142:	d107      	bne.n	8002154 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002144:	4b30      	ldr	r3, [pc, #192]	; (8002208 <HAL_RCC_GetSysClockFreq+0x104>)
 8002146:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800214a:	0a1b      	lsrs	r3, r3, #8
 800214c:	f003 030f 	and.w	r3, r3, #15
 8002150:	61fb      	str	r3, [r7, #28]
 8002152:	e005      	b.n	8002160 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002154:	4b2c      	ldr	r3, [pc, #176]	; (8002208 <HAL_RCC_GetSysClockFreq+0x104>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	091b      	lsrs	r3, r3, #4
 800215a:	f003 030f 	and.w	r3, r3, #15
 800215e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002160:	4a2a      	ldr	r2, [pc, #168]	; (800220c <HAL_RCC_GetSysClockFreq+0x108>)
 8002162:	69fb      	ldr	r3, [r7, #28]
 8002164:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002168:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800216a:	693b      	ldr	r3, [r7, #16]
 800216c:	2b00      	cmp	r3, #0
 800216e:	d10d      	bne.n	800218c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002170:	69fb      	ldr	r3, [r7, #28]
 8002172:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002174:	e00a      	b.n	800218c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002176:	693b      	ldr	r3, [r7, #16]
 8002178:	2b04      	cmp	r3, #4
 800217a:	d102      	bne.n	8002182 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800217c:	4b24      	ldr	r3, [pc, #144]	; (8002210 <HAL_RCC_GetSysClockFreq+0x10c>)
 800217e:	61bb      	str	r3, [r7, #24]
 8002180:	e004      	b.n	800218c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002182:	693b      	ldr	r3, [r7, #16]
 8002184:	2b08      	cmp	r3, #8
 8002186:	d101      	bne.n	800218c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002188:	4b22      	ldr	r3, [pc, #136]	; (8002214 <HAL_RCC_GetSysClockFreq+0x110>)
 800218a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800218c:	693b      	ldr	r3, [r7, #16]
 800218e:	2b0c      	cmp	r3, #12
 8002190:	d133      	bne.n	80021fa <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002192:	4b1d      	ldr	r3, [pc, #116]	; (8002208 <HAL_RCC_GetSysClockFreq+0x104>)
 8002194:	68db      	ldr	r3, [r3, #12]
 8002196:	f003 0303 	and.w	r3, r3, #3
 800219a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800219c:	68bb      	ldr	r3, [r7, #8]
 800219e:	2b02      	cmp	r3, #2
 80021a0:	d002      	beq.n	80021a8 <HAL_RCC_GetSysClockFreq+0xa4>
 80021a2:	2b03      	cmp	r3, #3
 80021a4:	d003      	beq.n	80021ae <HAL_RCC_GetSysClockFreq+0xaa>
 80021a6:	e005      	b.n	80021b4 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80021a8:	4b19      	ldr	r3, [pc, #100]	; (8002210 <HAL_RCC_GetSysClockFreq+0x10c>)
 80021aa:	617b      	str	r3, [r7, #20]
      break;
 80021ac:	e005      	b.n	80021ba <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80021ae:	4b19      	ldr	r3, [pc, #100]	; (8002214 <HAL_RCC_GetSysClockFreq+0x110>)
 80021b0:	617b      	str	r3, [r7, #20]
      break;
 80021b2:	e002      	b.n	80021ba <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80021b4:	69fb      	ldr	r3, [r7, #28]
 80021b6:	617b      	str	r3, [r7, #20]
      break;
 80021b8:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80021ba:	4b13      	ldr	r3, [pc, #76]	; (8002208 <HAL_RCC_GetSysClockFreq+0x104>)
 80021bc:	68db      	ldr	r3, [r3, #12]
 80021be:	091b      	lsrs	r3, r3, #4
 80021c0:	f003 0307 	and.w	r3, r3, #7
 80021c4:	3301      	adds	r3, #1
 80021c6:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80021c8:	4b0f      	ldr	r3, [pc, #60]	; (8002208 <HAL_RCC_GetSysClockFreq+0x104>)
 80021ca:	68db      	ldr	r3, [r3, #12]
 80021cc:	0a1b      	lsrs	r3, r3, #8
 80021ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80021d2:	697a      	ldr	r2, [r7, #20]
 80021d4:	fb02 f203 	mul.w	r2, r2, r3
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	fbb2 f3f3 	udiv	r3, r2, r3
 80021de:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80021e0:	4b09      	ldr	r3, [pc, #36]	; (8002208 <HAL_RCC_GetSysClockFreq+0x104>)
 80021e2:	68db      	ldr	r3, [r3, #12]
 80021e4:	0e5b      	lsrs	r3, r3, #25
 80021e6:	f003 0303 	and.w	r3, r3, #3
 80021ea:	3301      	adds	r3, #1
 80021ec:	005b      	lsls	r3, r3, #1
 80021ee:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80021f0:	697a      	ldr	r2, [r7, #20]
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80021f8:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80021fa:	69bb      	ldr	r3, [r7, #24]
}
 80021fc:	4618      	mov	r0, r3
 80021fe:	3724      	adds	r7, #36	; 0x24
 8002200:	46bd      	mov	sp, r7
 8002202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002206:	4770      	bx	lr
 8002208:	40021000 	.word	0x40021000
 800220c:	08009fd4 	.word	0x08009fd4
 8002210:	00f42400 	.word	0x00f42400
 8002214:	007a1200 	.word	0x007a1200

08002218 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002218:	b480      	push	{r7}
 800221a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800221c:	4b03      	ldr	r3, [pc, #12]	; (800222c <HAL_RCC_GetHCLKFreq+0x14>)
 800221e:	681b      	ldr	r3, [r3, #0]
}
 8002220:	4618      	mov	r0, r3
 8002222:	46bd      	mov	sp, r7
 8002224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002228:	4770      	bx	lr
 800222a:	bf00      	nop
 800222c:	2000000c 	.word	0x2000000c

08002230 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002234:	f7ff fff0 	bl	8002218 <HAL_RCC_GetHCLKFreq>
 8002238:	4601      	mov	r1, r0
 800223a:	4b06      	ldr	r3, [pc, #24]	; (8002254 <HAL_RCC_GetPCLK1Freq+0x24>)
 800223c:	689b      	ldr	r3, [r3, #8]
 800223e:	0a1b      	lsrs	r3, r3, #8
 8002240:	f003 0307 	and.w	r3, r3, #7
 8002244:	4a04      	ldr	r2, [pc, #16]	; (8002258 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002246:	5cd3      	ldrb	r3, [r2, r3]
 8002248:	f003 031f 	and.w	r3, r3, #31
 800224c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002250:	4618      	mov	r0, r3
 8002252:	bd80      	pop	{r7, pc}
 8002254:	40021000 	.word	0x40021000
 8002258:	08009fcc 	.word	0x08009fcc

0800225c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002260:	f7ff ffda 	bl	8002218 <HAL_RCC_GetHCLKFreq>
 8002264:	4601      	mov	r1, r0
 8002266:	4b06      	ldr	r3, [pc, #24]	; (8002280 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002268:	689b      	ldr	r3, [r3, #8]
 800226a:	0adb      	lsrs	r3, r3, #11
 800226c:	f003 0307 	and.w	r3, r3, #7
 8002270:	4a04      	ldr	r2, [pc, #16]	; (8002284 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002272:	5cd3      	ldrb	r3, [r2, r3]
 8002274:	f003 031f 	and.w	r3, r3, #31
 8002278:	fa21 f303 	lsr.w	r3, r1, r3
}
 800227c:	4618      	mov	r0, r3
 800227e:	bd80      	pop	{r7, pc}
 8002280:	40021000 	.word	0x40021000
 8002284:	08009fcc 	.word	0x08009fcc

08002288 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b082      	sub	sp, #8
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
 8002290:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	2b00      	cmp	r3, #0
 8002296:	d104      	bne.n	80022a2 <HAL_RCC_GetClockConfig+0x1a>
 8002298:	f44f 61cc 	mov.w	r1, #1632	; 0x660
 800229c:	4818      	ldr	r0, [pc, #96]	; (8002300 <HAL_RCC_GetClockConfig+0x78>)
 800229e:	f005 fe25 	bl	8007eec <assert_failed>
  assert_param(pFLatency != (void *)NULL);
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d104      	bne.n	80022b2 <HAL_RCC_GetClockConfig+0x2a>
 80022a8:	f240 6161 	movw	r1, #1633	; 0x661
 80022ac:	4814      	ldr	r0, [pc, #80]	; (8002300 <HAL_RCC_GetClockConfig+0x78>)
 80022ae:	f005 fe1d 	bl	8007eec <assert_failed>

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	220f      	movs	r2, #15
 80022b6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80022b8:	4b12      	ldr	r3, [pc, #72]	; (8002304 <HAL_RCC_GetClockConfig+0x7c>)
 80022ba:	689b      	ldr	r3, [r3, #8]
 80022bc:	f003 0203 	and.w	r2, r3, #3
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80022c4:	4b0f      	ldr	r3, [pc, #60]	; (8002304 <HAL_RCC_GetClockConfig+0x7c>)
 80022c6:	689b      	ldr	r3, [r3, #8]
 80022c8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80022d0:	4b0c      	ldr	r3, [pc, #48]	; (8002304 <HAL_RCC_GetClockConfig+0x7c>)
 80022d2:	689b      	ldr	r3, [r3, #8]
 80022d4:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80022dc:	4b09      	ldr	r3, [pc, #36]	; (8002304 <HAL_RCC_GetClockConfig+0x7c>)
 80022de:	689b      	ldr	r3, [r3, #8]
 80022e0:	08db      	lsrs	r3, r3, #3
 80022e2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80022ea:	4b07      	ldr	r3, [pc, #28]	; (8002308 <HAL_RCC_GetClockConfig+0x80>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f003 0207 	and.w	r2, r3, #7
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	601a      	str	r2, [r3, #0]
}
 80022f6:	bf00      	nop
 80022f8:	3708      	adds	r7, #8
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bd80      	pop	{r7, pc}
 80022fe:	bf00      	nop
 8002300:	08009d10 	.word	0x08009d10
 8002304:	40021000 	.word	0x40021000
 8002308:	40022000 	.word	0x40022000

0800230c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b086      	sub	sp, #24
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002314:	2300      	movs	r3, #0
 8002316:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002318:	4b2a      	ldr	r3, [pc, #168]	; (80023c4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800231a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800231c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002320:	2b00      	cmp	r3, #0
 8002322:	d003      	beq.n	800232c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002324:	f7ff f80e 	bl	8001344 <HAL_PWREx_GetVoltageRange>
 8002328:	6178      	str	r0, [r7, #20]
 800232a:	e014      	b.n	8002356 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800232c:	4b25      	ldr	r3, [pc, #148]	; (80023c4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800232e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002330:	4a24      	ldr	r2, [pc, #144]	; (80023c4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002332:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002336:	6593      	str	r3, [r2, #88]	; 0x58
 8002338:	4b22      	ldr	r3, [pc, #136]	; (80023c4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800233a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800233c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002340:	60fb      	str	r3, [r7, #12]
 8002342:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002344:	f7fe fffe 	bl	8001344 <HAL_PWREx_GetVoltageRange>
 8002348:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800234a:	4b1e      	ldr	r3, [pc, #120]	; (80023c4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800234c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800234e:	4a1d      	ldr	r2, [pc, #116]	; (80023c4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002350:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002354:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002356:	697b      	ldr	r3, [r7, #20]
 8002358:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800235c:	d10b      	bne.n	8002376 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	2b80      	cmp	r3, #128	; 0x80
 8002362:	d919      	bls.n	8002398 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2ba0      	cmp	r3, #160	; 0xa0
 8002368:	d902      	bls.n	8002370 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800236a:	2302      	movs	r3, #2
 800236c:	613b      	str	r3, [r7, #16]
 800236e:	e013      	b.n	8002398 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002370:	2301      	movs	r3, #1
 8002372:	613b      	str	r3, [r7, #16]
 8002374:	e010      	b.n	8002398 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	2b80      	cmp	r3, #128	; 0x80
 800237a:	d902      	bls.n	8002382 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800237c:	2303      	movs	r3, #3
 800237e:	613b      	str	r3, [r7, #16]
 8002380:	e00a      	b.n	8002398 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	2b80      	cmp	r3, #128	; 0x80
 8002386:	d102      	bne.n	800238e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002388:	2302      	movs	r3, #2
 800238a:	613b      	str	r3, [r7, #16]
 800238c:	e004      	b.n	8002398 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	2b70      	cmp	r3, #112	; 0x70
 8002392:	d101      	bne.n	8002398 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002394:	2301      	movs	r3, #1
 8002396:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002398:	4b0b      	ldr	r3, [pc, #44]	; (80023c8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f023 0207 	bic.w	r2, r3, #7
 80023a0:	4909      	ldr	r1, [pc, #36]	; (80023c8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80023a2:	693b      	ldr	r3, [r7, #16]
 80023a4:	4313      	orrs	r3, r2
 80023a6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80023a8:	4b07      	ldr	r3, [pc, #28]	; (80023c8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f003 0307 	and.w	r3, r3, #7
 80023b0:	693a      	ldr	r2, [r7, #16]
 80023b2:	429a      	cmp	r2, r3
 80023b4:	d001      	beq.n	80023ba <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80023b6:	2301      	movs	r3, #1
 80023b8:	e000      	b.n	80023bc <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80023ba:	2300      	movs	r3, #0
}
 80023bc:	4618      	mov	r0, r3
 80023be:	3718      	adds	r7, #24
 80023c0:	46bd      	mov	sp, r7
 80023c2:	bd80      	pop	{r7, pc}
 80023c4:	40021000 	.word	0x40021000
 80023c8:	40022000 	.word	0x40022000

080023cc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b086      	sub	sp, #24
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80023d4:	2300      	movs	r3, #0
 80023d6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80023d8:	2300      	movs	r3, #0
 80023da:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f003 0301 	and.w	r3, r3, #1
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d16f      	bne.n	80024c8 <HAL_RCCEx_PeriphCLKConfig+0xfc>
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f003 0302 	and.w	r3, r3, #2
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d169      	bne.n	80024c8 <HAL_RCCEx_PeriphCLKConfig+0xfc>
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f003 0304 	and.w	r3, r3, #4
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d163      	bne.n	80024c8 <HAL_RCCEx_PeriphCLKConfig+0xfc>
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f003 0308 	and.w	r3, r3, #8
 8002408:	2b00      	cmp	r3, #0
 800240a:	d15d      	bne.n	80024c8 <HAL_RCCEx_PeriphCLKConfig+0xfc>
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f003 0310 	and.w	r3, r3, #16
 8002414:	2b00      	cmp	r3, #0
 8002416:	d157      	bne.n	80024c8 <HAL_RCCEx_PeriphCLKConfig+0xfc>
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f003 0320 	and.w	r3, r3, #32
 8002420:	2b00      	cmp	r3, #0
 8002422:	d151      	bne.n	80024c8 <HAL_RCCEx_PeriphCLKConfig+0xfc>
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800242c:	2b00      	cmp	r3, #0
 800242e:	d14b      	bne.n	80024c8 <HAL_RCCEx_PeriphCLKConfig+0xfc>
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002438:	2b00      	cmp	r3, #0
 800243a:	d145      	bne.n	80024c8 <HAL_RCCEx_PeriphCLKConfig+0xfc>
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002444:	2b00      	cmp	r3, #0
 8002446:	d13f      	bne.n	80024c8 <HAL_RCCEx_PeriphCLKConfig+0xfc>
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002450:	2b00      	cmp	r3, #0
 8002452:	d139      	bne.n	80024c8 <HAL_RCCEx_PeriphCLKConfig+0xfc>
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800245c:	2b00      	cmp	r3, #0
 800245e:	d133      	bne.n	80024c8 <HAL_RCCEx_PeriphCLKConfig+0xfc>
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002468:	2b00      	cmp	r3, #0
 800246a:	d12d      	bne.n	80024c8 <HAL_RCCEx_PeriphCLKConfig+0xfc>
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002474:	2b00      	cmp	r3, #0
 8002476:	d127      	bne.n	80024c8 <HAL_RCCEx_PeriphCLKConfig+0xfc>
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002480:	2b00      	cmp	r3, #0
 8002482:	d121      	bne.n	80024c8 <HAL_RCCEx_PeriphCLKConfig+0xfc>
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800248c:	2b00      	cmp	r3, #0
 800248e:	d11b      	bne.n	80024c8 <HAL_RCCEx_PeriphCLKConfig+0xfc>
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002498:	2b00      	cmp	r3, #0
 800249a:	d115      	bne.n	80024c8 <HAL_RCCEx_PeriphCLKConfig+0xfc>
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d10f      	bne.n	80024c8 <HAL_RCCEx_PeriphCLKConfig+0xfc>
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d109      	bne.n	80024c8 <HAL_RCCEx_PeriphCLKConfig+0xfc>
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d103      	bne.n	80024c8 <HAL_RCCEx_PeriphCLKConfig+0xfc>
 80024c0:	21cb      	movs	r1, #203	; 0xcb
 80024c2:	48ab      	ldr	r0, [pc, #684]	; (8002770 <HAL_RCCEx_PeriphCLKConfig+0x3a4>)
 80024c4:	f005 fd12 	bl	8007eec <assert_failed>

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d056      	beq.n	8002582 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d012      	beq.n	8002502 <HAL_RCCEx_PeriphCLKConfig+0x136>
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80024e0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80024e4:	d00d      	beq.n	8002502 <HAL_RCCEx_PeriphCLKConfig+0x136>
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80024ea:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80024ee:	d008      	beq.n	8002502 <HAL_RCCEx_PeriphCLKConfig+0x136>
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80024f4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80024f8:	d003      	beq.n	8002502 <HAL_RCCEx_PeriphCLKConfig+0x136>
 80024fa:	21d3      	movs	r1, #211	; 0xd3
 80024fc:	489c      	ldr	r0, [pc, #624]	; (8002770 <HAL_RCCEx_PeriphCLKConfig+0x3a4>)
 80024fe:	f005 fcf5 	bl	8007eec <assert_failed>

    switch(PeriphClkInit->Sai1ClockSelection)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002506:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800250a:	d01c      	beq.n	8002546 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 800250c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002510:	d802      	bhi.n	8002518 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8002512:	2b00      	cmp	r3, #0
 8002514:	d00e      	beq.n	8002534 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8002516:	e01f      	b.n	8002558 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8002518:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800251c:	d003      	beq.n	8002526 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 800251e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002522:	d01c      	beq.n	800255e <HAL_RCCEx_PeriphCLKConfig+0x192>
 8002524:	e018      	b.n	8002558 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002526:	4b93      	ldr	r3, [pc, #588]	; (8002774 <HAL_RCCEx_PeriphCLKConfig+0x3a8>)
 8002528:	68db      	ldr	r3, [r3, #12]
 800252a:	4a92      	ldr	r2, [pc, #584]	; (8002774 <HAL_RCCEx_PeriphCLKConfig+0x3a8>)
 800252c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002530:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002532:	e015      	b.n	8002560 <HAL_RCCEx_PeriphCLKConfig+0x194>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	3304      	adds	r3, #4
 8002538:	2100      	movs	r1, #0
 800253a:	4618      	mov	r0, r3
 800253c:	f000 fc1a 	bl	8002d74 <RCCEx_PLLSAI1_Config>
 8002540:	4603      	mov	r3, r0
 8002542:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002544:	e00c      	b.n	8002560 <HAL_RCCEx_PeriphCLKConfig+0x194>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	3320      	adds	r3, #32
 800254a:	2100      	movs	r1, #0
 800254c:	4618      	mov	r0, r3
 800254e:	f000 fd8d 	bl	800306c <RCCEx_PLLSAI2_Config>
 8002552:	4603      	mov	r3, r0
 8002554:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002556:	e003      	b.n	8002560 <HAL_RCCEx_PeriphCLKConfig+0x194>
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002558:	2301      	movs	r3, #1
 800255a:	74fb      	strb	r3, [r7, #19]
      break;
 800255c:	e000      	b.n	8002560 <HAL_RCCEx_PeriphCLKConfig+0x194>
      break;
 800255e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002560:	7cfb      	ldrb	r3, [r7, #19]
 8002562:	2b00      	cmp	r3, #0
 8002564:	d10b      	bne.n	800257e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002566:	4b83      	ldr	r3, [pc, #524]	; (8002774 <HAL_RCCEx_PeriphCLKConfig+0x3a8>)
 8002568:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800256c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002574:	497f      	ldr	r1, [pc, #508]	; (8002774 <HAL_RCCEx_PeriphCLKConfig+0x3a8>)
 8002576:	4313      	orrs	r3, r2
 8002578:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800257c:	e001      	b.n	8002582 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800257e:	7cfb      	ldrb	r3, [r7, #19]
 8002580:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800258a:	2b00      	cmp	r3, #0
 800258c:	d057      	beq.n	800263e <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002592:	2b00      	cmp	r3, #0
 8002594:	d013      	beq.n	80025be <HAL_RCCEx_PeriphCLKConfig+0x1f2>
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800259a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800259e:	d00e      	beq.n	80025be <HAL_RCCEx_PeriphCLKConfig+0x1f2>
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80025a4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80025a8:	d009      	beq.n	80025be <HAL_RCCEx_PeriphCLKConfig+0x1f2>
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80025ae:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80025b2:	d004      	beq.n	80025be <HAL_RCCEx_PeriphCLKConfig+0x1f2>
 80025b4:	f240 1111 	movw	r1, #273	; 0x111
 80025b8:	486d      	ldr	r0, [pc, #436]	; (8002770 <HAL_RCCEx_PeriphCLKConfig+0x3a4>)
 80025ba:	f005 fc97 	bl	8007eec <assert_failed>

    switch(PeriphClkInit->Sai2ClockSelection)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80025c2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80025c6:	d01c      	beq.n	8002602 <HAL_RCCEx_PeriphCLKConfig+0x236>
 80025c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80025cc:	d802      	bhi.n	80025d4 <HAL_RCCEx_PeriphCLKConfig+0x208>
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d00e      	beq.n	80025f0 <HAL_RCCEx_PeriphCLKConfig+0x224>
 80025d2:	e01f      	b.n	8002614 <HAL_RCCEx_PeriphCLKConfig+0x248>
 80025d4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80025d8:	d003      	beq.n	80025e2 <HAL_RCCEx_PeriphCLKConfig+0x216>
 80025da:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80025de:	d01c      	beq.n	800261a <HAL_RCCEx_PeriphCLKConfig+0x24e>
 80025e0:	e018      	b.n	8002614 <HAL_RCCEx_PeriphCLKConfig+0x248>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80025e2:	4b64      	ldr	r3, [pc, #400]	; (8002774 <HAL_RCCEx_PeriphCLKConfig+0x3a8>)
 80025e4:	68db      	ldr	r3, [r3, #12]
 80025e6:	4a63      	ldr	r2, [pc, #396]	; (8002774 <HAL_RCCEx_PeriphCLKConfig+0x3a8>)
 80025e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025ec:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80025ee:	e015      	b.n	800261c <HAL_RCCEx_PeriphCLKConfig+0x250>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	3304      	adds	r3, #4
 80025f4:	2100      	movs	r1, #0
 80025f6:	4618      	mov	r0, r3
 80025f8:	f000 fbbc 	bl	8002d74 <RCCEx_PLLSAI1_Config>
 80025fc:	4603      	mov	r3, r0
 80025fe:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002600:	e00c      	b.n	800261c <HAL_RCCEx_PeriphCLKConfig+0x250>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	3320      	adds	r3, #32
 8002606:	2100      	movs	r1, #0
 8002608:	4618      	mov	r0, r3
 800260a:	f000 fd2f 	bl	800306c <RCCEx_PLLSAI2_Config>
 800260e:	4603      	mov	r3, r0
 8002610:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002612:	e003      	b.n	800261c <HAL_RCCEx_PeriphCLKConfig+0x250>
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002614:	2301      	movs	r3, #1
 8002616:	74fb      	strb	r3, [r7, #19]
      break;
 8002618:	e000      	b.n	800261c <HAL_RCCEx_PeriphCLKConfig+0x250>
      break;
 800261a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800261c:	7cfb      	ldrb	r3, [r7, #19]
 800261e:	2b00      	cmp	r3, #0
 8002620:	d10b      	bne.n	800263a <HAL_RCCEx_PeriphCLKConfig+0x26e>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002622:	4b54      	ldr	r3, [pc, #336]	; (8002774 <HAL_RCCEx_PeriphCLKConfig+0x3a8>)
 8002624:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002628:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002630:	4950      	ldr	r1, [pc, #320]	; (8002774 <HAL_RCCEx_PeriphCLKConfig+0x3a8>)
 8002632:	4313      	orrs	r3, r2
 8002634:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002638:	e001      	b.n	800263e <HAL_RCCEx_PeriphCLKConfig+0x272>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800263a:	7cfb      	ldrb	r3, [r7, #19]
 800263c:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002646:	2b00      	cmp	r3, #0
 8002648:	f000 80bf 	beq.w	80027ca <HAL_RCCEx_PeriphCLKConfig+0x3fe>
  {
    FlagStatus       pwrclkchanged = RESET;
 800264c:	2300      	movs	r3, #0
 800264e:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002656:	2b00      	cmp	r3, #0
 8002658:	d016      	beq.n	8002688 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002660:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002664:	d010      	beq.n	8002688 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800266c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002670:	d00a      	beq.n	8002688 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002678:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800267c:	d004      	beq.n	8002688 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 800267e:	f44f 71a3 	mov.w	r1, #326	; 0x146
 8002682:	483b      	ldr	r0, [pc, #236]	; (8002770 <HAL_RCCEx_PeriphCLKConfig+0x3a4>)
 8002684:	f005 fc32 	bl	8007eec <assert_failed>

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002688:	4b3a      	ldr	r3, [pc, #232]	; (8002774 <HAL_RCCEx_PeriphCLKConfig+0x3a8>)
 800268a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800268c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002690:	2b00      	cmp	r3, #0
 8002692:	d101      	bne.n	8002698 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 8002694:	2301      	movs	r3, #1
 8002696:	e000      	b.n	800269a <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 8002698:	2300      	movs	r3, #0
 800269a:	2b00      	cmp	r3, #0
 800269c:	d00d      	beq.n	80026ba <HAL_RCCEx_PeriphCLKConfig+0x2ee>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800269e:	4b35      	ldr	r3, [pc, #212]	; (8002774 <HAL_RCCEx_PeriphCLKConfig+0x3a8>)
 80026a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026a2:	4a34      	ldr	r2, [pc, #208]	; (8002774 <HAL_RCCEx_PeriphCLKConfig+0x3a8>)
 80026a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026a8:	6593      	str	r3, [r2, #88]	; 0x58
 80026aa:	4b32      	ldr	r3, [pc, #200]	; (8002774 <HAL_RCCEx_PeriphCLKConfig+0x3a8>)
 80026ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026b2:	60bb      	str	r3, [r7, #8]
 80026b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80026b6:	2301      	movs	r3, #1
 80026b8:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80026ba:	4b2f      	ldr	r3, [pc, #188]	; (8002778 <HAL_RCCEx_PeriphCLKConfig+0x3ac>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	4a2e      	ldr	r2, [pc, #184]	; (8002778 <HAL_RCCEx_PeriphCLKConfig+0x3ac>)
 80026c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026c4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80026c6:	f7fd ff7d 	bl	80005c4 <HAL_GetTick>
 80026ca:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80026cc:	e009      	b.n	80026e2 <HAL_RCCEx_PeriphCLKConfig+0x316>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026ce:	f7fd ff79 	bl	80005c4 <HAL_GetTick>
 80026d2:	4602      	mov	r2, r0
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	1ad3      	subs	r3, r2, r3
 80026d8:	2b02      	cmp	r3, #2
 80026da:	d902      	bls.n	80026e2 <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        ret = HAL_TIMEOUT;
 80026dc:	2303      	movs	r3, #3
 80026de:	74fb      	strb	r3, [r7, #19]
        break;
 80026e0:	e005      	b.n	80026ee <HAL_RCCEx_PeriphCLKConfig+0x322>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80026e2:	4b25      	ldr	r3, [pc, #148]	; (8002778 <HAL_RCCEx_PeriphCLKConfig+0x3ac>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d0ef      	beq.n	80026ce <HAL_RCCEx_PeriphCLKConfig+0x302>
      }
    }

    if(ret == HAL_OK)
 80026ee:	7cfb      	ldrb	r3, [r7, #19]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d15f      	bne.n	80027b4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80026f4:	4b1f      	ldr	r3, [pc, #124]	; (8002774 <HAL_RCCEx_PeriphCLKConfig+0x3a8>)
 80026f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80026fe:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002700:	697b      	ldr	r3, [r7, #20]
 8002702:	2b00      	cmp	r3, #0
 8002704:	d01f      	beq.n	8002746 <HAL_RCCEx_PeriphCLKConfig+0x37a>
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800270c:	697a      	ldr	r2, [r7, #20]
 800270e:	429a      	cmp	r2, r3
 8002710:	d019      	beq.n	8002746 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002712:	4b18      	ldr	r3, [pc, #96]	; (8002774 <HAL_RCCEx_PeriphCLKConfig+0x3a8>)
 8002714:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002718:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800271c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800271e:	4b15      	ldr	r3, [pc, #84]	; (8002774 <HAL_RCCEx_PeriphCLKConfig+0x3a8>)
 8002720:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002724:	4a13      	ldr	r2, [pc, #76]	; (8002774 <HAL_RCCEx_PeriphCLKConfig+0x3a8>)
 8002726:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800272a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800272e:	4b11      	ldr	r3, [pc, #68]	; (8002774 <HAL_RCCEx_PeriphCLKConfig+0x3a8>)
 8002730:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002734:	4a0f      	ldr	r2, [pc, #60]	; (8002774 <HAL_RCCEx_PeriphCLKConfig+0x3a8>)
 8002736:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800273a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800273e:	4a0d      	ldr	r2, [pc, #52]	; (8002774 <HAL_RCCEx_PeriphCLKConfig+0x3a8>)
 8002740:	697b      	ldr	r3, [r7, #20]
 8002742:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002746:	697b      	ldr	r3, [r7, #20]
 8002748:	f003 0301 	and.w	r3, r3, #1
 800274c:	2b00      	cmp	r3, #0
 800274e:	d01c      	beq.n	800278a <HAL_RCCEx_PeriphCLKConfig+0x3be>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002750:	f7fd ff38 	bl	80005c4 <HAL_GetTick>
 8002754:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002756:	e011      	b.n	800277c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002758:	f7fd ff34 	bl	80005c4 <HAL_GetTick>
 800275c:	4602      	mov	r2, r0
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	1ad3      	subs	r3, r2, r3
 8002762:	f241 3288 	movw	r2, #5000	; 0x1388
 8002766:	4293      	cmp	r3, r2
 8002768:	d908      	bls.n	800277c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
          {
            ret = HAL_TIMEOUT;
 800276a:	2303      	movs	r3, #3
 800276c:	74fb      	strb	r3, [r7, #19]
            break;
 800276e:	e00c      	b.n	800278a <HAL_RCCEx_PeriphCLKConfig+0x3be>
 8002770:	08009d48 	.word	0x08009d48
 8002774:	40021000 	.word	0x40021000
 8002778:	40007000 	.word	0x40007000
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800277c:	4b0c      	ldr	r3, [pc, #48]	; (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800277e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002782:	f003 0302 	and.w	r3, r3, #2
 8002786:	2b00      	cmp	r3, #0
 8002788:	d0e6      	beq.n	8002758 <HAL_RCCEx_PeriphCLKConfig+0x38c>
          }
        }
      }

      if(ret == HAL_OK)
 800278a:	7cfb      	ldrb	r3, [r7, #19]
 800278c:	2b00      	cmp	r3, #0
 800278e:	d10c      	bne.n	80027aa <HAL_RCCEx_PeriphCLKConfig+0x3de>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002790:	4b07      	ldr	r3, [pc, #28]	; (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002792:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002796:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80027a0:	4903      	ldr	r1, [pc, #12]	; (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80027a2:	4313      	orrs	r3, r2
 80027a4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80027a8:	e006      	b.n	80027b8 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80027aa:	7cfb      	ldrb	r3, [r7, #19]
 80027ac:	74bb      	strb	r3, [r7, #18]
 80027ae:	e003      	b.n	80027b8 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 80027b0:	40021000 	.word	0x40021000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80027b4:	7cfb      	ldrb	r3, [r7, #19]
 80027b6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80027b8:	7c7b      	ldrb	r3, [r7, #17]
 80027ba:	2b01      	cmp	r3, #1
 80027bc:	d105      	bne.n	80027ca <HAL_RCCEx_PeriphCLKConfig+0x3fe>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027be:	4ba1      	ldr	r3, [pc, #644]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x678>)
 80027c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027c2:	4aa0      	ldr	r2, [pc, #640]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x678>)
 80027c4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80027c8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f003 0301 	and.w	r3, r3, #1
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d01f      	beq.n	8002816 <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d010      	beq.n	8002800 <HAL_RCCEx_PeriphCLKConfig+0x434>
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027e2:	2b01      	cmp	r3, #1
 80027e4:	d00c      	beq.n	8002800 <HAL_RCCEx_PeriphCLKConfig+0x434>
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027ea:	2b03      	cmp	r3, #3
 80027ec:	d008      	beq.n	8002800 <HAL_RCCEx_PeriphCLKConfig+0x434>
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027f2:	2b02      	cmp	r3, #2
 80027f4:	d004      	beq.n	8002800 <HAL_RCCEx_PeriphCLKConfig+0x434>
 80027f6:	f240 119b 	movw	r1, #411	; 0x19b
 80027fa:	4893      	ldr	r0, [pc, #588]	; (8002a48 <HAL_RCCEx_PeriphCLKConfig+0x67c>)
 80027fc:	f005 fb76 	bl	8007eec <assert_failed>

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002800:	4b90      	ldr	r3, [pc, #576]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x678>)
 8002802:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002806:	f023 0203 	bic.w	r2, r3, #3
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800280e:	498d      	ldr	r1, [pc, #564]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x678>)
 8002810:	4313      	orrs	r3, r2
 8002812:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f003 0302 	and.w	r3, r3, #2
 800281e:	2b00      	cmp	r3, #0
 8002820:	d01f      	beq.n	8002862 <HAL_RCCEx_PeriphCLKConfig+0x496>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002826:	2b00      	cmp	r3, #0
 8002828:	d010      	beq.n	800284c <HAL_RCCEx_PeriphCLKConfig+0x480>
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800282e:	2b04      	cmp	r3, #4
 8002830:	d00c      	beq.n	800284c <HAL_RCCEx_PeriphCLKConfig+0x480>
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002836:	2b0c      	cmp	r3, #12
 8002838:	d008      	beq.n	800284c <HAL_RCCEx_PeriphCLKConfig+0x480>
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800283e:	2b08      	cmp	r3, #8
 8002840:	d004      	beq.n	800284c <HAL_RCCEx_PeriphCLKConfig+0x480>
 8002842:	f240 11a5 	movw	r1, #421	; 0x1a5
 8002846:	4880      	ldr	r0, [pc, #512]	; (8002a48 <HAL_RCCEx_PeriphCLKConfig+0x67c>)
 8002848:	f005 fb50 	bl	8007eec <assert_failed>

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800284c:	4b7d      	ldr	r3, [pc, #500]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x678>)
 800284e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002852:	f023 020c 	bic.w	r2, r3, #12
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800285a:	497a      	ldr	r1, [pc, #488]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x678>)
 800285c:	4313      	orrs	r3, r2
 800285e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f003 0304 	and.w	r3, r3, #4
 800286a:	2b00      	cmp	r3, #0
 800286c:	d01f      	beq.n	80028ae <HAL_RCCEx_PeriphCLKConfig+0x4e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002872:	2b00      	cmp	r3, #0
 8002874:	d010      	beq.n	8002898 <HAL_RCCEx_PeriphCLKConfig+0x4cc>
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800287a:	2b10      	cmp	r3, #16
 800287c:	d00c      	beq.n	8002898 <HAL_RCCEx_PeriphCLKConfig+0x4cc>
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002882:	2b30      	cmp	r3, #48	; 0x30
 8002884:	d008      	beq.n	8002898 <HAL_RCCEx_PeriphCLKConfig+0x4cc>
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800288a:	2b20      	cmp	r3, #32
 800288c:	d004      	beq.n	8002898 <HAL_RCCEx_PeriphCLKConfig+0x4cc>
 800288e:	f240 11b1 	movw	r1, #433	; 0x1b1
 8002892:	486d      	ldr	r0, [pc, #436]	; (8002a48 <HAL_RCCEx_PeriphCLKConfig+0x67c>)
 8002894:	f005 fb2a 	bl	8007eec <assert_failed>

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002898:	4b6a      	ldr	r3, [pc, #424]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x678>)
 800289a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800289e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028a6:	4967      	ldr	r1, [pc, #412]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x678>)
 80028a8:	4313      	orrs	r3, r2
 80028aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f003 0308 	and.w	r3, r3, #8
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d01f      	beq.n	80028fa <HAL_RCCEx_PeriphCLKConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d010      	beq.n	80028e4 <HAL_RCCEx_PeriphCLKConfig+0x518>
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028c6:	2b40      	cmp	r3, #64	; 0x40
 80028c8:	d00c      	beq.n	80028e4 <HAL_RCCEx_PeriphCLKConfig+0x518>
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028ce:	2bc0      	cmp	r3, #192	; 0xc0
 80028d0:	d008      	beq.n	80028e4 <HAL_RCCEx_PeriphCLKConfig+0x518>
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028d6:	2b80      	cmp	r3, #128	; 0x80
 80028d8:	d004      	beq.n	80028e4 <HAL_RCCEx_PeriphCLKConfig+0x518>
 80028da:	f240 11bf 	movw	r1, #447	; 0x1bf
 80028de:	485a      	ldr	r0, [pc, #360]	; (8002a48 <HAL_RCCEx_PeriphCLKConfig+0x67c>)
 80028e0:	f005 fb04 	bl	8007eec <assert_failed>

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80028e4:	4b57      	ldr	r3, [pc, #348]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x678>)
 80028e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028ea:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028f2:	4954      	ldr	r1, [pc, #336]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x678>)
 80028f4:	4313      	orrs	r3, r2
 80028f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f003 0310 	and.w	r3, r3, #16
 8002902:	2b00      	cmp	r3, #0
 8002904:	d022      	beq.n	800294c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800290a:	2b00      	cmp	r3, #0
 800290c:	d013      	beq.n	8002936 <HAL_RCCEx_PeriphCLKConfig+0x56a>
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002912:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002916:	d00e      	beq.n	8002936 <HAL_RCCEx_PeriphCLKConfig+0x56a>
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800291c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002920:	d009      	beq.n	8002936 <HAL_RCCEx_PeriphCLKConfig+0x56a>
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002926:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800292a:	d004      	beq.n	8002936 <HAL_RCCEx_PeriphCLKConfig+0x56a>
 800292c:	f240 11cd 	movw	r1, #461	; 0x1cd
 8002930:	4845      	ldr	r0, [pc, #276]	; (8002a48 <HAL_RCCEx_PeriphCLKConfig+0x67c>)
 8002932:	f005 fadb 	bl	8007eec <assert_failed>

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002936:	4b43      	ldr	r3, [pc, #268]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x678>)
 8002938:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800293c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002944:	493f      	ldr	r1, [pc, #252]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x678>)
 8002946:	4313      	orrs	r3, r2
 8002948:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f003 0320 	and.w	r3, r3, #32
 8002954:	2b00      	cmp	r3, #0
 8002956:	d022      	beq.n	800299e <HAL_RCCEx_PeriphCLKConfig+0x5d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800295c:	2b00      	cmp	r3, #0
 800295e:	d013      	beq.n	8002988 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002964:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002968:	d00e      	beq.n	8002988 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800296e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002972:	d009      	beq.n	8002988 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002978:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800297c:	d004      	beq.n	8002988 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800297e:	f240 11d9 	movw	r1, #473	; 0x1d9
 8002982:	4831      	ldr	r0, [pc, #196]	; (8002a48 <HAL_RCCEx_PeriphCLKConfig+0x67c>)
 8002984:	f005 fab2 	bl	8007eec <assert_failed>

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002988:	4b2e      	ldr	r3, [pc, #184]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x678>)
 800298a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800298e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002996:	492b      	ldr	r1, [pc, #172]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x678>)
 8002998:	4313      	orrs	r3, r2
 800299a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d022      	beq.n	80029f0 <HAL_RCCEx_PeriphCLKConfig+0x624>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d013      	beq.n	80029da <HAL_RCCEx_PeriphCLKConfig+0x60e>
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029b6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80029ba:	d00e      	beq.n	80029da <HAL_RCCEx_PeriphCLKConfig+0x60e>
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029c0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80029c4:	d009      	beq.n	80029da <HAL_RCCEx_PeriphCLKConfig+0x60e>
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029ca:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80029ce:	d004      	beq.n	80029da <HAL_RCCEx_PeriphCLKConfig+0x60e>
 80029d0:	f44f 71f1 	mov.w	r1, #482	; 0x1e2
 80029d4:	481c      	ldr	r0, [pc, #112]	; (8002a48 <HAL_RCCEx_PeriphCLKConfig+0x67c>)
 80029d6:	f005 fa89 	bl	8007eec <assert_failed>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80029da:	4b1a      	ldr	r3, [pc, #104]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x678>)
 80029dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029e0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029e8:	4916      	ldr	r1, [pc, #88]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x678>)
 80029ea:	4313      	orrs	r3, r2
 80029ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d027      	beq.n	8002a4c <HAL_RCCEx_PeriphCLKConfig+0x680>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d013      	beq.n	8002a2c <HAL_RCCEx_PeriphCLKConfig+0x660>
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a08:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002a0c:	d00e      	beq.n	8002a2c <HAL_RCCEx_PeriphCLKConfig+0x660>
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a12:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002a16:	d009      	beq.n	8002a2c <HAL_RCCEx_PeriphCLKConfig+0x660>
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a1c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002a20:	d004      	beq.n	8002a2c <HAL_RCCEx_PeriphCLKConfig+0x660>
 8002a22:	f240 11e9 	movw	r1, #489	; 0x1e9
 8002a26:	4808      	ldr	r0, [pc, #32]	; (8002a48 <HAL_RCCEx_PeriphCLKConfig+0x67c>)
 8002a28:	f005 fa60 	bl	8007eec <assert_failed>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002a2c:	4b05      	ldr	r3, [pc, #20]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x678>)
 8002a2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a32:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a3a:	4902      	ldr	r1, [pc, #8]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x678>)
 8002a3c:	4313      	orrs	r3, r2
 8002a3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002a42:	e003      	b.n	8002a4c <HAL_RCCEx_PeriphCLKConfig+0x680>
 8002a44:	40021000 	.word	0x40021000
 8002a48:	08009d48 	.word	0x08009d48
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d01d      	beq.n	8002a94 <HAL_RCCEx_PeriphCLKConfig+0x6c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d00e      	beq.n	8002a7e <HAL_RCCEx_PeriphCLKConfig+0x6b2>
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a64:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a68:	d009      	beq.n	8002a7e <HAL_RCCEx_PeriphCLKConfig+0x6b2>
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a6e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a72:	d004      	beq.n	8002a7e <HAL_RCCEx_PeriphCLKConfig+0x6b2>
 8002a74:	f240 11f1 	movw	r1, #497	; 0x1f1
 8002a78:	488f      	ldr	r0, [pc, #572]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8002a7a:	f005 fa37 	bl	8007eec <assert_failed>

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002a7e:	4b8f      	ldr	r3, [pc, #572]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 8002a80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a84:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a8c:	498b      	ldr	r1, [pc, #556]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 8002a8e:	4313      	orrs	r3, r2
 8002a90:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d01d      	beq.n	8002adc <HAL_RCCEx_PeriphCLKConfig+0x710>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d00e      	beq.n	8002ac6 <HAL_RCCEx_PeriphCLKConfig+0x6fa>
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002aac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002ab0:	d009      	beq.n	8002ac6 <HAL_RCCEx_PeriphCLKConfig+0x6fa>
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ab6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002aba:	d004      	beq.n	8002ac6 <HAL_RCCEx_PeriphCLKConfig+0x6fa>
 8002abc:	f240 11fd 	movw	r1, #509	; 0x1fd
 8002ac0:	487d      	ldr	r0, [pc, #500]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8002ac2:	f005 fa13 	bl	8007eec <assert_failed>

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002ac6:	4b7d      	ldr	r3, [pc, #500]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 8002ac8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002acc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ad4:	4979      	ldr	r1, [pc, #484]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 8002ad6:	4313      	orrs	r3, r2
 8002ad8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d01d      	beq.n	8002b24 <HAL_RCCEx_PeriphCLKConfig+0x758>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d00e      	beq.n	8002b0e <HAL_RCCEx_PeriphCLKConfig+0x742>
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002af4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002af8:	d009      	beq.n	8002b0e <HAL_RCCEx_PeriphCLKConfig+0x742>
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002afe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002b02:	d004      	beq.n	8002b0e <HAL_RCCEx_PeriphCLKConfig+0x742>
 8002b04:	f240 2109 	movw	r1, #521	; 0x209
 8002b08:	486b      	ldr	r0, [pc, #428]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8002b0a:	f005 f9ef 	bl	8007eec <assert_failed>

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002b0e:	4b6b      	ldr	r3, [pc, #428]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 8002b10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b14:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b1c:	4967      	ldr	r1, [pc, #412]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 8002b1e:	4313      	orrs	r3, r2
 8002b20:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d040      	beq.n	8002bb2 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d013      	beq.n	8002b60 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b3c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002b40:	d00e      	beq.n	8002b60 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b46:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002b4a:	d009      	beq.n	8002b60 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b50:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8002b54:	d004      	beq.n	8002b60 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8002b56:	f240 2143 	movw	r1, #579	; 0x243
 8002b5a:	4857      	ldr	r0, [pc, #348]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8002b5c:	f005 f9c6 	bl	8007eec <assert_failed>
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002b60:	4b56      	ldr	r3, [pc, #344]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 8002b62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b66:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b6e:	4953      	ldr	r1, [pc, #332]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 8002b70:	4313      	orrs	r3, r2
 8002b72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b7a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002b7e:	d106      	bne.n	8002b8e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002b80:	4b4e      	ldr	r3, [pc, #312]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 8002b82:	68db      	ldr	r3, [r3, #12]
 8002b84:	4a4d      	ldr	r2, [pc, #308]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 8002b86:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002b8a:	60d3      	str	r3, [r2, #12]
 8002b8c:	e011      	b.n	8002bb2 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b92:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002b96:	d10c      	bne.n	8002bb2 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	3304      	adds	r3, #4
 8002b9c:	2101      	movs	r1, #1
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	f000 f8e8 	bl	8002d74 <RCCEx_PLLSAI1_Config>
 8002ba4:	4603      	mov	r3, r0
 8002ba6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002ba8:	7cfb      	ldrb	r3, [r7, #19]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d001      	beq.n	8002bb2 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
      {
        /* set overall return value */
        status = ret;
 8002bae:	7cfb      	ldrb	r3, [r7, #19]
 8002bb0:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d040      	beq.n	8002c40 <HAL_RCCEx_PeriphCLKConfig+0x874>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d013      	beq.n	8002bee <HAL_RCCEx_PeriphCLKConfig+0x822>
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bca:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002bce:	d00e      	beq.n	8002bee <HAL_RCCEx_PeriphCLKConfig+0x822>
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bd4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002bd8:	d009      	beq.n	8002bee <HAL_RCCEx_PeriphCLKConfig+0x822>
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bde:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8002be2:	d004      	beq.n	8002bee <HAL_RCCEx_PeriphCLKConfig+0x822>
 8002be4:	f44f 711a 	mov.w	r1, #616	; 0x268
 8002be8:	4833      	ldr	r0, [pc, #204]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8002bea:	f005 f97f 	bl	8007eec <assert_failed>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002bee:	4b33      	ldr	r3, [pc, #204]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 8002bf0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bf4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bfc:	492f      	ldr	r1, [pc, #188]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 8002bfe:	4313      	orrs	r3, r2
 8002c00:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c08:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002c0c:	d106      	bne.n	8002c1c <HAL_RCCEx_PeriphCLKConfig+0x850>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002c0e:	4b2b      	ldr	r3, [pc, #172]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 8002c10:	68db      	ldr	r3, [r3, #12]
 8002c12:	4a2a      	ldr	r2, [pc, #168]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 8002c14:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002c18:	60d3      	str	r3, [r2, #12]
 8002c1a:	e011      	b.n	8002c40 <HAL_RCCEx_PeriphCLKConfig+0x874>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c20:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002c24:	d10c      	bne.n	8002c40 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	3304      	adds	r3, #4
 8002c2a:	2101      	movs	r1, #1
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	f000 f8a1 	bl	8002d74 <RCCEx_PLLSAI1_Config>
 8002c32:	4603      	mov	r3, r0
 8002c34:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002c36:	7cfb      	ldrb	r3, [r7, #19]
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d001      	beq.n	8002c40 <HAL_RCCEx_PeriphCLKConfig+0x874>
      {
        /* set overall return value */
        status = ret;
 8002c3c:	7cfb      	ldrb	r3, [r7, #19]
 8002c3e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d04b      	beq.n	8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x918>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d013      	beq.n	8002c7c <HAL_RCCEx_PeriphCLKConfig+0x8b0>
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c58:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002c5c:	d00e      	beq.n	8002c7c <HAL_RCCEx_PeriphCLKConfig+0x8b0>
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c62:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002c66:	d009      	beq.n	8002c7c <HAL_RCCEx_PeriphCLKConfig+0x8b0>
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c6c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002c70:	d004      	beq.n	8002c7c <HAL_RCCEx_PeriphCLKConfig+0x8b0>
 8002c72:	f44f 7122 	mov.w	r1, #648	; 0x288
 8002c76:	4810      	ldr	r0, [pc, #64]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8002c78:	f005 f938 	bl	8007eec <assert_failed>

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002c7c:	4b0f      	ldr	r3, [pc, #60]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 8002c7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c82:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c8a:	490c      	ldr	r1, [pc, #48]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 8002c8c:	4313      	orrs	r3, r2
 8002c8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c96:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002c9a:	d111      	bne.n	8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	3304      	adds	r3, #4
 8002ca0:	2102      	movs	r1, #2
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	f000 f866 	bl	8002d74 <RCCEx_PLLSAI1_Config>
 8002ca8:	4603      	mov	r3, r0
 8002caa:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002cac:	7cfb      	ldrb	r3, [r7, #19]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d018      	beq.n	8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x918>
      {
        /* set overall return value */
        status = ret;
 8002cb2:	7cfb      	ldrb	r3, [r7, #19]
 8002cb4:	74bb      	strb	r3, [r7, #18]
 8002cb6:	e015      	b.n	8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x918>
 8002cb8:	08009d48 	.word	0x08009d48
 8002cbc:	40021000 	.word	0x40021000
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002cc4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002cc8:	d10c      	bne.n	8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x918>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	3320      	adds	r3, #32
 8002cce:	2102      	movs	r1, #2
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	f000 f9cb 	bl	800306c <RCCEx_PLLSAI2_Config>
 8002cd6:	4603      	mov	r3, r0
 8002cd8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002cda:	7cfb      	ldrb	r3, [r7, #19]
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d001      	beq.n	8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x918>
      {
        /* set overall return value */
        status = ret;
 8002ce0:	7cfb      	ldrb	r3, [r7, #19]
 8002ce2:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d018      	beq.n	8002d22 <HAL_RCCEx_PeriphCLKConfig+0x956>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d009      	beq.n	8002d0c <HAL_RCCEx_PeriphCLKConfig+0x940>
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002cfc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d00:	d004      	beq.n	8002d0c <HAL_RCCEx_PeriphCLKConfig+0x940>
 8002d02:	f44f 712d 	mov.w	r1, #692	; 0x2b4
 8002d06:	4819      	ldr	r0, [pc, #100]	; (8002d6c <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8002d08:	f005 f8f0 	bl	8007eec <assert_failed>

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002d0c:	4b18      	ldr	r3, [pc, #96]	; (8002d70 <HAL_RCCEx_PeriphCLKConfig+0x9a4>)
 8002d0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d12:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002d1a:	4915      	ldr	r1, [pc, #84]	; (8002d70 <HAL_RCCEx_PeriphCLKConfig+0x9a4>)
 8002d1c:	4313      	orrs	r3, r2
 8002d1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d018      	beq.n	8002d60 <HAL_RCCEx_PeriphCLKConfig+0x994>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d009      	beq.n	8002d4a <HAL_RCCEx_PeriphCLKConfig+0x97e>
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002d3a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002d3e:	d004      	beq.n	8002d4a <HAL_RCCEx_PeriphCLKConfig+0x97e>
 8002d40:	f240 21c2 	movw	r1, #706	; 0x2c2
 8002d44:	4809      	ldr	r0, [pc, #36]	; (8002d6c <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8002d46:	f005 f8d1 	bl	8007eec <assert_failed>

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002d4a:	4b09      	ldr	r3, [pc, #36]	; (8002d70 <HAL_RCCEx_PeriphCLKConfig+0x9a4>)
 8002d4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d50:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002d58:	4905      	ldr	r1, [pc, #20]	; (8002d70 <HAL_RCCEx_PeriphCLKConfig+0x9a4>)
 8002d5a:	4313      	orrs	r3, r2
 8002d5c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002d60:	7cbb      	ldrb	r3, [r7, #18]
}
 8002d62:	4618      	mov	r0, r3
 8002d64:	3718      	adds	r7, #24
 8002d66:	46bd      	mov	sp, r7
 8002d68:	bd80      	pop	{r7, pc}
 8002d6a:	bf00      	nop
 8002d6c:	08009d48 	.word	0x08009d48
 8002d70:	40021000 	.word	0x40021000

08002d74 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b084      	sub	sp, #16
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
 8002d7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002d7e:	2300      	movs	r3, #0
 8002d80:	73fb      	strb	r3, [r7, #15]

  /* check for PLLSAI1 Parameters used to output PLLSAI1CLK */
  /* P, Q and R dividers are verified in each specific divider case below */
  assert_param(IS_RCC_PLLSAI1SOURCE(PllSai1->PLLSAI1Source));
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d010      	beq.n	8002dac <RCCEx_PLLSAI1_Config+0x38>
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	2b01      	cmp	r3, #1
 8002d90:	d00c      	beq.n	8002dac <RCCEx_PLLSAI1_Config+0x38>
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	2b02      	cmp	r3, #2
 8002d98:	d008      	beq.n	8002dac <RCCEx_PLLSAI1_Config+0x38>
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	2b03      	cmp	r3, #3
 8002da0:	d004      	beq.n	8002dac <RCCEx_PLLSAI1_Config+0x38>
 8002da2:	f640 314f 	movw	r1, #2895	; 0xb4f
 8002da6:	48a3      	ldr	r0, [pc, #652]	; (8003034 <RCCEx_PLLSAI1_Config+0x2c0>)
 8002da8:	f005 f8a0 	bl	8007eec <assert_failed>
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	685b      	ldr	r3, [r3, #4]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d003      	beq.n	8002dbc <RCCEx_PLLSAI1_Config+0x48>
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	685b      	ldr	r3, [r3, #4]
 8002db8:	2b08      	cmp	r3, #8
 8002dba:	d904      	bls.n	8002dc6 <RCCEx_PLLSAI1_Config+0x52>
 8002dbc:	f44f 6135 	mov.w	r1, #2896	; 0xb50
 8002dc0:	489c      	ldr	r0, [pc, #624]	; (8003034 <RCCEx_PLLSAI1_Config+0x2c0>)
 8002dc2:	f005 f893 	bl	8007eec <assert_failed>
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	689b      	ldr	r3, [r3, #8]
 8002dca:	2b07      	cmp	r3, #7
 8002dcc:	d903      	bls.n	8002dd6 <RCCEx_PLLSAI1_Config+0x62>
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	689b      	ldr	r3, [r3, #8]
 8002dd2:	2b56      	cmp	r3, #86	; 0x56
 8002dd4:	d904      	bls.n	8002de0 <RCCEx_PLLSAI1_Config+0x6c>
 8002dd6:	f640 3151 	movw	r1, #2897	; 0xb51
 8002dda:	4896      	ldr	r0, [pc, #600]	; (8003034 <RCCEx_PLLSAI1_Config+0x2c0>)
 8002ddc:	f005 f886 	bl	8007eec <assert_failed>
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	699b      	ldr	r3, [r3, #24]
 8002de4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d10b      	bne.n	8002e04 <RCCEx_PLLSAI1_Config+0x90>
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	699b      	ldr	r3, [r3, #24]
 8002df0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d105      	bne.n	8002e04 <RCCEx_PLLSAI1_Config+0x90>
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	699b      	ldr	r3, [r3, #24]
 8002dfc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d007      	beq.n	8002e14 <RCCEx_PLLSAI1_Config+0xa0>
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	699b      	ldr	r3, [r3, #24]
 8002e08:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002e0c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d004      	beq.n	8002e1e <RCCEx_PLLSAI1_Config+0xaa>
 8002e14:	f640 3152 	movw	r1, #2898	; 0xb52
 8002e18:	4886      	ldr	r0, [pc, #536]	; (8003034 <RCCEx_PLLSAI1_Config+0x2c0>)
 8002e1a:	f005 f867 	bl	8007eec <assert_failed>

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002e1e:	4b86      	ldr	r3, [pc, #536]	; (8003038 <RCCEx_PLLSAI1_Config+0x2c4>)
 8002e20:	68db      	ldr	r3, [r3, #12]
 8002e22:	f003 0303 	and.w	r3, r3, #3
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d018      	beq.n	8002e5c <RCCEx_PLLSAI1_Config+0xe8>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002e2a:	4b83      	ldr	r3, [pc, #524]	; (8003038 <RCCEx_PLLSAI1_Config+0x2c4>)
 8002e2c:	68db      	ldr	r3, [r3, #12]
 8002e2e:	f003 0203 	and.w	r2, r3, #3
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	429a      	cmp	r2, r3
 8002e38:	d10d      	bne.n	8002e56 <RCCEx_PLLSAI1_Config+0xe2>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
       ||
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d009      	beq.n	8002e56 <RCCEx_PLLSAI1_Config+0xe2>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002e42:	4b7d      	ldr	r3, [pc, #500]	; (8003038 <RCCEx_PLLSAI1_Config+0x2c4>)
 8002e44:	68db      	ldr	r3, [r3, #12]
 8002e46:	091b      	lsrs	r3, r3, #4
 8002e48:	f003 0307 	and.w	r3, r3, #7
 8002e4c:	1c5a      	adds	r2, r3, #1
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	685b      	ldr	r3, [r3, #4]
       ||
 8002e52:	429a      	cmp	r2, r3
 8002e54:	d044      	beq.n	8002ee0 <RCCEx_PLLSAI1_Config+0x16c>
#endif
      )
    {
      status = HAL_ERROR;
 8002e56:	2301      	movs	r3, #1
 8002e58:	73fb      	strb	r3, [r7, #15]
 8002e5a:	e041      	b.n	8002ee0 <RCCEx_PLLSAI1_Config+0x16c>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	2b02      	cmp	r3, #2
 8002e62:	d00c      	beq.n	8002e7e <RCCEx_PLLSAI1_Config+0x10a>
 8002e64:	2b03      	cmp	r3, #3
 8002e66:	d013      	beq.n	8002e90 <RCCEx_PLLSAI1_Config+0x11c>
 8002e68:	2b01      	cmp	r3, #1
 8002e6a:	d120      	bne.n	8002eae <RCCEx_PLLSAI1_Config+0x13a>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002e6c:	4b72      	ldr	r3, [pc, #456]	; (8003038 <RCCEx_PLLSAI1_Config+0x2c4>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f003 0302 	and.w	r3, r3, #2
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d11d      	bne.n	8002eb4 <RCCEx_PLLSAI1_Config+0x140>
      {
        status = HAL_ERROR;
 8002e78:	2301      	movs	r3, #1
 8002e7a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e7c:	e01a      	b.n	8002eb4 <RCCEx_PLLSAI1_Config+0x140>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002e7e:	4b6e      	ldr	r3, [pc, #440]	; (8003038 <RCCEx_PLLSAI1_Config+0x2c4>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d116      	bne.n	8002eb8 <RCCEx_PLLSAI1_Config+0x144>
      {
        status = HAL_ERROR;
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e8e:	e013      	b.n	8002eb8 <RCCEx_PLLSAI1_Config+0x144>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002e90:	4b69      	ldr	r3, [pc, #420]	; (8003038 <RCCEx_PLLSAI1_Config+0x2c4>)
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d10f      	bne.n	8002ebc <RCCEx_PLLSAI1_Config+0x148>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002e9c:	4b66      	ldr	r3, [pc, #408]	; (8003038 <RCCEx_PLLSAI1_Config+0x2c4>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d109      	bne.n	8002ebc <RCCEx_PLLSAI1_Config+0x148>
        {
          status = HAL_ERROR;
 8002ea8:	2301      	movs	r3, #1
 8002eaa:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002eac:	e006      	b.n	8002ebc <RCCEx_PLLSAI1_Config+0x148>
    default:
      status = HAL_ERROR;
 8002eae:	2301      	movs	r3, #1
 8002eb0:	73fb      	strb	r3, [r7, #15]
      break;
 8002eb2:	e004      	b.n	8002ebe <RCCEx_PLLSAI1_Config+0x14a>
      break;
 8002eb4:	bf00      	nop
 8002eb6:	e002      	b.n	8002ebe <RCCEx_PLLSAI1_Config+0x14a>
      break;
 8002eb8:	bf00      	nop
 8002eba:	e000      	b.n	8002ebe <RCCEx_PLLSAI1_Config+0x14a>
      break;
 8002ebc:	bf00      	nop
    }

    if(status == HAL_OK)
 8002ebe:	7bfb      	ldrb	r3, [r7, #15]
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d10d      	bne.n	8002ee0 <RCCEx_PLLSAI1_Config+0x16c>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002ec4:	4b5c      	ldr	r3, [pc, #368]	; (8003038 <RCCEx_PLLSAI1_Config+0x2c4>)
 8002ec6:	68db      	ldr	r3, [r3, #12]
 8002ec8:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6819      	ldr	r1, [r3, #0]
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	685b      	ldr	r3, [r3, #4]
 8002ed4:	3b01      	subs	r3, #1
 8002ed6:	011b      	lsls	r3, r3, #4
 8002ed8:	430b      	orrs	r3, r1
 8002eda:	4957      	ldr	r1, [pc, #348]	; (8003038 <RCCEx_PLLSAI1_Config+0x2c4>)
 8002edc:	4313      	orrs	r3, r2
 8002ede:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002ee0:	7bfb      	ldrb	r3, [r7, #15]
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	f040 80ba 	bne.w	800305c <RCCEx_PLLSAI1_Config+0x2e8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002ee8:	4b53      	ldr	r3, [pc, #332]	; (8003038 <RCCEx_PLLSAI1_Config+0x2c4>)
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	4a52      	ldr	r2, [pc, #328]	; (8003038 <RCCEx_PLLSAI1_Config+0x2c4>)
 8002eee:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002ef2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ef4:	f7fd fb66 	bl	80005c4 <HAL_GetTick>
 8002ef8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002efa:	e009      	b.n	8002f10 <RCCEx_PLLSAI1_Config+0x19c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002efc:	f7fd fb62 	bl	80005c4 <HAL_GetTick>
 8002f00:	4602      	mov	r2, r0
 8002f02:	68bb      	ldr	r3, [r7, #8]
 8002f04:	1ad3      	subs	r3, r2, r3
 8002f06:	2b02      	cmp	r3, #2
 8002f08:	d902      	bls.n	8002f10 <RCCEx_PLLSAI1_Config+0x19c>
      {
        status = HAL_TIMEOUT;
 8002f0a:	2303      	movs	r3, #3
 8002f0c:	73fb      	strb	r3, [r7, #15]
        break;
 8002f0e:	e005      	b.n	8002f1c <RCCEx_PLLSAI1_Config+0x1a8>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002f10:	4b49      	ldr	r3, [pc, #292]	; (8003038 <RCCEx_PLLSAI1_Config+0x2c4>)
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d1ef      	bne.n	8002efc <RCCEx_PLLSAI1_Config+0x188>
      }
    }

    if(status == HAL_OK)
 8002f1c:	7bfb      	ldrb	r3, [r7, #15]
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	f040 809c 	bne.w	800305c <RCCEx_PLLSAI1_Config+0x2e8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d11e      	bne.n	8002f68 <RCCEx_PLLSAI1_Config+0x1f4>
      {
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	68db      	ldr	r3, [r3, #12]
 8002f2e:	2b07      	cmp	r3, #7
 8002f30:	d008      	beq.n	8002f44 <RCCEx_PLLSAI1_Config+0x1d0>
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	68db      	ldr	r3, [r3, #12]
 8002f36:	2b11      	cmp	r3, #17
 8002f38:	d004      	beq.n	8002f44 <RCCEx_PLLSAI1_Config+0x1d0>
 8002f3a:	f640 31a5 	movw	r1, #2981	; 0xba5
 8002f3e:	483d      	ldr	r0, [pc, #244]	; (8003034 <RCCEx_PLLSAI1_Config+0x2c0>)
 8002f40:	f004 ffd4 	bl	8007eec <assert_failed>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002f44:	4b3c      	ldr	r3, [pc, #240]	; (8003038 <RCCEx_PLLSAI1_Config+0x2c4>)
 8002f46:	691b      	ldr	r3, [r3, #16]
 8002f48:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002f4c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f50:	687a      	ldr	r2, [r7, #4]
 8002f52:	6892      	ldr	r2, [r2, #8]
 8002f54:	0211      	lsls	r1, r2, #8
 8002f56:	687a      	ldr	r2, [r7, #4]
 8002f58:	68d2      	ldr	r2, [r2, #12]
 8002f5a:	0912      	lsrs	r2, r2, #4
 8002f5c:	0452      	lsls	r2, r2, #17
 8002f5e:	430a      	orrs	r2, r1
 8002f60:	4935      	ldr	r1, [pc, #212]	; (8003038 <RCCEx_PLLSAI1_Config+0x2c4>)
 8002f62:	4313      	orrs	r3, r2
 8002f64:	610b      	str	r3, [r1, #16]
 8002f66:	e051      	b.n	800300c <RCCEx_PLLSAI1_Config+0x298>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	2b01      	cmp	r3, #1
 8002f6c:	d127      	bne.n	8002fbe <RCCEx_PLLSAI1_Config+0x24a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	691b      	ldr	r3, [r3, #16]
 8002f72:	2b02      	cmp	r3, #2
 8002f74:	d010      	beq.n	8002f98 <RCCEx_PLLSAI1_Config+0x224>
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	691b      	ldr	r3, [r3, #16]
 8002f7a:	2b04      	cmp	r3, #4
 8002f7c:	d00c      	beq.n	8002f98 <RCCEx_PLLSAI1_Config+0x224>
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	691b      	ldr	r3, [r3, #16]
 8002f82:	2b06      	cmp	r3, #6
 8002f84:	d008      	beq.n	8002f98 <RCCEx_PLLSAI1_Config+0x224>
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	691b      	ldr	r3, [r3, #16]
 8002f8a:	2b08      	cmp	r3, #8
 8002f8c:	d004      	beq.n	8002f98 <RCCEx_PLLSAI1_Config+0x224>
 8002f8e:	f640 31c9 	movw	r1, #3017	; 0xbc9
 8002f92:	4828      	ldr	r0, [pc, #160]	; (8003034 <RCCEx_PLLSAI1_Config+0x2c0>)
 8002f94:	f004 ffaa 	bl	8007eec <assert_failed>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002f98:	4b27      	ldr	r3, [pc, #156]	; (8003038 <RCCEx_PLLSAI1_Config+0x2c4>)
 8002f9a:	691b      	ldr	r3, [r3, #16]
 8002f9c:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002fa0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002fa4:	687a      	ldr	r2, [r7, #4]
 8002fa6:	6892      	ldr	r2, [r2, #8]
 8002fa8:	0211      	lsls	r1, r2, #8
 8002faa:	687a      	ldr	r2, [r7, #4]
 8002fac:	6912      	ldr	r2, [r2, #16]
 8002fae:	0852      	lsrs	r2, r2, #1
 8002fb0:	3a01      	subs	r2, #1
 8002fb2:	0552      	lsls	r2, r2, #21
 8002fb4:	430a      	orrs	r2, r1
 8002fb6:	4920      	ldr	r1, [pc, #128]	; (8003038 <RCCEx_PLLSAI1_Config+0x2c4>)
 8002fb8:	4313      	orrs	r3, r2
 8002fba:	610b      	str	r3, [r1, #16]
 8002fbc:	e026      	b.n	800300c <RCCEx_PLLSAI1_Config+0x298>
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	695b      	ldr	r3, [r3, #20]
 8002fc2:	2b02      	cmp	r3, #2
 8002fc4:	d010      	beq.n	8002fe8 <RCCEx_PLLSAI1_Config+0x274>
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	695b      	ldr	r3, [r3, #20]
 8002fca:	2b04      	cmp	r3, #4
 8002fcc:	d00c      	beq.n	8002fe8 <RCCEx_PLLSAI1_Config+0x274>
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	695b      	ldr	r3, [r3, #20]
 8002fd2:	2b06      	cmp	r3, #6
 8002fd4:	d008      	beq.n	8002fe8 <RCCEx_PLLSAI1_Config+0x274>
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	695b      	ldr	r3, [r3, #20]
 8002fda:	2b08      	cmp	r3, #8
 8002fdc:	d004      	beq.n	8002fe8 <RCCEx_PLLSAI1_Config+0x274>
 8002fde:	f640 31db 	movw	r1, #3035	; 0xbdb
 8002fe2:	4814      	ldr	r0, [pc, #80]	; (8003034 <RCCEx_PLLSAI1_Config+0x2c0>)
 8002fe4:	f004 ff82 	bl	8007eec <assert_failed>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002fe8:	4b13      	ldr	r3, [pc, #76]	; (8003038 <RCCEx_PLLSAI1_Config+0x2c4>)
 8002fea:	691b      	ldr	r3, [r3, #16]
 8002fec:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002ff0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002ff4:	687a      	ldr	r2, [r7, #4]
 8002ff6:	6892      	ldr	r2, [r2, #8]
 8002ff8:	0211      	lsls	r1, r2, #8
 8002ffa:	687a      	ldr	r2, [r7, #4]
 8002ffc:	6952      	ldr	r2, [r2, #20]
 8002ffe:	0852      	lsrs	r2, r2, #1
 8003000:	3a01      	subs	r2, #1
 8003002:	0652      	lsls	r2, r2, #25
 8003004:	430a      	orrs	r2, r1
 8003006:	490c      	ldr	r1, [pc, #48]	; (8003038 <RCCEx_PLLSAI1_Config+0x2c4>)
 8003008:	4313      	orrs	r3, r2
 800300a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800300c:	4b0a      	ldr	r3, [pc, #40]	; (8003038 <RCCEx_PLLSAI1_Config+0x2c4>)
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	4a09      	ldr	r2, [pc, #36]	; (8003038 <RCCEx_PLLSAI1_Config+0x2c4>)
 8003012:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003016:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003018:	f7fd fad4 	bl	80005c4 <HAL_GetTick>
 800301c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800301e:	e00d      	b.n	800303c <RCCEx_PLLSAI1_Config+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003020:	f7fd fad0 	bl	80005c4 <HAL_GetTick>
 8003024:	4602      	mov	r2, r0
 8003026:	68bb      	ldr	r3, [r7, #8]
 8003028:	1ad3      	subs	r3, r2, r3
 800302a:	2b02      	cmp	r3, #2
 800302c:	d906      	bls.n	800303c <RCCEx_PLLSAI1_Config+0x2c8>
        {
          status = HAL_TIMEOUT;
 800302e:	2303      	movs	r3, #3
 8003030:	73fb      	strb	r3, [r7, #15]
          break;
 8003032:	e009      	b.n	8003048 <RCCEx_PLLSAI1_Config+0x2d4>
 8003034:	08009d48 	.word	0x08009d48
 8003038:	40021000 	.word	0x40021000
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800303c:	4b0a      	ldr	r3, [pc, #40]	; (8003068 <RCCEx_PLLSAI1_Config+0x2f4>)
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003044:	2b00      	cmp	r3, #0
 8003046:	d0eb      	beq.n	8003020 <RCCEx_PLLSAI1_Config+0x2ac>
        }
      }

      if(status == HAL_OK)
 8003048:	7bfb      	ldrb	r3, [r7, #15]
 800304a:	2b00      	cmp	r3, #0
 800304c:	d106      	bne.n	800305c <RCCEx_PLLSAI1_Config+0x2e8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800304e:	4b06      	ldr	r3, [pc, #24]	; (8003068 <RCCEx_PLLSAI1_Config+0x2f4>)
 8003050:	691a      	ldr	r2, [r3, #16]
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	699b      	ldr	r3, [r3, #24]
 8003056:	4904      	ldr	r1, [pc, #16]	; (8003068 <RCCEx_PLLSAI1_Config+0x2f4>)
 8003058:	4313      	orrs	r3, r2
 800305a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800305c:	7bfb      	ldrb	r3, [r7, #15]
}
 800305e:	4618      	mov	r0, r3
 8003060:	3710      	adds	r7, #16
 8003062:	46bd      	mov	sp, r7
 8003064:	bd80      	pop	{r7, pc}
 8003066:	bf00      	nop
 8003068:	40021000 	.word	0x40021000

0800306c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	b084      	sub	sp, #16
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
 8003074:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003076:	2300      	movs	r3, #0
 8003078:	73fb      	strb	r3, [r7, #15]

  /* check for PLLSAI2 Parameters used to output PLLSAI2CLK */
  /* P, Q and R dividers are verified in each specific divider case below */
  assert_param(IS_RCC_PLLSAI2SOURCE(PllSai2->PLLSAI2Source));
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	2b00      	cmp	r3, #0
 8003080:	d010      	beq.n	80030a4 <RCCEx_PLLSAI2_Config+0x38>
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	2b01      	cmp	r3, #1
 8003088:	d00c      	beq.n	80030a4 <RCCEx_PLLSAI2_Config+0x38>
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	2b02      	cmp	r3, #2
 8003090:	d008      	beq.n	80030a4 <RCCEx_PLLSAI2_Config+0x38>
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	2b03      	cmp	r3, #3
 8003098:	d004      	beq.n	80030a4 <RCCEx_PLLSAI2_Config+0x38>
 800309a:	f640 411c 	movw	r1, #3100	; 0xc1c
 800309e:	4895      	ldr	r0, [pc, #596]	; (80032f4 <RCCEx_PLLSAI2_Config+0x288>)
 80030a0:	f004 ff24 	bl	8007eec <assert_failed>
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	685b      	ldr	r3, [r3, #4]
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d003      	beq.n	80030b4 <RCCEx_PLLSAI2_Config+0x48>
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	685b      	ldr	r3, [r3, #4]
 80030b0:	2b08      	cmp	r3, #8
 80030b2:	d904      	bls.n	80030be <RCCEx_PLLSAI2_Config+0x52>
 80030b4:	f640 411d 	movw	r1, #3101	; 0xc1d
 80030b8:	488e      	ldr	r0, [pc, #568]	; (80032f4 <RCCEx_PLLSAI2_Config+0x288>)
 80030ba:	f004 ff17 	bl	8007eec <assert_failed>
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	689b      	ldr	r3, [r3, #8]
 80030c2:	2b07      	cmp	r3, #7
 80030c4:	d903      	bls.n	80030ce <RCCEx_PLLSAI2_Config+0x62>
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	689b      	ldr	r3, [r3, #8]
 80030ca:	2b56      	cmp	r3, #86	; 0x56
 80030cc:	d904      	bls.n	80030d8 <RCCEx_PLLSAI2_Config+0x6c>
 80030ce:	f640 411e 	movw	r1, #3102	; 0xc1e
 80030d2:	4888      	ldr	r0, [pc, #544]	; (80032f4 <RCCEx_PLLSAI2_Config+0x288>)
 80030d4:	f004 ff0a 	bl	8007eec <assert_failed>
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	695b      	ldr	r3, [r3, #20]
 80030dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d105      	bne.n	80030f0 <RCCEx_PLLSAI2_Config+0x84>
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	695b      	ldr	r3, [r3, #20]
 80030e8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d007      	beq.n	8003100 <RCCEx_PLLSAI2_Config+0x94>
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	695b      	ldr	r3, [r3, #20]
 80030f4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80030f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d004      	beq.n	800310a <RCCEx_PLLSAI2_Config+0x9e>
 8003100:	f640 411f 	movw	r1, #3103	; 0xc1f
 8003104:	487b      	ldr	r0, [pc, #492]	; (80032f4 <RCCEx_PLLSAI2_Config+0x288>)
 8003106:	f004 fef1 	bl	8007eec <assert_failed>

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800310a:	4b7b      	ldr	r3, [pc, #492]	; (80032f8 <RCCEx_PLLSAI2_Config+0x28c>)
 800310c:	68db      	ldr	r3, [r3, #12]
 800310e:	f003 0303 	and.w	r3, r3, #3
 8003112:	2b00      	cmp	r3, #0
 8003114:	d018      	beq.n	8003148 <RCCEx_PLLSAI2_Config+0xdc>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003116:	4b78      	ldr	r3, [pc, #480]	; (80032f8 <RCCEx_PLLSAI2_Config+0x28c>)
 8003118:	68db      	ldr	r3, [r3, #12]
 800311a:	f003 0203 	and.w	r2, r3, #3
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	429a      	cmp	r2, r3
 8003124:	d10d      	bne.n	8003142 <RCCEx_PLLSAI2_Config+0xd6>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
       ||
 800312a:	2b00      	cmp	r3, #0
 800312c:	d009      	beq.n	8003142 <RCCEx_PLLSAI2_Config+0xd6>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800312e:	4b72      	ldr	r3, [pc, #456]	; (80032f8 <RCCEx_PLLSAI2_Config+0x28c>)
 8003130:	68db      	ldr	r3, [r3, #12]
 8003132:	091b      	lsrs	r3, r3, #4
 8003134:	f003 0307 	and.w	r3, r3, #7
 8003138:	1c5a      	adds	r2, r3, #1
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	685b      	ldr	r3, [r3, #4]
       ||
 800313e:	429a      	cmp	r2, r3
 8003140:	d044      	beq.n	80031cc <RCCEx_PLLSAI2_Config+0x160>
#endif
      )
    {
      status = HAL_ERROR;
 8003142:	2301      	movs	r3, #1
 8003144:	73fb      	strb	r3, [r7, #15]
 8003146:	e041      	b.n	80031cc <RCCEx_PLLSAI2_Config+0x160>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	2b02      	cmp	r3, #2
 800314e:	d00c      	beq.n	800316a <RCCEx_PLLSAI2_Config+0xfe>
 8003150:	2b03      	cmp	r3, #3
 8003152:	d013      	beq.n	800317c <RCCEx_PLLSAI2_Config+0x110>
 8003154:	2b01      	cmp	r3, #1
 8003156:	d120      	bne.n	800319a <RCCEx_PLLSAI2_Config+0x12e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003158:	4b67      	ldr	r3, [pc, #412]	; (80032f8 <RCCEx_PLLSAI2_Config+0x28c>)
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f003 0302 	and.w	r3, r3, #2
 8003160:	2b00      	cmp	r3, #0
 8003162:	d11d      	bne.n	80031a0 <RCCEx_PLLSAI2_Config+0x134>
      {
        status = HAL_ERROR;
 8003164:	2301      	movs	r3, #1
 8003166:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003168:	e01a      	b.n	80031a0 <RCCEx_PLLSAI2_Config+0x134>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800316a:	4b63      	ldr	r3, [pc, #396]	; (80032f8 <RCCEx_PLLSAI2_Config+0x28c>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003172:	2b00      	cmp	r3, #0
 8003174:	d116      	bne.n	80031a4 <RCCEx_PLLSAI2_Config+0x138>
      {
        status = HAL_ERROR;
 8003176:	2301      	movs	r3, #1
 8003178:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800317a:	e013      	b.n	80031a4 <RCCEx_PLLSAI2_Config+0x138>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800317c:	4b5e      	ldr	r3, [pc, #376]	; (80032f8 <RCCEx_PLLSAI2_Config+0x28c>)
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003184:	2b00      	cmp	r3, #0
 8003186:	d10f      	bne.n	80031a8 <RCCEx_PLLSAI2_Config+0x13c>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003188:	4b5b      	ldr	r3, [pc, #364]	; (80032f8 <RCCEx_PLLSAI2_Config+0x28c>)
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003190:	2b00      	cmp	r3, #0
 8003192:	d109      	bne.n	80031a8 <RCCEx_PLLSAI2_Config+0x13c>
        {
          status = HAL_ERROR;
 8003194:	2301      	movs	r3, #1
 8003196:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003198:	e006      	b.n	80031a8 <RCCEx_PLLSAI2_Config+0x13c>
    default:
      status = HAL_ERROR;
 800319a:	2301      	movs	r3, #1
 800319c:	73fb      	strb	r3, [r7, #15]
      break;
 800319e:	e004      	b.n	80031aa <RCCEx_PLLSAI2_Config+0x13e>
      break;
 80031a0:	bf00      	nop
 80031a2:	e002      	b.n	80031aa <RCCEx_PLLSAI2_Config+0x13e>
      break;
 80031a4:	bf00      	nop
 80031a6:	e000      	b.n	80031aa <RCCEx_PLLSAI2_Config+0x13e>
      break;
 80031a8:	bf00      	nop
    }

    if(status == HAL_OK)
 80031aa:	7bfb      	ldrb	r3, [r7, #15]
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d10d      	bne.n	80031cc <RCCEx_PLLSAI2_Config+0x160>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80031b0:	4b51      	ldr	r3, [pc, #324]	; (80032f8 <RCCEx_PLLSAI2_Config+0x28c>)
 80031b2:	68db      	ldr	r3, [r3, #12]
 80031b4:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6819      	ldr	r1, [r3, #0]
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	685b      	ldr	r3, [r3, #4]
 80031c0:	3b01      	subs	r3, #1
 80031c2:	011b      	lsls	r3, r3, #4
 80031c4:	430b      	orrs	r3, r1
 80031c6:	494c      	ldr	r1, [pc, #304]	; (80032f8 <RCCEx_PLLSAI2_Config+0x28c>)
 80031c8:	4313      	orrs	r3, r2
 80031ca:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80031cc:	7bfb      	ldrb	r3, [r7, #15]
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	f040 808a 	bne.w	80032e8 <RCCEx_PLLSAI2_Config+0x27c>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80031d4:	4b48      	ldr	r3, [pc, #288]	; (80032f8 <RCCEx_PLLSAI2_Config+0x28c>)
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	4a47      	ldr	r2, [pc, #284]	; (80032f8 <RCCEx_PLLSAI2_Config+0x28c>)
 80031da:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80031de:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80031e0:	f7fd f9f0 	bl	80005c4 <HAL_GetTick>
 80031e4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80031e6:	e009      	b.n	80031fc <RCCEx_PLLSAI2_Config+0x190>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80031e8:	f7fd f9ec 	bl	80005c4 <HAL_GetTick>
 80031ec:	4602      	mov	r2, r0
 80031ee:	68bb      	ldr	r3, [r7, #8]
 80031f0:	1ad3      	subs	r3, r2, r3
 80031f2:	2b02      	cmp	r3, #2
 80031f4:	d902      	bls.n	80031fc <RCCEx_PLLSAI2_Config+0x190>
      {
        status = HAL_TIMEOUT;
 80031f6:	2303      	movs	r3, #3
 80031f8:	73fb      	strb	r3, [r7, #15]
        break;
 80031fa:	e005      	b.n	8003208 <RCCEx_PLLSAI2_Config+0x19c>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80031fc:	4b3e      	ldr	r3, [pc, #248]	; (80032f8 <RCCEx_PLLSAI2_Config+0x28c>)
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003204:	2b00      	cmp	r3, #0
 8003206:	d1ef      	bne.n	80031e8 <RCCEx_PLLSAI2_Config+0x17c>
      }
    }

    if(status == HAL_OK)
 8003208:	7bfb      	ldrb	r3, [r7, #15]
 800320a:	2b00      	cmp	r3, #0
 800320c:	d16c      	bne.n	80032e8 <RCCEx_PLLSAI2_Config+0x27c>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	2b00      	cmp	r3, #0
 8003212:	d11e      	bne.n	8003252 <RCCEx_PLLSAI2_Config+0x1e6>
      {
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	68db      	ldr	r3, [r3, #12]
 8003218:	2b07      	cmp	r3, #7
 800321a:	d008      	beq.n	800322e <RCCEx_PLLSAI2_Config+0x1c2>
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	68db      	ldr	r3, [r3, #12]
 8003220:	2b11      	cmp	r3, #17
 8003222:	d004      	beq.n	800322e <RCCEx_PLLSAI2_Config+0x1c2>
 8003224:	f640 4172 	movw	r1, #3186	; 0xc72
 8003228:	4832      	ldr	r0, [pc, #200]	; (80032f4 <RCCEx_PLLSAI2_Config+0x288>)
 800322a:	f004 fe5f 	bl	8007eec <assert_failed>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800322e:	4b32      	ldr	r3, [pc, #200]	; (80032f8 <RCCEx_PLLSAI2_Config+0x28c>)
 8003230:	695b      	ldr	r3, [r3, #20]
 8003232:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003236:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800323a:	687a      	ldr	r2, [r7, #4]
 800323c:	6892      	ldr	r2, [r2, #8]
 800323e:	0211      	lsls	r1, r2, #8
 8003240:	687a      	ldr	r2, [r7, #4]
 8003242:	68d2      	ldr	r2, [r2, #12]
 8003244:	0912      	lsrs	r2, r2, #4
 8003246:	0452      	lsls	r2, r2, #17
 8003248:	430a      	orrs	r2, r1
 800324a:	492b      	ldr	r1, [pc, #172]	; (80032f8 <RCCEx_PLLSAI2_Config+0x28c>)
 800324c:	4313      	orrs	r3, r2
 800324e:	614b      	str	r3, [r1, #20]
 8003250:	e026      	b.n	80032a0 <RCCEx_PLLSAI2_Config+0x234>
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#endif /* RCC_PLLSAI2Q_DIV_SUPPORT */
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	691b      	ldr	r3, [r3, #16]
 8003256:	2b02      	cmp	r3, #2
 8003258:	d010      	beq.n	800327c <RCCEx_PLLSAI2_Config+0x210>
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	691b      	ldr	r3, [r3, #16]
 800325e:	2b04      	cmp	r3, #4
 8003260:	d00c      	beq.n	800327c <RCCEx_PLLSAI2_Config+0x210>
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	691b      	ldr	r3, [r3, #16]
 8003266:	2b06      	cmp	r3, #6
 8003268:	d008      	beq.n	800327c <RCCEx_PLLSAI2_Config+0x210>
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	691b      	ldr	r3, [r3, #16]
 800326e:	2b08      	cmp	r3, #8
 8003270:	d004      	beq.n	800327c <RCCEx_PLLSAI2_Config+0x210>
 8003272:	f640 41aa 	movw	r1, #3242	; 0xcaa
 8003276:	481f      	ldr	r0, [pc, #124]	; (80032f4 <RCCEx_PLLSAI2_Config+0x288>)
 8003278:	f004 fe38 	bl	8007eec <assert_failed>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800327c:	4b1e      	ldr	r3, [pc, #120]	; (80032f8 <RCCEx_PLLSAI2_Config+0x28c>)
 800327e:	695b      	ldr	r3, [r3, #20]
 8003280:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003284:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003288:	687a      	ldr	r2, [r7, #4]
 800328a:	6892      	ldr	r2, [r2, #8]
 800328c:	0211      	lsls	r1, r2, #8
 800328e:	687a      	ldr	r2, [r7, #4]
 8003290:	6912      	ldr	r2, [r2, #16]
 8003292:	0852      	lsrs	r2, r2, #1
 8003294:	3a01      	subs	r2, #1
 8003296:	0652      	lsls	r2, r2, #25
 8003298:	430a      	orrs	r2, r1
 800329a:	4917      	ldr	r1, [pc, #92]	; (80032f8 <RCCEx_PLLSAI2_Config+0x28c>)
 800329c:	4313      	orrs	r3, r2
 800329e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80032a0:	4b15      	ldr	r3, [pc, #84]	; (80032f8 <RCCEx_PLLSAI2_Config+0x28c>)
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	4a14      	ldr	r2, [pc, #80]	; (80032f8 <RCCEx_PLLSAI2_Config+0x28c>)
 80032a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032aa:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032ac:	f7fd f98a 	bl	80005c4 <HAL_GetTick>
 80032b0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80032b2:	e009      	b.n	80032c8 <RCCEx_PLLSAI2_Config+0x25c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80032b4:	f7fd f986 	bl	80005c4 <HAL_GetTick>
 80032b8:	4602      	mov	r2, r0
 80032ba:	68bb      	ldr	r3, [r7, #8]
 80032bc:	1ad3      	subs	r3, r2, r3
 80032be:	2b02      	cmp	r3, #2
 80032c0:	d902      	bls.n	80032c8 <RCCEx_PLLSAI2_Config+0x25c>
        {
          status = HAL_TIMEOUT;
 80032c2:	2303      	movs	r3, #3
 80032c4:	73fb      	strb	r3, [r7, #15]
          break;
 80032c6:	e005      	b.n	80032d4 <RCCEx_PLLSAI2_Config+0x268>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80032c8:	4b0b      	ldr	r3, [pc, #44]	; (80032f8 <RCCEx_PLLSAI2_Config+0x28c>)
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d0ef      	beq.n	80032b4 <RCCEx_PLLSAI2_Config+0x248>
        }
      }

      if(status == HAL_OK)
 80032d4:	7bfb      	ldrb	r3, [r7, #15]
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d106      	bne.n	80032e8 <RCCEx_PLLSAI2_Config+0x27c>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80032da:	4b07      	ldr	r3, [pc, #28]	; (80032f8 <RCCEx_PLLSAI2_Config+0x28c>)
 80032dc:	695a      	ldr	r2, [r3, #20]
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	695b      	ldr	r3, [r3, #20]
 80032e2:	4905      	ldr	r1, [pc, #20]	; (80032f8 <RCCEx_PLLSAI2_Config+0x28c>)
 80032e4:	4313      	orrs	r3, r2
 80032e6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80032e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80032ea:	4618      	mov	r0, r3
 80032ec:	3710      	adds	r7, #16
 80032ee:	46bd      	mov	sp, r7
 80032f0:	bd80      	pop	{r7, pc}
 80032f2:	bf00      	nop
 80032f4:	08009d48 	.word	0x08009d48
 80032f8:	40021000 	.word	0x40021000

080032fc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b082      	sub	sp, #8
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2b00      	cmp	r3, #0
 8003308:	d101      	bne.n	800330e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800330a:	2301      	movs	r3, #1
 800330c:	e092      	b.n	8003434 <HAL_TIM_Base_Init+0x138>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	4a4a      	ldr	r2, [pc, #296]	; (800343c <HAL_TIM_Base_Init+0x140>)
 8003314:	4293      	cmp	r3, r2
 8003316:	d036      	beq.n	8003386 <HAL_TIM_Base_Init+0x8a>
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003320:	d031      	beq.n	8003386 <HAL_TIM_Base_Init+0x8a>
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	4a46      	ldr	r2, [pc, #280]	; (8003440 <HAL_TIM_Base_Init+0x144>)
 8003328:	4293      	cmp	r3, r2
 800332a:	d02c      	beq.n	8003386 <HAL_TIM_Base_Init+0x8a>
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	4a44      	ldr	r2, [pc, #272]	; (8003444 <HAL_TIM_Base_Init+0x148>)
 8003332:	4293      	cmp	r3, r2
 8003334:	d027      	beq.n	8003386 <HAL_TIM_Base_Init+0x8a>
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	4a43      	ldr	r2, [pc, #268]	; (8003448 <HAL_TIM_Base_Init+0x14c>)
 800333c:	4293      	cmp	r3, r2
 800333e:	d022      	beq.n	8003386 <HAL_TIM_Base_Init+0x8a>
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	4a41      	ldr	r2, [pc, #260]	; (800344c <HAL_TIM_Base_Init+0x150>)
 8003346:	4293      	cmp	r3, r2
 8003348:	d01d      	beq.n	8003386 <HAL_TIM_Base_Init+0x8a>
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	4a40      	ldr	r2, [pc, #256]	; (8003450 <HAL_TIM_Base_Init+0x154>)
 8003350:	4293      	cmp	r3, r2
 8003352:	d018      	beq.n	8003386 <HAL_TIM_Base_Init+0x8a>
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	4a3e      	ldr	r2, [pc, #248]	; (8003454 <HAL_TIM_Base_Init+0x158>)
 800335a:	4293      	cmp	r3, r2
 800335c:	d013      	beq.n	8003386 <HAL_TIM_Base_Init+0x8a>
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	4a3d      	ldr	r2, [pc, #244]	; (8003458 <HAL_TIM_Base_Init+0x15c>)
 8003364:	4293      	cmp	r3, r2
 8003366:	d00e      	beq.n	8003386 <HAL_TIM_Base_Init+0x8a>
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	4a3b      	ldr	r2, [pc, #236]	; (800345c <HAL_TIM_Base_Init+0x160>)
 800336e:	4293      	cmp	r3, r2
 8003370:	d009      	beq.n	8003386 <HAL_TIM_Base_Init+0x8a>
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	4a3a      	ldr	r2, [pc, #232]	; (8003460 <HAL_TIM_Base_Init+0x164>)
 8003378:	4293      	cmp	r3, r2
 800337a:	d004      	beq.n	8003386 <HAL_TIM_Base_Init+0x8a>
 800337c:	f240 1115 	movw	r1, #277	; 0x115
 8003380:	4838      	ldr	r0, [pc, #224]	; (8003464 <HAL_TIM_Base_Init+0x168>)
 8003382:	f004 fdb3 	bl	8007eec <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	689b      	ldr	r3, [r3, #8]
 800338a:	2b00      	cmp	r3, #0
 800338c:	d014      	beq.n	80033b8 <HAL_TIM_Base_Init+0xbc>
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	689b      	ldr	r3, [r3, #8]
 8003392:	2b10      	cmp	r3, #16
 8003394:	d010      	beq.n	80033b8 <HAL_TIM_Base_Init+0xbc>
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	689b      	ldr	r3, [r3, #8]
 800339a:	2b20      	cmp	r3, #32
 800339c:	d00c      	beq.n	80033b8 <HAL_TIM_Base_Init+0xbc>
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	689b      	ldr	r3, [r3, #8]
 80033a2:	2b40      	cmp	r3, #64	; 0x40
 80033a4:	d008      	beq.n	80033b8 <HAL_TIM_Base_Init+0xbc>
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	689b      	ldr	r3, [r3, #8]
 80033aa:	2b60      	cmp	r3, #96	; 0x60
 80033ac:	d004      	beq.n	80033b8 <HAL_TIM_Base_Init+0xbc>
 80033ae:	f44f 718b 	mov.w	r1, #278	; 0x116
 80033b2:	482c      	ldr	r0, [pc, #176]	; (8003464 <HAL_TIM_Base_Init+0x168>)
 80033b4:	f004 fd9a 	bl	8007eec <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	691b      	ldr	r3, [r3, #16]
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d00e      	beq.n	80033de <HAL_TIM_Base_Init+0xe2>
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	691b      	ldr	r3, [r3, #16]
 80033c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80033c8:	d009      	beq.n	80033de <HAL_TIM_Base_Init+0xe2>
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	691b      	ldr	r3, [r3, #16]
 80033ce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80033d2:	d004      	beq.n	80033de <HAL_TIM_Base_Init+0xe2>
 80033d4:	f240 1117 	movw	r1, #279	; 0x117
 80033d8:	4822      	ldr	r0, [pc, #136]	; (8003464 <HAL_TIM_Base_Init+0x168>)
 80033da:	f004 fd87 	bl	8007eec <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	699b      	ldr	r3, [r3, #24]
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d008      	beq.n	80033f8 <HAL_TIM_Base_Init+0xfc>
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	699b      	ldr	r3, [r3, #24]
 80033ea:	2b80      	cmp	r3, #128	; 0x80
 80033ec:	d004      	beq.n	80033f8 <HAL_TIM_Base_Init+0xfc>
 80033ee:	f44f 718c 	mov.w	r1, #280	; 0x118
 80033f2:	481c      	ldr	r0, [pc, #112]	; (8003464 <HAL_TIM_Base_Init+0x168>)
 80033f4:	f004 fd7a 	bl	8007eec <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033fe:	b2db      	uxtb	r3, r3
 8003400:	2b00      	cmp	r3, #0
 8003402:	d106      	bne.n	8003412 <HAL_TIM_Base_Init+0x116>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2200      	movs	r2, #0
 8003408:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800340c:	6878      	ldr	r0, [r7, #4]
 800340e:	f000 f82b 	bl	8003468 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	2202      	movs	r2, #2
 8003416:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681a      	ldr	r2, [r3, #0]
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	3304      	adds	r3, #4
 8003422:	4619      	mov	r1, r3
 8003424:	4610      	mov	r0, r2
 8003426:	f000 f9eb 	bl	8003800 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	2201      	movs	r2, #1
 800342e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003432:	2300      	movs	r3, #0
}
 8003434:	4618      	mov	r0, r3
 8003436:	3708      	adds	r7, #8
 8003438:	46bd      	mov	sp, r7
 800343a:	bd80      	pop	{r7, pc}
 800343c:	40012c00 	.word	0x40012c00
 8003440:	40000400 	.word	0x40000400
 8003444:	40000800 	.word	0x40000800
 8003448:	40000c00 	.word	0x40000c00
 800344c:	40001000 	.word	0x40001000
 8003450:	40001400 	.word	0x40001400
 8003454:	40013400 	.word	0x40013400
 8003458:	40014000 	.word	0x40014000
 800345c:	40014400 	.word	0x40014400
 8003460:	40014800 	.word	0x40014800
 8003464:	08009d84 	.word	0x08009d84

08003468 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003468:	b480      	push	{r7}
 800346a:	b083      	sub	sp, #12
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003470:	bf00      	nop
 8003472:	370c      	adds	r7, #12
 8003474:	46bd      	mov	sp, r7
 8003476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347a:	4770      	bx	lr

0800347c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	b084      	sub	sp, #16
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	4a2d      	ldr	r2, [pc, #180]	; (8003540 <HAL_TIM_Base_Start_IT+0xc4>)
 800348a:	4293      	cmp	r3, r2
 800348c:	d036      	beq.n	80034fc <HAL_TIM_Base_Start_IT+0x80>
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003496:	d031      	beq.n	80034fc <HAL_TIM_Base_Start_IT+0x80>
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	4a29      	ldr	r2, [pc, #164]	; (8003544 <HAL_TIM_Base_Start_IT+0xc8>)
 800349e:	4293      	cmp	r3, r2
 80034a0:	d02c      	beq.n	80034fc <HAL_TIM_Base_Start_IT+0x80>
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	4a28      	ldr	r2, [pc, #160]	; (8003548 <HAL_TIM_Base_Start_IT+0xcc>)
 80034a8:	4293      	cmp	r3, r2
 80034aa:	d027      	beq.n	80034fc <HAL_TIM_Base_Start_IT+0x80>
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	4a26      	ldr	r2, [pc, #152]	; (800354c <HAL_TIM_Base_Start_IT+0xd0>)
 80034b2:	4293      	cmp	r3, r2
 80034b4:	d022      	beq.n	80034fc <HAL_TIM_Base_Start_IT+0x80>
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	4a25      	ldr	r2, [pc, #148]	; (8003550 <HAL_TIM_Base_Start_IT+0xd4>)
 80034bc:	4293      	cmp	r3, r2
 80034be:	d01d      	beq.n	80034fc <HAL_TIM_Base_Start_IT+0x80>
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	4a23      	ldr	r2, [pc, #140]	; (8003554 <HAL_TIM_Base_Start_IT+0xd8>)
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d018      	beq.n	80034fc <HAL_TIM_Base_Start_IT+0x80>
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	4a22      	ldr	r2, [pc, #136]	; (8003558 <HAL_TIM_Base_Start_IT+0xdc>)
 80034d0:	4293      	cmp	r3, r2
 80034d2:	d013      	beq.n	80034fc <HAL_TIM_Base_Start_IT+0x80>
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	4a20      	ldr	r2, [pc, #128]	; (800355c <HAL_TIM_Base_Start_IT+0xe0>)
 80034da:	4293      	cmp	r3, r2
 80034dc:	d00e      	beq.n	80034fc <HAL_TIM_Base_Start_IT+0x80>
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	4a1f      	ldr	r2, [pc, #124]	; (8003560 <HAL_TIM_Base_Start_IT+0xe4>)
 80034e4:	4293      	cmp	r3, r2
 80034e6:	d009      	beq.n	80034fc <HAL_TIM_Base_Start_IT+0x80>
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	4a1d      	ldr	r2, [pc, #116]	; (8003564 <HAL_TIM_Base_Start_IT+0xe8>)
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d004      	beq.n	80034fc <HAL_TIM_Base_Start_IT+0x80>
 80034f2:	f44f 71de 	mov.w	r1, #444	; 0x1bc
 80034f6:	481c      	ldr	r0, [pc, #112]	; (8003568 <HAL_TIM_Base_Start_IT+0xec>)
 80034f8:	f004 fcf8 	bl	8007eec <assert_failed>

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	68da      	ldr	r2, [r3, #12]
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f042 0201 	orr.w	r2, r2, #1
 800350a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	689a      	ldr	r2, [r3, #8]
 8003512:	4b16      	ldr	r3, [pc, #88]	; (800356c <HAL_TIM_Base_Start_IT+0xf0>)
 8003514:	4013      	ands	r3, r2
 8003516:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	2b06      	cmp	r3, #6
 800351c:	d00b      	beq.n	8003536 <HAL_TIM_Base_Start_IT+0xba>
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003524:	d007      	beq.n	8003536 <HAL_TIM_Base_Start_IT+0xba>
  {
    __HAL_TIM_ENABLE(htim);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	681a      	ldr	r2, [r3, #0]
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f042 0201 	orr.w	r2, r2, #1
 8003534:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003536:	2300      	movs	r3, #0
}
 8003538:	4618      	mov	r0, r3
 800353a:	3710      	adds	r7, #16
 800353c:	46bd      	mov	sp, r7
 800353e:	bd80      	pop	{r7, pc}
 8003540:	40012c00 	.word	0x40012c00
 8003544:	40000400 	.word	0x40000400
 8003548:	40000800 	.word	0x40000800
 800354c:	40000c00 	.word	0x40000c00
 8003550:	40001000 	.word	0x40001000
 8003554:	40001400 	.word	0x40001400
 8003558:	40013400 	.word	0x40013400
 800355c:	40014000 	.word	0x40014000
 8003560:	40014400 	.word	0x40014400
 8003564:	40014800 	.word	0x40014800
 8003568:	08009d84 	.word	0x08009d84
 800356c:	00010007 	.word	0x00010007

08003570 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003570:	b580      	push	{r7, lr}
 8003572:	b082      	sub	sp, #8
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	691b      	ldr	r3, [r3, #16]
 800357e:	f003 0302 	and.w	r3, r3, #2
 8003582:	2b02      	cmp	r3, #2
 8003584:	d122      	bne.n	80035cc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	68db      	ldr	r3, [r3, #12]
 800358c:	f003 0302 	and.w	r3, r3, #2
 8003590:	2b02      	cmp	r3, #2
 8003592:	d11b      	bne.n	80035cc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f06f 0202 	mvn.w	r2, #2
 800359c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	2201      	movs	r2, #1
 80035a2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	699b      	ldr	r3, [r3, #24]
 80035aa:	f003 0303 	and.w	r3, r3, #3
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d003      	beq.n	80035ba <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80035b2:	6878      	ldr	r0, [r7, #4]
 80035b4:	f000 f905 	bl	80037c2 <HAL_TIM_IC_CaptureCallback>
 80035b8:	e005      	b.n	80035c6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80035ba:	6878      	ldr	r0, [r7, #4]
 80035bc:	f000 f8f7 	bl	80037ae <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035c0:	6878      	ldr	r0, [r7, #4]
 80035c2:	f000 f908 	bl	80037d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	2200      	movs	r2, #0
 80035ca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	691b      	ldr	r3, [r3, #16]
 80035d2:	f003 0304 	and.w	r3, r3, #4
 80035d6:	2b04      	cmp	r3, #4
 80035d8:	d122      	bne.n	8003620 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	68db      	ldr	r3, [r3, #12]
 80035e0:	f003 0304 	and.w	r3, r3, #4
 80035e4:	2b04      	cmp	r3, #4
 80035e6:	d11b      	bne.n	8003620 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f06f 0204 	mvn.w	r2, #4
 80035f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	2202      	movs	r2, #2
 80035f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	699b      	ldr	r3, [r3, #24]
 80035fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003602:	2b00      	cmp	r3, #0
 8003604:	d003      	beq.n	800360e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003606:	6878      	ldr	r0, [r7, #4]
 8003608:	f000 f8db 	bl	80037c2 <HAL_TIM_IC_CaptureCallback>
 800360c:	e005      	b.n	800361a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800360e:	6878      	ldr	r0, [r7, #4]
 8003610:	f000 f8cd 	bl	80037ae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003614:	6878      	ldr	r0, [r7, #4]
 8003616:	f000 f8de 	bl	80037d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	2200      	movs	r2, #0
 800361e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	691b      	ldr	r3, [r3, #16]
 8003626:	f003 0308 	and.w	r3, r3, #8
 800362a:	2b08      	cmp	r3, #8
 800362c:	d122      	bne.n	8003674 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	68db      	ldr	r3, [r3, #12]
 8003634:	f003 0308 	and.w	r3, r3, #8
 8003638:	2b08      	cmp	r3, #8
 800363a:	d11b      	bne.n	8003674 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f06f 0208 	mvn.w	r2, #8
 8003644:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2204      	movs	r2, #4
 800364a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	69db      	ldr	r3, [r3, #28]
 8003652:	f003 0303 	and.w	r3, r3, #3
 8003656:	2b00      	cmp	r3, #0
 8003658:	d003      	beq.n	8003662 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800365a:	6878      	ldr	r0, [r7, #4]
 800365c:	f000 f8b1 	bl	80037c2 <HAL_TIM_IC_CaptureCallback>
 8003660:	e005      	b.n	800366e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003662:	6878      	ldr	r0, [r7, #4]
 8003664:	f000 f8a3 	bl	80037ae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003668:	6878      	ldr	r0, [r7, #4]
 800366a:	f000 f8b4 	bl	80037d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	2200      	movs	r2, #0
 8003672:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	691b      	ldr	r3, [r3, #16]
 800367a:	f003 0310 	and.w	r3, r3, #16
 800367e:	2b10      	cmp	r3, #16
 8003680:	d122      	bne.n	80036c8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	68db      	ldr	r3, [r3, #12]
 8003688:	f003 0310 	and.w	r3, r3, #16
 800368c:	2b10      	cmp	r3, #16
 800368e:	d11b      	bne.n	80036c8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f06f 0210 	mvn.w	r2, #16
 8003698:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2208      	movs	r2, #8
 800369e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	69db      	ldr	r3, [r3, #28]
 80036a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d003      	beq.n	80036b6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80036ae:	6878      	ldr	r0, [r7, #4]
 80036b0:	f000 f887 	bl	80037c2 <HAL_TIM_IC_CaptureCallback>
 80036b4:	e005      	b.n	80036c2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80036b6:	6878      	ldr	r0, [r7, #4]
 80036b8:	f000 f879 	bl	80037ae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036bc:	6878      	ldr	r0, [r7, #4]
 80036be:	f000 f88a 	bl	80037d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	2200      	movs	r2, #0
 80036c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	691b      	ldr	r3, [r3, #16]
 80036ce:	f003 0301 	and.w	r3, r3, #1
 80036d2:	2b01      	cmp	r3, #1
 80036d4:	d10e      	bne.n	80036f4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	68db      	ldr	r3, [r3, #12]
 80036dc:	f003 0301 	and.w	r3, r3, #1
 80036e0:	2b01      	cmp	r3, #1
 80036e2:	d107      	bne.n	80036f4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f06f 0201 	mvn.w	r2, #1
 80036ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80036ee:	6878      	ldr	r0, [r7, #4]
 80036f0:	f000 f9a2 	bl	8003a38 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	691b      	ldr	r3, [r3, #16]
 80036fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036fe:	2b80      	cmp	r3, #128	; 0x80
 8003700:	d10e      	bne.n	8003720 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	68db      	ldr	r3, [r3, #12]
 8003708:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800370c:	2b80      	cmp	r3, #128	; 0x80
 800370e:	d107      	bne.n	8003720 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003718:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800371a:	6878      	ldr	r0, [r7, #4]
 800371c:	f000 f914 	bl	8003948 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	691b      	ldr	r3, [r3, #16]
 8003726:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800372a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800372e:	d10e      	bne.n	800374e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	68db      	ldr	r3, [r3, #12]
 8003736:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800373a:	2b80      	cmp	r3, #128	; 0x80
 800373c:	d107      	bne.n	800374e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003746:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003748:	6878      	ldr	r0, [r7, #4]
 800374a:	f000 f907 	bl	800395c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	691b      	ldr	r3, [r3, #16]
 8003754:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003758:	2b40      	cmp	r3, #64	; 0x40
 800375a:	d10e      	bne.n	800377a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	68db      	ldr	r3, [r3, #12]
 8003762:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003766:	2b40      	cmp	r3, #64	; 0x40
 8003768:	d107      	bne.n	800377a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003772:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003774:	6878      	ldr	r0, [r7, #4]
 8003776:	f000 f838 	bl	80037ea <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	691b      	ldr	r3, [r3, #16]
 8003780:	f003 0320 	and.w	r3, r3, #32
 8003784:	2b20      	cmp	r3, #32
 8003786:	d10e      	bne.n	80037a6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	68db      	ldr	r3, [r3, #12]
 800378e:	f003 0320 	and.w	r3, r3, #32
 8003792:	2b20      	cmp	r3, #32
 8003794:	d107      	bne.n	80037a6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f06f 0220 	mvn.w	r2, #32
 800379e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80037a0:	6878      	ldr	r0, [r7, #4]
 80037a2:	f000 f8c7 	bl	8003934 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80037a6:	bf00      	nop
 80037a8:	3708      	adds	r7, #8
 80037aa:	46bd      	mov	sp, r7
 80037ac:	bd80      	pop	{r7, pc}

080037ae <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80037ae:	b480      	push	{r7}
 80037b0:	b083      	sub	sp, #12
 80037b2:	af00      	add	r7, sp, #0
 80037b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80037b6:	bf00      	nop
 80037b8:	370c      	adds	r7, #12
 80037ba:	46bd      	mov	sp, r7
 80037bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c0:	4770      	bx	lr

080037c2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80037c2:	b480      	push	{r7}
 80037c4:	b083      	sub	sp, #12
 80037c6:	af00      	add	r7, sp, #0
 80037c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80037ca:	bf00      	nop
 80037cc:	370c      	adds	r7, #12
 80037ce:	46bd      	mov	sp, r7
 80037d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d4:	4770      	bx	lr

080037d6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80037d6:	b480      	push	{r7}
 80037d8:	b083      	sub	sp, #12
 80037da:	af00      	add	r7, sp, #0
 80037dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80037de:	bf00      	nop
 80037e0:	370c      	adds	r7, #12
 80037e2:	46bd      	mov	sp, r7
 80037e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e8:	4770      	bx	lr

080037ea <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80037ea:	b480      	push	{r7}
 80037ec:	b083      	sub	sp, #12
 80037ee:	af00      	add	r7, sp, #0
 80037f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80037f2:	bf00      	nop
 80037f4:	370c      	adds	r7, #12
 80037f6:	46bd      	mov	sp, r7
 80037f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fc:	4770      	bx	lr
	...

08003800 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003800:	b480      	push	{r7}
 8003802:	b085      	sub	sp, #20
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
 8003808:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	4a40      	ldr	r2, [pc, #256]	; (8003914 <TIM_Base_SetConfig+0x114>)
 8003814:	4293      	cmp	r3, r2
 8003816:	d013      	beq.n	8003840 <TIM_Base_SetConfig+0x40>
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800381e:	d00f      	beq.n	8003840 <TIM_Base_SetConfig+0x40>
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	4a3d      	ldr	r2, [pc, #244]	; (8003918 <TIM_Base_SetConfig+0x118>)
 8003824:	4293      	cmp	r3, r2
 8003826:	d00b      	beq.n	8003840 <TIM_Base_SetConfig+0x40>
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	4a3c      	ldr	r2, [pc, #240]	; (800391c <TIM_Base_SetConfig+0x11c>)
 800382c:	4293      	cmp	r3, r2
 800382e:	d007      	beq.n	8003840 <TIM_Base_SetConfig+0x40>
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	4a3b      	ldr	r2, [pc, #236]	; (8003920 <TIM_Base_SetConfig+0x120>)
 8003834:	4293      	cmp	r3, r2
 8003836:	d003      	beq.n	8003840 <TIM_Base_SetConfig+0x40>
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	4a3a      	ldr	r2, [pc, #232]	; (8003924 <TIM_Base_SetConfig+0x124>)
 800383c:	4293      	cmp	r3, r2
 800383e:	d108      	bne.n	8003852 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003846:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003848:	683b      	ldr	r3, [r7, #0]
 800384a:	685b      	ldr	r3, [r3, #4]
 800384c:	68fa      	ldr	r2, [r7, #12]
 800384e:	4313      	orrs	r3, r2
 8003850:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	4a2f      	ldr	r2, [pc, #188]	; (8003914 <TIM_Base_SetConfig+0x114>)
 8003856:	4293      	cmp	r3, r2
 8003858:	d01f      	beq.n	800389a <TIM_Base_SetConfig+0x9a>
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003860:	d01b      	beq.n	800389a <TIM_Base_SetConfig+0x9a>
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	4a2c      	ldr	r2, [pc, #176]	; (8003918 <TIM_Base_SetConfig+0x118>)
 8003866:	4293      	cmp	r3, r2
 8003868:	d017      	beq.n	800389a <TIM_Base_SetConfig+0x9a>
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	4a2b      	ldr	r2, [pc, #172]	; (800391c <TIM_Base_SetConfig+0x11c>)
 800386e:	4293      	cmp	r3, r2
 8003870:	d013      	beq.n	800389a <TIM_Base_SetConfig+0x9a>
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	4a2a      	ldr	r2, [pc, #168]	; (8003920 <TIM_Base_SetConfig+0x120>)
 8003876:	4293      	cmp	r3, r2
 8003878:	d00f      	beq.n	800389a <TIM_Base_SetConfig+0x9a>
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	4a29      	ldr	r2, [pc, #164]	; (8003924 <TIM_Base_SetConfig+0x124>)
 800387e:	4293      	cmp	r3, r2
 8003880:	d00b      	beq.n	800389a <TIM_Base_SetConfig+0x9a>
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	4a28      	ldr	r2, [pc, #160]	; (8003928 <TIM_Base_SetConfig+0x128>)
 8003886:	4293      	cmp	r3, r2
 8003888:	d007      	beq.n	800389a <TIM_Base_SetConfig+0x9a>
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	4a27      	ldr	r2, [pc, #156]	; (800392c <TIM_Base_SetConfig+0x12c>)
 800388e:	4293      	cmp	r3, r2
 8003890:	d003      	beq.n	800389a <TIM_Base_SetConfig+0x9a>
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	4a26      	ldr	r2, [pc, #152]	; (8003930 <TIM_Base_SetConfig+0x130>)
 8003896:	4293      	cmp	r3, r2
 8003898:	d108      	bne.n	80038ac <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80038a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80038a2:	683b      	ldr	r3, [r7, #0]
 80038a4:	68db      	ldr	r3, [r3, #12]
 80038a6:	68fa      	ldr	r2, [r7, #12]
 80038a8:	4313      	orrs	r3, r2
 80038aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80038b2:	683b      	ldr	r3, [r7, #0]
 80038b4:	695b      	ldr	r3, [r3, #20]
 80038b6:	4313      	orrs	r3, r2
 80038b8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	68fa      	ldr	r2, [r7, #12]
 80038be:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	689a      	ldr	r2, [r3, #8]
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	681a      	ldr	r2, [r3, #0]
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	4a10      	ldr	r2, [pc, #64]	; (8003914 <TIM_Base_SetConfig+0x114>)
 80038d4:	4293      	cmp	r3, r2
 80038d6:	d00f      	beq.n	80038f8 <TIM_Base_SetConfig+0xf8>
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	4a12      	ldr	r2, [pc, #72]	; (8003924 <TIM_Base_SetConfig+0x124>)
 80038dc:	4293      	cmp	r3, r2
 80038de:	d00b      	beq.n	80038f8 <TIM_Base_SetConfig+0xf8>
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	4a11      	ldr	r2, [pc, #68]	; (8003928 <TIM_Base_SetConfig+0x128>)
 80038e4:	4293      	cmp	r3, r2
 80038e6:	d007      	beq.n	80038f8 <TIM_Base_SetConfig+0xf8>
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	4a10      	ldr	r2, [pc, #64]	; (800392c <TIM_Base_SetConfig+0x12c>)
 80038ec:	4293      	cmp	r3, r2
 80038ee:	d003      	beq.n	80038f8 <TIM_Base_SetConfig+0xf8>
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	4a0f      	ldr	r2, [pc, #60]	; (8003930 <TIM_Base_SetConfig+0x130>)
 80038f4:	4293      	cmp	r3, r2
 80038f6:	d103      	bne.n	8003900 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	691a      	ldr	r2, [r3, #16]
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2201      	movs	r2, #1
 8003904:	615a      	str	r2, [r3, #20]
}
 8003906:	bf00      	nop
 8003908:	3714      	adds	r7, #20
 800390a:	46bd      	mov	sp, r7
 800390c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003910:	4770      	bx	lr
 8003912:	bf00      	nop
 8003914:	40012c00 	.word	0x40012c00
 8003918:	40000400 	.word	0x40000400
 800391c:	40000800 	.word	0x40000800
 8003920:	40000c00 	.word	0x40000c00
 8003924:	40013400 	.word	0x40013400
 8003928:	40014000 	.word	0x40014000
 800392c:	40014400 	.word	0x40014400
 8003930:	40014800 	.word	0x40014800

08003934 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003934:	b480      	push	{r7}
 8003936:	b083      	sub	sp, #12
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800393c:	bf00      	nop
 800393e:	370c      	adds	r7, #12
 8003940:	46bd      	mov	sp, r7
 8003942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003946:	4770      	bx	lr

08003948 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003948:	b480      	push	{r7}
 800394a:	b083      	sub	sp, #12
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003950:	bf00      	nop
 8003952:	370c      	adds	r7, #12
 8003954:	46bd      	mov	sp, r7
 8003956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395a:	4770      	bx	lr

0800395c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800395c:	b480      	push	{r7}
 800395e:	b083      	sub	sp, #12
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003964:	bf00      	nop
 8003966:	370c      	adds	r7, #12
 8003968:	46bd      	mov	sp, r7
 800396a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396e:	4770      	bx	lr

08003970 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003970:	b580      	push	{r7, lr}
 8003972:	b08c      	sub	sp, #48	; 0x30
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8003978:	2300      	movs	r3, #0
 800397a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              uwPrescalerValue = 0U;
 800397c:	2300      	movs	r3, #0
 800397e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  
  /* Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8003980:	2200      	movs	r2, #0
 8003982:	6879      	ldr	r1, [r7, #4]
 8003984:	2036      	movs	r0, #54	; 0x36
 8003986:	f7fc ff3f 	bl	8000808 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800398a:	2036      	movs	r0, #54	; 0x36
 800398c:	f7fc ff68 	bl	8000860 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8003990:	4b25      	ldr	r3, [pc, #148]	; (8003a28 <HAL_InitTick+0xb8>)
 8003992:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003994:	4a24      	ldr	r2, [pc, #144]	; (8003a28 <HAL_InitTick+0xb8>)
 8003996:	f043 0310 	orr.w	r3, r3, #16
 800399a:	6593      	str	r3, [r2, #88]	; 0x58
 800399c:	4b22      	ldr	r3, [pc, #136]	; (8003a28 <HAL_InitTick+0xb8>)
 800399e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039a0:	f003 0310 	and.w	r3, r3, #16
 80039a4:	60bb      	str	r3, [r7, #8]
 80039a6:	68bb      	ldr	r3, [r7, #8]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80039a8:	f107 020c 	add.w	r2, r7, #12
 80039ac:	f107 0310 	add.w	r3, r7, #16
 80039b0:	4611      	mov	r1, r2
 80039b2:	4618      	mov	r0, r3
 80039b4:	f7fe fc68 	bl	8002288 <HAL_RCC_GetClockConfig>
  
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80039b8:	69fb      	ldr	r3, [r7, #28]
 80039ba:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1) 
 80039bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d103      	bne.n	80039ca <HAL_InitTick+0x5a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80039c2:	f7fe fc35 	bl	8002230 <HAL_RCC_GetPCLK1Freq>
 80039c6:	62f8      	str	r0, [r7, #44]	; 0x2c
 80039c8:	e004      	b.n	80039d4 <HAL_InitTick+0x64>
  }
  else
  {
    uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80039ca:	f7fe fc31 	bl	8002230 <HAL_RCC_GetPCLK1Freq>
 80039ce:	4603      	mov	r3, r0
 80039d0:	005b      	lsls	r3, r3, #1
 80039d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80039d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039d6:	4a15      	ldr	r2, [pc, #84]	; (8003a2c <HAL_InitTick+0xbc>)
 80039d8:	fba2 2303 	umull	r2, r3, r2, r3
 80039dc:	0c9b      	lsrs	r3, r3, #18
 80039de:	3b01      	subs	r3, #1
 80039e0:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Initialize TIM6 */
  TimHandle.Instance = TIM6;
 80039e2:	4b13      	ldr	r3, [pc, #76]	; (8003a30 <HAL_InitTick+0xc0>)
 80039e4:	4a13      	ldr	r2, [pc, #76]	; (8003a34 <HAL_InitTick+0xc4>)
 80039e6:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  TimHandle.Init.Period = (1000000U / 1000U) - 1U;
 80039e8:	4b11      	ldr	r3, [pc, #68]	; (8003a30 <HAL_InitTick+0xc0>)
 80039ea:	f240 32e7 	movw	r2, #999	; 0x3e7
 80039ee:	60da      	str	r2, [r3, #12]
  TimHandle.Init.Prescaler = uwPrescalerValue;
 80039f0:	4a0f      	ldr	r2, [pc, #60]	; (8003a30 <HAL_InitTick+0xc0>)
 80039f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039f4:	6053      	str	r3, [r2, #4]
  TimHandle.Init.ClockDivision = 0;
 80039f6:	4b0e      	ldr	r3, [pc, #56]	; (8003a30 <HAL_InitTick+0xc0>)
 80039f8:	2200      	movs	r2, #0
 80039fa:	611a      	str	r2, [r3, #16]
  TimHandle.Init.CounterMode = TIM_COUNTERMODE_UP;
 80039fc:	4b0c      	ldr	r3, [pc, #48]	; (8003a30 <HAL_InitTick+0xc0>)
 80039fe:	2200      	movs	r2, #0
 8003a00:	609a      	str	r2, [r3, #8]
  TimHandle.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003a02:	4b0b      	ldr	r3, [pc, #44]	; (8003a30 <HAL_InitTick+0xc0>)
 8003a04:	2200      	movs	r2, #0
 8003a06:	619a      	str	r2, [r3, #24]
  if(HAL_TIM_Base_Init(&TimHandle) == HAL_OK)
 8003a08:	4809      	ldr	r0, [pc, #36]	; (8003a30 <HAL_InitTick+0xc0>)
 8003a0a:	f7ff fc77 	bl	80032fc <HAL_TIM_Base_Init>
 8003a0e:	4603      	mov	r3, r0
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d104      	bne.n	8003a1e <HAL_InitTick+0xae>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&TimHandle);
 8003a14:	4806      	ldr	r0, [pc, #24]	; (8003a30 <HAL_InitTick+0xc0>)
 8003a16:	f7ff fd31 	bl	800347c <HAL_TIM_Base_Start_IT>
 8003a1a:	4603      	mov	r3, r0
 8003a1c:	e000      	b.n	8003a20 <HAL_InitTick+0xb0>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8003a1e:	2301      	movs	r3, #1
}
 8003a20:	4618      	mov	r0, r3
 8003a22:	3730      	adds	r7, #48	; 0x30
 8003a24:	46bd      	mov	sp, r7
 8003a26:	bd80      	pop	{r7, pc}
 8003a28:	40021000 	.word	0x40021000
 8003a2c:	431bde83 	.word	0x431bde83
 8003a30:	200019e4 	.word	0x200019e4
 8003a34:	40001000 	.word	0x40001000

08003a38 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	b082      	sub	sp, #8
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
  HAL_IncTick();
 8003a40:	f7fc fdae 	bl	80005a0 <HAL_IncTick>
}
 8003a44:	bf00      	nop
 8003a46:	3708      	adds	r7, #8
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	bd80      	pop	{r7, pc}

08003a4c <TIM6_DAC_IRQHandler>:
  * @brief  This function handles TIM interrupt request.
  * @param  None
  * @retval None
  */
void TIM6_DAC_IRQHandler(void)
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	af00      	add	r7, sp, #0
  HAL_TIM_IRQHandler(&TimHandle);
 8003a50:	4802      	ldr	r0, [pc, #8]	; (8003a5c <TIM6_DAC_IRQHandler+0x10>)
 8003a52:	f7ff fd8d 	bl	8003570 <HAL_TIM_IRQHandler>
}
 8003a56:	bf00      	nop
 8003a58:	bd80      	pop	{r7, pc}
 8003a5a:	bf00      	nop
 8003a5c:	200019e4 	.word	0x200019e4

08003a60 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b082      	sub	sp, #8
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d101      	bne.n	8003a72 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003a6e:	2301      	movs	r3, #1
 8003a70:	e099      	b.n	8003ba6 <HAL_UART_Init+0x146>
  }

  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	699b      	ldr	r3, [r3, #24]
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d023      	beq.n	8003ac2 <HAL_UART_Init+0x62>
  {
    /* Check the parameters */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	4a4c      	ldr	r2, [pc, #304]	; (8003bb0 <HAL_UART_Init+0x150>)
 8003a80:	4293      	cmp	r3, r2
 8003a82:	d041      	beq.n	8003b08 <HAL_UART_Init+0xa8>
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	4a4a      	ldr	r2, [pc, #296]	; (8003bb4 <HAL_UART_Init+0x154>)
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d03c      	beq.n	8003b08 <HAL_UART_Init+0xa8>
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	4a49      	ldr	r2, [pc, #292]	; (8003bb8 <HAL_UART_Init+0x158>)
 8003a94:	4293      	cmp	r3, r2
 8003a96:	d037      	beq.n	8003b08 <HAL_UART_Init+0xa8>
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	4a47      	ldr	r2, [pc, #284]	; (8003bbc <HAL_UART_Init+0x15c>)
 8003a9e:	4293      	cmp	r3, r2
 8003aa0:	d032      	beq.n	8003b08 <HAL_UART_Init+0xa8>
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	4a46      	ldr	r2, [pc, #280]	; (8003bc0 <HAL_UART_Init+0x160>)
 8003aa8:	4293      	cmp	r3, r2
 8003aaa:	d02d      	beq.n	8003b08 <HAL_UART_Init+0xa8>
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	4a44      	ldr	r2, [pc, #272]	; (8003bc4 <HAL_UART_Init+0x164>)
 8003ab2:	4293      	cmp	r3, r2
 8003ab4:	d028      	beq.n	8003b08 <HAL_UART_Init+0xa8>
 8003ab6:	f240 113f 	movw	r1, #319	; 0x13f
 8003aba:	4843      	ldr	r0, [pc, #268]	; (8003bc8 <HAL_UART_Init+0x168>)
 8003abc:	f004 fa16 	bl	8007eec <assert_failed>
 8003ac0:	e022      	b.n	8003b08 <HAL_UART_Init+0xa8>
  }
  else
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	4a3a      	ldr	r2, [pc, #232]	; (8003bb0 <HAL_UART_Init+0x150>)
 8003ac8:	4293      	cmp	r3, r2
 8003aca:	d01d      	beq.n	8003b08 <HAL_UART_Init+0xa8>
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	4a38      	ldr	r2, [pc, #224]	; (8003bb4 <HAL_UART_Init+0x154>)
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	d018      	beq.n	8003b08 <HAL_UART_Init+0xa8>
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	4a37      	ldr	r2, [pc, #220]	; (8003bb8 <HAL_UART_Init+0x158>)
 8003adc:	4293      	cmp	r3, r2
 8003ade:	d013      	beq.n	8003b08 <HAL_UART_Init+0xa8>
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	4a35      	ldr	r2, [pc, #212]	; (8003bbc <HAL_UART_Init+0x15c>)
 8003ae6:	4293      	cmp	r3, r2
 8003ae8:	d00e      	beq.n	8003b08 <HAL_UART_Init+0xa8>
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	4a34      	ldr	r2, [pc, #208]	; (8003bc0 <HAL_UART_Init+0x160>)
 8003af0:	4293      	cmp	r3, r2
 8003af2:	d009      	beq.n	8003b08 <HAL_UART_Init+0xa8>
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	4a32      	ldr	r2, [pc, #200]	; (8003bc4 <HAL_UART_Init+0x164>)
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d004      	beq.n	8003b08 <HAL_UART_Init+0xa8>
 8003afe:	f44f 71a2 	mov.w	r1, #324	; 0x144
 8003b02:	4831      	ldr	r0, [pc, #196]	; (8003bc8 <HAL_UART_Init+0x168>)
 8003b04:	f004 f9f2 	bl	8007eec <assert_failed>
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d114      	bne.n	8003b3a <HAL_UART_Init+0xda>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2200      	movs	r2, #0
 8003b14:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 8003b18:	6878      	ldr	r0, [r7, #4]
 8003b1a:	f000 fb03 	bl	8004124 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d103      	bne.n	8003b30 <HAL_UART_Init+0xd0>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	4a28      	ldr	r2, [pc, #160]	; (8003bcc <HAL_UART_Init+0x16c>)
 8003b2c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003b36:	6878      	ldr	r0, [r7, #4]
 8003b38:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	2224      	movs	r2, #36	; 0x24
 8003b3e:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	681a      	ldr	r2, [r3, #0]
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f022 0201 	bic.w	r2, r2, #1
 8003b4e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003b50:	6878      	ldr	r0, [r7, #4]
 8003b52:	f000 fb27 	bl	80041a4 <UART_SetConfig>
 8003b56:	4603      	mov	r3, r0
 8003b58:	2b01      	cmp	r3, #1
 8003b5a:	d101      	bne.n	8003b60 <HAL_UART_Init+0x100>
  {
    return HAL_ERROR;
 8003b5c:	2301      	movs	r3, #1
 8003b5e:	e022      	b.n	8003ba6 <HAL_UART_Init+0x146>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d002      	beq.n	8003b6e <HAL_UART_Init+0x10e>
  {
    UART_AdvFeatureConfig(huart);
 8003b68:	6878      	ldr	r0, [r7, #4]
 8003b6a:	f000 ff0b 	bl	8004984 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	685a      	ldr	r2, [r3, #4]
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003b7c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	689a      	ldr	r2, [r3, #8]
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003b8c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	681a      	ldr	r2, [r3, #0]
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f042 0201 	orr.w	r2, r2, #1
 8003b9c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003b9e:	6878      	ldr	r0, [r7, #4]
 8003ba0:	f001 f84e 	bl	8004c40 <UART_CheckIdleState>
 8003ba4:	4603      	mov	r3, r0
}
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	3708      	adds	r7, #8
 8003baa:	46bd      	mov	sp, r7
 8003bac:	bd80      	pop	{r7, pc}
 8003bae:	bf00      	nop
 8003bb0:	40013800 	.word	0x40013800
 8003bb4:	40004400 	.word	0x40004400
 8003bb8:	40004800 	.word	0x40004800
 8003bbc:	40004c00 	.word	0x40004c00
 8003bc0:	40005000 	.word	0x40005000
 8003bc4:	40008000 	.word	0x40008000
 8003bc8:	08009dbc 	.word	0x08009dbc
 8003bcc:	08003bd1 	.word	0x08003bd1

08003bd0 <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8003bd0:	b480      	push	{r7}
 8003bd2:	b083      	sub	sp, #12
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 8003bd8:	bf00      	nop
 8003bda:	370c      	adds	r7, #12
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be2:	4770      	bx	lr

08003be4 <HAL_UART_Transmit>:
  * @param Size    Amount of data to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b08a      	sub	sp, #40	; 0x28
 8003be8:	af02      	add	r7, sp, #8
 8003bea:	60f8      	str	r0, [r7, #12]
 8003bec:	60b9      	str	r1, [r7, #8]
 8003bee:	603b      	str	r3, [r7, #0]
 8003bf0:	4613      	mov	r3, r2
 8003bf2:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003bf8:	2b20      	cmp	r3, #32
 8003bfa:	f040 8081 	bne.w	8003d00 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003bfe:	68bb      	ldr	r3, [r7, #8]
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d002      	beq.n	8003c0a <HAL_UART_Transmit+0x26>
 8003c04:	88fb      	ldrh	r3, [r7, #6]
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d101      	bne.n	8003c0e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003c0a:	2301      	movs	r3, #1
 8003c0c:	e079      	b.n	8003d02 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8003c14:	2b01      	cmp	r3, #1
 8003c16:	d101      	bne.n	8003c1c <HAL_UART_Transmit+0x38>
 8003c18:	2302      	movs	r3, #2
 8003c1a:	e072      	b.n	8003d02 <HAL_UART_Transmit+0x11e>
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	2201      	movs	r2, #1
 8003c20:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	2200      	movs	r2, #0
 8003c28:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	2221      	movs	r2, #33	; 0x21
 8003c2e:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8003c30:	f7fc fcc8 	bl	80005c4 <HAL_GetTick>
 8003c34:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	88fa      	ldrh	r2, [r7, #6]
 8003c3a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	88fa      	ldrh	r2, [r7, #6]
 8003c42:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	689b      	ldr	r3, [r3, #8]
 8003c4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c4e:	d108      	bne.n	8003c62 <HAL_UART_Transmit+0x7e>
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	691b      	ldr	r3, [r3, #16]
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d104      	bne.n	8003c62 <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 8003c58:	2300      	movs	r3, #0
 8003c5a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003c5c:	68bb      	ldr	r3, [r7, #8]
 8003c5e:	61bb      	str	r3, [r7, #24]
 8003c60:	e003      	b.n	8003c6a <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 8003c62:	68bb      	ldr	r3, [r7, #8]
 8003c64:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003c66:	2300      	movs	r3, #0
 8003c68:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003c6a:	e02d      	b.n	8003cc8 <HAL_UART_Transmit+0xe4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003c6c:	683b      	ldr	r3, [r7, #0]
 8003c6e:	9300      	str	r3, [sp, #0]
 8003c70:	697b      	ldr	r3, [r7, #20]
 8003c72:	2200      	movs	r2, #0
 8003c74:	2180      	movs	r1, #128	; 0x80
 8003c76:	68f8      	ldr	r0, [r7, #12]
 8003c78:	f001 f827 	bl	8004cca <UART_WaitOnFlagUntilTimeout>
 8003c7c:	4603      	mov	r3, r0
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d001      	beq.n	8003c86 <HAL_UART_Transmit+0xa2>
      {
        return HAL_TIMEOUT;
 8003c82:	2303      	movs	r3, #3
 8003c84:	e03d      	b.n	8003d02 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8003c86:	69fb      	ldr	r3, [r7, #28]
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d10b      	bne.n	8003ca4 <HAL_UART_Transmit+0xc0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003c8c:	69bb      	ldr	r3, [r7, #24]
 8003c8e:	881a      	ldrh	r2, [r3, #0]
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003c98:	b292      	uxth	r2, r2
 8003c9a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003c9c:	69bb      	ldr	r3, [r7, #24]
 8003c9e:	3302      	adds	r3, #2
 8003ca0:	61bb      	str	r3, [r7, #24]
 8003ca2:	e008      	b.n	8003cb6 <HAL_UART_Transmit+0xd2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003ca4:	69fb      	ldr	r3, [r7, #28]
 8003ca6:	781a      	ldrb	r2, [r3, #0]
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	b292      	uxth	r2, r2
 8003cae:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003cb0:	69fb      	ldr	r3, [r7, #28]
 8003cb2:	3301      	adds	r3, #1
 8003cb4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003cbc:	b29b      	uxth	r3, r3
 8003cbe:	3b01      	subs	r3, #1
 8003cc0:	b29a      	uxth	r2, r3
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003cce:	b29b      	uxth	r3, r3
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d1cb      	bne.n	8003c6c <HAL_UART_Transmit+0x88>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003cd4:	683b      	ldr	r3, [r7, #0]
 8003cd6:	9300      	str	r3, [sp, #0]
 8003cd8:	697b      	ldr	r3, [r7, #20]
 8003cda:	2200      	movs	r2, #0
 8003cdc:	2140      	movs	r1, #64	; 0x40
 8003cde:	68f8      	ldr	r0, [r7, #12]
 8003ce0:	f000 fff3 	bl	8004cca <UART_WaitOnFlagUntilTimeout>
 8003ce4:	4603      	mov	r3, r0
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d001      	beq.n	8003cee <HAL_UART_Transmit+0x10a>
    {
      return HAL_TIMEOUT;
 8003cea:	2303      	movs	r3, #3
 8003cec:	e009      	b.n	8003d02 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	2220      	movs	r2, #32
 8003cf2:	675a      	str	r2, [r3, #116]	; 0x74

    __HAL_UNLOCK(huart);
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    return HAL_OK;
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	e000      	b.n	8003d02 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8003d00:	2302      	movs	r3, #2
  }
}
 8003d02:	4618      	mov	r0, r3
 8003d04:	3720      	adds	r7, #32
 8003d06:	46bd      	mov	sp, r7
 8003d08:	bd80      	pop	{r7, pc}
	...

08003d0c <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer.
  * @param Size  Amount of data to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	b084      	sub	sp, #16
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	60f8      	str	r0, [r7, #12]
 8003d14:	60b9      	str	r1, [r7, #8]
 8003d16:	4613      	mov	r3, r2
 8003d18:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003d1e:	2b20      	cmp	r3, #32
 8003d20:	d16c      	bne.n	8003dfc <HAL_UART_Receive_DMA+0xf0>
  {
    if ((pData == NULL) || (Size == 0U))
 8003d22:	68bb      	ldr	r3, [r7, #8]
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d002      	beq.n	8003d2e <HAL_UART_Receive_DMA+0x22>
 8003d28:	88fb      	ldrh	r3, [r7, #6]
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d101      	bne.n	8003d32 <HAL_UART_Receive_DMA+0x26>
    {
      return HAL_ERROR;
 8003d2e:	2301      	movs	r3, #1
 8003d30:	e065      	b.n	8003dfe <HAL_UART_Receive_DMA+0xf2>
    }

    __HAL_LOCK(huart);
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8003d38:	2b01      	cmp	r3, #1
 8003d3a:	d101      	bne.n	8003d40 <HAL_UART_Receive_DMA+0x34>
 8003d3c:	2302      	movs	r3, #2
 8003d3e:	e05e      	b.n	8003dfe <HAL_UART_Receive_DMA+0xf2>
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	2201      	movs	r2, #1
 8003d44:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr = pData;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	68ba      	ldr	r2, [r7, #8]
 8003d4c:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize = Size;
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	88fa      	ldrh	r2, [r7, #6]
 8003d52:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	2200      	movs	r2, #0
 8003d5a:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	2222      	movs	r2, #34	; 0x22
 8003d60:	679a      	str	r2, [r3, #120]	; 0x78

    if (huart->hdmarx != NULL)
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d02a      	beq.n	8003dc0 <HAL_UART_Receive_DMA+0xb4>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003d6e:	4a26      	ldr	r2, [pc, #152]	; (8003e08 <HAL_UART_Receive_DMA+0xfc>)
 8003d70:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003d76:	4a25      	ldr	r2, [pc, #148]	; (8003e0c <HAL_UART_Receive_DMA+0x100>)
 8003d78:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmarx->XferErrorCallback = UART_DMAError;
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003d7e:	4a24      	ldr	r2, [pc, #144]	; (8003e10 <HAL_UART_Receive_DMA+0x104>)
 8003d80:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmarx->XferAbortCallback = NULL;
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003d86:	2200      	movs	r2, #0
 8003d88:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	3324      	adds	r3, #36	; 0x24
 8003d94:	4619      	mov	r1, r3
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d9a:	461a      	mov	r2, r3
 8003d9c:	88fb      	ldrh	r3, [r7, #6]
 8003d9e:	f7fc ff63 	bl	8000c68 <HAL_DMA_Start_IT>
 8003da2:	4603      	mov	r3, r0
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d00b      	beq.n	8003dc0 <HAL_UART_Receive_DMA+0xb4>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	2210      	movs	r2, #16
 8003dac:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	2200      	movs	r2, #0
 8003db2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	2220      	movs	r2, #32
 8003dba:	675a      	str	r2, [r3, #116]	; 0x74

        return HAL_ERROR;
 8003dbc:	2301      	movs	r3, #1
 8003dbe:	e01e      	b.n	8003dfe <HAL_UART_Receive_DMA+0xf2>
      }
    }
    __HAL_UNLOCK(huart);
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	681a      	ldr	r2, [r3, #0]
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003dd6:	601a      	str	r2, [r3, #0]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	689a      	ldr	r2, [r3, #8]
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f042 0201 	orr.w	r2, r2, #1
 8003de6:	609a      	str	r2, [r3, #8]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	689a      	ldr	r2, [r3, #8]
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003df6:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 8003df8:	2300      	movs	r3, #0
 8003dfa:	e000      	b.n	8003dfe <HAL_UART_Receive_DMA+0xf2>
  }
  else
  {
    return HAL_BUSY;
 8003dfc:	2302      	movs	r3, #2
  }
}
 8003dfe:	4618      	mov	r0, r3
 8003e00:	3710      	adds	r7, #16
 8003e02:	46bd      	mov	sp, r7
 8003e04:	bd80      	pop	{r7, pc}
 8003e06:	bf00      	nop
 8003e08:	08004dc5 	.word	0x08004dc5
 8003e0c:	08004e31 	.word	0x08004e31
 8003e10:	08004e51 	.word	0x08004e51

08003e14 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003e14:	b580      	push	{r7, lr}
 8003e16:	b088      	sub	sp, #32
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	69db      	ldr	r3, [r3, #28]
 8003e22:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	689b      	ldr	r3, [r3, #8]
 8003e32:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE));
 8003e34:	69fb      	ldr	r3, [r7, #28]
 8003e36:	f003 030f 	and.w	r3, r3, #15
 8003e3a:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8003e3c:	693b      	ldr	r3, [r7, #16]
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d113      	bne.n	8003e6a <HAL_UART_IRQHandler+0x56>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003e42:	69fb      	ldr	r3, [r7, #28]
 8003e44:	f003 0320 	and.w	r3, r3, #32
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d00e      	beq.n	8003e6a <HAL_UART_IRQHandler+0x56>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003e4c:	69bb      	ldr	r3, [r7, #24]
 8003e4e:	f003 0320 	and.w	r3, r3, #32
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d009      	beq.n	8003e6a <HAL_UART_IRQHandler+0x56>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	f000 8107 	beq.w	800406e <HAL_UART_IRQHandler+0x25a>
      {
        huart->RxISR(huart);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e64:	6878      	ldr	r0, [r7, #4]
 8003e66:	4798      	blx	r3
      }
      return;
 8003e68:	e101      	b.n	800406e <HAL_UART_IRQHandler+0x25a>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8003e6a:	693b      	ldr	r3, [r7, #16]
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	f000 80c7 	beq.w	8004000 <HAL_UART_IRQHandler+0x1ec>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003e72:	697b      	ldr	r3, [r7, #20]
 8003e74:	f003 0301 	and.w	r3, r3, #1
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d105      	bne.n	8003e88 <HAL_UART_IRQHandler+0x74>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 8003e7c:	69bb      	ldr	r3, [r7, #24]
 8003e7e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	f000 80bc 	beq.w	8004000 <HAL_UART_IRQHandler+0x1ec>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003e88:	69fb      	ldr	r3, [r7, #28]
 8003e8a:	f003 0301 	and.w	r3, r3, #1
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d00e      	beq.n	8003eb0 <HAL_UART_IRQHandler+0x9c>
 8003e92:	69bb      	ldr	r3, [r7, #24]
 8003e94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d009      	beq.n	8003eb0 <HAL_UART_IRQHandler+0x9c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	2201      	movs	r2, #1
 8003ea2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003ea8:	f043 0201 	orr.w	r2, r3, #1
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003eb0:	69fb      	ldr	r3, [r7, #28]
 8003eb2:	f003 0302 	and.w	r3, r3, #2
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d00e      	beq.n	8003ed8 <HAL_UART_IRQHandler+0xc4>
 8003eba:	697b      	ldr	r3, [r7, #20]
 8003ebc:	f003 0301 	and.w	r3, r3, #1
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d009      	beq.n	8003ed8 <HAL_UART_IRQHandler+0xc4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	2202      	movs	r2, #2
 8003eca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003ed0:	f043 0204 	orr.w	r2, r3, #4
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003ed8:	69fb      	ldr	r3, [r7, #28]
 8003eda:	f003 0304 	and.w	r3, r3, #4
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d00e      	beq.n	8003f00 <HAL_UART_IRQHandler+0xec>
 8003ee2:	697b      	ldr	r3, [r7, #20]
 8003ee4:	f003 0301 	and.w	r3, r3, #1
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d009      	beq.n	8003f00 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	2204      	movs	r2, #4
 8003ef2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003ef8:	f043 0202 	orr.w	r2, r3, #2
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	67da      	str	r2, [r3, #124]	; 0x7c
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003f00:	69fb      	ldr	r3, [r7, #28]
 8003f02:	f003 0308 	and.w	r3, r3, #8
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d013      	beq.n	8003f32 <HAL_UART_IRQHandler+0x11e>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003f0a:	69bb      	ldr	r3, [r7, #24]
 8003f0c:	f003 0320 	and.w	r3, r3, #32
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d104      	bne.n	8003f1e <HAL_UART_IRQHandler+0x10a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003f14:	697b      	ldr	r3, [r7, #20]
 8003f16:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d009      	beq.n	8003f32 <HAL_UART_IRQHandler+0x11e>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	2208      	movs	r2, #8
 8003f24:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003f2a:	f043 0208 	orr.w	r2, r3, #8
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	f000 809b 	beq.w	8004072 <HAL_UART_IRQHandler+0x25e>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003f3c:	69fb      	ldr	r3, [r7, #28]
 8003f3e:	f003 0320 	and.w	r3, r3, #32
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d00c      	beq.n	8003f60 <HAL_UART_IRQHandler+0x14c>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003f46:	69bb      	ldr	r3, [r7, #24]
 8003f48:	f003 0320 	and.w	r3, r3, #32
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d007      	beq.n	8003f60 <HAL_UART_IRQHandler+0x14c>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d003      	beq.n	8003f60 <HAL_UART_IRQHandler+0x14c>
        {
          huart->RxISR(huart);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f5c:	6878      	ldr	r0, [r7, #4]
 8003f5e:	4798      	blx	r3
        }
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      errorcode = huart->ErrorCode;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003f64:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	689b      	ldr	r3, [r3, #8]
 8003f6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f70:	2b40      	cmp	r3, #64	; 0x40
 8003f72:	d004      	beq.n	8003f7e <HAL_UART_IRQHandler+0x16a>
          ((errorcode & HAL_UART_ERROR_ORE) != 0U))
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	f003 0308 	and.w	r3, r3, #8
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d035      	beq.n	8003fea <HAL_UART_IRQHandler+0x1d6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003f7e:	6878      	ldr	r0, [r7, #4]
 8003f80:	f000 ff00 	bl	8004d84 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	689b      	ldr	r3, [r3, #8]
 8003f8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f8e:	2b40      	cmp	r3, #64	; 0x40
 8003f90:	d125      	bne.n	8003fde <HAL_UART_IRQHandler+0x1ca>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	689a      	ldr	r2, [r3, #8]
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003fa0:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d013      	beq.n	8003fd2 <HAL_UART_IRQHandler+0x1be>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003fae:	4a34      	ldr	r2, [pc, #208]	; (8004080 <HAL_UART_IRQHandler+0x26c>)
 8003fb0:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	f7fc fec4 	bl	8000d44 <HAL_DMA_Abort_IT>
 8003fbc:	4603      	mov	r3, r0
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d01c      	beq.n	8003ffc <HAL_UART_IRQHandler+0x1e8>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003fc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fc8:	687a      	ldr	r2, [r7, #4]
 8003fca:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8003fcc:	4610      	mov	r0, r2
 8003fce:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003fd0:	e014      	b.n	8003ffc <HAL_UART_IRQHandler+0x1e8>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fd8:	6878      	ldr	r0, [r7, #4]
 8003fda:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003fdc:	e00e      	b.n	8003ffc <HAL_UART_IRQHandler+0x1e8>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fe4:	6878      	ldr	r0, [r7, #4]
 8003fe6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003fe8:	e008      	b.n	8003ffc <HAL_UART_IRQHandler+0x1e8>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ff0:	6878      	ldr	r0, [r7, #4]
 8003ff2:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 8003ffa:	e03a      	b.n	8004072 <HAL_UART_IRQHandler+0x25e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ffc:	bf00      	nop
    return;
 8003ffe:	e038      	b.n	8004072 <HAL_UART_IRQHandler+0x25e>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004000:	69fb      	ldr	r3, [r7, #28]
 8004002:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004006:	2b00      	cmp	r3, #0
 8004008:	d00f      	beq.n	800402a <HAL_UART_IRQHandler+0x216>
 800400a:	697b      	ldr	r3, [r7, #20]
 800400c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004010:	2b00      	cmp	r3, #0
 8004012:	d00a      	beq.n	800402a <HAL_UART_IRQHandler+0x216>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800401c:	621a      	str	r2, [r3, #32]
    /* UART Rx state is not reset as a reception process might be ongoing.
       If UART handle state fields need to be reset to READY, this could be done in Wakeup callback */

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004024:	6878      	ldr	r0, [r7, #4]
 8004026:	4798      	blx	r3
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004028:	e026      	b.n	8004078 <HAL_UART_IRQHandler+0x264>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 800402a:	69fb      	ldr	r3, [r7, #28]
 800402c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004030:	2b00      	cmp	r3, #0
 8004032:	d00d      	beq.n	8004050 <HAL_UART_IRQHandler+0x23c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004034:	69bb      	ldr	r3, [r7, #24]
 8004036:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800403a:	2b00      	cmp	r3, #0
 800403c:	d008      	beq.n	8004050 <HAL_UART_IRQHandler+0x23c>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004042:	2b00      	cmp	r3, #0
 8004044:	d017      	beq.n	8004076 <HAL_UART_IRQHandler+0x262>
    {
      huart->TxISR(huart);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800404a:	6878      	ldr	r0, [r7, #4]
 800404c:	4798      	blx	r3
    }
    return;
 800404e:	e012      	b.n	8004076 <HAL_UART_IRQHandler+0x262>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004050:	69fb      	ldr	r3, [r7, #28]
 8004052:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004056:	2b00      	cmp	r3, #0
 8004058:	d00e      	beq.n	8004078 <HAL_UART_IRQHandler+0x264>
 800405a:	69bb      	ldr	r3, [r7, #24]
 800405c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004060:	2b00      	cmp	r3, #0
 8004062:	d009      	beq.n	8004078 <HAL_UART_IRQHandler+0x264>
  {
    UART_EndTransmit_IT(huart);
 8004064:	6878      	ldr	r0, [r7, #4]
 8004066:	f000 ff49 	bl	8004efc <UART_EndTransmit_IT>
    return;
 800406a:	bf00      	nop
 800406c:	e004      	b.n	8004078 <HAL_UART_IRQHandler+0x264>
      return;
 800406e:	bf00      	nop
 8004070:	e002      	b.n	8004078 <HAL_UART_IRQHandler+0x264>
    return;
 8004072:	bf00      	nop
 8004074:	e000      	b.n	8004078 <HAL_UART_IRQHandler+0x264>
    return;
 8004076:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8004078:	3720      	adds	r7, #32
 800407a:	46bd      	mov	sp, r7
 800407c:	bd80      	pop	{r7, pc}
 800407e:	bf00      	nop
 8004080:	08004ecd 	.word	0x08004ecd

08004084 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004084:	b480      	push	{r7}
 8004086:	b083      	sub	sp, #12
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800408c:	bf00      	nop
 800408e:	370c      	adds	r7, #12
 8004090:	46bd      	mov	sp, r7
 8004092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004096:	4770      	bx	lr

08004098 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004098:	b480      	push	{r7}
 800409a:	b083      	sub	sp, #12
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 80040a0:	bf00      	nop
 80040a2:	370c      	adds	r7, #12
 80040a4:	46bd      	mov	sp, r7
 80040a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040aa:	4770      	bx	lr

080040ac <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80040ac:	b480      	push	{r7}
 80040ae:	b083      	sub	sp, #12
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 80040b4:	bf00      	nop
 80040b6:	370c      	adds	r7, #12
 80040b8:	46bd      	mov	sp, r7
 80040ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040be:	4770      	bx	lr

080040c0 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80040c0:	b480      	push	{r7}
 80040c2:	b083      	sub	sp, #12
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80040c8:	bf00      	nop
 80040ca:	370c      	adds	r7, #12
 80040cc:	46bd      	mov	sp, r7
 80040ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d2:	4770      	bx	lr

080040d4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80040d4:	b480      	push	{r7}
 80040d6:	b083      	sub	sp, #12
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80040dc:	bf00      	nop
 80040de:	370c      	adds	r7, #12
 80040e0:	46bd      	mov	sp, r7
 80040e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e6:	4770      	bx	lr

080040e8 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 80040e8:	b480      	push	{r7}
 80040ea:	b083      	sub	sp, #12
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 80040f0:	bf00      	nop
 80040f2:	370c      	adds	r7, #12
 80040f4:	46bd      	mov	sp, r7
 80040f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fa:	4770      	bx	lr

080040fc <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 80040fc:	b480      	push	{r7}
 80040fe:	b083      	sub	sp, #12
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 8004104:	bf00      	nop
 8004106:	370c      	adds	r7, #12
 8004108:	46bd      	mov	sp, r7
 800410a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410e:	4770      	bx	lr

08004110 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 8004110:	b480      	push	{r7}
 8004112:	b083      	sub	sp, #12
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 8004118:	bf00      	nop
 800411a:	370c      	adds	r7, #12
 800411c:	46bd      	mov	sp, r7
 800411e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004122:	4770      	bx	lr

08004124 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 8004124:	b480      	push	{r7}
 8004126:	b083      	sub	sp, #12
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	4a14      	ldr	r2, [pc, #80]	; (8004180 <UART_InitCallbacksToDefault+0x5c>)
 8004130:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	4a13      	ldr	r2, [pc, #76]	; (8004184 <UART_InitCallbacksToDefault+0x60>)
 8004138:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	4a12      	ldr	r2, [pc, #72]	; (8004188 <UART_InitCallbacksToDefault+0x64>)
 8004140:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	4a11      	ldr	r2, [pc, #68]	; (800418c <UART_InitCallbacksToDefault+0x68>)
 8004148:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	4a10      	ldr	r2, [pc, #64]	; (8004190 <UART_InitCallbacksToDefault+0x6c>)
 8004150:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	4a0f      	ldr	r2, [pc, #60]	; (8004194 <UART_InitCallbacksToDefault+0x70>)
 8004158:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	4a0e      	ldr	r2, [pc, #56]	; (8004198 <UART_InitCallbacksToDefault+0x74>)
 8004160:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	4a0d      	ldr	r2, [pc, #52]	; (800419c <UART_InitCallbacksToDefault+0x78>)
 8004168:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	4a0c      	ldr	r2, [pc, #48]	; (80041a0 <UART_InitCallbacksToDefault+0x7c>)
 8004170:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
#if defined(USART_CR1_FIFOEN)
  huart->RxFifoFullCallback        = HAL_UARTEx_RxFifoFullCallback;      /* Legacy weak RxFifoFullCallback        */
  huart->TxFifoEmptyCallback       = HAL_UARTEx_TxFifoEmptyCallback;     /* Legacy weak TxFifoEmptyCallback       */
#endif /* USART_CR1_FIFOEN */

}
 8004174:	bf00      	nop
 8004176:	370c      	adds	r7, #12
 8004178:	46bd      	mov	sp, r7
 800417a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417e:	4770      	bx	lr
 8004180:	08004099 	.word	0x08004099
 8004184:	08004085 	.word	0x08004085
 8004188:	080040c1 	.word	0x080040c1
 800418c:	080040ad 	.word	0x080040ad
 8004190:	080040d5 	.word	0x080040d5
 8004194:	080040e9 	.word	0x080040e9
 8004198:	080040fd 	.word	0x080040fd
 800419c:	08004111 	.word	0x08004111
 80041a0:	08004f33 	.word	0x08004f33

080041a4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80041a4:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 80041a8:	b088      	sub	sp, #32
 80041aa:	af00      	add	r7, sp, #0
 80041ac:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 80041ae:	2300      	movs	r3, #0
 80041b0:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef ret               = HAL_OK;
 80041b2:	2300      	movs	r3, #0
 80041b4:	74fb      	strb	r3, [r7, #19]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 80041b6:	2300      	movs	r3, #0
 80041b8:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	685b      	ldr	r3, [r3, #4]
 80041be:	4aab      	ldr	r2, [pc, #684]	; (800446c <UART_SetConfig+0x2c8>)
 80041c0:	4293      	cmp	r3, r2
 80041c2:	d904      	bls.n	80041ce <UART_SetConfig+0x2a>
 80041c4:	f640 312d 	movw	r1, #2861	; 0xb2d
 80041c8:	48a9      	ldr	r0, [pc, #676]	; (8004470 <UART_SetConfig+0x2cc>)
 80041ca:	f003 fe8f 	bl	8007eec <assert_failed>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	689b      	ldr	r3, [r3, #8]
 80041d2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80041d6:	d00d      	beq.n	80041f4 <UART_SetConfig+0x50>
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	689b      	ldr	r3, [r3, #8]
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d009      	beq.n	80041f4 <UART_SetConfig+0x50>
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	689b      	ldr	r3, [r3, #8]
 80041e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041e8:	d004      	beq.n	80041f4 <UART_SetConfig+0x50>
 80041ea:	f640 312e 	movw	r1, #2862	; 0xb2e
 80041ee:	48a0      	ldr	r0, [pc, #640]	; (8004470 <UART_SetConfig+0x2cc>)
 80041f0:	f003 fe7c 	bl	8007eec <assert_failed>
  if (UART_INSTANCE_LOWPOWER(huart))
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	4a9e      	ldr	r2, [pc, #632]	; (8004474 <UART_SetConfig+0x2d0>)
 80041fa:	4293      	cmp	r3, r2
 80041fc:	d10e      	bne.n	800421c <UART_SetConfig+0x78>
  {
    assert_param(IS_LPUART_STOPBITS(huart->Init.StopBits));
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	68db      	ldr	r3, [r3, #12]
 8004202:	2b00      	cmp	r3, #0
 8004204:	d030      	beq.n	8004268 <UART_SetConfig+0xc4>
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	68db      	ldr	r3, [r3, #12]
 800420a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800420e:	d02b      	beq.n	8004268 <UART_SetConfig+0xc4>
 8004210:	f640 3131 	movw	r1, #2865	; 0xb31
 8004214:	4896      	ldr	r0, [pc, #600]	; (8004470 <UART_SetConfig+0x2cc>)
 8004216:	f003 fe69 	bl	8007eec <assert_failed>
 800421a:	e025      	b.n	8004268 <UART_SetConfig+0xc4>
  }
  else
  {
    assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	68db      	ldr	r3, [r3, #12]
 8004220:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004224:	d012      	beq.n	800424c <UART_SetConfig+0xa8>
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	68db      	ldr	r3, [r3, #12]
 800422a:	2b00      	cmp	r3, #0
 800422c:	d00e      	beq.n	800424c <UART_SetConfig+0xa8>
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	68db      	ldr	r3, [r3, #12]
 8004232:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004236:	d009      	beq.n	800424c <UART_SetConfig+0xa8>
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	68db      	ldr	r3, [r3, #12]
 800423c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004240:	d004      	beq.n	800424c <UART_SetConfig+0xa8>
 8004242:	f640 3135 	movw	r1, #2869	; 0xb35
 8004246:	488a      	ldr	r0, [pc, #552]	; (8004470 <UART_SetConfig+0x2cc>)
 8004248:	f003 fe50 	bl	8007eec <assert_failed>
    assert_param(IS_UART_ONE_BIT_SAMPLE(huart->Init.OneBitSampling));
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	6a1b      	ldr	r3, [r3, #32]
 8004250:	2b00      	cmp	r3, #0
 8004252:	d009      	beq.n	8004268 <UART_SetConfig+0xc4>
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	6a1b      	ldr	r3, [r3, #32]
 8004258:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800425c:	d004      	beq.n	8004268 <UART_SetConfig+0xc4>
 800425e:	f640 3136 	movw	r1, #2870	; 0xb36
 8004262:	4883      	ldr	r0, [pc, #524]	; (8004470 <UART_SetConfig+0x2cc>)
 8004264:	f003 fe42 	bl	8007eec <assert_failed>
  }

  assert_param(IS_UART_PARITY(huart->Init.Parity));
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	691b      	ldr	r3, [r3, #16]
 800426c:	2b00      	cmp	r3, #0
 800426e:	d00e      	beq.n	800428e <UART_SetConfig+0xea>
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	691b      	ldr	r3, [r3, #16]
 8004274:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004278:	d009      	beq.n	800428e <UART_SetConfig+0xea>
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	691b      	ldr	r3, [r3, #16]
 800427e:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004282:	d004      	beq.n	800428e <UART_SetConfig+0xea>
 8004284:	f640 3139 	movw	r1, #2873	; 0xb39
 8004288:	4879      	ldr	r0, [pc, #484]	; (8004470 <UART_SetConfig+0x2cc>)
 800428a:	f003 fe2f 	bl	8007eec <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	695b      	ldr	r3, [r3, #20]
 8004292:	f023 030c 	bic.w	r3, r3, #12
 8004296:	2b00      	cmp	r3, #0
 8004298:	d103      	bne.n	80042a2 <UART_SetConfig+0xfe>
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	695b      	ldr	r3, [r3, #20]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d104      	bne.n	80042ac <UART_SetConfig+0x108>
 80042a2:	f640 313a 	movw	r1, #2874	; 0xb3a
 80042a6:	4872      	ldr	r0, [pc, #456]	; (8004470 <UART_SetConfig+0x2cc>)
 80042a8:	f003 fe20 	bl	8007eec <assert_failed>
  assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	699b      	ldr	r3, [r3, #24]
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d013      	beq.n	80042dc <UART_SetConfig+0x138>
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	699b      	ldr	r3, [r3, #24]
 80042b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80042bc:	d00e      	beq.n	80042dc <UART_SetConfig+0x138>
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	699b      	ldr	r3, [r3, #24]
 80042c2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80042c6:	d009      	beq.n	80042dc <UART_SetConfig+0x138>
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	699b      	ldr	r3, [r3, #24]
 80042cc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80042d0:	d004      	beq.n	80042dc <UART_SetConfig+0x138>
 80042d2:	f640 313b 	movw	r1, #2875	; 0xb3b
 80042d6:	4866      	ldr	r0, [pc, #408]	; (8004470 <UART_SetConfig+0x2cc>)
 80042d8:	f003 fe08 	bl	8007eec <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	69db      	ldr	r3, [r3, #28]
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d009      	beq.n	80042f8 <UART_SetConfig+0x154>
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	69db      	ldr	r3, [r3, #28]
 80042e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80042ec:	d004      	beq.n	80042f8 <UART_SetConfig+0x154>
 80042ee:	f640 313c 	movw	r1, #2876	; 0xb3c
 80042f2:	485f      	ldr	r0, [pc, #380]	; (8004470 <UART_SetConfig+0x2cc>)
 80042f4:	f003 fdfa 	bl	8007eec <assert_failed>
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	689a      	ldr	r2, [r3, #8]
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	691b      	ldr	r3, [r3, #16]
 8004300:	431a      	orrs	r2, r3
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	695b      	ldr	r3, [r3, #20]
 8004306:	431a      	orrs	r2, r3
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	69db      	ldr	r3, [r3, #28]
 800430c:	4313      	orrs	r3, r2
 800430e:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	681a      	ldr	r2, [r3, #0]
 8004316:	4b58      	ldr	r3, [pc, #352]	; (8004478 <UART_SetConfig+0x2d4>)
 8004318:	4013      	ands	r3, r2
 800431a:	687a      	ldr	r2, [r7, #4]
 800431c:	6812      	ldr	r2, [r2, #0]
 800431e:	69f9      	ldr	r1, [r7, #28]
 8004320:	430b      	orrs	r3, r1
 8004322:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	685b      	ldr	r3, [r3, #4]
 800432a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	68da      	ldr	r2, [r3, #12]
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	430a      	orrs	r2, r1
 8004338:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	699b      	ldr	r3, [r3, #24]
 800433e:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	4a4b      	ldr	r2, [pc, #300]	; (8004474 <UART_SetConfig+0x2d0>)
 8004346:	4293      	cmp	r3, r2
 8004348:	d004      	beq.n	8004354 <UART_SetConfig+0x1b0>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6a1b      	ldr	r3, [r3, #32]
 800434e:	69fa      	ldr	r2, [r7, #28]
 8004350:	4313      	orrs	r3, r2
 8004352:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	689b      	ldr	r3, [r3, #8]
 800435a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	69fa      	ldr	r2, [r7, #28]
 8004364:	430a      	orrs	r2, r1
 8004366:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	4a43      	ldr	r2, [pc, #268]	; (800447c <UART_SetConfig+0x2d8>)
 800436e:	4293      	cmp	r3, r2
 8004370:	d122      	bne.n	80043b8 <UART_SetConfig+0x214>
 8004372:	4b43      	ldr	r3, [pc, #268]	; (8004480 <UART_SetConfig+0x2dc>)
 8004374:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004378:	f003 0303 	and.w	r3, r3, #3
 800437c:	2b03      	cmp	r3, #3
 800437e:	d817      	bhi.n	80043b0 <UART_SetConfig+0x20c>
 8004380:	a201      	add	r2, pc, #4	; (adr r2, 8004388 <UART_SetConfig+0x1e4>)
 8004382:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004386:	bf00      	nop
 8004388:	08004399 	.word	0x08004399
 800438c:	080043a5 	.word	0x080043a5
 8004390:	0800439f 	.word	0x0800439f
 8004394:	080043ab 	.word	0x080043ab
 8004398:	2301      	movs	r3, #1
 800439a:	76fb      	strb	r3, [r7, #27]
 800439c:	e0f9      	b.n	8004592 <UART_SetConfig+0x3ee>
 800439e:	2302      	movs	r3, #2
 80043a0:	76fb      	strb	r3, [r7, #27]
 80043a2:	e0f6      	b.n	8004592 <UART_SetConfig+0x3ee>
 80043a4:	2304      	movs	r3, #4
 80043a6:	76fb      	strb	r3, [r7, #27]
 80043a8:	e0f3      	b.n	8004592 <UART_SetConfig+0x3ee>
 80043aa:	2308      	movs	r3, #8
 80043ac:	76fb      	strb	r3, [r7, #27]
 80043ae:	e0f0      	b.n	8004592 <UART_SetConfig+0x3ee>
 80043b0:	2310      	movs	r3, #16
 80043b2:	76fb      	strb	r3, [r7, #27]
 80043b4:	bf00      	nop
 80043b6:	e0ec      	b.n	8004592 <UART_SetConfig+0x3ee>
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	4a31      	ldr	r2, [pc, #196]	; (8004484 <UART_SetConfig+0x2e0>)
 80043be:	4293      	cmp	r3, r2
 80043c0:	d134      	bne.n	800442c <UART_SetConfig+0x288>
 80043c2:	4b2f      	ldr	r3, [pc, #188]	; (8004480 <UART_SetConfig+0x2dc>)
 80043c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043c8:	f003 030c 	and.w	r3, r3, #12
 80043cc:	2b0c      	cmp	r3, #12
 80043ce:	d829      	bhi.n	8004424 <UART_SetConfig+0x280>
 80043d0:	a201      	add	r2, pc, #4	; (adr r2, 80043d8 <UART_SetConfig+0x234>)
 80043d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043d6:	bf00      	nop
 80043d8:	0800440d 	.word	0x0800440d
 80043dc:	08004425 	.word	0x08004425
 80043e0:	08004425 	.word	0x08004425
 80043e4:	08004425 	.word	0x08004425
 80043e8:	08004419 	.word	0x08004419
 80043ec:	08004425 	.word	0x08004425
 80043f0:	08004425 	.word	0x08004425
 80043f4:	08004425 	.word	0x08004425
 80043f8:	08004413 	.word	0x08004413
 80043fc:	08004425 	.word	0x08004425
 8004400:	08004425 	.word	0x08004425
 8004404:	08004425 	.word	0x08004425
 8004408:	0800441f 	.word	0x0800441f
 800440c:	2300      	movs	r3, #0
 800440e:	76fb      	strb	r3, [r7, #27]
 8004410:	e0bf      	b.n	8004592 <UART_SetConfig+0x3ee>
 8004412:	2302      	movs	r3, #2
 8004414:	76fb      	strb	r3, [r7, #27]
 8004416:	e0bc      	b.n	8004592 <UART_SetConfig+0x3ee>
 8004418:	2304      	movs	r3, #4
 800441a:	76fb      	strb	r3, [r7, #27]
 800441c:	e0b9      	b.n	8004592 <UART_SetConfig+0x3ee>
 800441e:	2308      	movs	r3, #8
 8004420:	76fb      	strb	r3, [r7, #27]
 8004422:	e0b6      	b.n	8004592 <UART_SetConfig+0x3ee>
 8004424:	2310      	movs	r3, #16
 8004426:	76fb      	strb	r3, [r7, #27]
 8004428:	bf00      	nop
 800442a:	e0b2      	b.n	8004592 <UART_SetConfig+0x3ee>
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	4a15      	ldr	r2, [pc, #84]	; (8004488 <UART_SetConfig+0x2e4>)
 8004432:	4293      	cmp	r3, r2
 8004434:	d131      	bne.n	800449a <UART_SetConfig+0x2f6>
 8004436:	4b12      	ldr	r3, [pc, #72]	; (8004480 <UART_SetConfig+0x2dc>)
 8004438:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800443c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004440:	2b10      	cmp	r3, #16
 8004442:	d00f      	beq.n	8004464 <UART_SetConfig+0x2c0>
 8004444:	2b10      	cmp	r3, #16
 8004446:	d802      	bhi.n	800444e <UART_SetConfig+0x2aa>
 8004448:	2b00      	cmp	r3, #0
 800444a:	d005      	beq.n	8004458 <UART_SetConfig+0x2b4>
 800444c:	e021      	b.n	8004492 <UART_SetConfig+0x2ee>
 800444e:	2b20      	cmp	r3, #32
 8004450:	d005      	beq.n	800445e <UART_SetConfig+0x2ba>
 8004452:	2b30      	cmp	r3, #48	; 0x30
 8004454:	d01a      	beq.n	800448c <UART_SetConfig+0x2e8>
 8004456:	e01c      	b.n	8004492 <UART_SetConfig+0x2ee>
 8004458:	2300      	movs	r3, #0
 800445a:	76fb      	strb	r3, [r7, #27]
 800445c:	e099      	b.n	8004592 <UART_SetConfig+0x3ee>
 800445e:	2302      	movs	r3, #2
 8004460:	76fb      	strb	r3, [r7, #27]
 8004462:	e096      	b.n	8004592 <UART_SetConfig+0x3ee>
 8004464:	2304      	movs	r3, #4
 8004466:	76fb      	strb	r3, [r7, #27]
 8004468:	e093      	b.n	8004592 <UART_SetConfig+0x3ee>
 800446a:	bf00      	nop
 800446c:	00989680 	.word	0x00989680
 8004470:	08009dbc 	.word	0x08009dbc
 8004474:	40008000 	.word	0x40008000
 8004478:	efff69f3 	.word	0xefff69f3
 800447c:	40013800 	.word	0x40013800
 8004480:	40021000 	.word	0x40021000
 8004484:	40004400 	.word	0x40004400
 8004488:	40004800 	.word	0x40004800
 800448c:	2308      	movs	r3, #8
 800448e:	76fb      	strb	r3, [r7, #27]
 8004490:	e07f      	b.n	8004592 <UART_SetConfig+0x3ee>
 8004492:	2310      	movs	r3, #16
 8004494:	76fb      	strb	r3, [r7, #27]
 8004496:	bf00      	nop
 8004498:	e07b      	b.n	8004592 <UART_SetConfig+0x3ee>
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	4ab3      	ldr	r2, [pc, #716]	; (800476c <UART_SetConfig+0x5c8>)
 80044a0:	4293      	cmp	r3, r2
 80044a2:	d120      	bne.n	80044e6 <UART_SetConfig+0x342>
 80044a4:	4bb2      	ldr	r3, [pc, #712]	; (8004770 <UART_SetConfig+0x5cc>)
 80044a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044aa:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80044ae:	2b40      	cmp	r3, #64	; 0x40
 80044b0:	d00f      	beq.n	80044d2 <UART_SetConfig+0x32e>
 80044b2:	2b40      	cmp	r3, #64	; 0x40
 80044b4:	d802      	bhi.n	80044bc <UART_SetConfig+0x318>
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d005      	beq.n	80044c6 <UART_SetConfig+0x322>
 80044ba:	e010      	b.n	80044de <UART_SetConfig+0x33a>
 80044bc:	2b80      	cmp	r3, #128	; 0x80
 80044be:	d005      	beq.n	80044cc <UART_SetConfig+0x328>
 80044c0:	2bc0      	cmp	r3, #192	; 0xc0
 80044c2:	d009      	beq.n	80044d8 <UART_SetConfig+0x334>
 80044c4:	e00b      	b.n	80044de <UART_SetConfig+0x33a>
 80044c6:	2300      	movs	r3, #0
 80044c8:	76fb      	strb	r3, [r7, #27]
 80044ca:	e062      	b.n	8004592 <UART_SetConfig+0x3ee>
 80044cc:	2302      	movs	r3, #2
 80044ce:	76fb      	strb	r3, [r7, #27]
 80044d0:	e05f      	b.n	8004592 <UART_SetConfig+0x3ee>
 80044d2:	2304      	movs	r3, #4
 80044d4:	76fb      	strb	r3, [r7, #27]
 80044d6:	e05c      	b.n	8004592 <UART_SetConfig+0x3ee>
 80044d8:	2308      	movs	r3, #8
 80044da:	76fb      	strb	r3, [r7, #27]
 80044dc:	e059      	b.n	8004592 <UART_SetConfig+0x3ee>
 80044de:	2310      	movs	r3, #16
 80044e0:	76fb      	strb	r3, [r7, #27]
 80044e2:	bf00      	nop
 80044e4:	e055      	b.n	8004592 <UART_SetConfig+0x3ee>
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	4aa2      	ldr	r2, [pc, #648]	; (8004774 <UART_SetConfig+0x5d0>)
 80044ec:	4293      	cmp	r3, r2
 80044ee:	d124      	bne.n	800453a <UART_SetConfig+0x396>
 80044f0:	4b9f      	ldr	r3, [pc, #636]	; (8004770 <UART_SetConfig+0x5cc>)
 80044f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80044fe:	d012      	beq.n	8004526 <UART_SetConfig+0x382>
 8004500:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004504:	d802      	bhi.n	800450c <UART_SetConfig+0x368>
 8004506:	2b00      	cmp	r3, #0
 8004508:	d007      	beq.n	800451a <UART_SetConfig+0x376>
 800450a:	e012      	b.n	8004532 <UART_SetConfig+0x38e>
 800450c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004510:	d006      	beq.n	8004520 <UART_SetConfig+0x37c>
 8004512:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004516:	d009      	beq.n	800452c <UART_SetConfig+0x388>
 8004518:	e00b      	b.n	8004532 <UART_SetConfig+0x38e>
 800451a:	2300      	movs	r3, #0
 800451c:	76fb      	strb	r3, [r7, #27]
 800451e:	e038      	b.n	8004592 <UART_SetConfig+0x3ee>
 8004520:	2302      	movs	r3, #2
 8004522:	76fb      	strb	r3, [r7, #27]
 8004524:	e035      	b.n	8004592 <UART_SetConfig+0x3ee>
 8004526:	2304      	movs	r3, #4
 8004528:	76fb      	strb	r3, [r7, #27]
 800452a:	e032      	b.n	8004592 <UART_SetConfig+0x3ee>
 800452c:	2308      	movs	r3, #8
 800452e:	76fb      	strb	r3, [r7, #27]
 8004530:	e02f      	b.n	8004592 <UART_SetConfig+0x3ee>
 8004532:	2310      	movs	r3, #16
 8004534:	76fb      	strb	r3, [r7, #27]
 8004536:	bf00      	nop
 8004538:	e02b      	b.n	8004592 <UART_SetConfig+0x3ee>
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	4a8e      	ldr	r2, [pc, #568]	; (8004778 <UART_SetConfig+0x5d4>)
 8004540:	4293      	cmp	r3, r2
 8004542:	d124      	bne.n	800458e <UART_SetConfig+0x3ea>
 8004544:	4b8a      	ldr	r3, [pc, #552]	; (8004770 <UART_SetConfig+0x5cc>)
 8004546:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800454a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800454e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004552:	d012      	beq.n	800457a <UART_SetConfig+0x3d6>
 8004554:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004558:	d802      	bhi.n	8004560 <UART_SetConfig+0x3bc>
 800455a:	2b00      	cmp	r3, #0
 800455c:	d007      	beq.n	800456e <UART_SetConfig+0x3ca>
 800455e:	e012      	b.n	8004586 <UART_SetConfig+0x3e2>
 8004560:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004564:	d006      	beq.n	8004574 <UART_SetConfig+0x3d0>
 8004566:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800456a:	d009      	beq.n	8004580 <UART_SetConfig+0x3dc>
 800456c:	e00b      	b.n	8004586 <UART_SetConfig+0x3e2>
 800456e:	2300      	movs	r3, #0
 8004570:	76fb      	strb	r3, [r7, #27]
 8004572:	e00e      	b.n	8004592 <UART_SetConfig+0x3ee>
 8004574:	2302      	movs	r3, #2
 8004576:	76fb      	strb	r3, [r7, #27]
 8004578:	e00b      	b.n	8004592 <UART_SetConfig+0x3ee>
 800457a:	2304      	movs	r3, #4
 800457c:	76fb      	strb	r3, [r7, #27]
 800457e:	e008      	b.n	8004592 <UART_SetConfig+0x3ee>
 8004580:	2308      	movs	r3, #8
 8004582:	76fb      	strb	r3, [r7, #27]
 8004584:	e005      	b.n	8004592 <UART_SetConfig+0x3ee>
 8004586:	2310      	movs	r3, #16
 8004588:	76fb      	strb	r3, [r7, #27]
 800458a:	bf00      	nop
 800458c:	e001      	b.n	8004592 <UART_SetConfig+0x3ee>
 800458e:	2310      	movs	r3, #16
 8004590:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	4a78      	ldr	r2, [pc, #480]	; (8004778 <UART_SetConfig+0x5d4>)
 8004598:	4293      	cmp	r3, r2
 800459a:	f040 80f3 	bne.w	8004784 <UART_SetConfig+0x5e0>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800459e:	7efb      	ldrb	r3, [r7, #27]
 80045a0:	2b08      	cmp	r3, #8
 80045a2:	d824      	bhi.n	80045ee <UART_SetConfig+0x44a>
 80045a4:	a201      	add	r2, pc, #4	; (adr r2, 80045ac <UART_SetConfig+0x408>)
 80045a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045aa:	bf00      	nop
 80045ac:	080045d1 	.word	0x080045d1
 80045b0:	080045ef 	.word	0x080045ef
 80045b4:	080045d9 	.word	0x080045d9
 80045b8:	080045ef 	.word	0x080045ef
 80045bc:	080045df 	.word	0x080045df
 80045c0:	080045ef 	.word	0x080045ef
 80045c4:	080045ef 	.word	0x080045ef
 80045c8:	080045ef 	.word	0x080045ef
 80045cc:	080045e7 	.word	0x080045e7
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 80045d0:	f7fd fe2e 	bl	8002230 <HAL_RCC_GetPCLK1Freq>
 80045d4:	60f8      	str	r0, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 80045d6:	e00d      	b.n	80045f4 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 80045d8:	4b68      	ldr	r3, [pc, #416]	; (800477c <UART_SetConfig+0x5d8>)
 80045da:	60fb      	str	r3, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 80045dc:	e00a      	b.n	80045f4 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 80045de:	f7fd fd91 	bl	8002104 <HAL_RCC_GetSysClockFreq>
 80045e2:	60f8      	str	r0, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 80045e4:	e006      	b.n	80045f4 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 80045e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80045ea:	60fb      	str	r3, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 80045ec:	e002      	b.n	80045f4 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 80045ee:	2301      	movs	r3, #1
 80045f0:	74fb      	strb	r3, [r7, #19]
        break;
 80045f2:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	f000 81b7 	beq.w	800496a <UART_SetConfig+0x7c6>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	685a      	ldr	r2, [r3, #4]
 8004600:	4613      	mov	r3, r2
 8004602:	005b      	lsls	r3, r3, #1
 8004604:	4413      	add	r3, r2
 8004606:	68fa      	ldr	r2, [r7, #12]
 8004608:	429a      	cmp	r2, r3
 800460a:	d305      	bcc.n	8004618 <UART_SetConfig+0x474>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	685b      	ldr	r3, [r3, #4]
 8004610:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004612:	68fa      	ldr	r2, [r7, #12]
 8004614:	429a      	cmp	r2, r3
 8004616:	d902      	bls.n	800461e <UART_SetConfig+0x47a>
      {
        ret = HAL_ERROR;
 8004618:	2301      	movs	r3, #1
 800461a:	74fb      	strb	r3, [r7, #19]
 800461c:	e1a5      	b.n	800496a <UART_SetConfig+0x7c6>
      }
      else
      {
        switch (clocksource)
 800461e:	7efb      	ldrb	r3, [r7, #27]
 8004620:	2b08      	cmp	r3, #8
 8004622:	f200 8090 	bhi.w	8004746 <UART_SetConfig+0x5a2>
 8004626:	a201      	add	r2, pc, #4	; (adr r2, 800462c <UART_SetConfig+0x488>)
 8004628:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800462c:	08004651 	.word	0x08004651
 8004630:	08004747 	.word	0x08004747
 8004634:	0800469d 	.word	0x0800469d
 8004638:	08004747 	.word	0x08004747
 800463c:	080046d1 	.word	0x080046d1
 8004640:	08004747 	.word	0x08004747
 8004644:	08004747 	.word	0x08004747
 8004648:	08004747 	.word	0x08004747
 800464c:	0800471d 	.word	0x0800471d
        {
          case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8004650:	f7fd fdee 	bl	8002230 <HAL_RCC_GetPCLK1Freq>
 8004654:	4603      	mov	r3, r0
 8004656:	4619      	mov	r1, r3
 8004658:	f04f 0200 	mov.w	r2, #0
 800465c:	f04f 0300 	mov.w	r3, #0
 8004660:	f04f 0400 	mov.w	r4, #0
 8004664:	0214      	lsls	r4, r2, #8
 8004666:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800466a:	020b      	lsls	r3, r1, #8
 800466c:	687a      	ldr	r2, [r7, #4]
 800466e:	6852      	ldr	r2, [r2, #4]
 8004670:	0852      	lsrs	r2, r2, #1
 8004672:	4611      	mov	r1, r2
 8004674:	f04f 0200 	mov.w	r2, #0
 8004678:	eb13 0b01 	adds.w	fp, r3, r1
 800467c:	eb44 0c02 	adc.w	ip, r4, r2
 8004680:	4658      	mov	r0, fp
 8004682:	4661      	mov	r1, ip
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	685b      	ldr	r3, [r3, #4]
 8004688:	f04f 0400 	mov.w	r4, #0
 800468c:	461a      	mov	r2, r3
 800468e:	4623      	mov	r3, r4
 8004690:	f7fb fdee 	bl	8000270 <__aeabi_uldivmod>
 8004694:	4603      	mov	r3, r0
 8004696:	460c      	mov	r4, r1
 8004698:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 800469a:	e057      	b.n	800474c <UART_SetConfig+0x5a8>
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	685b      	ldr	r3, [r3, #4]
 80046a0:	085b      	lsrs	r3, r3, #1
 80046a2:	f04f 0400 	mov.w	r4, #0
 80046a6:	4936      	ldr	r1, [pc, #216]	; (8004780 <UART_SetConfig+0x5dc>)
 80046a8:	f04f 0200 	mov.w	r2, #0
 80046ac:	eb13 0b01 	adds.w	fp, r3, r1
 80046b0:	eb44 0c02 	adc.w	ip, r4, r2
 80046b4:	4658      	mov	r0, fp
 80046b6:	4661      	mov	r1, ip
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	685b      	ldr	r3, [r3, #4]
 80046bc:	f04f 0400 	mov.w	r4, #0
 80046c0:	461a      	mov	r2, r3
 80046c2:	4623      	mov	r3, r4
 80046c4:	f7fb fdd4 	bl	8000270 <__aeabi_uldivmod>
 80046c8:	4603      	mov	r3, r0
 80046ca:	460c      	mov	r4, r1
 80046cc:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 80046ce:	e03d      	b.n	800474c <UART_SetConfig+0x5a8>
          case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80046d0:	f7fd fd18 	bl	8002104 <HAL_RCC_GetSysClockFreq>
 80046d4:	4603      	mov	r3, r0
 80046d6:	4619      	mov	r1, r3
 80046d8:	f04f 0200 	mov.w	r2, #0
 80046dc:	f04f 0300 	mov.w	r3, #0
 80046e0:	f04f 0400 	mov.w	r4, #0
 80046e4:	0214      	lsls	r4, r2, #8
 80046e6:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80046ea:	020b      	lsls	r3, r1, #8
 80046ec:	687a      	ldr	r2, [r7, #4]
 80046ee:	6852      	ldr	r2, [r2, #4]
 80046f0:	0852      	lsrs	r2, r2, #1
 80046f2:	4611      	mov	r1, r2
 80046f4:	f04f 0200 	mov.w	r2, #0
 80046f8:	eb13 0b01 	adds.w	fp, r3, r1
 80046fc:	eb44 0c02 	adc.w	ip, r4, r2
 8004700:	4658      	mov	r0, fp
 8004702:	4661      	mov	r1, ip
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	685b      	ldr	r3, [r3, #4]
 8004708:	f04f 0400 	mov.w	r4, #0
 800470c:	461a      	mov	r2, r3
 800470e:	4623      	mov	r3, r4
 8004710:	f7fb fdae 	bl	8000270 <__aeabi_uldivmod>
 8004714:	4603      	mov	r3, r0
 8004716:	460c      	mov	r4, r1
 8004718:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 800471a:	e017      	b.n	800474c <UART_SetConfig+0x5a8>
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	685b      	ldr	r3, [r3, #4]
 8004720:	085b      	lsrs	r3, r3, #1
 8004722:	f04f 0400 	mov.w	r4, #0
 8004726:	f513 0000 	adds.w	r0, r3, #8388608	; 0x800000
 800472a:	f144 0100 	adc.w	r1, r4, #0
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	685b      	ldr	r3, [r3, #4]
 8004732:	f04f 0400 	mov.w	r4, #0
 8004736:	461a      	mov	r2, r3
 8004738:	4623      	mov	r3, r4
 800473a:	f7fb fd99 	bl	8000270 <__aeabi_uldivmod>
 800473e:	4603      	mov	r3, r0
 8004740:	460c      	mov	r4, r1
 8004742:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 8004744:	e002      	b.n	800474c <UART_SetConfig+0x5a8>
          case UART_CLOCKSOURCE_UNDEFINED:
          default:
            ret = HAL_ERROR;
 8004746:	2301      	movs	r3, #1
 8004748:	74fb      	strb	r3, [r7, #19]
            break;
 800474a:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800474c:	697b      	ldr	r3, [r7, #20]
 800474e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004752:	d308      	bcc.n	8004766 <UART_SetConfig+0x5c2>
 8004754:	697b      	ldr	r3, [r7, #20]
 8004756:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800475a:	d204      	bcs.n	8004766 <UART_SetConfig+0x5c2>
        {
          huart->Instance->BRR = usartdiv;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	697a      	ldr	r2, [r7, #20]
 8004762:	60da      	str	r2, [r3, #12]
 8004764:	e101      	b.n	800496a <UART_SetConfig+0x7c6>
        }
        else
        {
          ret = HAL_ERROR;
 8004766:	2301      	movs	r3, #1
 8004768:	74fb      	strb	r3, [r7, #19]
 800476a:	e0fe      	b.n	800496a <UART_SetConfig+0x7c6>
 800476c:	40004c00 	.word	0x40004c00
 8004770:	40021000 	.word	0x40021000
 8004774:	40005000 	.word	0x40005000
 8004778:	40008000 	.word	0x40008000
 800477c:	00f42400 	.word	0x00f42400
 8004780:	f4240000 	.word	0xf4240000
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	69db      	ldr	r3, [r3, #28]
 8004788:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800478c:	d17f      	bne.n	800488e <UART_SetConfig+0x6ea>
  {
    switch (clocksource)
 800478e:	7efb      	ldrb	r3, [r7, #27]
 8004790:	2b08      	cmp	r3, #8
 8004792:	d85c      	bhi.n	800484e <UART_SetConfig+0x6aa>
 8004794:	a201      	add	r2, pc, #4	; (adr r2, 800479c <UART_SetConfig+0x5f8>)
 8004796:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800479a:	bf00      	nop
 800479c:	080047c1 	.word	0x080047c1
 80047a0:	080047df 	.word	0x080047df
 80047a4:	080047fd 	.word	0x080047fd
 80047a8:	0800484f 	.word	0x0800484f
 80047ac:	08004819 	.word	0x08004819
 80047b0:	0800484f 	.word	0x0800484f
 80047b4:	0800484f 	.word	0x0800484f
 80047b8:	0800484f 	.word	0x0800484f
 80047bc:	08004837 	.word	0x08004837
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80047c0:	f7fd fd36 	bl	8002230 <HAL_RCC_GetPCLK1Freq>
 80047c4:	4603      	mov	r3, r0
 80047c6:	005a      	lsls	r2, r3, #1
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	685b      	ldr	r3, [r3, #4]
 80047cc:	085b      	lsrs	r3, r3, #1
 80047ce:	441a      	add	r2, r3
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	685b      	ldr	r3, [r3, #4]
 80047d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80047d8:	b29b      	uxth	r3, r3
 80047da:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80047dc:	e03a      	b.n	8004854 <UART_SetConfig+0x6b0>
      case UART_CLOCKSOURCE_PCLK2:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80047de:	f7fd fd3d 	bl	800225c <HAL_RCC_GetPCLK2Freq>
 80047e2:	4603      	mov	r3, r0
 80047e4:	005a      	lsls	r2, r3, #1
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	685b      	ldr	r3, [r3, #4]
 80047ea:	085b      	lsrs	r3, r3, #1
 80047ec:	441a      	add	r2, r3
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	685b      	ldr	r3, [r3, #4]
 80047f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80047f6:	b29b      	uxth	r3, r3
 80047f8:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80047fa:	e02b      	b.n	8004854 <UART_SetConfig+0x6b0>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	685b      	ldr	r3, [r3, #4]
 8004800:	085b      	lsrs	r3, r3, #1
 8004802:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 8004806:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 800480a:	687a      	ldr	r2, [r7, #4]
 800480c:	6852      	ldr	r2, [r2, #4]
 800480e:	fbb3 f3f2 	udiv	r3, r3, r2
 8004812:	b29b      	uxth	r3, r3
 8004814:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004816:	e01d      	b.n	8004854 <UART_SetConfig+0x6b0>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8004818:	f7fd fc74 	bl	8002104 <HAL_RCC_GetSysClockFreq>
 800481c:	4603      	mov	r3, r0
 800481e:	005a      	lsls	r2, r3, #1
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	685b      	ldr	r3, [r3, #4]
 8004824:	085b      	lsrs	r3, r3, #1
 8004826:	441a      	add	r2, r3
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	685b      	ldr	r3, [r3, #4]
 800482c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004830:	b29b      	uxth	r3, r3
 8004832:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004834:	e00e      	b.n	8004854 <UART_SetConfig+0x6b0>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	685b      	ldr	r3, [r3, #4]
 800483a:	085b      	lsrs	r3, r3, #1
 800483c:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	685b      	ldr	r3, [r3, #4]
 8004844:	fbb2 f3f3 	udiv	r3, r2, r3
 8004848:	b29b      	uxth	r3, r3
 800484a:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800484c:	e002      	b.n	8004854 <UART_SetConfig+0x6b0>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 800484e:	2301      	movs	r3, #1
 8004850:	74fb      	strb	r3, [r7, #19]
        break;
 8004852:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004854:	697b      	ldr	r3, [r7, #20]
 8004856:	2b0f      	cmp	r3, #15
 8004858:	d916      	bls.n	8004888 <UART_SetConfig+0x6e4>
 800485a:	697b      	ldr	r3, [r7, #20]
 800485c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004860:	d212      	bcs.n	8004888 <UART_SetConfig+0x6e4>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004862:	697b      	ldr	r3, [r7, #20]
 8004864:	b29b      	uxth	r3, r3
 8004866:	f023 030f 	bic.w	r3, r3, #15
 800486a:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800486c:	697b      	ldr	r3, [r7, #20]
 800486e:	085b      	lsrs	r3, r3, #1
 8004870:	b29b      	uxth	r3, r3
 8004872:	f003 0307 	and.w	r3, r3, #7
 8004876:	b29a      	uxth	r2, r3
 8004878:	897b      	ldrh	r3, [r7, #10]
 800487a:	4313      	orrs	r3, r2
 800487c:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	897a      	ldrh	r2, [r7, #10]
 8004884:	60da      	str	r2, [r3, #12]
 8004886:	e070      	b.n	800496a <UART_SetConfig+0x7c6>
    }
    else
    {
      ret = HAL_ERROR;
 8004888:	2301      	movs	r3, #1
 800488a:	74fb      	strb	r3, [r7, #19]
 800488c:	e06d      	b.n	800496a <UART_SetConfig+0x7c6>
    }
  }
  else
  {
    switch (clocksource)
 800488e:	7efb      	ldrb	r3, [r7, #27]
 8004890:	2b08      	cmp	r3, #8
 8004892:	d859      	bhi.n	8004948 <UART_SetConfig+0x7a4>
 8004894:	a201      	add	r2, pc, #4	; (adr r2, 800489c <UART_SetConfig+0x6f8>)
 8004896:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800489a:	bf00      	nop
 800489c:	080048c1 	.word	0x080048c1
 80048a0:	080048dd 	.word	0x080048dd
 80048a4:	080048f9 	.word	0x080048f9
 80048a8:	08004949 	.word	0x08004949
 80048ac:	08004915 	.word	0x08004915
 80048b0:	08004949 	.word	0x08004949
 80048b4:	08004949 	.word	0x08004949
 80048b8:	08004949 	.word	0x08004949
 80048bc:	08004931 	.word	0x08004931
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80048c0:	f7fd fcb6 	bl	8002230 <HAL_RCC_GetPCLK1Freq>
 80048c4:	4602      	mov	r2, r0
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	685b      	ldr	r3, [r3, #4]
 80048ca:	085b      	lsrs	r3, r3, #1
 80048cc:	441a      	add	r2, r3
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	685b      	ldr	r3, [r3, #4]
 80048d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80048d6:	b29b      	uxth	r3, r3
 80048d8:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80048da:	e038      	b.n	800494e <UART_SetConfig+0x7aa>
      case UART_CLOCKSOURCE_PCLK2:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80048dc:	f7fd fcbe 	bl	800225c <HAL_RCC_GetPCLK2Freq>
 80048e0:	4602      	mov	r2, r0
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	685b      	ldr	r3, [r3, #4]
 80048e6:	085b      	lsrs	r3, r3, #1
 80048e8:	441a      	add	r2, r3
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	685b      	ldr	r3, [r3, #4]
 80048ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80048f2:	b29b      	uxth	r3, r3
 80048f4:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80048f6:	e02a      	b.n	800494e <UART_SetConfig+0x7aa>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	685b      	ldr	r3, [r3, #4]
 80048fc:	085b      	lsrs	r3, r3, #1
 80048fe:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8004902:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8004906:	687a      	ldr	r2, [r7, #4]
 8004908:	6852      	ldr	r2, [r2, #4]
 800490a:	fbb3 f3f2 	udiv	r3, r3, r2
 800490e:	b29b      	uxth	r3, r3
 8004910:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004912:	e01c      	b.n	800494e <UART_SetConfig+0x7aa>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8004914:	f7fd fbf6 	bl	8002104 <HAL_RCC_GetSysClockFreq>
 8004918:	4602      	mov	r2, r0
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	685b      	ldr	r3, [r3, #4]
 800491e:	085b      	lsrs	r3, r3, #1
 8004920:	441a      	add	r2, r3
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	685b      	ldr	r3, [r3, #4]
 8004926:	fbb2 f3f3 	udiv	r3, r2, r3
 800492a:	b29b      	uxth	r3, r3
 800492c:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800492e:	e00e      	b.n	800494e <UART_SetConfig+0x7aa>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	685b      	ldr	r3, [r3, #4]
 8004934:	085b      	lsrs	r3, r3, #1
 8004936:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	685b      	ldr	r3, [r3, #4]
 800493e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004942:	b29b      	uxth	r3, r3
 8004944:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004946:	e002      	b.n	800494e <UART_SetConfig+0x7aa>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8004948:	2301      	movs	r3, #1
 800494a:	74fb      	strb	r3, [r7, #19]
        break;
 800494c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800494e:	697b      	ldr	r3, [r7, #20]
 8004950:	2b0f      	cmp	r3, #15
 8004952:	d908      	bls.n	8004966 <UART_SetConfig+0x7c2>
 8004954:	697b      	ldr	r3, [r7, #20]
 8004956:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800495a:	d204      	bcs.n	8004966 <UART_SetConfig+0x7c2>
    {
      huart->Instance->BRR = usartdiv;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	697a      	ldr	r2, [r7, #20]
 8004962:	60da      	str	r2, [r3, #12]
 8004964:	e001      	b.n	800496a <UART_SetConfig+0x7c6>
    }
    else
    {
      ret = HAL_ERROR;
 8004966:	2301      	movs	r3, #1
 8004968:	74fb      	strb	r3, [r7, #19]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	2200      	movs	r2, #0
 800496e:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	2200      	movs	r2, #0
 8004974:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8004976:	7cfb      	ldrb	r3, [r7, #19]
}
 8004978:	4618      	mov	r0, r3
 800497a:	3720      	adds	r7, #32
 800497c:	46bd      	mov	sp, r7
 800497e:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8004982:	bf00      	nop

08004984 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004984:	b580      	push	{r7, lr}
 8004986:	b082      	sub	sp, #8
 8004988:	af00      	add	r7, sp, #0
 800498a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004990:	2bff      	cmp	r3, #255	; 0xff
 8004992:	d904      	bls.n	800499e <UART_AdvFeatureConfig+0x1a>
 8004994:	f640 4155 	movw	r1, #3157	; 0xc55
 8004998:	489b      	ldr	r0, [pc, #620]	; (8004c08 <UART_AdvFeatureConfig+0x284>)
 800499a:	f003 faa7 	bl	8007eec <assert_failed>

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049a2:	f003 0301 	and.w	r3, r3, #1
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d018      	beq.n	80049dc <UART_AdvFeatureConfig+0x58>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d009      	beq.n	80049c6 <UART_AdvFeatureConfig+0x42>
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049b6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80049ba:	d004      	beq.n	80049c6 <UART_AdvFeatureConfig+0x42>
 80049bc:	f640 415a 	movw	r1, #3162	; 0xc5a
 80049c0:	4891      	ldr	r0, [pc, #580]	; (8004c08 <UART_AdvFeatureConfig+0x284>)
 80049c2:	f003 fa93 	bl	8007eec <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	685b      	ldr	r3, [r3, #4]
 80049cc:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	430a      	orrs	r2, r1
 80049da:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049e0:	f003 0302 	and.w	r3, r3, #2
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d018      	beq.n	8004a1a <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d009      	beq.n	8004a04 <UART_AdvFeatureConfig+0x80>
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80049f8:	d004      	beq.n	8004a04 <UART_AdvFeatureConfig+0x80>
 80049fa:	f640 4161 	movw	r1, #3169	; 0xc61
 80049fe:	4882      	ldr	r0, [pc, #520]	; (8004c08 <UART_AdvFeatureConfig+0x284>)
 8004a00:	f003 fa74 	bl	8007eec <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	685b      	ldr	r3, [r3, #4]
 8004a0a:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	430a      	orrs	r2, r1
 8004a18:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a1e:	f003 0304 	and.w	r3, r3, #4
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d018      	beq.n	8004a58 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d009      	beq.n	8004a42 <UART_AdvFeatureConfig+0xbe>
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a32:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004a36:	d004      	beq.n	8004a42 <UART_AdvFeatureConfig+0xbe>
 8004a38:	f640 4168 	movw	r1, #3176	; 0xc68
 8004a3c:	4872      	ldr	r0, [pc, #456]	; (8004c08 <UART_AdvFeatureConfig+0x284>)
 8004a3e:	f003 fa55 	bl	8007eec <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	685b      	ldr	r3, [r3, #4]
 8004a48:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	430a      	orrs	r2, r1
 8004a56:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a5c:	f003 0308 	and.w	r3, r3, #8
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d018      	beq.n	8004a96 <UART_AdvFeatureConfig+0x112>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d009      	beq.n	8004a80 <UART_AdvFeatureConfig+0xfc>
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a70:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a74:	d004      	beq.n	8004a80 <UART_AdvFeatureConfig+0xfc>
 8004a76:	f640 416f 	movw	r1, #3183	; 0xc6f
 8004a7a:	4863      	ldr	r0, [pc, #396]	; (8004c08 <UART_AdvFeatureConfig+0x284>)
 8004a7c:	f003 fa36 	bl	8007eec <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	685b      	ldr	r3, [r3, #4]
 8004a86:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	430a      	orrs	r2, r1
 8004a94:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a9a:	f003 0310 	and.w	r3, r3, #16
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d018      	beq.n	8004ad4 <UART_AdvFeatureConfig+0x150>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d009      	beq.n	8004abe <UART_AdvFeatureConfig+0x13a>
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004aae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ab2:	d004      	beq.n	8004abe <UART_AdvFeatureConfig+0x13a>
 8004ab4:	f640 4176 	movw	r1, #3190	; 0xc76
 8004ab8:	4853      	ldr	r0, [pc, #332]	; (8004c08 <UART_AdvFeatureConfig+0x284>)
 8004aba:	f003 fa17 	bl	8007eec <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	689b      	ldr	r3, [r3, #8]
 8004ac4:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	430a      	orrs	r2, r1
 8004ad2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ad8:	f003 0320 	and.w	r3, r3, #32
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d018      	beq.n	8004b12 <UART_AdvFeatureConfig+0x18e>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d009      	beq.n	8004afc <UART_AdvFeatureConfig+0x178>
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004aec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004af0:	d004      	beq.n	8004afc <UART_AdvFeatureConfig+0x178>
 8004af2:	f640 417d 	movw	r1, #3197	; 0xc7d
 8004af6:	4844      	ldr	r0, [pc, #272]	; (8004c08 <UART_AdvFeatureConfig+0x284>)
 8004af8:	f003 f9f8 	bl	8007eec <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	689b      	ldr	r3, [r3, #8]
 8004b02:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	430a      	orrs	r2, r1
 8004b10:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d05e      	beq.n	8004bdc <UART_AdvFeatureConfig+0x258>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	4a3a      	ldr	r2, [pc, #232]	; (8004c0c <UART_AdvFeatureConfig+0x288>)
 8004b24:	4293      	cmp	r3, r2
 8004b26:	d018      	beq.n	8004b5a <UART_AdvFeatureConfig+0x1d6>
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	4a38      	ldr	r2, [pc, #224]	; (8004c10 <UART_AdvFeatureConfig+0x28c>)
 8004b2e:	4293      	cmp	r3, r2
 8004b30:	d013      	beq.n	8004b5a <UART_AdvFeatureConfig+0x1d6>
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	4a37      	ldr	r2, [pc, #220]	; (8004c14 <UART_AdvFeatureConfig+0x290>)
 8004b38:	4293      	cmp	r3, r2
 8004b3a:	d00e      	beq.n	8004b5a <UART_AdvFeatureConfig+0x1d6>
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	4a35      	ldr	r2, [pc, #212]	; (8004c18 <UART_AdvFeatureConfig+0x294>)
 8004b42:	4293      	cmp	r3, r2
 8004b44:	d009      	beq.n	8004b5a <UART_AdvFeatureConfig+0x1d6>
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	4a34      	ldr	r2, [pc, #208]	; (8004c1c <UART_AdvFeatureConfig+0x298>)
 8004b4c:	4293      	cmp	r3, r2
 8004b4e:	d004      	beq.n	8004b5a <UART_AdvFeatureConfig+0x1d6>
 8004b50:	f640 4184 	movw	r1, #3204	; 0xc84
 8004b54:	482c      	ldr	r0, [pc, #176]	; (8004c08 <UART_AdvFeatureConfig+0x284>)
 8004b56:	f003 f9c9 	bl	8007eec <assert_failed>
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d009      	beq.n	8004b76 <UART_AdvFeatureConfig+0x1f2>
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b66:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004b6a:	d004      	beq.n	8004b76 <UART_AdvFeatureConfig+0x1f2>
 8004b6c:	f640 4185 	movw	r1, #3205	; 0xc85
 8004b70:	4825      	ldr	r0, [pc, #148]	; (8004c08 <UART_AdvFeatureConfig+0x284>)
 8004b72:	f003 f9bb 	bl	8007eec <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	685b      	ldr	r3, [r3, #4]
 8004b7c:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	430a      	orrs	r2, r1
 8004b8a:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b90:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004b94:	d122      	bne.n	8004bdc <UART_AdvFeatureConfig+0x258>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d013      	beq.n	8004bc6 <UART_AdvFeatureConfig+0x242>
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ba2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004ba6:	d00e      	beq.n	8004bc6 <UART_AdvFeatureConfig+0x242>
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004bb0:	d009      	beq.n	8004bc6 <UART_AdvFeatureConfig+0x242>
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bb6:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004bba:	d004      	beq.n	8004bc6 <UART_AdvFeatureConfig+0x242>
 8004bbc:	f640 418a 	movw	r1, #3210	; 0xc8a
 8004bc0:	4811      	ldr	r0, [pc, #68]	; (8004c08 <UART_AdvFeatureConfig+0x284>)
 8004bc2:	f003 f993 	bl	8007eec <assert_failed>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	685b      	ldr	r3, [r3, #4]
 8004bcc:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	430a      	orrs	r2, r1
 8004bda:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004be0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d026      	beq.n	8004c36 <UART_AdvFeatureConfig+0x2b2>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d017      	beq.n	8004c20 <UART_AdvFeatureConfig+0x29c>
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004bf4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004bf8:	d012      	beq.n	8004c20 <UART_AdvFeatureConfig+0x29c>
 8004bfa:	f640 4192 	movw	r1, #3218	; 0xc92
 8004bfe:	4802      	ldr	r0, [pc, #8]	; (8004c08 <UART_AdvFeatureConfig+0x284>)
 8004c00:	f003 f974 	bl	8007eec <assert_failed>
 8004c04:	e00c      	b.n	8004c20 <UART_AdvFeatureConfig+0x29c>
 8004c06:	bf00      	nop
 8004c08:	08009dbc 	.word	0x08009dbc
 8004c0c:	40013800 	.word	0x40013800
 8004c10:	40004400 	.word	0x40004400
 8004c14:	40004800 	.word	0x40004800
 8004c18:	40004c00 	.word	0x40004c00
 8004c1c:	40005000 	.word	0x40005000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	685b      	ldr	r3, [r3, #4]
 8004c26:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	430a      	orrs	r2, r1
 8004c34:	605a      	str	r2, [r3, #4]
  }
}
 8004c36:	bf00      	nop
 8004c38:	3708      	adds	r7, #8
 8004c3a:	46bd      	mov	sp, r7
 8004c3c:	bd80      	pop	{r7, pc}
 8004c3e:	bf00      	nop

08004c40 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004c40:	b580      	push	{r7, lr}
 8004c42:	b086      	sub	sp, #24
 8004c44:	af02      	add	r7, sp, #8
 8004c46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2200      	movs	r2, #0
 8004c4c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8004c4e:	f7fb fcb9 	bl	80005c4 <HAL_GetTick>
 8004c52:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f003 0308 	and.w	r3, r3, #8
 8004c5e:	2b08      	cmp	r3, #8
 8004c60:	d10e      	bne.n	8004c80 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004c62:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004c66:	9300      	str	r3, [sp, #0]
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004c70:	6878      	ldr	r0, [r7, #4]
 8004c72:	f000 f82a 	bl	8004cca <UART_WaitOnFlagUntilTimeout>
 8004c76:	4603      	mov	r3, r0
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d001      	beq.n	8004c80 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004c7c:	2303      	movs	r3, #3
 8004c7e:	e020      	b.n	8004cc2 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f003 0304 	and.w	r3, r3, #4
 8004c8a:	2b04      	cmp	r3, #4
 8004c8c:	d10e      	bne.n	8004cac <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004c8e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004c92:	9300      	str	r3, [sp, #0]
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	2200      	movs	r2, #0
 8004c98:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004c9c:	6878      	ldr	r0, [r7, #4]
 8004c9e:	f000 f814 	bl	8004cca <UART_WaitOnFlagUntilTimeout>
 8004ca2:	4603      	mov	r3, r0
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d001      	beq.n	8004cac <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004ca8:	2303      	movs	r3, #3
 8004caa:	e00a      	b.n	8004cc2 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	2220      	movs	r2, #32
 8004cb0:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	2220      	movs	r2, #32
 8004cb6:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2200      	movs	r2, #0
 8004cbc:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8004cc0:	2300      	movs	r3, #0
}
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	3710      	adds	r7, #16
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	bd80      	pop	{r7, pc}

08004cca <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004cca:	b580      	push	{r7, lr}
 8004ccc:	b084      	sub	sp, #16
 8004cce:	af00      	add	r7, sp, #0
 8004cd0:	60f8      	str	r0, [r7, #12]
 8004cd2:	60b9      	str	r1, [r7, #8]
 8004cd4:	603b      	str	r3, [r7, #0]
 8004cd6:	4613      	mov	r3, r2
 8004cd8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004cda:	e02a      	b.n	8004d32 <UART_WaitOnFlagUntilTimeout+0x68>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004cdc:	69bb      	ldr	r3, [r7, #24]
 8004cde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ce2:	d026      	beq.n	8004d32 <UART_WaitOnFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ce4:	f7fb fc6e 	bl	80005c4 <HAL_GetTick>
 8004ce8:	4602      	mov	r2, r0
 8004cea:	683b      	ldr	r3, [r7, #0]
 8004cec:	1ad3      	subs	r3, r2, r3
 8004cee:	69ba      	ldr	r2, [r7, #24]
 8004cf0:	429a      	cmp	r2, r3
 8004cf2:	d302      	bcc.n	8004cfa <UART_WaitOnFlagUntilTimeout+0x30>
 8004cf4:	69bb      	ldr	r3, [r7, #24]
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d11b      	bne.n	8004d32 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	681a      	ldr	r2, [r3, #0]
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004d08:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	689a      	ldr	r2, [r3, #8]
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f022 0201 	bic.w	r2, r2, #1
 8004d18:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	2220      	movs	r2, #32
 8004d1e:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	2220      	movs	r2, #32
 8004d24:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	2200      	movs	r2, #0
 8004d2a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8004d2e:	2303      	movs	r3, #3
 8004d30:	e00f      	b.n	8004d52 <UART_WaitOnFlagUntilTimeout+0x88>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	69da      	ldr	r2, [r3, #28]
 8004d38:	68bb      	ldr	r3, [r7, #8]
 8004d3a:	4013      	ands	r3, r2
 8004d3c:	68ba      	ldr	r2, [r7, #8]
 8004d3e:	429a      	cmp	r2, r3
 8004d40:	bf0c      	ite	eq
 8004d42:	2301      	moveq	r3, #1
 8004d44:	2300      	movne	r3, #0
 8004d46:	b2db      	uxtb	r3, r3
 8004d48:	461a      	mov	r2, r3
 8004d4a:	79fb      	ldrb	r3, [r7, #7]
 8004d4c:	429a      	cmp	r2, r3
 8004d4e:	d0c5      	beq.n	8004cdc <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004d50:	2300      	movs	r3, #0
}
 8004d52:	4618      	mov	r0, r3
 8004d54:	3710      	adds	r7, #16
 8004d56:	46bd      	mov	sp, r7
 8004d58:	bd80      	pop	{r7, pc}

08004d5a <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004d5a:	b480      	push	{r7}
 8004d5c:	b083      	sub	sp, #12
 8004d5e:	af00      	add	r7, sp, #0
 8004d60:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	681a      	ldr	r2, [r3, #0]
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8004d70:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	2220      	movs	r2, #32
 8004d76:	675a      	str	r2, [r3, #116]	; 0x74
}
 8004d78:	bf00      	nop
 8004d7a:	370c      	adds	r7, #12
 8004d7c:	46bd      	mov	sp, r7
 8004d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d82:	4770      	bx	lr

08004d84 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004d84:	b480      	push	{r7}
 8004d86:	b083      	sub	sp, #12
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	681a      	ldr	r2, [r3, #0]
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004d9a:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	689a      	ldr	r2, [r3, #8]
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f022 0201 	bic.w	r2, r2, #1
 8004daa:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	2220      	movs	r2, #32
 8004db0:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	2200      	movs	r2, #0
 8004db6:	661a      	str	r2, [r3, #96]	; 0x60
}
 8004db8:	bf00      	nop
 8004dba:	370c      	adds	r7, #12
 8004dbc:	46bd      	mov	sp, r7
 8004dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc2:	4770      	bx	lr

08004dc4 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004dc4:	b580      	push	{r7, lr}
 8004dc6:	b084      	sub	sp, #16
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dd0:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f003 0320 	and.w	r3, r3, #32
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d11e      	bne.n	8004e1e <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	2200      	movs	r2, #0
 8004de4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	681a      	ldr	r2, [r3, #0]
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004df6:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	689a      	ldr	r2, [r3, #8]
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	f022 0201 	bic.w	r2, r2, #1
 8004e06:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	689a      	ldr	r2, [r3, #8]
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004e16:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	2220      	movs	r2, #32
 8004e1c:	679a      	str	r2, [r3, #120]	; 0x78
  }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004e24:	68f8      	ldr	r0, [r7, #12]
 8004e26:	4798      	blx	r3
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004e28:	bf00      	nop
 8004e2a:	3710      	adds	r7, #16
 8004e2c:	46bd      	mov	sp, r7
 8004e2e:	bd80      	pop	{r7, pc}

08004e30 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004e30:	b580      	push	{r7, lr}
 8004e32:	b084      	sub	sp, #16
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e3c:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e44:	68f8      	ldr	r0, [r7, #12]
 8004e46:	4798      	blx	r3
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004e48:	bf00      	nop
 8004e4a:	3710      	adds	r7, #16
 8004e4c:	46bd      	mov	sp, r7
 8004e4e:	bd80      	pop	{r7, pc}

08004e50 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004e50:	b580      	push	{r7, lr}
 8004e52:	b086      	sub	sp, #24
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e5c:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8004e5e:	697b      	ldr	r3, [r7, #20]
 8004e60:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e62:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8004e64:	697b      	ldr	r3, [r7, #20]
 8004e66:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004e68:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8004e6a:	697b      	ldr	r3, [r7, #20]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	689b      	ldr	r3, [r3, #8]
 8004e70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e74:	2b80      	cmp	r3, #128	; 0x80
 8004e76:	d109      	bne.n	8004e8c <UART_DMAError+0x3c>
 8004e78:	693b      	ldr	r3, [r7, #16]
 8004e7a:	2b21      	cmp	r3, #33	; 0x21
 8004e7c:	d106      	bne.n	8004e8c <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8004e7e:	697b      	ldr	r3, [r7, #20]
 8004e80:	2200      	movs	r2, #0
 8004e82:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 8004e86:	6978      	ldr	r0, [r7, #20]
 8004e88:	f7ff ff67 	bl	8004d5a <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8004e8c:	697b      	ldr	r3, [r7, #20]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	689b      	ldr	r3, [r3, #8]
 8004e92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e96:	2b40      	cmp	r3, #64	; 0x40
 8004e98:	d109      	bne.n	8004eae <UART_DMAError+0x5e>
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	2b22      	cmp	r3, #34	; 0x22
 8004e9e:	d106      	bne.n	8004eae <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8004ea0:	697b      	ldr	r3, [r7, #20]
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 8004ea8:	6978      	ldr	r0, [r7, #20]
 8004eaa:	f7ff ff6b 	bl	8004d84 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004eae:	697b      	ldr	r3, [r7, #20]
 8004eb0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004eb2:	f043 0210 	orr.w	r2, r3, #16
 8004eb6:	697b      	ldr	r3, [r7, #20]
 8004eb8:	67da      	str	r2, [r3, #124]	; 0x7c

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 8004eba:	697b      	ldr	r3, [r7, #20]
 8004ebc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ec0:	6978      	ldr	r0, [r7, #20]
 8004ec2:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004ec4:	bf00      	nop
 8004ec6:	3718      	adds	r7, #24
 8004ec8:	46bd      	mov	sp, r7
 8004eca:	bd80      	pop	{r7, pc}

08004ecc <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004ecc:	b580      	push	{r7, lr}
 8004ece:	b084      	sub	sp, #16
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ed8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	2200      	movs	r2, #0
 8004ede:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	2200      	movs	r2, #0
 8004ee6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ef0:	68f8      	ldr	r0, [r7, #12]
 8004ef2:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004ef4:	bf00      	nop
 8004ef6:	3710      	adds	r7, #16
 8004ef8:	46bd      	mov	sp, r7
 8004efa:	bd80      	pop	{r7, pc}

08004efc <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004efc:	b580      	push	{r7, lr}
 8004efe:	b082      	sub	sp, #8
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	681a      	ldr	r2, [r3, #0]
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004f12:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	2220      	movs	r2, #32
 8004f18:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	2200      	movs	r2, #0
 8004f1e:	665a      	str	r2, [r3, #100]	; 0x64

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004f26:	6878      	ldr	r0, [r7, #4]
 8004f28:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004f2a:	bf00      	nop
 8004f2c:	3708      	adds	r7, #8
 8004f2e:	46bd      	mov	sp, r7
 8004f30:	bd80      	pop	{r7, pc}

08004f32 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004f32:	b480      	push	{r7}
 8004f34:	b083      	sub	sp, #12
 8004f36:	af00      	add	r7, sp, #0
 8004f38:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004f3a:	bf00      	nop
 8004f3c:	370c      	adds	r7, #12
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f44:	4770      	bx	lr
	...

08004f48 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004f48:	b580      	push	{r7, lr}
 8004f4a:	b084      	sub	sp, #16
 8004f4c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004f4e:	f3ef 8305 	mrs	r3, IPSR
 8004f52:	60bb      	str	r3, [r7, #8]
  return(result);
 8004f54:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d10f      	bne.n	8004f7a <osKernelStart+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004f5a:	f3ef 8310 	mrs	r3, PRIMASK
 8004f5e:	607b      	str	r3, [r7, #4]
  return(result);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d109      	bne.n	8004f7a <osKernelStart+0x32>
 8004f66:	4b11      	ldr	r3, [pc, #68]	; (8004fac <osKernelStart+0x64>)
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	2b02      	cmp	r3, #2
 8004f6c:	d109      	bne.n	8004f82 <osKernelStart+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004f6e:	f3ef 8311 	mrs	r3, BASEPRI
 8004f72:	603b      	str	r3, [r7, #0]
  return(result);
 8004f74:	683b      	ldr	r3, [r7, #0]
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d003      	beq.n	8004f82 <osKernelStart+0x3a>
    stat = osErrorISR;
 8004f7a:	f06f 0305 	mvn.w	r3, #5
 8004f7e:	60fb      	str	r3, [r7, #12]
 8004f80:	e00e      	b.n	8004fa0 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8004f82:	4b0a      	ldr	r3, [pc, #40]	; (8004fac <osKernelStart+0x64>)
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	2b01      	cmp	r3, #1
 8004f88:	d107      	bne.n	8004f9a <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8004f8a:	4b08      	ldr	r3, [pc, #32]	; (8004fac <osKernelStart+0x64>)
 8004f8c:	2202      	movs	r2, #2
 8004f8e:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8004f90:	f001 f9b0 	bl	80062f4 <vTaskStartScheduler>
      stat = osOK;
 8004f94:	2300      	movs	r3, #0
 8004f96:	60fb      	str	r3, [r7, #12]
 8004f98:	e002      	b.n	8004fa0 <osKernelStart+0x58>
    } else {
      stat = osError;
 8004f9a:	f04f 33ff 	mov.w	r3, #4294967295
 8004f9e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8004fa0:	68fb      	ldr	r3, [r7, #12]
}
 8004fa2:	4618      	mov	r0, r3
 8004fa4:	3710      	adds	r7, #16
 8004fa6:	46bd      	mov	sp, r7
 8004fa8:	bd80      	pop	{r7, pc}
 8004faa:	bf00      	nop
 8004fac:	200000c4 	.word	0x200000c4

08004fb0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004fb0:	b480      	push	{r7}
 8004fb2:	b085      	sub	sp, #20
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	60f8      	str	r0, [r7, #12]
 8004fb8:	60b9      	str	r1, [r7, #8]
 8004fba:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	4a07      	ldr	r2, [pc, #28]	; (8004fdc <vApplicationGetIdleTaskMemory+0x2c>)
 8004fc0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004fc2:	68bb      	ldr	r3, [r7, #8]
 8004fc4:	4a06      	ldr	r2, [pc, #24]	; (8004fe0 <vApplicationGetIdleTaskMemory+0x30>)
 8004fc6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	2280      	movs	r2, #128	; 0x80
 8004fcc:	601a      	str	r2, [r3, #0]
}
 8004fce:	bf00      	nop
 8004fd0:	3714      	adds	r7, #20
 8004fd2:	46bd      	mov	sp, r7
 8004fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd8:	4770      	bx	lr
 8004fda:	bf00      	nop
 8004fdc:	200000c8 	.word	0x200000c8
 8004fe0:	20000124 	.word	0x20000124

08004fe4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004fe4:	b480      	push	{r7}
 8004fe6:	b085      	sub	sp, #20
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	60f8      	str	r0, [r7, #12]
 8004fec:	60b9      	str	r1, [r7, #8]
 8004fee:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	4a07      	ldr	r2, [pc, #28]	; (8005010 <vApplicationGetTimerTaskMemory+0x2c>)
 8004ff4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004ff6:	68bb      	ldr	r3, [r7, #8]
 8004ff8:	4a06      	ldr	r2, [pc, #24]	; (8005014 <vApplicationGetTimerTaskMemory+0x30>)
 8004ffa:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005002:	601a      	str	r2, [r3, #0]
}
 8005004:	bf00      	nop
 8005006:	3714      	adds	r7, #20
 8005008:	46bd      	mov	sp, r7
 800500a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500e:	4770      	bx	lr
 8005010:	20000324 	.word	0x20000324
 8005014:	20000380 	.word	0x20000380

08005018 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005018:	b480      	push	{r7}
 800501a:	b083      	sub	sp, #12
 800501c:	af00      	add	r7, sp, #0
 800501e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	f103 0208 	add.w	r2, r3, #8
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	f04f 32ff 	mov.w	r2, #4294967295
 8005030:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	f103 0208 	add.w	r2, r3, #8
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	f103 0208 	add.w	r2, r3, #8
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	2200      	movs	r2, #0
 800504a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800504c:	bf00      	nop
 800504e:	370c      	adds	r7, #12
 8005050:	46bd      	mov	sp, r7
 8005052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005056:	4770      	bx	lr

08005058 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005058:	b480      	push	{r7}
 800505a:	b083      	sub	sp, #12
 800505c:	af00      	add	r7, sp, #0
 800505e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	2200      	movs	r2, #0
 8005064:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005066:	bf00      	nop
 8005068:	370c      	adds	r7, #12
 800506a:	46bd      	mov	sp, r7
 800506c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005070:	4770      	bx	lr

08005072 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005072:	b480      	push	{r7}
 8005074:	b085      	sub	sp, #20
 8005076:	af00      	add	r7, sp, #0
 8005078:	6078      	str	r0, [r7, #4]
 800507a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	685b      	ldr	r3, [r3, #4]
 8005080:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005082:	683b      	ldr	r3, [r7, #0]
 8005084:	68fa      	ldr	r2, [r7, #12]
 8005086:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	689a      	ldr	r2, [r3, #8]
 800508c:	683b      	ldr	r3, [r7, #0]
 800508e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	689b      	ldr	r3, [r3, #8]
 8005094:	683a      	ldr	r2, [r7, #0]
 8005096:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	683a      	ldr	r2, [r7, #0]
 800509c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800509e:	683b      	ldr	r3, [r7, #0]
 80050a0:	687a      	ldr	r2, [r7, #4]
 80050a2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	1c5a      	adds	r2, r3, #1
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	601a      	str	r2, [r3, #0]
}
 80050ae:	bf00      	nop
 80050b0:	3714      	adds	r7, #20
 80050b2:	46bd      	mov	sp, r7
 80050b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b8:	4770      	bx	lr

080050ba <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80050ba:	b480      	push	{r7}
 80050bc:	b085      	sub	sp, #20
 80050be:	af00      	add	r7, sp, #0
 80050c0:	6078      	str	r0, [r7, #4]
 80050c2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80050c4:	683b      	ldr	r3, [r7, #0]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80050ca:	68bb      	ldr	r3, [r7, #8]
 80050cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050d0:	d103      	bne.n	80050da <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	691b      	ldr	r3, [r3, #16]
 80050d6:	60fb      	str	r3, [r7, #12]
 80050d8:	e00c      	b.n	80050f4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	3308      	adds	r3, #8
 80050de:	60fb      	str	r3, [r7, #12]
 80050e0:	e002      	b.n	80050e8 <vListInsert+0x2e>
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	685b      	ldr	r3, [r3, #4]
 80050e6:	60fb      	str	r3, [r7, #12]
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	685b      	ldr	r3, [r3, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	68ba      	ldr	r2, [r7, #8]
 80050f0:	429a      	cmp	r2, r3
 80050f2:	d2f6      	bcs.n	80050e2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	685a      	ldr	r2, [r3, #4]
 80050f8:	683b      	ldr	r3, [r7, #0]
 80050fa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80050fc:	683b      	ldr	r3, [r7, #0]
 80050fe:	685b      	ldr	r3, [r3, #4]
 8005100:	683a      	ldr	r2, [r7, #0]
 8005102:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005104:	683b      	ldr	r3, [r7, #0]
 8005106:	68fa      	ldr	r2, [r7, #12]
 8005108:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	683a      	ldr	r2, [r7, #0]
 800510e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8005110:	683b      	ldr	r3, [r7, #0]
 8005112:	687a      	ldr	r2, [r7, #4]
 8005114:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	1c5a      	adds	r2, r3, #1
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	601a      	str	r2, [r3, #0]
}
 8005120:	bf00      	nop
 8005122:	3714      	adds	r7, #20
 8005124:	46bd      	mov	sp, r7
 8005126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512a:	4770      	bx	lr

0800512c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800512c:	b480      	push	{r7}
 800512e:	b085      	sub	sp, #20
 8005130:	af00      	add	r7, sp, #0
 8005132:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	691b      	ldr	r3, [r3, #16]
 8005138:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	685b      	ldr	r3, [r3, #4]
 800513e:	687a      	ldr	r2, [r7, #4]
 8005140:	6892      	ldr	r2, [r2, #8]
 8005142:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	689b      	ldr	r3, [r3, #8]
 8005148:	687a      	ldr	r2, [r7, #4]
 800514a:	6852      	ldr	r2, [r2, #4]
 800514c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	685b      	ldr	r3, [r3, #4]
 8005152:	687a      	ldr	r2, [r7, #4]
 8005154:	429a      	cmp	r2, r3
 8005156:	d103      	bne.n	8005160 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	689a      	ldr	r2, [r3, #8]
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	2200      	movs	r2, #0
 8005164:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	1e5a      	subs	r2, r3, #1
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	681b      	ldr	r3, [r3, #0]
}
 8005174:	4618      	mov	r0, r3
 8005176:	3714      	adds	r7, #20
 8005178:	46bd      	mov	sp, r7
 800517a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517e:	4770      	bx	lr

08005180 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005180:	b580      	push	{r7, lr}
 8005182:	b084      	sub	sp, #16
 8005184:	af00      	add	r7, sp, #0
 8005186:	6078      	str	r0, [r7, #4]
 8005188:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	2b00      	cmp	r3, #0
 8005192:	d109      	bne.n	80051a8 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005194:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005198:	f383 8811 	msr	BASEPRI, r3
 800519c:	f3bf 8f6f 	isb	sy
 80051a0:	f3bf 8f4f 	dsb	sy
 80051a4:	60bb      	str	r3, [r7, #8]
 80051a6:	e7fe      	b.n	80051a6 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 80051a8:	f002 faf8 	bl	800779c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	681a      	ldr	r2, [r3, #0]
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051b4:	68f9      	ldr	r1, [r7, #12]
 80051b6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80051b8:	fb01 f303 	mul.w	r3, r1, r3
 80051bc:	441a      	add	r2, r3
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	2200      	movs	r2, #0
 80051c6:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	681a      	ldr	r2, [r3, #0]
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	681a      	ldr	r2, [r3, #0]
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051d8:	3b01      	subs	r3, #1
 80051da:	68f9      	ldr	r1, [r7, #12]
 80051dc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80051de:	fb01 f303 	mul.w	r3, r1, r3
 80051e2:	441a      	add	r2, r3
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	22ff      	movs	r2, #255	; 0xff
 80051ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	22ff      	movs	r2, #255	; 0xff
 80051f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80051f8:	683b      	ldr	r3, [r7, #0]
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d114      	bne.n	8005228 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	691b      	ldr	r3, [r3, #16]
 8005202:	2b00      	cmp	r3, #0
 8005204:	d01a      	beq.n	800523c <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	3310      	adds	r3, #16
 800520a:	4618      	mov	r0, r3
 800520c:	f001 faf8 	bl	8006800 <xTaskRemoveFromEventList>
 8005210:	4603      	mov	r3, r0
 8005212:	2b00      	cmp	r3, #0
 8005214:	d012      	beq.n	800523c <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005216:	4b0d      	ldr	r3, [pc, #52]	; (800524c <xQueueGenericReset+0xcc>)
 8005218:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800521c:	601a      	str	r2, [r3, #0]
 800521e:	f3bf 8f4f 	dsb	sy
 8005222:	f3bf 8f6f 	isb	sy
 8005226:	e009      	b.n	800523c <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	3310      	adds	r3, #16
 800522c:	4618      	mov	r0, r3
 800522e:	f7ff fef3 	bl	8005018 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	3324      	adds	r3, #36	; 0x24
 8005236:	4618      	mov	r0, r3
 8005238:	f7ff feee 	bl	8005018 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800523c:	f002 fadc 	bl	80077f8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005240:	2301      	movs	r3, #1
}
 8005242:	4618      	mov	r0, r3
 8005244:	3710      	adds	r7, #16
 8005246:	46bd      	mov	sp, r7
 8005248:	bd80      	pop	{r7, pc}
 800524a:	bf00      	nop
 800524c:	e000ed04 	.word	0xe000ed04

08005250 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005250:	b580      	push	{r7, lr}
 8005252:	b08e      	sub	sp, #56	; 0x38
 8005254:	af02      	add	r7, sp, #8
 8005256:	60f8      	str	r0, [r7, #12]
 8005258:	60b9      	str	r1, [r7, #8]
 800525a:	607a      	str	r2, [r7, #4]
 800525c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	2b00      	cmp	r3, #0
 8005262:	d109      	bne.n	8005278 <xQueueGenericCreateStatic+0x28>
 8005264:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005268:	f383 8811 	msr	BASEPRI, r3
 800526c:	f3bf 8f6f 	isb	sy
 8005270:	f3bf 8f4f 	dsb	sy
 8005274:	62bb      	str	r3, [r7, #40]	; 0x28
 8005276:	e7fe      	b.n	8005276 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005278:	683b      	ldr	r3, [r7, #0]
 800527a:	2b00      	cmp	r3, #0
 800527c:	d109      	bne.n	8005292 <xQueueGenericCreateStatic+0x42>
 800527e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005282:	f383 8811 	msr	BASEPRI, r3
 8005286:	f3bf 8f6f 	isb	sy
 800528a:	f3bf 8f4f 	dsb	sy
 800528e:	627b      	str	r3, [r7, #36]	; 0x24
 8005290:	e7fe      	b.n	8005290 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	2b00      	cmp	r3, #0
 8005296:	d002      	beq.n	800529e <xQueueGenericCreateStatic+0x4e>
 8005298:	68bb      	ldr	r3, [r7, #8]
 800529a:	2b00      	cmp	r3, #0
 800529c:	d001      	beq.n	80052a2 <xQueueGenericCreateStatic+0x52>
 800529e:	2301      	movs	r3, #1
 80052a0:	e000      	b.n	80052a4 <xQueueGenericCreateStatic+0x54>
 80052a2:	2300      	movs	r3, #0
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d109      	bne.n	80052bc <xQueueGenericCreateStatic+0x6c>
 80052a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052ac:	f383 8811 	msr	BASEPRI, r3
 80052b0:	f3bf 8f6f 	isb	sy
 80052b4:	f3bf 8f4f 	dsb	sy
 80052b8:	623b      	str	r3, [r7, #32]
 80052ba:	e7fe      	b.n	80052ba <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d102      	bne.n	80052c8 <xQueueGenericCreateStatic+0x78>
 80052c2:	68bb      	ldr	r3, [r7, #8]
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d101      	bne.n	80052cc <xQueueGenericCreateStatic+0x7c>
 80052c8:	2301      	movs	r3, #1
 80052ca:	e000      	b.n	80052ce <xQueueGenericCreateStatic+0x7e>
 80052cc:	2300      	movs	r3, #0
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d109      	bne.n	80052e6 <xQueueGenericCreateStatic+0x96>
 80052d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052d6:	f383 8811 	msr	BASEPRI, r3
 80052da:	f3bf 8f6f 	isb	sy
 80052de:	f3bf 8f4f 	dsb	sy
 80052e2:	61fb      	str	r3, [r7, #28]
 80052e4:	e7fe      	b.n	80052e4 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80052e6:	2350      	movs	r3, #80	; 0x50
 80052e8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80052ea:	697b      	ldr	r3, [r7, #20]
 80052ec:	2b50      	cmp	r3, #80	; 0x50
 80052ee:	d009      	beq.n	8005304 <xQueueGenericCreateStatic+0xb4>
 80052f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052f4:	f383 8811 	msr	BASEPRI, r3
 80052f8:	f3bf 8f6f 	isb	sy
 80052fc:	f3bf 8f4f 	dsb	sy
 8005300:	61bb      	str	r3, [r7, #24]
 8005302:	e7fe      	b.n	8005302 <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005304:	683b      	ldr	r3, [r7, #0]
 8005306:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8005308:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800530a:	2b00      	cmp	r3, #0
 800530c:	d00d      	beq.n	800532a <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800530e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005310:	2201      	movs	r2, #1
 8005312:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005316:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800531a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800531c:	9300      	str	r3, [sp, #0]
 800531e:	4613      	mov	r3, r2
 8005320:	687a      	ldr	r2, [r7, #4]
 8005322:	68b9      	ldr	r1, [r7, #8]
 8005324:	68f8      	ldr	r0, [r7, #12]
 8005326:	f000 f842 	bl	80053ae <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800532a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800532c:	4618      	mov	r0, r3
 800532e:	3730      	adds	r7, #48	; 0x30
 8005330:	46bd      	mov	sp, r7
 8005332:	bd80      	pop	{r7, pc}

08005334 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8005334:	b580      	push	{r7, lr}
 8005336:	b08a      	sub	sp, #40	; 0x28
 8005338:	af02      	add	r7, sp, #8
 800533a:	60f8      	str	r0, [r7, #12]
 800533c:	60b9      	str	r1, [r7, #8]
 800533e:	4613      	mov	r3, r2
 8005340:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	2b00      	cmp	r3, #0
 8005346:	d109      	bne.n	800535c <xQueueGenericCreate+0x28>
 8005348:	f04f 0350 	mov.w	r3, #80	; 0x50
 800534c:	f383 8811 	msr	BASEPRI, r3
 8005350:	f3bf 8f6f 	isb	sy
 8005354:	f3bf 8f4f 	dsb	sy
 8005358:	613b      	str	r3, [r7, #16]
 800535a:	e7fe      	b.n	800535a <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800535c:	68bb      	ldr	r3, [r7, #8]
 800535e:	2b00      	cmp	r3, #0
 8005360:	d102      	bne.n	8005368 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8005362:	2300      	movs	r3, #0
 8005364:	61fb      	str	r3, [r7, #28]
 8005366:	e004      	b.n	8005372 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	68ba      	ldr	r2, [r7, #8]
 800536c:	fb02 f303 	mul.w	r3, r2, r3
 8005370:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8005372:	69fb      	ldr	r3, [r7, #28]
 8005374:	3350      	adds	r3, #80	; 0x50
 8005376:	4618      	mov	r0, r3
 8005378:	f002 fb2a 	bl	80079d0 <pvPortMalloc>
 800537c:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800537e:	69bb      	ldr	r3, [r7, #24]
 8005380:	2b00      	cmp	r3, #0
 8005382:	d00f      	beq.n	80053a4 <xQueueGenericCreate+0x70>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8005384:	69bb      	ldr	r3, [r7, #24]
 8005386:	3350      	adds	r3, #80	; 0x50
 8005388:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800538a:	69bb      	ldr	r3, [r7, #24]
 800538c:	2200      	movs	r2, #0
 800538e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005392:	79fa      	ldrb	r2, [r7, #7]
 8005394:	69bb      	ldr	r3, [r7, #24]
 8005396:	9300      	str	r3, [sp, #0]
 8005398:	4613      	mov	r3, r2
 800539a:	697a      	ldr	r2, [r7, #20]
 800539c:	68b9      	ldr	r1, [r7, #8]
 800539e:	68f8      	ldr	r0, [r7, #12]
 80053a0:	f000 f805 	bl	80053ae <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80053a4:	69bb      	ldr	r3, [r7, #24]
	}
 80053a6:	4618      	mov	r0, r3
 80053a8:	3720      	adds	r7, #32
 80053aa:	46bd      	mov	sp, r7
 80053ac:	bd80      	pop	{r7, pc}

080053ae <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80053ae:	b580      	push	{r7, lr}
 80053b0:	b084      	sub	sp, #16
 80053b2:	af00      	add	r7, sp, #0
 80053b4:	60f8      	str	r0, [r7, #12]
 80053b6:	60b9      	str	r1, [r7, #8]
 80053b8:	607a      	str	r2, [r7, #4]
 80053ba:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80053bc:	68bb      	ldr	r3, [r7, #8]
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d103      	bne.n	80053ca <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80053c2:	69bb      	ldr	r3, [r7, #24]
 80053c4:	69ba      	ldr	r2, [r7, #24]
 80053c6:	601a      	str	r2, [r3, #0]
 80053c8:	e002      	b.n	80053d0 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80053ca:	69bb      	ldr	r3, [r7, #24]
 80053cc:	687a      	ldr	r2, [r7, #4]
 80053ce:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80053d0:	69bb      	ldr	r3, [r7, #24]
 80053d2:	68fa      	ldr	r2, [r7, #12]
 80053d4:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80053d6:	69bb      	ldr	r3, [r7, #24]
 80053d8:	68ba      	ldr	r2, [r7, #8]
 80053da:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80053dc:	2101      	movs	r1, #1
 80053de:	69b8      	ldr	r0, [r7, #24]
 80053e0:	f7ff fece 	bl	8005180 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80053e4:	69bb      	ldr	r3, [r7, #24]
 80053e6:	78fa      	ldrb	r2, [r7, #3]
 80053e8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80053ec:	bf00      	nop
 80053ee:	3710      	adds	r7, #16
 80053f0:	46bd      	mov	sp, r7
 80053f2:	bd80      	pop	{r7, pc}

080053f4 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80053f4:	b580      	push	{r7, lr}
 80053f6:	b082      	sub	sp, #8
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d00e      	beq.n	8005420 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	2200      	movs	r2, #0
 8005406:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	2200      	movs	r2, #0
 800540c:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	2200      	movs	r2, #0
 8005412:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8005414:	2300      	movs	r3, #0
 8005416:	2200      	movs	r2, #0
 8005418:	2100      	movs	r1, #0
 800541a:	6878      	ldr	r0, [r7, #4]
 800541c:	f000 f81c 	bl	8005458 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8005420:	bf00      	nop
 8005422:	3708      	adds	r7, #8
 8005424:	46bd      	mov	sp, r7
 8005426:	bd80      	pop	{r7, pc}

08005428 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8005428:	b580      	push	{r7, lr}
 800542a:	b086      	sub	sp, #24
 800542c:	af00      	add	r7, sp, #0
 800542e:	4603      	mov	r3, r0
 8005430:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8005432:	2301      	movs	r3, #1
 8005434:	617b      	str	r3, [r7, #20]
 8005436:	2300      	movs	r3, #0
 8005438:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800543a:	79fb      	ldrb	r3, [r7, #7]
 800543c:	461a      	mov	r2, r3
 800543e:	6939      	ldr	r1, [r7, #16]
 8005440:	6978      	ldr	r0, [r7, #20]
 8005442:	f7ff ff77 	bl	8005334 <xQueueGenericCreate>
 8005446:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 8005448:	68f8      	ldr	r0, [r7, #12]
 800544a:	f7ff ffd3 	bl	80053f4 <prvInitialiseMutex>

		return pxNewQueue;
 800544e:	68fb      	ldr	r3, [r7, #12]
	}
 8005450:	4618      	mov	r0, r3
 8005452:	3718      	adds	r7, #24
 8005454:	46bd      	mov	sp, r7
 8005456:	bd80      	pop	{r7, pc}

08005458 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005458:	b580      	push	{r7, lr}
 800545a:	b08e      	sub	sp, #56	; 0x38
 800545c:	af00      	add	r7, sp, #0
 800545e:	60f8      	str	r0, [r7, #12]
 8005460:	60b9      	str	r1, [r7, #8]
 8005462:	607a      	str	r2, [r7, #4]
 8005464:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005466:	2300      	movs	r3, #0
 8005468:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800546e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005470:	2b00      	cmp	r3, #0
 8005472:	d109      	bne.n	8005488 <xQueueGenericSend+0x30>
 8005474:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005478:	f383 8811 	msr	BASEPRI, r3
 800547c:	f3bf 8f6f 	isb	sy
 8005480:	f3bf 8f4f 	dsb	sy
 8005484:	62bb      	str	r3, [r7, #40]	; 0x28
 8005486:	e7fe      	b.n	8005486 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005488:	68bb      	ldr	r3, [r7, #8]
 800548a:	2b00      	cmp	r3, #0
 800548c:	d103      	bne.n	8005496 <xQueueGenericSend+0x3e>
 800548e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005492:	2b00      	cmp	r3, #0
 8005494:	d101      	bne.n	800549a <xQueueGenericSend+0x42>
 8005496:	2301      	movs	r3, #1
 8005498:	e000      	b.n	800549c <xQueueGenericSend+0x44>
 800549a:	2300      	movs	r3, #0
 800549c:	2b00      	cmp	r3, #0
 800549e:	d109      	bne.n	80054b4 <xQueueGenericSend+0x5c>
 80054a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054a4:	f383 8811 	msr	BASEPRI, r3
 80054a8:	f3bf 8f6f 	isb	sy
 80054ac:	f3bf 8f4f 	dsb	sy
 80054b0:	627b      	str	r3, [r7, #36]	; 0x24
 80054b2:	e7fe      	b.n	80054b2 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80054b4:	683b      	ldr	r3, [r7, #0]
 80054b6:	2b02      	cmp	r3, #2
 80054b8:	d103      	bne.n	80054c2 <xQueueGenericSend+0x6a>
 80054ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054be:	2b01      	cmp	r3, #1
 80054c0:	d101      	bne.n	80054c6 <xQueueGenericSend+0x6e>
 80054c2:	2301      	movs	r3, #1
 80054c4:	e000      	b.n	80054c8 <xQueueGenericSend+0x70>
 80054c6:	2300      	movs	r3, #0
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d109      	bne.n	80054e0 <xQueueGenericSend+0x88>
 80054cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054d0:	f383 8811 	msr	BASEPRI, r3
 80054d4:	f3bf 8f6f 	isb	sy
 80054d8:	f3bf 8f4f 	dsb	sy
 80054dc:	623b      	str	r3, [r7, #32]
 80054de:	e7fe      	b.n	80054de <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80054e0:	f001 fb4a 	bl	8006b78 <xTaskGetSchedulerState>
 80054e4:	4603      	mov	r3, r0
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d102      	bne.n	80054f0 <xQueueGenericSend+0x98>
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d101      	bne.n	80054f4 <xQueueGenericSend+0x9c>
 80054f0:	2301      	movs	r3, #1
 80054f2:	e000      	b.n	80054f6 <xQueueGenericSend+0x9e>
 80054f4:	2300      	movs	r3, #0
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d109      	bne.n	800550e <xQueueGenericSend+0xb6>
 80054fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054fe:	f383 8811 	msr	BASEPRI, r3
 8005502:	f3bf 8f6f 	isb	sy
 8005506:	f3bf 8f4f 	dsb	sy
 800550a:	61fb      	str	r3, [r7, #28]
 800550c:	e7fe      	b.n	800550c <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800550e:	f002 f945 	bl	800779c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005512:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005514:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005516:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005518:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800551a:	429a      	cmp	r2, r3
 800551c:	d302      	bcc.n	8005524 <xQueueGenericSend+0xcc>
 800551e:	683b      	ldr	r3, [r7, #0]
 8005520:	2b02      	cmp	r3, #2
 8005522:	d129      	bne.n	8005578 <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005524:	683a      	ldr	r2, [r7, #0]
 8005526:	68b9      	ldr	r1, [r7, #8]
 8005528:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800552a:	f000 fc26 	bl	8005d7a <prvCopyDataToQueue>
 800552e:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005530:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005534:	2b00      	cmp	r3, #0
 8005536:	d010      	beq.n	800555a <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005538:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800553a:	3324      	adds	r3, #36	; 0x24
 800553c:	4618      	mov	r0, r3
 800553e:	f001 f95f 	bl	8006800 <xTaskRemoveFromEventList>
 8005542:	4603      	mov	r3, r0
 8005544:	2b00      	cmp	r3, #0
 8005546:	d013      	beq.n	8005570 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005548:	4b3f      	ldr	r3, [pc, #252]	; (8005648 <xQueueGenericSend+0x1f0>)
 800554a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800554e:	601a      	str	r2, [r3, #0]
 8005550:	f3bf 8f4f 	dsb	sy
 8005554:	f3bf 8f6f 	isb	sy
 8005558:	e00a      	b.n	8005570 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800555a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800555c:	2b00      	cmp	r3, #0
 800555e:	d007      	beq.n	8005570 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005560:	4b39      	ldr	r3, [pc, #228]	; (8005648 <xQueueGenericSend+0x1f0>)
 8005562:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005566:	601a      	str	r2, [r3, #0]
 8005568:	f3bf 8f4f 	dsb	sy
 800556c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005570:	f002 f942 	bl	80077f8 <vPortExitCritical>
				return pdPASS;
 8005574:	2301      	movs	r3, #1
 8005576:	e063      	b.n	8005640 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	2b00      	cmp	r3, #0
 800557c:	d103      	bne.n	8005586 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800557e:	f002 f93b 	bl	80077f8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005582:	2300      	movs	r3, #0
 8005584:	e05c      	b.n	8005640 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005586:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005588:	2b00      	cmp	r3, #0
 800558a:	d106      	bne.n	800559a <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800558c:	f107 0314 	add.w	r3, r7, #20
 8005590:	4618      	mov	r0, r3
 8005592:	f001 f997 	bl	80068c4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005596:	2301      	movs	r3, #1
 8005598:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800559a:	f002 f92d 	bl	80077f8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800559e:	f000 ff0d 	bl	80063bc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80055a2:	f002 f8fb 	bl	800779c <vPortEnterCritical>
 80055a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055a8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80055ac:	b25b      	sxtb	r3, r3
 80055ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055b2:	d103      	bne.n	80055bc <xQueueGenericSend+0x164>
 80055b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055b6:	2200      	movs	r2, #0
 80055b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80055bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055be:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80055c2:	b25b      	sxtb	r3, r3
 80055c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055c8:	d103      	bne.n	80055d2 <xQueueGenericSend+0x17a>
 80055ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055cc:	2200      	movs	r2, #0
 80055ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80055d2:	f002 f911 	bl	80077f8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80055d6:	1d3a      	adds	r2, r7, #4
 80055d8:	f107 0314 	add.w	r3, r7, #20
 80055dc:	4611      	mov	r1, r2
 80055de:	4618      	mov	r0, r3
 80055e0:	f001 f986 	bl	80068f0 <xTaskCheckForTimeOut>
 80055e4:	4603      	mov	r3, r0
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d124      	bne.n	8005634 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80055ea:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80055ec:	f000 fcbd 	bl	8005f6a <prvIsQueueFull>
 80055f0:	4603      	mov	r3, r0
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d018      	beq.n	8005628 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80055f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055f8:	3310      	adds	r3, #16
 80055fa:	687a      	ldr	r2, [r7, #4]
 80055fc:	4611      	mov	r1, r2
 80055fe:	4618      	mov	r0, r3
 8005600:	f001 f8b0 	bl	8006764 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005604:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005606:	f000 fc48 	bl	8005e9a <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800560a:	f000 fee5 	bl	80063d8 <xTaskResumeAll>
 800560e:	4603      	mov	r3, r0
 8005610:	2b00      	cmp	r3, #0
 8005612:	f47f af7c 	bne.w	800550e <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8005616:	4b0c      	ldr	r3, [pc, #48]	; (8005648 <xQueueGenericSend+0x1f0>)
 8005618:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800561c:	601a      	str	r2, [r3, #0]
 800561e:	f3bf 8f4f 	dsb	sy
 8005622:	f3bf 8f6f 	isb	sy
 8005626:	e772      	b.n	800550e <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005628:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800562a:	f000 fc36 	bl	8005e9a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800562e:	f000 fed3 	bl	80063d8 <xTaskResumeAll>
 8005632:	e76c      	b.n	800550e <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005634:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005636:	f000 fc30 	bl	8005e9a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800563a:	f000 fecd 	bl	80063d8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800563e:	2300      	movs	r3, #0
		}
	}
}
 8005640:	4618      	mov	r0, r3
 8005642:	3738      	adds	r7, #56	; 0x38
 8005644:	46bd      	mov	sp, r7
 8005646:	bd80      	pop	{r7, pc}
 8005648:	e000ed04 	.word	0xe000ed04

0800564c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800564c:	b580      	push	{r7, lr}
 800564e:	b08e      	sub	sp, #56	; 0x38
 8005650:	af00      	add	r7, sp, #0
 8005652:	60f8      	str	r0, [r7, #12]
 8005654:	60b9      	str	r1, [r7, #8]
 8005656:	607a      	str	r2, [r7, #4]
 8005658:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800565e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005660:	2b00      	cmp	r3, #0
 8005662:	d109      	bne.n	8005678 <xQueueGenericSendFromISR+0x2c>
 8005664:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005668:	f383 8811 	msr	BASEPRI, r3
 800566c:	f3bf 8f6f 	isb	sy
 8005670:	f3bf 8f4f 	dsb	sy
 8005674:	627b      	str	r3, [r7, #36]	; 0x24
 8005676:	e7fe      	b.n	8005676 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005678:	68bb      	ldr	r3, [r7, #8]
 800567a:	2b00      	cmp	r3, #0
 800567c:	d103      	bne.n	8005686 <xQueueGenericSendFromISR+0x3a>
 800567e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005682:	2b00      	cmp	r3, #0
 8005684:	d101      	bne.n	800568a <xQueueGenericSendFromISR+0x3e>
 8005686:	2301      	movs	r3, #1
 8005688:	e000      	b.n	800568c <xQueueGenericSendFromISR+0x40>
 800568a:	2300      	movs	r3, #0
 800568c:	2b00      	cmp	r3, #0
 800568e:	d109      	bne.n	80056a4 <xQueueGenericSendFromISR+0x58>
 8005690:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005694:	f383 8811 	msr	BASEPRI, r3
 8005698:	f3bf 8f6f 	isb	sy
 800569c:	f3bf 8f4f 	dsb	sy
 80056a0:	623b      	str	r3, [r7, #32]
 80056a2:	e7fe      	b.n	80056a2 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80056a4:	683b      	ldr	r3, [r7, #0]
 80056a6:	2b02      	cmp	r3, #2
 80056a8:	d103      	bne.n	80056b2 <xQueueGenericSendFromISR+0x66>
 80056aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056ae:	2b01      	cmp	r3, #1
 80056b0:	d101      	bne.n	80056b6 <xQueueGenericSendFromISR+0x6a>
 80056b2:	2301      	movs	r3, #1
 80056b4:	e000      	b.n	80056b8 <xQueueGenericSendFromISR+0x6c>
 80056b6:	2300      	movs	r3, #0
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d109      	bne.n	80056d0 <xQueueGenericSendFromISR+0x84>
 80056bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056c0:	f383 8811 	msr	BASEPRI, r3
 80056c4:	f3bf 8f6f 	isb	sy
 80056c8:	f3bf 8f4f 	dsb	sy
 80056cc:	61fb      	str	r3, [r7, #28]
 80056ce:	e7fe      	b.n	80056ce <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80056d0:	f002 f940 	bl	8007954 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80056d4:	f3ef 8211 	mrs	r2, BASEPRI
 80056d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056dc:	f383 8811 	msr	BASEPRI, r3
 80056e0:	f3bf 8f6f 	isb	sy
 80056e4:	f3bf 8f4f 	dsb	sy
 80056e8:	61ba      	str	r2, [r7, #24]
 80056ea:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80056ec:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80056ee:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80056f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056f2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80056f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056f8:	429a      	cmp	r2, r3
 80056fa:	d302      	bcc.n	8005702 <xQueueGenericSendFromISR+0xb6>
 80056fc:	683b      	ldr	r3, [r7, #0]
 80056fe:	2b02      	cmp	r3, #2
 8005700:	d12c      	bne.n	800575c <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005702:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005704:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005708:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800570c:	683a      	ldr	r2, [r7, #0]
 800570e:	68b9      	ldr	r1, [r7, #8]
 8005710:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005712:	f000 fb32 	bl	8005d7a <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005716:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800571a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800571e:	d112      	bne.n	8005746 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005720:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005724:	2b00      	cmp	r3, #0
 8005726:	d016      	beq.n	8005756 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005728:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800572a:	3324      	adds	r3, #36	; 0x24
 800572c:	4618      	mov	r0, r3
 800572e:	f001 f867 	bl	8006800 <xTaskRemoveFromEventList>
 8005732:	4603      	mov	r3, r0
 8005734:	2b00      	cmp	r3, #0
 8005736:	d00e      	beq.n	8005756 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	2b00      	cmp	r3, #0
 800573c:	d00b      	beq.n	8005756 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	2201      	movs	r2, #1
 8005742:	601a      	str	r2, [r3, #0]
 8005744:	e007      	b.n	8005756 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005746:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800574a:	3301      	adds	r3, #1
 800574c:	b2db      	uxtb	r3, r3
 800574e:	b25a      	sxtb	r2, r3
 8005750:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005752:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005756:	2301      	movs	r3, #1
 8005758:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800575a:	e001      	b.n	8005760 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800575c:	2300      	movs	r3, #0
 800575e:	637b      	str	r3, [r7, #52]	; 0x34
 8005760:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005762:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005764:	693b      	ldr	r3, [r7, #16]
 8005766:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800576a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800576c:	4618      	mov	r0, r3
 800576e:	3738      	adds	r7, #56	; 0x38
 8005770:	46bd      	mov	sp, r7
 8005772:	bd80      	pop	{r7, pc}

08005774 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005774:	b580      	push	{r7, lr}
 8005776:	b08e      	sub	sp, #56	; 0x38
 8005778:	af00      	add	r7, sp, #0
 800577a:	6078      	str	r0, [r7, #4]
 800577c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8005782:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005784:	2b00      	cmp	r3, #0
 8005786:	d109      	bne.n	800579c <xQueueGiveFromISR+0x28>
	__asm volatile
 8005788:	f04f 0350 	mov.w	r3, #80	; 0x50
 800578c:	f383 8811 	msr	BASEPRI, r3
 8005790:	f3bf 8f6f 	isb	sy
 8005794:	f3bf 8f4f 	dsb	sy
 8005798:	623b      	str	r3, [r7, #32]
 800579a:	e7fe      	b.n	800579a <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800579c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800579e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d009      	beq.n	80057b8 <xQueueGiveFromISR+0x44>
 80057a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057a8:	f383 8811 	msr	BASEPRI, r3
 80057ac:	f3bf 8f6f 	isb	sy
 80057b0:	f3bf 8f4f 	dsb	sy
 80057b4:	61fb      	str	r3, [r7, #28]
 80057b6:	e7fe      	b.n	80057b6 <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 80057b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d103      	bne.n	80057c8 <xQueueGiveFromISR+0x54>
 80057c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057c2:	685b      	ldr	r3, [r3, #4]
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d101      	bne.n	80057cc <xQueueGiveFromISR+0x58>
 80057c8:	2301      	movs	r3, #1
 80057ca:	e000      	b.n	80057ce <xQueueGiveFromISR+0x5a>
 80057cc:	2300      	movs	r3, #0
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d109      	bne.n	80057e6 <xQueueGiveFromISR+0x72>
 80057d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057d6:	f383 8811 	msr	BASEPRI, r3
 80057da:	f3bf 8f6f 	isb	sy
 80057de:	f3bf 8f4f 	dsb	sy
 80057e2:	61bb      	str	r3, [r7, #24]
 80057e4:	e7fe      	b.n	80057e4 <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80057e6:	f002 f8b5 	bl	8007954 <vPortValidateInterruptPriority>
	__asm volatile
 80057ea:	f3ef 8211 	mrs	r2, BASEPRI
 80057ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057f2:	f383 8811 	msr	BASEPRI, r3
 80057f6:	f3bf 8f6f 	isb	sy
 80057fa:	f3bf 8f4f 	dsb	sy
 80057fe:	617a      	str	r2, [r7, #20]
 8005800:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8005802:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005804:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005806:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005808:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800580a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800580c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800580e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005810:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005812:	429a      	cmp	r2, r3
 8005814:	d22b      	bcs.n	800586e <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005816:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005818:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800581c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005820:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005822:	1c5a      	adds	r2, r3, #1
 8005824:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005826:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005828:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800582c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005830:	d112      	bne.n	8005858 <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005832:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005836:	2b00      	cmp	r3, #0
 8005838:	d016      	beq.n	8005868 <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800583a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800583c:	3324      	adds	r3, #36	; 0x24
 800583e:	4618      	mov	r0, r3
 8005840:	f000 ffde 	bl	8006800 <xTaskRemoveFromEventList>
 8005844:	4603      	mov	r3, r0
 8005846:	2b00      	cmp	r3, #0
 8005848:	d00e      	beq.n	8005868 <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800584a:	683b      	ldr	r3, [r7, #0]
 800584c:	2b00      	cmp	r3, #0
 800584e:	d00b      	beq.n	8005868 <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005850:	683b      	ldr	r3, [r7, #0]
 8005852:	2201      	movs	r2, #1
 8005854:	601a      	str	r2, [r3, #0]
 8005856:	e007      	b.n	8005868 <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005858:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800585c:	3301      	adds	r3, #1
 800585e:	b2db      	uxtb	r3, r3
 8005860:	b25a      	sxtb	r2, r3
 8005862:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005864:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005868:	2301      	movs	r3, #1
 800586a:	637b      	str	r3, [r7, #52]	; 0x34
 800586c:	e001      	b.n	8005872 <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800586e:	2300      	movs	r3, #0
 8005870:	637b      	str	r3, [r7, #52]	; 0x34
 8005872:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005874:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800587c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800587e:	4618      	mov	r0, r3
 8005880:	3738      	adds	r7, #56	; 0x38
 8005882:	46bd      	mov	sp, r7
 8005884:	bd80      	pop	{r7, pc}
	...

08005888 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005888:	b580      	push	{r7, lr}
 800588a:	b08c      	sub	sp, #48	; 0x30
 800588c:	af00      	add	r7, sp, #0
 800588e:	60f8      	str	r0, [r7, #12]
 8005890:	60b9      	str	r1, [r7, #8]
 8005892:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005894:	2300      	movs	r3, #0
 8005896:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800589c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d109      	bne.n	80058b6 <xQueueReceive+0x2e>
	__asm volatile
 80058a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058a6:	f383 8811 	msr	BASEPRI, r3
 80058aa:	f3bf 8f6f 	isb	sy
 80058ae:	f3bf 8f4f 	dsb	sy
 80058b2:	623b      	str	r3, [r7, #32]
 80058b4:	e7fe      	b.n	80058b4 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80058b6:	68bb      	ldr	r3, [r7, #8]
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d103      	bne.n	80058c4 <xQueueReceive+0x3c>
 80058bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d101      	bne.n	80058c8 <xQueueReceive+0x40>
 80058c4:	2301      	movs	r3, #1
 80058c6:	e000      	b.n	80058ca <xQueueReceive+0x42>
 80058c8:	2300      	movs	r3, #0
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d109      	bne.n	80058e2 <xQueueReceive+0x5a>
 80058ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058d2:	f383 8811 	msr	BASEPRI, r3
 80058d6:	f3bf 8f6f 	isb	sy
 80058da:	f3bf 8f4f 	dsb	sy
 80058de:	61fb      	str	r3, [r7, #28]
 80058e0:	e7fe      	b.n	80058e0 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80058e2:	f001 f949 	bl	8006b78 <xTaskGetSchedulerState>
 80058e6:	4603      	mov	r3, r0
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d102      	bne.n	80058f2 <xQueueReceive+0x6a>
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d101      	bne.n	80058f6 <xQueueReceive+0x6e>
 80058f2:	2301      	movs	r3, #1
 80058f4:	e000      	b.n	80058f8 <xQueueReceive+0x70>
 80058f6:	2300      	movs	r3, #0
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d109      	bne.n	8005910 <xQueueReceive+0x88>
 80058fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005900:	f383 8811 	msr	BASEPRI, r3
 8005904:	f3bf 8f6f 	isb	sy
 8005908:	f3bf 8f4f 	dsb	sy
 800590c:	61bb      	str	r3, [r7, #24]
 800590e:	e7fe      	b.n	800590e <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8005910:	f001 ff44 	bl	800779c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005914:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005916:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005918:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800591a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800591c:	2b00      	cmp	r3, #0
 800591e:	d01f      	beq.n	8005960 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005920:	68b9      	ldr	r1, [r7, #8]
 8005922:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005924:	f000 fa93 	bl	8005e4e <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800592a:	1e5a      	subs	r2, r3, #1
 800592c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800592e:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005930:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005932:	691b      	ldr	r3, [r3, #16]
 8005934:	2b00      	cmp	r3, #0
 8005936:	d00f      	beq.n	8005958 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005938:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800593a:	3310      	adds	r3, #16
 800593c:	4618      	mov	r0, r3
 800593e:	f000 ff5f 	bl	8006800 <xTaskRemoveFromEventList>
 8005942:	4603      	mov	r3, r0
 8005944:	2b00      	cmp	r3, #0
 8005946:	d007      	beq.n	8005958 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005948:	4b3c      	ldr	r3, [pc, #240]	; (8005a3c <xQueueReceive+0x1b4>)
 800594a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800594e:	601a      	str	r2, [r3, #0]
 8005950:	f3bf 8f4f 	dsb	sy
 8005954:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005958:	f001 ff4e 	bl	80077f8 <vPortExitCritical>
				return pdPASS;
 800595c:	2301      	movs	r3, #1
 800595e:	e069      	b.n	8005a34 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	2b00      	cmp	r3, #0
 8005964:	d103      	bne.n	800596e <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005966:	f001 ff47 	bl	80077f8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800596a:	2300      	movs	r3, #0
 800596c:	e062      	b.n	8005a34 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 800596e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005970:	2b00      	cmp	r3, #0
 8005972:	d106      	bne.n	8005982 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005974:	f107 0310 	add.w	r3, r7, #16
 8005978:	4618      	mov	r0, r3
 800597a:	f000 ffa3 	bl	80068c4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800597e:	2301      	movs	r3, #1
 8005980:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005982:	f001 ff39 	bl	80077f8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005986:	f000 fd19 	bl	80063bc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800598a:	f001 ff07 	bl	800779c <vPortEnterCritical>
 800598e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005990:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005994:	b25b      	sxtb	r3, r3
 8005996:	f1b3 3fff 	cmp.w	r3, #4294967295
 800599a:	d103      	bne.n	80059a4 <xQueueReceive+0x11c>
 800599c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800599e:	2200      	movs	r2, #0
 80059a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80059a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059a6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80059aa:	b25b      	sxtb	r3, r3
 80059ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059b0:	d103      	bne.n	80059ba <xQueueReceive+0x132>
 80059b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059b4:	2200      	movs	r2, #0
 80059b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80059ba:	f001 ff1d 	bl	80077f8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80059be:	1d3a      	adds	r2, r7, #4
 80059c0:	f107 0310 	add.w	r3, r7, #16
 80059c4:	4611      	mov	r1, r2
 80059c6:	4618      	mov	r0, r3
 80059c8:	f000 ff92 	bl	80068f0 <xTaskCheckForTimeOut>
 80059cc:	4603      	mov	r3, r0
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d123      	bne.n	8005a1a <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80059d2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80059d4:	f000 fab3 	bl	8005f3e <prvIsQueueEmpty>
 80059d8:	4603      	mov	r3, r0
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d017      	beq.n	8005a0e <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80059de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059e0:	3324      	adds	r3, #36	; 0x24
 80059e2:	687a      	ldr	r2, [r7, #4]
 80059e4:	4611      	mov	r1, r2
 80059e6:	4618      	mov	r0, r3
 80059e8:	f000 febc 	bl	8006764 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80059ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80059ee:	f000 fa54 	bl	8005e9a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80059f2:	f000 fcf1 	bl	80063d8 <xTaskResumeAll>
 80059f6:	4603      	mov	r3, r0
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d189      	bne.n	8005910 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 80059fc:	4b0f      	ldr	r3, [pc, #60]	; (8005a3c <xQueueReceive+0x1b4>)
 80059fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a02:	601a      	str	r2, [r3, #0]
 8005a04:	f3bf 8f4f 	dsb	sy
 8005a08:	f3bf 8f6f 	isb	sy
 8005a0c:	e780      	b.n	8005910 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005a0e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005a10:	f000 fa43 	bl	8005e9a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005a14:	f000 fce0 	bl	80063d8 <xTaskResumeAll>
 8005a18:	e77a      	b.n	8005910 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005a1a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005a1c:	f000 fa3d 	bl	8005e9a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005a20:	f000 fcda 	bl	80063d8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005a24:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005a26:	f000 fa8a 	bl	8005f3e <prvIsQueueEmpty>
 8005a2a:	4603      	mov	r3, r0
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	f43f af6f 	beq.w	8005910 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005a32:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8005a34:	4618      	mov	r0, r3
 8005a36:	3730      	adds	r7, #48	; 0x30
 8005a38:	46bd      	mov	sp, r7
 8005a3a:	bd80      	pop	{r7, pc}
 8005a3c:	e000ed04 	.word	0xe000ed04

08005a40 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8005a40:	b580      	push	{r7, lr}
 8005a42:	b08e      	sub	sp, #56	; 0x38
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	6078      	str	r0, [r7, #4]
 8005a48:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8005a4a:	2300      	movs	r3, #0
 8005a4c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8005a52:	2300      	movs	r3, #0
 8005a54:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005a56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d109      	bne.n	8005a70 <xQueueSemaphoreTake+0x30>
 8005a5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a60:	f383 8811 	msr	BASEPRI, r3
 8005a64:	f3bf 8f6f 	isb	sy
 8005a68:	f3bf 8f4f 	dsb	sy
 8005a6c:	623b      	str	r3, [r7, #32]
 8005a6e:	e7fe      	b.n	8005a6e <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005a70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d009      	beq.n	8005a8c <xQueueSemaphoreTake+0x4c>
 8005a78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a7c:	f383 8811 	msr	BASEPRI, r3
 8005a80:	f3bf 8f6f 	isb	sy
 8005a84:	f3bf 8f4f 	dsb	sy
 8005a88:	61fb      	str	r3, [r7, #28]
 8005a8a:	e7fe      	b.n	8005a8a <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005a8c:	f001 f874 	bl	8006b78 <xTaskGetSchedulerState>
 8005a90:	4603      	mov	r3, r0
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d102      	bne.n	8005a9c <xQueueSemaphoreTake+0x5c>
 8005a96:	683b      	ldr	r3, [r7, #0]
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d101      	bne.n	8005aa0 <xQueueSemaphoreTake+0x60>
 8005a9c:	2301      	movs	r3, #1
 8005a9e:	e000      	b.n	8005aa2 <xQueueSemaphoreTake+0x62>
 8005aa0:	2300      	movs	r3, #0
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d109      	bne.n	8005aba <xQueueSemaphoreTake+0x7a>
 8005aa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005aaa:	f383 8811 	msr	BASEPRI, r3
 8005aae:	f3bf 8f6f 	isb	sy
 8005ab2:	f3bf 8f4f 	dsb	sy
 8005ab6:	61bb      	str	r3, [r7, #24]
 8005ab8:	e7fe      	b.n	8005ab8 <xQueueSemaphoreTake+0x78>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8005aba:	f001 fe6f 	bl	800779c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8005abe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ac0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ac2:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8005ac4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d024      	beq.n	8005b14 <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8005aca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005acc:	1e5a      	subs	r2, r3, #1
 8005ace:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ad0:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005ad2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d104      	bne.n	8005ae4 <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8005ada:	f001 f9c9 	bl	8006e70 <pvTaskIncrementMutexHeldCount>
 8005ade:	4602      	mov	r2, r0
 8005ae0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ae2:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005ae4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ae6:	691b      	ldr	r3, [r3, #16]
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d00f      	beq.n	8005b0c <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005aec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005aee:	3310      	adds	r3, #16
 8005af0:	4618      	mov	r0, r3
 8005af2:	f000 fe85 	bl	8006800 <xTaskRemoveFromEventList>
 8005af6:	4603      	mov	r3, r0
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d007      	beq.n	8005b0c <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005afc:	4b53      	ldr	r3, [pc, #332]	; (8005c4c <xQueueSemaphoreTake+0x20c>)
 8005afe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b02:	601a      	str	r2, [r3, #0]
 8005b04:	f3bf 8f4f 	dsb	sy
 8005b08:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005b0c:	f001 fe74 	bl	80077f8 <vPortExitCritical>
				return pdPASS;
 8005b10:	2301      	movs	r3, #1
 8005b12:	e096      	b.n	8005c42 <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005b14:	683b      	ldr	r3, [r7, #0]
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d110      	bne.n	8005b3c <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8005b1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d009      	beq.n	8005b34 <xQueueSemaphoreTake+0xf4>
 8005b20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b24:	f383 8811 	msr	BASEPRI, r3
 8005b28:	f3bf 8f6f 	isb	sy
 8005b2c:	f3bf 8f4f 	dsb	sy
 8005b30:	617b      	str	r3, [r7, #20]
 8005b32:	e7fe      	b.n	8005b32 <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8005b34:	f001 fe60 	bl	80077f8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005b38:	2300      	movs	r3, #0
 8005b3a:	e082      	b.n	8005c42 <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005b3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d106      	bne.n	8005b50 <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005b42:	f107 030c 	add.w	r3, r7, #12
 8005b46:	4618      	mov	r0, r3
 8005b48:	f000 febc 	bl	80068c4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005b4c:	2301      	movs	r3, #1
 8005b4e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005b50:	f001 fe52 	bl	80077f8 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005b54:	f000 fc32 	bl	80063bc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005b58:	f001 fe20 	bl	800779c <vPortEnterCritical>
 8005b5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b5e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005b62:	b25b      	sxtb	r3, r3
 8005b64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b68:	d103      	bne.n	8005b72 <xQueueSemaphoreTake+0x132>
 8005b6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b6c:	2200      	movs	r2, #0
 8005b6e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005b72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b74:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005b78:	b25b      	sxtb	r3, r3
 8005b7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b7e:	d103      	bne.n	8005b88 <xQueueSemaphoreTake+0x148>
 8005b80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b82:	2200      	movs	r2, #0
 8005b84:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005b88:	f001 fe36 	bl	80077f8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005b8c:	463a      	mov	r2, r7
 8005b8e:	f107 030c 	add.w	r3, r7, #12
 8005b92:	4611      	mov	r1, r2
 8005b94:	4618      	mov	r0, r3
 8005b96:	f000 feab 	bl	80068f0 <xTaskCheckForTimeOut>
 8005b9a:	4603      	mov	r3, r0
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d132      	bne.n	8005c06 <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005ba0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005ba2:	f000 f9cc 	bl	8005f3e <prvIsQueueEmpty>
 8005ba6:	4603      	mov	r3, r0
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d026      	beq.n	8005bfa <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005bac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d109      	bne.n	8005bc8 <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 8005bb4:	f001 fdf2 	bl	800779c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8005bb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bba:	685b      	ldr	r3, [r3, #4]
 8005bbc:	4618      	mov	r0, r3
 8005bbe:	f000 fff9 	bl	8006bb4 <xTaskPriorityInherit>
 8005bc2:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8005bc4:	f001 fe18 	bl	80077f8 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005bc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bca:	3324      	adds	r3, #36	; 0x24
 8005bcc:	683a      	ldr	r2, [r7, #0]
 8005bce:	4611      	mov	r1, r2
 8005bd0:	4618      	mov	r0, r3
 8005bd2:	f000 fdc7 	bl	8006764 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005bd6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005bd8:	f000 f95f 	bl	8005e9a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005bdc:	f000 fbfc 	bl	80063d8 <xTaskResumeAll>
 8005be0:	4603      	mov	r3, r0
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	f47f af69 	bne.w	8005aba <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 8005be8:	4b18      	ldr	r3, [pc, #96]	; (8005c4c <xQueueSemaphoreTake+0x20c>)
 8005bea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005bee:	601a      	str	r2, [r3, #0]
 8005bf0:	f3bf 8f4f 	dsb	sy
 8005bf4:	f3bf 8f6f 	isb	sy
 8005bf8:	e75f      	b.n	8005aba <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8005bfa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005bfc:	f000 f94d 	bl	8005e9a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005c00:	f000 fbea 	bl	80063d8 <xTaskResumeAll>
 8005c04:	e759      	b.n	8005aba <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8005c06:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005c08:	f000 f947 	bl	8005e9a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005c0c:	f000 fbe4 	bl	80063d8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005c10:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005c12:	f000 f994 	bl	8005f3e <prvIsQueueEmpty>
 8005c16:	4603      	mov	r3, r0
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	f43f af4e 	beq.w	8005aba <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8005c1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d00d      	beq.n	8005c40 <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 8005c24:	f001 fdba 	bl	800779c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8005c28:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005c2a:	f000 f88e 	bl	8005d4a <prvGetDisinheritPriorityAfterTimeout>
 8005c2e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 8005c30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c32:	685b      	ldr	r3, [r3, #4]
 8005c34:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005c36:	4618      	mov	r0, r3
 8005c38:	f001 f896 	bl	8006d68 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8005c3c:	f001 fddc 	bl	80077f8 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005c40:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8005c42:	4618      	mov	r0, r3
 8005c44:	3738      	adds	r7, #56	; 0x38
 8005c46:	46bd      	mov	sp, r7
 8005c48:	bd80      	pop	{r7, pc}
 8005c4a:	bf00      	nop
 8005c4c:	e000ed04 	.word	0xe000ed04

08005c50 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005c50:	b580      	push	{r7, lr}
 8005c52:	b08e      	sub	sp, #56	; 0x38
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	60f8      	str	r0, [r7, #12]
 8005c58:	60b9      	str	r1, [r7, #8]
 8005c5a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005c60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d109      	bne.n	8005c7a <xQueueReceiveFromISR+0x2a>
 8005c66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c6a:	f383 8811 	msr	BASEPRI, r3
 8005c6e:	f3bf 8f6f 	isb	sy
 8005c72:	f3bf 8f4f 	dsb	sy
 8005c76:	623b      	str	r3, [r7, #32]
 8005c78:	e7fe      	b.n	8005c78 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005c7a:	68bb      	ldr	r3, [r7, #8]
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d103      	bne.n	8005c88 <xQueueReceiveFromISR+0x38>
 8005c80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d101      	bne.n	8005c8c <xQueueReceiveFromISR+0x3c>
 8005c88:	2301      	movs	r3, #1
 8005c8a:	e000      	b.n	8005c8e <xQueueReceiveFromISR+0x3e>
 8005c8c:	2300      	movs	r3, #0
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d109      	bne.n	8005ca6 <xQueueReceiveFromISR+0x56>
 8005c92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c96:	f383 8811 	msr	BASEPRI, r3
 8005c9a:	f3bf 8f6f 	isb	sy
 8005c9e:	f3bf 8f4f 	dsb	sy
 8005ca2:	61fb      	str	r3, [r7, #28]
 8005ca4:	e7fe      	b.n	8005ca4 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005ca6:	f001 fe55 	bl	8007954 <vPortValidateInterruptPriority>
	__asm volatile
 8005caa:	f3ef 8211 	mrs	r2, BASEPRI
 8005cae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cb2:	f383 8811 	msr	BASEPRI, r3
 8005cb6:	f3bf 8f6f 	isb	sy
 8005cba:	f3bf 8f4f 	dsb	sy
 8005cbe:	61ba      	str	r2, [r7, #24]
 8005cc0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8005cc2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005cc4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005cc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cca:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005ccc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d02f      	beq.n	8005d32 <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8005cd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cd4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005cd8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005cdc:	68b9      	ldr	r1, [r7, #8]
 8005cde:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005ce0:	f000 f8b5 	bl	8005e4e <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005ce4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ce6:	1e5a      	subs	r2, r3, #1
 8005ce8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cea:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8005cec:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005cf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cf4:	d112      	bne.n	8005d1c <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005cf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cf8:	691b      	ldr	r3, [r3, #16]
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d016      	beq.n	8005d2c <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005cfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d00:	3310      	adds	r3, #16
 8005d02:	4618      	mov	r0, r3
 8005d04:	f000 fd7c 	bl	8006800 <xTaskRemoveFromEventList>
 8005d08:	4603      	mov	r3, r0
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d00e      	beq.n	8005d2c <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d00b      	beq.n	8005d2c <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	2201      	movs	r2, #1
 8005d18:	601a      	str	r2, [r3, #0]
 8005d1a:	e007      	b.n	8005d2c <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8005d1c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005d20:	3301      	adds	r3, #1
 8005d22:	b2db      	uxtb	r3, r3
 8005d24:	b25a      	sxtb	r2, r3
 8005d26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d28:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8005d2c:	2301      	movs	r3, #1
 8005d2e:	637b      	str	r3, [r7, #52]	; 0x34
 8005d30:	e001      	b.n	8005d36 <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 8005d32:	2300      	movs	r3, #0
 8005d34:	637b      	str	r3, [r7, #52]	; 0x34
 8005d36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d38:	613b      	str	r3, [r7, #16]
	__asm volatile
 8005d3a:	693b      	ldr	r3, [r7, #16]
 8005d3c:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005d40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005d42:	4618      	mov	r0, r3
 8005d44:	3738      	adds	r7, #56	; 0x38
 8005d46:	46bd      	mov	sp, r7
 8005d48:	bd80      	pop	{r7, pc}

08005d4a <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8005d4a:	b480      	push	{r7}
 8005d4c:	b085      	sub	sp, #20
 8005d4e:	af00      	add	r7, sp, #0
 8005d50:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d006      	beq.n	8005d68 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8005d64:	60fb      	str	r3, [r7, #12]
 8005d66:	e001      	b.n	8005d6c <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8005d68:	2300      	movs	r3, #0
 8005d6a:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8005d6c:	68fb      	ldr	r3, [r7, #12]
	}
 8005d6e:	4618      	mov	r0, r3
 8005d70:	3714      	adds	r7, #20
 8005d72:	46bd      	mov	sp, r7
 8005d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d78:	4770      	bx	lr

08005d7a <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005d7a:	b580      	push	{r7, lr}
 8005d7c:	b086      	sub	sp, #24
 8005d7e:	af00      	add	r7, sp, #0
 8005d80:	60f8      	str	r0, [r7, #12]
 8005d82:	60b9      	str	r1, [r7, #8]
 8005d84:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005d86:	2300      	movs	r3, #0
 8005d88:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d8e:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d10d      	bne.n	8005db4 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d14d      	bne.n	8005e3c <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	685b      	ldr	r3, [r3, #4]
 8005da4:	4618      	mov	r0, r3
 8005da6:	f000 ff73 	bl	8006c90 <xTaskPriorityDisinherit>
 8005daa:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	2200      	movs	r2, #0
 8005db0:	605a      	str	r2, [r3, #4]
 8005db2:	e043      	b.n	8005e3c <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d119      	bne.n	8005dee <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	6898      	ldr	r0, [r3, #8]
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dc2:	461a      	mov	r2, r3
 8005dc4:	68b9      	ldr	r1, [r7, #8]
 8005dc6:	f002 ff7b 	bl	8008cc0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	689a      	ldr	r2, [r3, #8]
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dd2:	441a      	add	r2, r3
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	689a      	ldr	r2, [r3, #8]
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	685b      	ldr	r3, [r3, #4]
 8005de0:	429a      	cmp	r2, r3
 8005de2:	d32b      	bcc.n	8005e3c <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	681a      	ldr	r2, [r3, #0]
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	609a      	str	r2, [r3, #8]
 8005dec:	e026      	b.n	8005e3c <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	68d8      	ldr	r0, [r3, #12]
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005df6:	461a      	mov	r2, r3
 8005df8:	68b9      	ldr	r1, [r7, #8]
 8005dfa:	f002 ff61 	bl	8008cc0 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	68da      	ldr	r2, [r3, #12]
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e06:	425b      	negs	r3, r3
 8005e08:	441a      	add	r2, r3
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	68da      	ldr	r2, [r3, #12]
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	429a      	cmp	r2, r3
 8005e18:	d207      	bcs.n	8005e2a <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	685a      	ldr	r2, [r3, #4]
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e22:	425b      	negs	r3, r3
 8005e24:	441a      	add	r2, r3
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	2b02      	cmp	r3, #2
 8005e2e:	d105      	bne.n	8005e3c <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005e30:	693b      	ldr	r3, [r7, #16]
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d002      	beq.n	8005e3c <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005e36:	693b      	ldr	r3, [r7, #16]
 8005e38:	3b01      	subs	r3, #1
 8005e3a:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005e3c:	693b      	ldr	r3, [r7, #16]
 8005e3e:	1c5a      	adds	r2, r3, #1
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005e44:	697b      	ldr	r3, [r7, #20]
}
 8005e46:	4618      	mov	r0, r3
 8005e48:	3718      	adds	r7, #24
 8005e4a:	46bd      	mov	sp, r7
 8005e4c:	bd80      	pop	{r7, pc}

08005e4e <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005e4e:	b580      	push	{r7, lr}
 8005e50:	b082      	sub	sp, #8
 8005e52:	af00      	add	r7, sp, #0
 8005e54:	6078      	str	r0, [r7, #4]
 8005e56:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d018      	beq.n	8005e92 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	68da      	ldr	r2, [r3, #12]
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e68:	441a      	add	r2, r3
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	68da      	ldr	r2, [r3, #12]
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	685b      	ldr	r3, [r3, #4]
 8005e76:	429a      	cmp	r2, r3
 8005e78:	d303      	bcc.n	8005e82 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681a      	ldr	r2, [r3, #0]
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	68d9      	ldr	r1, [r3, #12]
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e8a:	461a      	mov	r2, r3
 8005e8c:	6838      	ldr	r0, [r7, #0]
 8005e8e:	f002 ff17 	bl	8008cc0 <memcpy>
	}
}
 8005e92:	bf00      	nop
 8005e94:	3708      	adds	r7, #8
 8005e96:	46bd      	mov	sp, r7
 8005e98:	bd80      	pop	{r7, pc}

08005e9a <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005e9a:	b580      	push	{r7, lr}
 8005e9c:	b084      	sub	sp, #16
 8005e9e:	af00      	add	r7, sp, #0
 8005ea0:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005ea2:	f001 fc7b 	bl	800779c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005eac:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005eae:	e011      	b.n	8005ed4 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d012      	beq.n	8005ede <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	3324      	adds	r3, #36	; 0x24
 8005ebc:	4618      	mov	r0, r3
 8005ebe:	f000 fc9f 	bl	8006800 <xTaskRemoveFromEventList>
 8005ec2:	4603      	mov	r3, r0
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d001      	beq.n	8005ecc <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005ec8:	f000 fd72 	bl	80069b0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005ecc:	7bfb      	ldrb	r3, [r7, #15]
 8005ece:	3b01      	subs	r3, #1
 8005ed0:	b2db      	uxtb	r3, r3
 8005ed2:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005ed4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	dce9      	bgt.n	8005eb0 <prvUnlockQueue+0x16>
 8005edc:	e000      	b.n	8005ee0 <prvUnlockQueue+0x46>
					break;
 8005ede:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	22ff      	movs	r2, #255	; 0xff
 8005ee4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8005ee8:	f001 fc86 	bl	80077f8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005eec:	f001 fc56 	bl	800779c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005ef6:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005ef8:	e011      	b.n	8005f1e <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	691b      	ldr	r3, [r3, #16]
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d012      	beq.n	8005f28 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	3310      	adds	r3, #16
 8005f06:	4618      	mov	r0, r3
 8005f08:	f000 fc7a 	bl	8006800 <xTaskRemoveFromEventList>
 8005f0c:	4603      	mov	r3, r0
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d001      	beq.n	8005f16 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005f12:	f000 fd4d 	bl	80069b0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005f16:	7bbb      	ldrb	r3, [r7, #14]
 8005f18:	3b01      	subs	r3, #1
 8005f1a:	b2db      	uxtb	r3, r3
 8005f1c:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005f1e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	dce9      	bgt.n	8005efa <prvUnlockQueue+0x60>
 8005f26:	e000      	b.n	8005f2a <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005f28:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	22ff      	movs	r2, #255	; 0xff
 8005f2e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005f32:	f001 fc61 	bl	80077f8 <vPortExitCritical>
}
 8005f36:	bf00      	nop
 8005f38:	3710      	adds	r7, #16
 8005f3a:	46bd      	mov	sp, r7
 8005f3c:	bd80      	pop	{r7, pc}

08005f3e <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005f3e:	b580      	push	{r7, lr}
 8005f40:	b084      	sub	sp, #16
 8005f42:	af00      	add	r7, sp, #0
 8005f44:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005f46:	f001 fc29 	bl	800779c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d102      	bne.n	8005f58 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005f52:	2301      	movs	r3, #1
 8005f54:	60fb      	str	r3, [r7, #12]
 8005f56:	e001      	b.n	8005f5c <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005f58:	2300      	movs	r3, #0
 8005f5a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005f5c:	f001 fc4c 	bl	80077f8 <vPortExitCritical>

	return xReturn;
 8005f60:	68fb      	ldr	r3, [r7, #12]
}
 8005f62:	4618      	mov	r0, r3
 8005f64:	3710      	adds	r7, #16
 8005f66:	46bd      	mov	sp, r7
 8005f68:	bd80      	pop	{r7, pc}

08005f6a <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005f6a:	b580      	push	{r7, lr}
 8005f6c:	b084      	sub	sp, #16
 8005f6e:	af00      	add	r7, sp, #0
 8005f70:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005f72:	f001 fc13 	bl	800779c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f7e:	429a      	cmp	r2, r3
 8005f80:	d102      	bne.n	8005f88 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005f82:	2301      	movs	r3, #1
 8005f84:	60fb      	str	r3, [r7, #12]
 8005f86:	e001      	b.n	8005f8c <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005f88:	2300      	movs	r3, #0
 8005f8a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005f8c:	f001 fc34 	bl	80077f8 <vPortExitCritical>

	return xReturn;
 8005f90:	68fb      	ldr	r3, [r7, #12]
}
 8005f92:	4618      	mov	r0, r3
 8005f94:	3710      	adds	r7, #16
 8005f96:	46bd      	mov	sp, r7
 8005f98:	bd80      	pop	{r7, pc}
	...

08005f9c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005f9c:	b480      	push	{r7}
 8005f9e:	b085      	sub	sp, #20
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	6078      	str	r0, [r7, #4]
 8005fa4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005fa6:	2300      	movs	r3, #0
 8005fa8:	60fb      	str	r3, [r7, #12]
 8005faa:	e014      	b.n	8005fd6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005fac:	4a0e      	ldr	r2, [pc, #56]	; (8005fe8 <vQueueAddToRegistry+0x4c>)
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d10b      	bne.n	8005fd0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005fb8:	490b      	ldr	r1, [pc, #44]	; (8005fe8 <vQueueAddToRegistry+0x4c>)
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	683a      	ldr	r2, [r7, #0]
 8005fbe:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005fc2:	4a09      	ldr	r2, [pc, #36]	; (8005fe8 <vQueueAddToRegistry+0x4c>)
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	00db      	lsls	r3, r3, #3
 8005fc8:	4413      	add	r3, r2
 8005fca:	687a      	ldr	r2, [r7, #4]
 8005fcc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005fce:	e005      	b.n	8005fdc <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	3301      	adds	r3, #1
 8005fd4:	60fb      	str	r3, [r7, #12]
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	2b07      	cmp	r3, #7
 8005fda:	d9e7      	bls.n	8005fac <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005fdc:	bf00      	nop
 8005fde:	3714      	adds	r7, #20
 8005fe0:	46bd      	mov	sp, r7
 8005fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe6:	4770      	bx	lr
 8005fe8:	20001a24 	.word	0x20001a24

08005fec <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005fec:	b580      	push	{r7, lr}
 8005fee:	b086      	sub	sp, #24
 8005ff0:	af00      	add	r7, sp, #0
 8005ff2:	60f8      	str	r0, [r7, #12]
 8005ff4:	60b9      	str	r1, [r7, #8]
 8005ff6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005ffc:	f001 fbce 	bl	800779c <vPortEnterCritical>
 8006000:	697b      	ldr	r3, [r7, #20]
 8006002:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006006:	b25b      	sxtb	r3, r3
 8006008:	f1b3 3fff 	cmp.w	r3, #4294967295
 800600c:	d103      	bne.n	8006016 <vQueueWaitForMessageRestricted+0x2a>
 800600e:	697b      	ldr	r3, [r7, #20]
 8006010:	2200      	movs	r2, #0
 8006012:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006016:	697b      	ldr	r3, [r7, #20]
 8006018:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800601c:	b25b      	sxtb	r3, r3
 800601e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006022:	d103      	bne.n	800602c <vQueueWaitForMessageRestricted+0x40>
 8006024:	697b      	ldr	r3, [r7, #20]
 8006026:	2200      	movs	r2, #0
 8006028:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800602c:	f001 fbe4 	bl	80077f8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006030:	697b      	ldr	r3, [r7, #20]
 8006032:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006034:	2b00      	cmp	r3, #0
 8006036:	d106      	bne.n	8006046 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006038:	697b      	ldr	r3, [r7, #20]
 800603a:	3324      	adds	r3, #36	; 0x24
 800603c:	687a      	ldr	r2, [r7, #4]
 800603e:	68b9      	ldr	r1, [r7, #8]
 8006040:	4618      	mov	r0, r3
 8006042:	f000 fbb3 	bl	80067ac <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006046:	6978      	ldr	r0, [r7, #20]
 8006048:	f7ff ff27 	bl	8005e9a <prvUnlockQueue>
	}
 800604c:	bf00      	nop
 800604e:	3718      	adds	r7, #24
 8006050:	46bd      	mov	sp, r7
 8006052:	bd80      	pop	{r7, pc}

08006054 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006054:	b580      	push	{r7, lr}
 8006056:	b08e      	sub	sp, #56	; 0x38
 8006058:	af04      	add	r7, sp, #16
 800605a:	60f8      	str	r0, [r7, #12]
 800605c:	60b9      	str	r1, [r7, #8]
 800605e:	607a      	str	r2, [r7, #4]
 8006060:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006062:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006064:	2b00      	cmp	r3, #0
 8006066:	d109      	bne.n	800607c <xTaskCreateStatic+0x28>
	__asm volatile
 8006068:	f04f 0350 	mov.w	r3, #80	; 0x50
 800606c:	f383 8811 	msr	BASEPRI, r3
 8006070:	f3bf 8f6f 	isb	sy
 8006074:	f3bf 8f4f 	dsb	sy
 8006078:	623b      	str	r3, [r7, #32]
 800607a:	e7fe      	b.n	800607a <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 800607c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800607e:	2b00      	cmp	r3, #0
 8006080:	d109      	bne.n	8006096 <xTaskCreateStatic+0x42>
 8006082:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006086:	f383 8811 	msr	BASEPRI, r3
 800608a:	f3bf 8f6f 	isb	sy
 800608e:	f3bf 8f4f 	dsb	sy
 8006092:	61fb      	str	r3, [r7, #28]
 8006094:	e7fe      	b.n	8006094 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006096:	235c      	movs	r3, #92	; 0x5c
 8006098:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800609a:	693b      	ldr	r3, [r7, #16]
 800609c:	2b5c      	cmp	r3, #92	; 0x5c
 800609e:	d009      	beq.n	80060b4 <xTaskCreateStatic+0x60>
 80060a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060a4:	f383 8811 	msr	BASEPRI, r3
 80060a8:	f3bf 8f6f 	isb	sy
 80060ac:	f3bf 8f4f 	dsb	sy
 80060b0:	61bb      	str	r3, [r7, #24]
 80060b2:	e7fe      	b.n	80060b2 <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80060b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d01e      	beq.n	80060f8 <xTaskCreateStatic+0xa4>
 80060ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d01b      	beq.n	80060f8 <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80060c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060c2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80060c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060c6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80060c8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80060ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060cc:	2202      	movs	r2, #2
 80060ce:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80060d2:	2300      	movs	r3, #0
 80060d4:	9303      	str	r3, [sp, #12]
 80060d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060d8:	9302      	str	r3, [sp, #8]
 80060da:	f107 0314 	add.w	r3, r7, #20
 80060de:	9301      	str	r3, [sp, #4]
 80060e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060e2:	9300      	str	r3, [sp, #0]
 80060e4:	683b      	ldr	r3, [r7, #0]
 80060e6:	687a      	ldr	r2, [r7, #4]
 80060e8:	68b9      	ldr	r1, [r7, #8]
 80060ea:	68f8      	ldr	r0, [r7, #12]
 80060ec:	f000 f80b 	bl	8006106 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80060f0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80060f2:	f000 f88f 	bl	8006214 <prvAddNewTaskToReadyList>
 80060f6:	e001      	b.n	80060fc <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 80060f8:	2300      	movs	r3, #0
 80060fa:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80060fc:	697b      	ldr	r3, [r7, #20]
	}
 80060fe:	4618      	mov	r0, r3
 8006100:	3728      	adds	r7, #40	; 0x28
 8006102:	46bd      	mov	sp, r7
 8006104:	bd80      	pop	{r7, pc}

08006106 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006106:	b580      	push	{r7, lr}
 8006108:	b088      	sub	sp, #32
 800610a:	af00      	add	r7, sp, #0
 800610c:	60f8      	str	r0, [r7, #12]
 800610e:	60b9      	str	r1, [r7, #8]
 8006110:	607a      	str	r2, [r7, #4]
 8006112:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006114:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006116:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	009b      	lsls	r3, r3, #2
 800611c:	461a      	mov	r2, r3
 800611e:	21a5      	movs	r1, #165	; 0xa5
 8006120:	f002 fdd9 	bl	8008cd6 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8006124:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006126:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800612e:	3b01      	subs	r3, #1
 8006130:	009b      	lsls	r3, r3, #2
 8006132:	4413      	add	r3, r2
 8006134:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8006136:	69bb      	ldr	r3, [r7, #24]
 8006138:	f023 0307 	bic.w	r3, r3, #7
 800613c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800613e:	69bb      	ldr	r3, [r7, #24]
 8006140:	f003 0307 	and.w	r3, r3, #7
 8006144:	2b00      	cmp	r3, #0
 8006146:	d009      	beq.n	800615c <prvInitialiseNewTask+0x56>
 8006148:	f04f 0350 	mov.w	r3, #80	; 0x50
 800614c:	f383 8811 	msr	BASEPRI, r3
 8006150:	f3bf 8f6f 	isb	sy
 8006154:	f3bf 8f4f 	dsb	sy
 8006158:	617b      	str	r3, [r7, #20]
 800615a:	e7fe      	b.n	800615a <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800615c:	2300      	movs	r3, #0
 800615e:	61fb      	str	r3, [r7, #28]
 8006160:	e012      	b.n	8006188 <prvInitialiseNewTask+0x82>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006162:	68ba      	ldr	r2, [r7, #8]
 8006164:	69fb      	ldr	r3, [r7, #28]
 8006166:	4413      	add	r3, r2
 8006168:	7819      	ldrb	r1, [r3, #0]
 800616a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800616c:	69fb      	ldr	r3, [r7, #28]
 800616e:	4413      	add	r3, r2
 8006170:	3334      	adds	r3, #52	; 0x34
 8006172:	460a      	mov	r2, r1
 8006174:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8006176:	68ba      	ldr	r2, [r7, #8]
 8006178:	69fb      	ldr	r3, [r7, #28]
 800617a:	4413      	add	r3, r2
 800617c:	781b      	ldrb	r3, [r3, #0]
 800617e:	2b00      	cmp	r3, #0
 8006180:	d006      	beq.n	8006190 <prvInitialiseNewTask+0x8a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006182:	69fb      	ldr	r3, [r7, #28]
 8006184:	3301      	adds	r3, #1
 8006186:	61fb      	str	r3, [r7, #28]
 8006188:	69fb      	ldr	r3, [r7, #28]
 800618a:	2b0f      	cmp	r3, #15
 800618c:	d9e9      	bls.n	8006162 <prvInitialiseNewTask+0x5c>
 800618e:	e000      	b.n	8006192 <prvInitialiseNewTask+0x8c>
		{
			break;
 8006190:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006192:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006194:	2200      	movs	r2, #0
 8006196:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800619a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800619c:	2b37      	cmp	r3, #55	; 0x37
 800619e:	d901      	bls.n	80061a4 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80061a0:	2337      	movs	r3, #55	; 0x37
 80061a2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80061a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80061a8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80061aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061ac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80061ae:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80061b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061b2:	2200      	movs	r2, #0
 80061b4:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80061b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061b8:	3304      	adds	r3, #4
 80061ba:	4618      	mov	r0, r3
 80061bc:	f7fe ff4c 	bl	8005058 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80061c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061c2:	3318      	adds	r3, #24
 80061c4:	4618      	mov	r0, r3
 80061c6:	f7fe ff47 	bl	8005058 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80061ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80061ce:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80061d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061d2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80061d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061d8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80061da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80061de:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80061e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061e2:	2200      	movs	r2, #0
 80061e4:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80061e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061e8:	2200      	movs	r2, #0
 80061ea:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80061ee:	683a      	ldr	r2, [r7, #0]
 80061f0:	68f9      	ldr	r1, [r7, #12]
 80061f2:	69b8      	ldr	r0, [r7, #24]
 80061f4:	f001 f9ae 	bl	8007554 <pxPortInitialiseStack>
 80061f8:	4602      	mov	r2, r0
 80061fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061fc:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80061fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006200:	2b00      	cmp	r3, #0
 8006202:	d002      	beq.n	800620a <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006204:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006206:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006208:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800620a:	bf00      	nop
 800620c:	3720      	adds	r7, #32
 800620e:	46bd      	mov	sp, r7
 8006210:	bd80      	pop	{r7, pc}
	...

08006214 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006214:	b580      	push	{r7, lr}
 8006216:	b082      	sub	sp, #8
 8006218:	af00      	add	r7, sp, #0
 800621a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800621c:	f001 fabe 	bl	800779c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006220:	4b2d      	ldr	r3, [pc, #180]	; (80062d8 <prvAddNewTaskToReadyList+0xc4>)
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	3301      	adds	r3, #1
 8006226:	4a2c      	ldr	r2, [pc, #176]	; (80062d8 <prvAddNewTaskToReadyList+0xc4>)
 8006228:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800622a:	4b2c      	ldr	r3, [pc, #176]	; (80062dc <prvAddNewTaskToReadyList+0xc8>)
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	2b00      	cmp	r3, #0
 8006230:	d109      	bne.n	8006246 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006232:	4a2a      	ldr	r2, [pc, #168]	; (80062dc <prvAddNewTaskToReadyList+0xc8>)
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006238:	4b27      	ldr	r3, [pc, #156]	; (80062d8 <prvAddNewTaskToReadyList+0xc4>)
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	2b01      	cmp	r3, #1
 800623e:	d110      	bne.n	8006262 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006240:	f000 fbda 	bl	80069f8 <prvInitialiseTaskLists>
 8006244:	e00d      	b.n	8006262 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006246:	4b26      	ldr	r3, [pc, #152]	; (80062e0 <prvAddNewTaskToReadyList+0xcc>)
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	2b00      	cmp	r3, #0
 800624c:	d109      	bne.n	8006262 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800624e:	4b23      	ldr	r3, [pc, #140]	; (80062dc <prvAddNewTaskToReadyList+0xc8>)
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006258:	429a      	cmp	r2, r3
 800625a:	d802      	bhi.n	8006262 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800625c:	4a1f      	ldr	r2, [pc, #124]	; (80062dc <prvAddNewTaskToReadyList+0xc8>)
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006262:	4b20      	ldr	r3, [pc, #128]	; (80062e4 <prvAddNewTaskToReadyList+0xd0>)
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	3301      	adds	r3, #1
 8006268:	4a1e      	ldr	r2, [pc, #120]	; (80062e4 <prvAddNewTaskToReadyList+0xd0>)
 800626a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800626c:	4b1d      	ldr	r3, [pc, #116]	; (80062e4 <prvAddNewTaskToReadyList+0xd0>)
 800626e:	681a      	ldr	r2, [r3, #0]
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006278:	4b1b      	ldr	r3, [pc, #108]	; (80062e8 <prvAddNewTaskToReadyList+0xd4>)
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	429a      	cmp	r2, r3
 800627e:	d903      	bls.n	8006288 <prvAddNewTaskToReadyList+0x74>
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006284:	4a18      	ldr	r2, [pc, #96]	; (80062e8 <prvAddNewTaskToReadyList+0xd4>)
 8006286:	6013      	str	r3, [r2, #0]
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800628c:	4613      	mov	r3, r2
 800628e:	009b      	lsls	r3, r3, #2
 8006290:	4413      	add	r3, r2
 8006292:	009b      	lsls	r3, r3, #2
 8006294:	4a15      	ldr	r2, [pc, #84]	; (80062ec <prvAddNewTaskToReadyList+0xd8>)
 8006296:	441a      	add	r2, r3
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	3304      	adds	r3, #4
 800629c:	4619      	mov	r1, r3
 800629e:	4610      	mov	r0, r2
 80062a0:	f7fe fee7 	bl	8005072 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80062a4:	f001 faa8 	bl	80077f8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80062a8:	4b0d      	ldr	r3, [pc, #52]	; (80062e0 <prvAddNewTaskToReadyList+0xcc>)
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d00e      	beq.n	80062ce <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80062b0:	4b0a      	ldr	r3, [pc, #40]	; (80062dc <prvAddNewTaskToReadyList+0xc8>)
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062ba:	429a      	cmp	r2, r3
 80062bc:	d207      	bcs.n	80062ce <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80062be:	4b0c      	ldr	r3, [pc, #48]	; (80062f0 <prvAddNewTaskToReadyList+0xdc>)
 80062c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80062c4:	601a      	str	r2, [r3, #0]
 80062c6:	f3bf 8f4f 	dsb	sy
 80062ca:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80062ce:	bf00      	nop
 80062d0:	3708      	adds	r7, #8
 80062d2:	46bd      	mov	sp, r7
 80062d4:	bd80      	pop	{r7, pc}
 80062d6:	bf00      	nop
 80062d8:	20000c54 	.word	0x20000c54
 80062dc:	20000780 	.word	0x20000780
 80062e0:	20000c60 	.word	0x20000c60
 80062e4:	20000c70 	.word	0x20000c70
 80062e8:	20000c5c 	.word	0x20000c5c
 80062ec:	20000784 	.word	0x20000784
 80062f0:	e000ed04 	.word	0xe000ed04

080062f4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80062f4:	b580      	push	{r7, lr}
 80062f6:	b08a      	sub	sp, #40	; 0x28
 80062f8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80062fa:	2300      	movs	r3, #0
 80062fc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80062fe:	2300      	movs	r3, #0
 8006300:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006302:	463a      	mov	r2, r7
 8006304:	1d39      	adds	r1, r7, #4
 8006306:	f107 0308 	add.w	r3, r7, #8
 800630a:	4618      	mov	r0, r3
 800630c:	f7fe fe50 	bl	8004fb0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006310:	6839      	ldr	r1, [r7, #0]
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	68ba      	ldr	r2, [r7, #8]
 8006316:	9202      	str	r2, [sp, #8]
 8006318:	9301      	str	r3, [sp, #4]
 800631a:	2300      	movs	r3, #0
 800631c:	9300      	str	r3, [sp, #0]
 800631e:	2300      	movs	r3, #0
 8006320:	460a      	mov	r2, r1
 8006322:	4920      	ldr	r1, [pc, #128]	; (80063a4 <vTaskStartScheduler+0xb0>)
 8006324:	4820      	ldr	r0, [pc, #128]	; (80063a8 <vTaskStartScheduler+0xb4>)
 8006326:	f7ff fe95 	bl	8006054 <xTaskCreateStatic>
 800632a:	4602      	mov	r2, r0
 800632c:	4b1f      	ldr	r3, [pc, #124]	; (80063ac <vTaskStartScheduler+0xb8>)
 800632e:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006330:	4b1e      	ldr	r3, [pc, #120]	; (80063ac <vTaskStartScheduler+0xb8>)
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	2b00      	cmp	r3, #0
 8006336:	d002      	beq.n	800633e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006338:	2301      	movs	r3, #1
 800633a:	617b      	str	r3, [r7, #20]
 800633c:	e001      	b.n	8006342 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800633e:	2300      	movs	r3, #0
 8006340:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006342:	697b      	ldr	r3, [r7, #20]
 8006344:	2b01      	cmp	r3, #1
 8006346:	d102      	bne.n	800634e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006348:	f000 fdfa 	bl	8006f40 <xTimerCreateTimerTask>
 800634c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800634e:	697b      	ldr	r3, [r7, #20]
 8006350:	2b01      	cmp	r3, #1
 8006352:	d115      	bne.n	8006380 <vTaskStartScheduler+0x8c>
 8006354:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006358:	f383 8811 	msr	BASEPRI, r3
 800635c:	f3bf 8f6f 	isb	sy
 8006360:	f3bf 8f4f 	dsb	sy
 8006364:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006366:	4b12      	ldr	r3, [pc, #72]	; (80063b0 <vTaskStartScheduler+0xbc>)
 8006368:	f04f 32ff 	mov.w	r2, #4294967295
 800636c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800636e:	4b11      	ldr	r3, [pc, #68]	; (80063b4 <vTaskStartScheduler+0xc0>)
 8006370:	2201      	movs	r2, #1
 8006372:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8006374:	4b10      	ldr	r3, [pc, #64]	; (80063b8 <vTaskStartScheduler+0xc4>)
 8006376:	2200      	movs	r2, #0
 8006378:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800637a:	f001 f971 	bl	8007660 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800637e:	e00d      	b.n	800639c <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006380:	697b      	ldr	r3, [r7, #20]
 8006382:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006386:	d109      	bne.n	800639c <vTaskStartScheduler+0xa8>
 8006388:	f04f 0350 	mov.w	r3, #80	; 0x50
 800638c:	f383 8811 	msr	BASEPRI, r3
 8006390:	f3bf 8f6f 	isb	sy
 8006394:	f3bf 8f4f 	dsb	sy
 8006398:	60fb      	str	r3, [r7, #12]
 800639a:	e7fe      	b.n	800639a <vTaskStartScheduler+0xa6>
}
 800639c:	bf00      	nop
 800639e:	3718      	adds	r7, #24
 80063a0:	46bd      	mov	sp, r7
 80063a2:	bd80      	pop	{r7, pc}
 80063a4:	08009df8 	.word	0x08009df8
 80063a8:	080069c9 	.word	0x080069c9
 80063ac:	20000c78 	.word	0x20000c78
 80063b0:	20000c74 	.word	0x20000c74
 80063b4:	20000c60 	.word	0x20000c60
 80063b8:	20000c58 	.word	0x20000c58

080063bc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80063bc:	b480      	push	{r7}
 80063be:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80063c0:	4b04      	ldr	r3, [pc, #16]	; (80063d4 <vTaskSuspendAll+0x18>)
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	3301      	adds	r3, #1
 80063c6:	4a03      	ldr	r2, [pc, #12]	; (80063d4 <vTaskSuspendAll+0x18>)
 80063c8:	6013      	str	r3, [r2, #0]
}
 80063ca:	bf00      	nop
 80063cc:	46bd      	mov	sp, r7
 80063ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d2:	4770      	bx	lr
 80063d4:	20000c7c 	.word	0x20000c7c

080063d8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80063d8:	b580      	push	{r7, lr}
 80063da:	b084      	sub	sp, #16
 80063dc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80063de:	2300      	movs	r3, #0
 80063e0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80063e2:	2300      	movs	r3, #0
 80063e4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80063e6:	4b41      	ldr	r3, [pc, #260]	; (80064ec <xTaskResumeAll+0x114>)
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d109      	bne.n	8006402 <xTaskResumeAll+0x2a>
 80063ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063f2:	f383 8811 	msr	BASEPRI, r3
 80063f6:	f3bf 8f6f 	isb	sy
 80063fa:	f3bf 8f4f 	dsb	sy
 80063fe:	603b      	str	r3, [r7, #0]
 8006400:	e7fe      	b.n	8006400 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006402:	f001 f9cb 	bl	800779c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006406:	4b39      	ldr	r3, [pc, #228]	; (80064ec <xTaskResumeAll+0x114>)
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	3b01      	subs	r3, #1
 800640c:	4a37      	ldr	r2, [pc, #220]	; (80064ec <xTaskResumeAll+0x114>)
 800640e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006410:	4b36      	ldr	r3, [pc, #216]	; (80064ec <xTaskResumeAll+0x114>)
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	2b00      	cmp	r3, #0
 8006416:	d162      	bne.n	80064de <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006418:	4b35      	ldr	r3, [pc, #212]	; (80064f0 <xTaskResumeAll+0x118>)
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	2b00      	cmp	r3, #0
 800641e:	d05e      	beq.n	80064de <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006420:	e02f      	b.n	8006482 <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8006422:	4b34      	ldr	r3, [pc, #208]	; (80064f4 <xTaskResumeAll+0x11c>)
 8006424:	68db      	ldr	r3, [r3, #12]
 8006426:	68db      	ldr	r3, [r3, #12]
 8006428:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	3318      	adds	r3, #24
 800642e:	4618      	mov	r0, r3
 8006430:	f7fe fe7c 	bl	800512c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	3304      	adds	r3, #4
 8006438:	4618      	mov	r0, r3
 800643a:	f7fe fe77 	bl	800512c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006442:	4b2d      	ldr	r3, [pc, #180]	; (80064f8 <xTaskResumeAll+0x120>)
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	429a      	cmp	r2, r3
 8006448:	d903      	bls.n	8006452 <xTaskResumeAll+0x7a>
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800644e:	4a2a      	ldr	r2, [pc, #168]	; (80064f8 <xTaskResumeAll+0x120>)
 8006450:	6013      	str	r3, [r2, #0]
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006456:	4613      	mov	r3, r2
 8006458:	009b      	lsls	r3, r3, #2
 800645a:	4413      	add	r3, r2
 800645c:	009b      	lsls	r3, r3, #2
 800645e:	4a27      	ldr	r2, [pc, #156]	; (80064fc <xTaskResumeAll+0x124>)
 8006460:	441a      	add	r2, r3
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	3304      	adds	r3, #4
 8006466:	4619      	mov	r1, r3
 8006468:	4610      	mov	r0, r2
 800646a:	f7fe fe02 	bl	8005072 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006472:	4b23      	ldr	r3, [pc, #140]	; (8006500 <xTaskResumeAll+0x128>)
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006478:	429a      	cmp	r2, r3
 800647a:	d302      	bcc.n	8006482 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800647c:	4b21      	ldr	r3, [pc, #132]	; (8006504 <xTaskResumeAll+0x12c>)
 800647e:	2201      	movs	r2, #1
 8006480:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006482:	4b1c      	ldr	r3, [pc, #112]	; (80064f4 <xTaskResumeAll+0x11c>)
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	2b00      	cmp	r3, #0
 8006488:	d1cb      	bne.n	8006422 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	2b00      	cmp	r3, #0
 800648e:	d001      	beq.n	8006494 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006490:	f000 fb4c 	bl	8006b2c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8006494:	4b1c      	ldr	r3, [pc, #112]	; (8006508 <xTaskResumeAll+0x130>)
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	2b00      	cmp	r3, #0
 800649e:	d010      	beq.n	80064c2 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80064a0:	f000 f846 	bl	8006530 <xTaskIncrementTick>
 80064a4:	4603      	mov	r3, r0
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d002      	beq.n	80064b0 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80064aa:	4b16      	ldr	r3, [pc, #88]	; (8006504 <xTaskResumeAll+0x12c>)
 80064ac:	2201      	movs	r2, #1
 80064ae:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	3b01      	subs	r3, #1
 80064b4:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d1f1      	bne.n	80064a0 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 80064bc:	4b12      	ldr	r3, [pc, #72]	; (8006508 <xTaskResumeAll+0x130>)
 80064be:	2200      	movs	r2, #0
 80064c0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80064c2:	4b10      	ldr	r3, [pc, #64]	; (8006504 <xTaskResumeAll+0x12c>)
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d009      	beq.n	80064de <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80064ca:	2301      	movs	r3, #1
 80064cc:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80064ce:	4b0f      	ldr	r3, [pc, #60]	; (800650c <xTaskResumeAll+0x134>)
 80064d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80064d4:	601a      	str	r2, [r3, #0]
 80064d6:	f3bf 8f4f 	dsb	sy
 80064da:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80064de:	f001 f98b 	bl	80077f8 <vPortExitCritical>

	return xAlreadyYielded;
 80064e2:	68bb      	ldr	r3, [r7, #8]
}
 80064e4:	4618      	mov	r0, r3
 80064e6:	3710      	adds	r7, #16
 80064e8:	46bd      	mov	sp, r7
 80064ea:	bd80      	pop	{r7, pc}
 80064ec:	20000c7c 	.word	0x20000c7c
 80064f0:	20000c54 	.word	0x20000c54
 80064f4:	20000c14 	.word	0x20000c14
 80064f8:	20000c5c 	.word	0x20000c5c
 80064fc:	20000784 	.word	0x20000784
 8006500:	20000780 	.word	0x20000780
 8006504:	20000c68 	.word	0x20000c68
 8006508:	20000c64 	.word	0x20000c64
 800650c:	e000ed04 	.word	0xe000ed04

08006510 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006510:	b480      	push	{r7}
 8006512:	b083      	sub	sp, #12
 8006514:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006516:	4b05      	ldr	r3, [pc, #20]	; (800652c <xTaskGetTickCount+0x1c>)
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800651c:	687b      	ldr	r3, [r7, #4]
}
 800651e:	4618      	mov	r0, r3
 8006520:	370c      	adds	r7, #12
 8006522:	46bd      	mov	sp, r7
 8006524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006528:	4770      	bx	lr
 800652a:	bf00      	nop
 800652c:	20000c58 	.word	0x20000c58

08006530 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006530:	b580      	push	{r7, lr}
 8006532:	b086      	sub	sp, #24
 8006534:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006536:	2300      	movs	r3, #0
 8006538:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800653a:	4b51      	ldr	r3, [pc, #324]	; (8006680 <xTaskIncrementTick+0x150>)
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	2b00      	cmp	r3, #0
 8006540:	f040 808d 	bne.w	800665e <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006544:	4b4f      	ldr	r3, [pc, #316]	; (8006684 <xTaskIncrementTick+0x154>)
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	3301      	adds	r3, #1
 800654a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800654c:	4a4d      	ldr	r2, [pc, #308]	; (8006684 <xTaskIncrementTick+0x154>)
 800654e:	693b      	ldr	r3, [r7, #16]
 8006550:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006552:	693b      	ldr	r3, [r7, #16]
 8006554:	2b00      	cmp	r3, #0
 8006556:	d11f      	bne.n	8006598 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8006558:	4b4b      	ldr	r3, [pc, #300]	; (8006688 <xTaskIncrementTick+0x158>)
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	2b00      	cmp	r3, #0
 8006560:	d009      	beq.n	8006576 <xTaskIncrementTick+0x46>
 8006562:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006566:	f383 8811 	msr	BASEPRI, r3
 800656a:	f3bf 8f6f 	isb	sy
 800656e:	f3bf 8f4f 	dsb	sy
 8006572:	603b      	str	r3, [r7, #0]
 8006574:	e7fe      	b.n	8006574 <xTaskIncrementTick+0x44>
 8006576:	4b44      	ldr	r3, [pc, #272]	; (8006688 <xTaskIncrementTick+0x158>)
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	60fb      	str	r3, [r7, #12]
 800657c:	4b43      	ldr	r3, [pc, #268]	; (800668c <xTaskIncrementTick+0x15c>)
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	4a41      	ldr	r2, [pc, #260]	; (8006688 <xTaskIncrementTick+0x158>)
 8006582:	6013      	str	r3, [r2, #0]
 8006584:	4a41      	ldr	r2, [pc, #260]	; (800668c <xTaskIncrementTick+0x15c>)
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	6013      	str	r3, [r2, #0]
 800658a:	4b41      	ldr	r3, [pc, #260]	; (8006690 <xTaskIncrementTick+0x160>)
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	3301      	adds	r3, #1
 8006590:	4a3f      	ldr	r2, [pc, #252]	; (8006690 <xTaskIncrementTick+0x160>)
 8006592:	6013      	str	r3, [r2, #0]
 8006594:	f000 faca 	bl	8006b2c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006598:	4b3e      	ldr	r3, [pc, #248]	; (8006694 <xTaskIncrementTick+0x164>)
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	693a      	ldr	r2, [r7, #16]
 800659e:	429a      	cmp	r2, r3
 80065a0:	d34e      	bcc.n	8006640 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80065a2:	4b39      	ldr	r3, [pc, #228]	; (8006688 <xTaskIncrementTick+0x158>)
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d101      	bne.n	80065b0 <xTaskIncrementTick+0x80>
 80065ac:	2301      	movs	r3, #1
 80065ae:	e000      	b.n	80065b2 <xTaskIncrementTick+0x82>
 80065b0:	2300      	movs	r3, #0
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d004      	beq.n	80065c0 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80065b6:	4b37      	ldr	r3, [pc, #220]	; (8006694 <xTaskIncrementTick+0x164>)
 80065b8:	f04f 32ff 	mov.w	r2, #4294967295
 80065bc:	601a      	str	r2, [r3, #0]
					break;
 80065be:	e03f      	b.n	8006640 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80065c0:	4b31      	ldr	r3, [pc, #196]	; (8006688 <xTaskIncrementTick+0x158>)
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	68db      	ldr	r3, [r3, #12]
 80065c6:	68db      	ldr	r3, [r3, #12]
 80065c8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80065ca:	68bb      	ldr	r3, [r7, #8]
 80065cc:	685b      	ldr	r3, [r3, #4]
 80065ce:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80065d0:	693a      	ldr	r2, [r7, #16]
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	429a      	cmp	r2, r3
 80065d6:	d203      	bcs.n	80065e0 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80065d8:	4a2e      	ldr	r2, [pc, #184]	; (8006694 <xTaskIncrementTick+0x164>)
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	6013      	str	r3, [r2, #0]
						break;
 80065de:	e02f      	b.n	8006640 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80065e0:	68bb      	ldr	r3, [r7, #8]
 80065e2:	3304      	adds	r3, #4
 80065e4:	4618      	mov	r0, r3
 80065e6:	f7fe fda1 	bl	800512c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80065ea:	68bb      	ldr	r3, [r7, #8]
 80065ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d004      	beq.n	80065fc <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80065f2:	68bb      	ldr	r3, [r7, #8]
 80065f4:	3318      	adds	r3, #24
 80065f6:	4618      	mov	r0, r3
 80065f8:	f7fe fd98 	bl	800512c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80065fc:	68bb      	ldr	r3, [r7, #8]
 80065fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006600:	4b25      	ldr	r3, [pc, #148]	; (8006698 <xTaskIncrementTick+0x168>)
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	429a      	cmp	r2, r3
 8006606:	d903      	bls.n	8006610 <xTaskIncrementTick+0xe0>
 8006608:	68bb      	ldr	r3, [r7, #8]
 800660a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800660c:	4a22      	ldr	r2, [pc, #136]	; (8006698 <xTaskIncrementTick+0x168>)
 800660e:	6013      	str	r3, [r2, #0]
 8006610:	68bb      	ldr	r3, [r7, #8]
 8006612:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006614:	4613      	mov	r3, r2
 8006616:	009b      	lsls	r3, r3, #2
 8006618:	4413      	add	r3, r2
 800661a:	009b      	lsls	r3, r3, #2
 800661c:	4a1f      	ldr	r2, [pc, #124]	; (800669c <xTaskIncrementTick+0x16c>)
 800661e:	441a      	add	r2, r3
 8006620:	68bb      	ldr	r3, [r7, #8]
 8006622:	3304      	adds	r3, #4
 8006624:	4619      	mov	r1, r3
 8006626:	4610      	mov	r0, r2
 8006628:	f7fe fd23 	bl	8005072 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800662c:	68bb      	ldr	r3, [r7, #8]
 800662e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006630:	4b1b      	ldr	r3, [pc, #108]	; (80066a0 <xTaskIncrementTick+0x170>)
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006636:	429a      	cmp	r2, r3
 8006638:	d3b3      	bcc.n	80065a2 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 800663a:	2301      	movs	r3, #1
 800663c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800663e:	e7b0      	b.n	80065a2 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006640:	4b17      	ldr	r3, [pc, #92]	; (80066a0 <xTaskIncrementTick+0x170>)
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006646:	4915      	ldr	r1, [pc, #84]	; (800669c <xTaskIncrementTick+0x16c>)
 8006648:	4613      	mov	r3, r2
 800664a:	009b      	lsls	r3, r3, #2
 800664c:	4413      	add	r3, r2
 800664e:	009b      	lsls	r3, r3, #2
 8006650:	440b      	add	r3, r1
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	2b01      	cmp	r3, #1
 8006656:	d907      	bls.n	8006668 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8006658:	2301      	movs	r3, #1
 800665a:	617b      	str	r3, [r7, #20]
 800665c:	e004      	b.n	8006668 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800665e:	4b11      	ldr	r3, [pc, #68]	; (80066a4 <xTaskIncrementTick+0x174>)
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	3301      	adds	r3, #1
 8006664:	4a0f      	ldr	r2, [pc, #60]	; (80066a4 <xTaskIncrementTick+0x174>)
 8006666:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8006668:	4b0f      	ldr	r3, [pc, #60]	; (80066a8 <xTaskIncrementTick+0x178>)
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	2b00      	cmp	r3, #0
 800666e:	d001      	beq.n	8006674 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8006670:	2301      	movs	r3, #1
 8006672:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8006674:	697b      	ldr	r3, [r7, #20]
}
 8006676:	4618      	mov	r0, r3
 8006678:	3718      	adds	r7, #24
 800667a:	46bd      	mov	sp, r7
 800667c:	bd80      	pop	{r7, pc}
 800667e:	bf00      	nop
 8006680:	20000c7c 	.word	0x20000c7c
 8006684:	20000c58 	.word	0x20000c58
 8006688:	20000c0c 	.word	0x20000c0c
 800668c:	20000c10 	.word	0x20000c10
 8006690:	20000c6c 	.word	0x20000c6c
 8006694:	20000c74 	.word	0x20000c74
 8006698:	20000c5c 	.word	0x20000c5c
 800669c:	20000784 	.word	0x20000784
 80066a0:	20000780 	.word	0x20000780
 80066a4:	20000c64 	.word	0x20000c64
 80066a8:	20000c68 	.word	0x20000c68

080066ac <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80066ac:	b480      	push	{r7}
 80066ae:	b085      	sub	sp, #20
 80066b0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80066b2:	4b27      	ldr	r3, [pc, #156]	; (8006750 <vTaskSwitchContext+0xa4>)
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d003      	beq.n	80066c2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80066ba:	4b26      	ldr	r3, [pc, #152]	; (8006754 <vTaskSwitchContext+0xa8>)
 80066bc:	2201      	movs	r2, #1
 80066be:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80066c0:	e040      	b.n	8006744 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 80066c2:	4b24      	ldr	r3, [pc, #144]	; (8006754 <vTaskSwitchContext+0xa8>)
 80066c4:	2200      	movs	r2, #0
 80066c6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80066c8:	4b23      	ldr	r3, [pc, #140]	; (8006758 <vTaskSwitchContext+0xac>)
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	60fb      	str	r3, [r7, #12]
 80066ce:	e00f      	b.n	80066f0 <vTaskSwitchContext+0x44>
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d109      	bne.n	80066ea <vTaskSwitchContext+0x3e>
 80066d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066da:	f383 8811 	msr	BASEPRI, r3
 80066de:	f3bf 8f6f 	isb	sy
 80066e2:	f3bf 8f4f 	dsb	sy
 80066e6:	607b      	str	r3, [r7, #4]
 80066e8:	e7fe      	b.n	80066e8 <vTaskSwitchContext+0x3c>
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	3b01      	subs	r3, #1
 80066ee:	60fb      	str	r3, [r7, #12]
 80066f0:	491a      	ldr	r1, [pc, #104]	; (800675c <vTaskSwitchContext+0xb0>)
 80066f2:	68fa      	ldr	r2, [r7, #12]
 80066f4:	4613      	mov	r3, r2
 80066f6:	009b      	lsls	r3, r3, #2
 80066f8:	4413      	add	r3, r2
 80066fa:	009b      	lsls	r3, r3, #2
 80066fc:	440b      	add	r3, r1
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	2b00      	cmp	r3, #0
 8006702:	d0e5      	beq.n	80066d0 <vTaskSwitchContext+0x24>
 8006704:	68fa      	ldr	r2, [r7, #12]
 8006706:	4613      	mov	r3, r2
 8006708:	009b      	lsls	r3, r3, #2
 800670a:	4413      	add	r3, r2
 800670c:	009b      	lsls	r3, r3, #2
 800670e:	4a13      	ldr	r2, [pc, #76]	; (800675c <vTaskSwitchContext+0xb0>)
 8006710:	4413      	add	r3, r2
 8006712:	60bb      	str	r3, [r7, #8]
 8006714:	68bb      	ldr	r3, [r7, #8]
 8006716:	685b      	ldr	r3, [r3, #4]
 8006718:	685a      	ldr	r2, [r3, #4]
 800671a:	68bb      	ldr	r3, [r7, #8]
 800671c:	605a      	str	r2, [r3, #4]
 800671e:	68bb      	ldr	r3, [r7, #8]
 8006720:	685a      	ldr	r2, [r3, #4]
 8006722:	68bb      	ldr	r3, [r7, #8]
 8006724:	3308      	adds	r3, #8
 8006726:	429a      	cmp	r2, r3
 8006728:	d104      	bne.n	8006734 <vTaskSwitchContext+0x88>
 800672a:	68bb      	ldr	r3, [r7, #8]
 800672c:	685b      	ldr	r3, [r3, #4]
 800672e:	685a      	ldr	r2, [r3, #4]
 8006730:	68bb      	ldr	r3, [r7, #8]
 8006732:	605a      	str	r2, [r3, #4]
 8006734:	68bb      	ldr	r3, [r7, #8]
 8006736:	685b      	ldr	r3, [r3, #4]
 8006738:	68db      	ldr	r3, [r3, #12]
 800673a:	4a09      	ldr	r2, [pc, #36]	; (8006760 <vTaskSwitchContext+0xb4>)
 800673c:	6013      	str	r3, [r2, #0]
 800673e:	4a06      	ldr	r2, [pc, #24]	; (8006758 <vTaskSwitchContext+0xac>)
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	6013      	str	r3, [r2, #0]
}
 8006744:	bf00      	nop
 8006746:	3714      	adds	r7, #20
 8006748:	46bd      	mov	sp, r7
 800674a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800674e:	4770      	bx	lr
 8006750:	20000c7c 	.word	0x20000c7c
 8006754:	20000c68 	.word	0x20000c68
 8006758:	20000c5c 	.word	0x20000c5c
 800675c:	20000784 	.word	0x20000784
 8006760:	20000780 	.word	0x20000780

08006764 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006764:	b580      	push	{r7, lr}
 8006766:	b084      	sub	sp, #16
 8006768:	af00      	add	r7, sp, #0
 800676a:	6078      	str	r0, [r7, #4]
 800676c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	2b00      	cmp	r3, #0
 8006772:	d109      	bne.n	8006788 <vTaskPlaceOnEventList+0x24>
 8006774:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006778:	f383 8811 	msr	BASEPRI, r3
 800677c:	f3bf 8f6f 	isb	sy
 8006780:	f3bf 8f4f 	dsb	sy
 8006784:	60fb      	str	r3, [r7, #12]
 8006786:	e7fe      	b.n	8006786 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006788:	4b07      	ldr	r3, [pc, #28]	; (80067a8 <vTaskPlaceOnEventList+0x44>)
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	3318      	adds	r3, #24
 800678e:	4619      	mov	r1, r3
 8006790:	6878      	ldr	r0, [r7, #4]
 8006792:	f7fe fc92 	bl	80050ba <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006796:	2101      	movs	r1, #1
 8006798:	6838      	ldr	r0, [r7, #0]
 800679a:	f000 fb7d 	bl	8006e98 <prvAddCurrentTaskToDelayedList>
}
 800679e:	bf00      	nop
 80067a0:	3710      	adds	r7, #16
 80067a2:	46bd      	mov	sp, r7
 80067a4:	bd80      	pop	{r7, pc}
 80067a6:	bf00      	nop
 80067a8:	20000780 	.word	0x20000780

080067ac <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80067ac:	b580      	push	{r7, lr}
 80067ae:	b086      	sub	sp, #24
 80067b0:	af00      	add	r7, sp, #0
 80067b2:	60f8      	str	r0, [r7, #12]
 80067b4:	60b9      	str	r1, [r7, #8]
 80067b6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d109      	bne.n	80067d2 <vTaskPlaceOnEventListRestricted+0x26>
 80067be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067c2:	f383 8811 	msr	BASEPRI, r3
 80067c6:	f3bf 8f6f 	isb	sy
 80067ca:	f3bf 8f4f 	dsb	sy
 80067ce:	617b      	str	r3, [r7, #20]
 80067d0:	e7fe      	b.n	80067d0 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80067d2:	4b0a      	ldr	r3, [pc, #40]	; (80067fc <vTaskPlaceOnEventListRestricted+0x50>)
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	3318      	adds	r3, #24
 80067d8:	4619      	mov	r1, r3
 80067da:	68f8      	ldr	r0, [r7, #12]
 80067dc:	f7fe fc49 	bl	8005072 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d002      	beq.n	80067ec <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 80067e6:	f04f 33ff 	mov.w	r3, #4294967295
 80067ea:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80067ec:	6879      	ldr	r1, [r7, #4]
 80067ee:	68b8      	ldr	r0, [r7, #8]
 80067f0:	f000 fb52 	bl	8006e98 <prvAddCurrentTaskToDelayedList>
	}
 80067f4:	bf00      	nop
 80067f6:	3718      	adds	r7, #24
 80067f8:	46bd      	mov	sp, r7
 80067fa:	bd80      	pop	{r7, pc}
 80067fc:	20000780 	.word	0x20000780

08006800 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006800:	b580      	push	{r7, lr}
 8006802:	b086      	sub	sp, #24
 8006804:	af00      	add	r7, sp, #0
 8006806:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	68db      	ldr	r3, [r3, #12]
 800680c:	68db      	ldr	r3, [r3, #12]
 800680e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006810:	693b      	ldr	r3, [r7, #16]
 8006812:	2b00      	cmp	r3, #0
 8006814:	d109      	bne.n	800682a <xTaskRemoveFromEventList+0x2a>
 8006816:	f04f 0350 	mov.w	r3, #80	; 0x50
 800681a:	f383 8811 	msr	BASEPRI, r3
 800681e:	f3bf 8f6f 	isb	sy
 8006822:	f3bf 8f4f 	dsb	sy
 8006826:	60fb      	str	r3, [r7, #12]
 8006828:	e7fe      	b.n	8006828 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800682a:	693b      	ldr	r3, [r7, #16]
 800682c:	3318      	adds	r3, #24
 800682e:	4618      	mov	r0, r3
 8006830:	f7fe fc7c 	bl	800512c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006834:	4b1d      	ldr	r3, [pc, #116]	; (80068ac <xTaskRemoveFromEventList+0xac>)
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	2b00      	cmp	r3, #0
 800683a:	d11d      	bne.n	8006878 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800683c:	693b      	ldr	r3, [r7, #16]
 800683e:	3304      	adds	r3, #4
 8006840:	4618      	mov	r0, r3
 8006842:	f7fe fc73 	bl	800512c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006846:	693b      	ldr	r3, [r7, #16]
 8006848:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800684a:	4b19      	ldr	r3, [pc, #100]	; (80068b0 <xTaskRemoveFromEventList+0xb0>)
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	429a      	cmp	r2, r3
 8006850:	d903      	bls.n	800685a <xTaskRemoveFromEventList+0x5a>
 8006852:	693b      	ldr	r3, [r7, #16]
 8006854:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006856:	4a16      	ldr	r2, [pc, #88]	; (80068b0 <xTaskRemoveFromEventList+0xb0>)
 8006858:	6013      	str	r3, [r2, #0]
 800685a:	693b      	ldr	r3, [r7, #16]
 800685c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800685e:	4613      	mov	r3, r2
 8006860:	009b      	lsls	r3, r3, #2
 8006862:	4413      	add	r3, r2
 8006864:	009b      	lsls	r3, r3, #2
 8006866:	4a13      	ldr	r2, [pc, #76]	; (80068b4 <xTaskRemoveFromEventList+0xb4>)
 8006868:	441a      	add	r2, r3
 800686a:	693b      	ldr	r3, [r7, #16]
 800686c:	3304      	adds	r3, #4
 800686e:	4619      	mov	r1, r3
 8006870:	4610      	mov	r0, r2
 8006872:	f7fe fbfe 	bl	8005072 <vListInsertEnd>
 8006876:	e005      	b.n	8006884 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006878:	693b      	ldr	r3, [r7, #16]
 800687a:	3318      	adds	r3, #24
 800687c:	4619      	mov	r1, r3
 800687e:	480e      	ldr	r0, [pc, #56]	; (80068b8 <xTaskRemoveFromEventList+0xb8>)
 8006880:	f7fe fbf7 	bl	8005072 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006884:	693b      	ldr	r3, [r7, #16]
 8006886:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006888:	4b0c      	ldr	r3, [pc, #48]	; (80068bc <xTaskRemoveFromEventList+0xbc>)
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800688e:	429a      	cmp	r2, r3
 8006890:	d905      	bls.n	800689e <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006892:	2301      	movs	r3, #1
 8006894:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006896:	4b0a      	ldr	r3, [pc, #40]	; (80068c0 <xTaskRemoveFromEventList+0xc0>)
 8006898:	2201      	movs	r2, #1
 800689a:	601a      	str	r2, [r3, #0]
 800689c:	e001      	b.n	80068a2 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800689e:	2300      	movs	r3, #0
 80068a0:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 80068a2:	697b      	ldr	r3, [r7, #20]
}
 80068a4:	4618      	mov	r0, r3
 80068a6:	3718      	adds	r7, #24
 80068a8:	46bd      	mov	sp, r7
 80068aa:	bd80      	pop	{r7, pc}
 80068ac:	20000c7c 	.word	0x20000c7c
 80068b0:	20000c5c 	.word	0x20000c5c
 80068b4:	20000784 	.word	0x20000784
 80068b8:	20000c14 	.word	0x20000c14
 80068bc:	20000780 	.word	0x20000780
 80068c0:	20000c68 	.word	0x20000c68

080068c4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80068c4:	b480      	push	{r7}
 80068c6:	b083      	sub	sp, #12
 80068c8:	af00      	add	r7, sp, #0
 80068ca:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80068cc:	4b06      	ldr	r3, [pc, #24]	; (80068e8 <vTaskInternalSetTimeOutState+0x24>)
 80068ce:	681a      	ldr	r2, [r3, #0]
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80068d4:	4b05      	ldr	r3, [pc, #20]	; (80068ec <vTaskInternalSetTimeOutState+0x28>)
 80068d6:	681a      	ldr	r2, [r3, #0]
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	605a      	str	r2, [r3, #4]
}
 80068dc:	bf00      	nop
 80068de:	370c      	adds	r7, #12
 80068e0:	46bd      	mov	sp, r7
 80068e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e6:	4770      	bx	lr
 80068e8:	20000c6c 	.word	0x20000c6c
 80068ec:	20000c58 	.word	0x20000c58

080068f0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80068f0:	b580      	push	{r7, lr}
 80068f2:	b088      	sub	sp, #32
 80068f4:	af00      	add	r7, sp, #0
 80068f6:	6078      	str	r0, [r7, #4]
 80068f8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d109      	bne.n	8006914 <xTaskCheckForTimeOut+0x24>
 8006900:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006904:	f383 8811 	msr	BASEPRI, r3
 8006908:	f3bf 8f6f 	isb	sy
 800690c:	f3bf 8f4f 	dsb	sy
 8006910:	613b      	str	r3, [r7, #16]
 8006912:	e7fe      	b.n	8006912 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8006914:	683b      	ldr	r3, [r7, #0]
 8006916:	2b00      	cmp	r3, #0
 8006918:	d109      	bne.n	800692e <xTaskCheckForTimeOut+0x3e>
 800691a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800691e:	f383 8811 	msr	BASEPRI, r3
 8006922:	f3bf 8f6f 	isb	sy
 8006926:	f3bf 8f4f 	dsb	sy
 800692a:	60fb      	str	r3, [r7, #12]
 800692c:	e7fe      	b.n	800692c <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 800692e:	f000 ff35 	bl	800779c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006932:	4b1d      	ldr	r3, [pc, #116]	; (80069a8 <xTaskCheckForTimeOut+0xb8>)
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	685b      	ldr	r3, [r3, #4]
 800693c:	69ba      	ldr	r2, [r7, #24]
 800693e:	1ad3      	subs	r3, r2, r3
 8006940:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006942:	683b      	ldr	r3, [r7, #0]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	f1b3 3fff 	cmp.w	r3, #4294967295
 800694a:	d102      	bne.n	8006952 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800694c:	2300      	movs	r3, #0
 800694e:	61fb      	str	r3, [r7, #28]
 8006950:	e023      	b.n	800699a <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681a      	ldr	r2, [r3, #0]
 8006956:	4b15      	ldr	r3, [pc, #84]	; (80069ac <xTaskCheckForTimeOut+0xbc>)
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	429a      	cmp	r2, r3
 800695c:	d007      	beq.n	800696e <xTaskCheckForTimeOut+0x7e>
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	685b      	ldr	r3, [r3, #4]
 8006962:	69ba      	ldr	r2, [r7, #24]
 8006964:	429a      	cmp	r2, r3
 8006966:	d302      	bcc.n	800696e <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006968:	2301      	movs	r3, #1
 800696a:	61fb      	str	r3, [r7, #28]
 800696c:	e015      	b.n	800699a <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800696e:	683b      	ldr	r3, [r7, #0]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	697a      	ldr	r2, [r7, #20]
 8006974:	429a      	cmp	r2, r3
 8006976:	d20b      	bcs.n	8006990 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006978:	683b      	ldr	r3, [r7, #0]
 800697a:	681a      	ldr	r2, [r3, #0]
 800697c:	697b      	ldr	r3, [r7, #20]
 800697e:	1ad2      	subs	r2, r2, r3
 8006980:	683b      	ldr	r3, [r7, #0]
 8006982:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006984:	6878      	ldr	r0, [r7, #4]
 8006986:	f7ff ff9d 	bl	80068c4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800698a:	2300      	movs	r3, #0
 800698c:	61fb      	str	r3, [r7, #28]
 800698e:	e004      	b.n	800699a <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8006990:	683b      	ldr	r3, [r7, #0]
 8006992:	2200      	movs	r2, #0
 8006994:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006996:	2301      	movs	r3, #1
 8006998:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800699a:	f000 ff2d 	bl	80077f8 <vPortExitCritical>

	return xReturn;
 800699e:	69fb      	ldr	r3, [r7, #28]
}
 80069a0:	4618      	mov	r0, r3
 80069a2:	3720      	adds	r7, #32
 80069a4:	46bd      	mov	sp, r7
 80069a6:	bd80      	pop	{r7, pc}
 80069a8:	20000c58 	.word	0x20000c58
 80069ac:	20000c6c 	.word	0x20000c6c

080069b0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80069b0:	b480      	push	{r7}
 80069b2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80069b4:	4b03      	ldr	r3, [pc, #12]	; (80069c4 <vTaskMissedYield+0x14>)
 80069b6:	2201      	movs	r2, #1
 80069b8:	601a      	str	r2, [r3, #0]
}
 80069ba:	bf00      	nop
 80069bc:	46bd      	mov	sp, r7
 80069be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c2:	4770      	bx	lr
 80069c4:	20000c68 	.word	0x20000c68

080069c8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80069c8:	b580      	push	{r7, lr}
 80069ca:	b082      	sub	sp, #8
 80069cc:	af00      	add	r7, sp, #0
 80069ce:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80069d0:	f000 f852 	bl	8006a78 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80069d4:	4b06      	ldr	r3, [pc, #24]	; (80069f0 <prvIdleTask+0x28>)
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	2b01      	cmp	r3, #1
 80069da:	d9f9      	bls.n	80069d0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80069dc:	4b05      	ldr	r3, [pc, #20]	; (80069f4 <prvIdleTask+0x2c>)
 80069de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80069e2:	601a      	str	r2, [r3, #0]
 80069e4:	f3bf 8f4f 	dsb	sy
 80069e8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80069ec:	e7f0      	b.n	80069d0 <prvIdleTask+0x8>
 80069ee:	bf00      	nop
 80069f0:	20000784 	.word	0x20000784
 80069f4:	e000ed04 	.word	0xe000ed04

080069f8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80069f8:	b580      	push	{r7, lr}
 80069fa:	b082      	sub	sp, #8
 80069fc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80069fe:	2300      	movs	r3, #0
 8006a00:	607b      	str	r3, [r7, #4]
 8006a02:	e00c      	b.n	8006a1e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006a04:	687a      	ldr	r2, [r7, #4]
 8006a06:	4613      	mov	r3, r2
 8006a08:	009b      	lsls	r3, r3, #2
 8006a0a:	4413      	add	r3, r2
 8006a0c:	009b      	lsls	r3, r3, #2
 8006a0e:	4a12      	ldr	r2, [pc, #72]	; (8006a58 <prvInitialiseTaskLists+0x60>)
 8006a10:	4413      	add	r3, r2
 8006a12:	4618      	mov	r0, r3
 8006a14:	f7fe fb00 	bl	8005018 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	3301      	adds	r3, #1
 8006a1c:	607b      	str	r3, [r7, #4]
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	2b37      	cmp	r3, #55	; 0x37
 8006a22:	d9ef      	bls.n	8006a04 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006a24:	480d      	ldr	r0, [pc, #52]	; (8006a5c <prvInitialiseTaskLists+0x64>)
 8006a26:	f7fe faf7 	bl	8005018 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006a2a:	480d      	ldr	r0, [pc, #52]	; (8006a60 <prvInitialiseTaskLists+0x68>)
 8006a2c:	f7fe faf4 	bl	8005018 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006a30:	480c      	ldr	r0, [pc, #48]	; (8006a64 <prvInitialiseTaskLists+0x6c>)
 8006a32:	f7fe faf1 	bl	8005018 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006a36:	480c      	ldr	r0, [pc, #48]	; (8006a68 <prvInitialiseTaskLists+0x70>)
 8006a38:	f7fe faee 	bl	8005018 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006a3c:	480b      	ldr	r0, [pc, #44]	; (8006a6c <prvInitialiseTaskLists+0x74>)
 8006a3e:	f7fe faeb 	bl	8005018 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006a42:	4b0b      	ldr	r3, [pc, #44]	; (8006a70 <prvInitialiseTaskLists+0x78>)
 8006a44:	4a05      	ldr	r2, [pc, #20]	; (8006a5c <prvInitialiseTaskLists+0x64>)
 8006a46:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006a48:	4b0a      	ldr	r3, [pc, #40]	; (8006a74 <prvInitialiseTaskLists+0x7c>)
 8006a4a:	4a05      	ldr	r2, [pc, #20]	; (8006a60 <prvInitialiseTaskLists+0x68>)
 8006a4c:	601a      	str	r2, [r3, #0]
}
 8006a4e:	bf00      	nop
 8006a50:	3708      	adds	r7, #8
 8006a52:	46bd      	mov	sp, r7
 8006a54:	bd80      	pop	{r7, pc}
 8006a56:	bf00      	nop
 8006a58:	20000784 	.word	0x20000784
 8006a5c:	20000be4 	.word	0x20000be4
 8006a60:	20000bf8 	.word	0x20000bf8
 8006a64:	20000c14 	.word	0x20000c14
 8006a68:	20000c28 	.word	0x20000c28
 8006a6c:	20000c40 	.word	0x20000c40
 8006a70:	20000c0c 	.word	0x20000c0c
 8006a74:	20000c10 	.word	0x20000c10

08006a78 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006a78:	b580      	push	{r7, lr}
 8006a7a:	b082      	sub	sp, #8
 8006a7c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006a7e:	e019      	b.n	8006ab4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006a80:	f000 fe8c 	bl	800779c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8006a84:	4b0f      	ldr	r3, [pc, #60]	; (8006ac4 <prvCheckTasksWaitingTermination+0x4c>)
 8006a86:	68db      	ldr	r3, [r3, #12]
 8006a88:	68db      	ldr	r3, [r3, #12]
 8006a8a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	3304      	adds	r3, #4
 8006a90:	4618      	mov	r0, r3
 8006a92:	f7fe fb4b 	bl	800512c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006a96:	4b0c      	ldr	r3, [pc, #48]	; (8006ac8 <prvCheckTasksWaitingTermination+0x50>)
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	3b01      	subs	r3, #1
 8006a9c:	4a0a      	ldr	r2, [pc, #40]	; (8006ac8 <prvCheckTasksWaitingTermination+0x50>)
 8006a9e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006aa0:	4b0a      	ldr	r3, [pc, #40]	; (8006acc <prvCheckTasksWaitingTermination+0x54>)
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	3b01      	subs	r3, #1
 8006aa6:	4a09      	ldr	r2, [pc, #36]	; (8006acc <prvCheckTasksWaitingTermination+0x54>)
 8006aa8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006aaa:	f000 fea5 	bl	80077f8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006aae:	6878      	ldr	r0, [r7, #4]
 8006ab0:	f000 f80e 	bl	8006ad0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006ab4:	4b05      	ldr	r3, [pc, #20]	; (8006acc <prvCheckTasksWaitingTermination+0x54>)
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d1e1      	bne.n	8006a80 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006abc:	bf00      	nop
 8006abe:	3708      	adds	r7, #8
 8006ac0:	46bd      	mov	sp, r7
 8006ac2:	bd80      	pop	{r7, pc}
 8006ac4:	20000c28 	.word	0x20000c28
 8006ac8:	20000c54 	.word	0x20000c54
 8006acc:	20000c3c 	.word	0x20000c3c

08006ad0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006ad0:	b580      	push	{r7, lr}
 8006ad2:	b084      	sub	sp, #16
 8006ad4:	af00      	add	r7, sp, #0
 8006ad6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d108      	bne.n	8006af4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ae6:	4618      	mov	r0, r3
 8006ae8:	f001 f834 	bl	8007b54 <vPortFree>
				vPortFree( pxTCB );
 8006aec:	6878      	ldr	r0, [r7, #4]
 8006aee:	f001 f831 	bl	8007b54 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006af2:	e017      	b.n	8006b24 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006afa:	2b01      	cmp	r3, #1
 8006afc:	d103      	bne.n	8006b06 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8006afe:	6878      	ldr	r0, [r7, #4]
 8006b00:	f001 f828 	bl	8007b54 <vPortFree>
	}
 8006b04:	e00e      	b.n	8006b24 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006b0c:	2b02      	cmp	r3, #2
 8006b0e:	d009      	beq.n	8006b24 <prvDeleteTCB+0x54>
 8006b10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b14:	f383 8811 	msr	BASEPRI, r3
 8006b18:	f3bf 8f6f 	isb	sy
 8006b1c:	f3bf 8f4f 	dsb	sy
 8006b20:	60fb      	str	r3, [r7, #12]
 8006b22:	e7fe      	b.n	8006b22 <prvDeleteTCB+0x52>
	}
 8006b24:	bf00      	nop
 8006b26:	3710      	adds	r7, #16
 8006b28:	46bd      	mov	sp, r7
 8006b2a:	bd80      	pop	{r7, pc}

08006b2c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006b2c:	b480      	push	{r7}
 8006b2e:	b083      	sub	sp, #12
 8006b30:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006b32:	4b0f      	ldr	r3, [pc, #60]	; (8006b70 <prvResetNextTaskUnblockTime+0x44>)
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d101      	bne.n	8006b40 <prvResetNextTaskUnblockTime+0x14>
 8006b3c:	2301      	movs	r3, #1
 8006b3e:	e000      	b.n	8006b42 <prvResetNextTaskUnblockTime+0x16>
 8006b40:	2300      	movs	r3, #0
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d004      	beq.n	8006b50 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006b46:	4b0b      	ldr	r3, [pc, #44]	; (8006b74 <prvResetNextTaskUnblockTime+0x48>)
 8006b48:	f04f 32ff 	mov.w	r2, #4294967295
 8006b4c:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006b4e:	e008      	b.n	8006b62 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006b50:	4b07      	ldr	r3, [pc, #28]	; (8006b70 <prvResetNextTaskUnblockTime+0x44>)
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	68db      	ldr	r3, [r3, #12]
 8006b56:	68db      	ldr	r3, [r3, #12]
 8006b58:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	685b      	ldr	r3, [r3, #4]
 8006b5e:	4a05      	ldr	r2, [pc, #20]	; (8006b74 <prvResetNextTaskUnblockTime+0x48>)
 8006b60:	6013      	str	r3, [r2, #0]
}
 8006b62:	bf00      	nop
 8006b64:	370c      	adds	r7, #12
 8006b66:	46bd      	mov	sp, r7
 8006b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b6c:	4770      	bx	lr
 8006b6e:	bf00      	nop
 8006b70:	20000c0c 	.word	0x20000c0c
 8006b74:	20000c74 	.word	0x20000c74

08006b78 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006b78:	b480      	push	{r7}
 8006b7a:	b083      	sub	sp, #12
 8006b7c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006b7e:	4b0b      	ldr	r3, [pc, #44]	; (8006bac <xTaskGetSchedulerState+0x34>)
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d102      	bne.n	8006b8c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006b86:	2301      	movs	r3, #1
 8006b88:	607b      	str	r3, [r7, #4]
 8006b8a:	e008      	b.n	8006b9e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006b8c:	4b08      	ldr	r3, [pc, #32]	; (8006bb0 <xTaskGetSchedulerState+0x38>)
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d102      	bne.n	8006b9a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006b94:	2302      	movs	r3, #2
 8006b96:	607b      	str	r3, [r7, #4]
 8006b98:	e001      	b.n	8006b9e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006b9a:	2300      	movs	r3, #0
 8006b9c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006b9e:	687b      	ldr	r3, [r7, #4]
	}
 8006ba0:	4618      	mov	r0, r3
 8006ba2:	370c      	adds	r7, #12
 8006ba4:	46bd      	mov	sp, r7
 8006ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006baa:	4770      	bx	lr
 8006bac:	20000c60 	.word	0x20000c60
 8006bb0:	20000c7c 	.word	0x20000c7c

08006bb4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8006bb4:	b580      	push	{r7, lr}
 8006bb6:	b084      	sub	sp, #16
 8006bb8:	af00      	add	r7, sp, #0
 8006bba:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8006bc0:	2300      	movs	r3, #0
 8006bc2:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d056      	beq.n	8006c78 <xTaskPriorityInherit+0xc4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8006bca:	68bb      	ldr	r3, [r7, #8]
 8006bcc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006bce:	4b2d      	ldr	r3, [pc, #180]	; (8006c84 <xTaskPriorityInherit+0xd0>)
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bd4:	429a      	cmp	r2, r3
 8006bd6:	d246      	bcs.n	8006c66 <xTaskPriorityInherit+0xb2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006bd8:	68bb      	ldr	r3, [r7, #8]
 8006bda:	699b      	ldr	r3, [r3, #24]
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	db06      	blt.n	8006bee <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006be0:	4b28      	ldr	r3, [pc, #160]	; (8006c84 <xTaskPriorityInherit+0xd0>)
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006be6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006bea:	68bb      	ldr	r3, [r7, #8]
 8006bec:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8006bee:	68bb      	ldr	r3, [r7, #8]
 8006bf0:	6959      	ldr	r1, [r3, #20]
 8006bf2:	68bb      	ldr	r3, [r7, #8]
 8006bf4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006bf6:	4613      	mov	r3, r2
 8006bf8:	009b      	lsls	r3, r3, #2
 8006bfa:	4413      	add	r3, r2
 8006bfc:	009b      	lsls	r3, r3, #2
 8006bfe:	4a22      	ldr	r2, [pc, #136]	; (8006c88 <xTaskPriorityInherit+0xd4>)
 8006c00:	4413      	add	r3, r2
 8006c02:	4299      	cmp	r1, r3
 8006c04:	d101      	bne.n	8006c0a <xTaskPriorityInherit+0x56>
 8006c06:	2301      	movs	r3, #1
 8006c08:	e000      	b.n	8006c0c <xTaskPriorityInherit+0x58>
 8006c0a:	2300      	movs	r3, #0
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d022      	beq.n	8006c56 <xTaskPriorityInherit+0xa2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006c10:	68bb      	ldr	r3, [r7, #8]
 8006c12:	3304      	adds	r3, #4
 8006c14:	4618      	mov	r0, r3
 8006c16:	f7fe fa89 	bl	800512c <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006c1a:	4b1a      	ldr	r3, [pc, #104]	; (8006c84 <xTaskPriorityInherit+0xd0>)
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c20:	68bb      	ldr	r3, [r7, #8]
 8006c22:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8006c24:	68bb      	ldr	r3, [r7, #8]
 8006c26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c28:	4b18      	ldr	r3, [pc, #96]	; (8006c8c <xTaskPriorityInherit+0xd8>)
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	429a      	cmp	r2, r3
 8006c2e:	d903      	bls.n	8006c38 <xTaskPriorityInherit+0x84>
 8006c30:	68bb      	ldr	r3, [r7, #8]
 8006c32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c34:	4a15      	ldr	r2, [pc, #84]	; (8006c8c <xTaskPriorityInherit+0xd8>)
 8006c36:	6013      	str	r3, [r2, #0]
 8006c38:	68bb      	ldr	r3, [r7, #8]
 8006c3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c3c:	4613      	mov	r3, r2
 8006c3e:	009b      	lsls	r3, r3, #2
 8006c40:	4413      	add	r3, r2
 8006c42:	009b      	lsls	r3, r3, #2
 8006c44:	4a10      	ldr	r2, [pc, #64]	; (8006c88 <xTaskPriorityInherit+0xd4>)
 8006c46:	441a      	add	r2, r3
 8006c48:	68bb      	ldr	r3, [r7, #8]
 8006c4a:	3304      	adds	r3, #4
 8006c4c:	4619      	mov	r1, r3
 8006c4e:	4610      	mov	r0, r2
 8006c50:	f7fe fa0f 	bl	8005072 <vListInsertEnd>
 8006c54:	e004      	b.n	8006c60 <xTaskPriorityInherit+0xac>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006c56:	4b0b      	ldr	r3, [pc, #44]	; (8006c84 <xTaskPriorityInherit+0xd0>)
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c5c:	68bb      	ldr	r3, [r7, #8]
 8006c5e:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8006c60:	2301      	movs	r3, #1
 8006c62:	60fb      	str	r3, [r7, #12]
 8006c64:	e008      	b.n	8006c78 <xTaskPriorityInherit+0xc4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8006c66:	68bb      	ldr	r3, [r7, #8]
 8006c68:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006c6a:	4b06      	ldr	r3, [pc, #24]	; (8006c84 <xTaskPriorityInherit+0xd0>)
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c70:	429a      	cmp	r2, r3
 8006c72:	d201      	bcs.n	8006c78 <xTaskPriorityInherit+0xc4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8006c74:	2301      	movs	r3, #1
 8006c76:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006c78:	68fb      	ldr	r3, [r7, #12]
	}
 8006c7a:	4618      	mov	r0, r3
 8006c7c:	3710      	adds	r7, #16
 8006c7e:	46bd      	mov	sp, r7
 8006c80:	bd80      	pop	{r7, pc}
 8006c82:	bf00      	nop
 8006c84:	20000780 	.word	0x20000780
 8006c88:	20000784 	.word	0x20000784
 8006c8c:	20000c5c 	.word	0x20000c5c

08006c90 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006c90:	b580      	push	{r7, lr}
 8006c92:	b086      	sub	sp, #24
 8006c94:	af00      	add	r7, sp, #0
 8006c96:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006c9c:	2300      	movs	r3, #0
 8006c9e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d054      	beq.n	8006d50 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006ca6:	4b2d      	ldr	r3, [pc, #180]	; (8006d5c <xTaskPriorityDisinherit+0xcc>)
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	693a      	ldr	r2, [r7, #16]
 8006cac:	429a      	cmp	r2, r3
 8006cae:	d009      	beq.n	8006cc4 <xTaskPriorityDisinherit+0x34>
 8006cb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cb4:	f383 8811 	msr	BASEPRI, r3
 8006cb8:	f3bf 8f6f 	isb	sy
 8006cbc:	f3bf 8f4f 	dsb	sy
 8006cc0:	60fb      	str	r3, [r7, #12]
 8006cc2:	e7fe      	b.n	8006cc2 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8006cc4:	693b      	ldr	r3, [r7, #16]
 8006cc6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d109      	bne.n	8006ce0 <xTaskPriorityDisinherit+0x50>
 8006ccc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cd0:	f383 8811 	msr	BASEPRI, r3
 8006cd4:	f3bf 8f6f 	isb	sy
 8006cd8:	f3bf 8f4f 	dsb	sy
 8006cdc:	60bb      	str	r3, [r7, #8]
 8006cde:	e7fe      	b.n	8006cde <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8006ce0:	693b      	ldr	r3, [r7, #16]
 8006ce2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ce4:	1e5a      	subs	r2, r3, #1
 8006ce6:	693b      	ldr	r3, [r7, #16]
 8006ce8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006cea:	693b      	ldr	r3, [r7, #16]
 8006cec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006cee:	693b      	ldr	r3, [r7, #16]
 8006cf0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006cf2:	429a      	cmp	r2, r3
 8006cf4:	d02c      	beq.n	8006d50 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006cf6:	693b      	ldr	r3, [r7, #16]
 8006cf8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d128      	bne.n	8006d50 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006cfe:	693b      	ldr	r3, [r7, #16]
 8006d00:	3304      	adds	r3, #4
 8006d02:	4618      	mov	r0, r3
 8006d04:	f7fe fa12 	bl	800512c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006d08:	693b      	ldr	r3, [r7, #16]
 8006d0a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006d0c:	693b      	ldr	r3, [r7, #16]
 8006d0e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006d10:	693b      	ldr	r3, [r7, #16]
 8006d12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d14:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006d18:	693b      	ldr	r3, [r7, #16]
 8006d1a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006d1c:	693b      	ldr	r3, [r7, #16]
 8006d1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d20:	4b0f      	ldr	r3, [pc, #60]	; (8006d60 <xTaskPriorityDisinherit+0xd0>)
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	429a      	cmp	r2, r3
 8006d26:	d903      	bls.n	8006d30 <xTaskPriorityDisinherit+0xa0>
 8006d28:	693b      	ldr	r3, [r7, #16]
 8006d2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d2c:	4a0c      	ldr	r2, [pc, #48]	; (8006d60 <xTaskPriorityDisinherit+0xd0>)
 8006d2e:	6013      	str	r3, [r2, #0]
 8006d30:	693b      	ldr	r3, [r7, #16]
 8006d32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d34:	4613      	mov	r3, r2
 8006d36:	009b      	lsls	r3, r3, #2
 8006d38:	4413      	add	r3, r2
 8006d3a:	009b      	lsls	r3, r3, #2
 8006d3c:	4a09      	ldr	r2, [pc, #36]	; (8006d64 <xTaskPriorityDisinherit+0xd4>)
 8006d3e:	441a      	add	r2, r3
 8006d40:	693b      	ldr	r3, [r7, #16]
 8006d42:	3304      	adds	r3, #4
 8006d44:	4619      	mov	r1, r3
 8006d46:	4610      	mov	r0, r2
 8006d48:	f7fe f993 	bl	8005072 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006d4c:	2301      	movs	r3, #1
 8006d4e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006d50:	697b      	ldr	r3, [r7, #20]
	}
 8006d52:	4618      	mov	r0, r3
 8006d54:	3718      	adds	r7, #24
 8006d56:	46bd      	mov	sp, r7
 8006d58:	bd80      	pop	{r7, pc}
 8006d5a:	bf00      	nop
 8006d5c:	20000780 	.word	0x20000780
 8006d60:	20000c5c 	.word	0x20000c5c
 8006d64:	20000784 	.word	0x20000784

08006d68 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8006d68:	b580      	push	{r7, lr}
 8006d6a:	b088      	sub	sp, #32
 8006d6c:	af00      	add	r7, sp, #0
 8006d6e:	6078      	str	r0, [r7, #4]
 8006d70:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8006d76:	2301      	movs	r3, #1
 8006d78:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d06d      	beq.n	8006e5c <vTaskPriorityDisinheritAfterTimeout+0xf4>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8006d80:	69bb      	ldr	r3, [r7, #24]
 8006d82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d109      	bne.n	8006d9c <vTaskPriorityDisinheritAfterTimeout+0x34>
 8006d88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d8c:	f383 8811 	msr	BASEPRI, r3
 8006d90:	f3bf 8f6f 	isb	sy
 8006d94:	f3bf 8f4f 	dsb	sy
 8006d98:	60fb      	str	r3, [r7, #12]
 8006d9a:	e7fe      	b.n	8006d9a <vTaskPriorityDisinheritAfterTimeout+0x32>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8006d9c:	69bb      	ldr	r3, [r7, #24]
 8006d9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006da0:	683a      	ldr	r2, [r7, #0]
 8006da2:	429a      	cmp	r2, r3
 8006da4:	d902      	bls.n	8006dac <vTaskPriorityDisinheritAfterTimeout+0x44>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8006da6:	683b      	ldr	r3, [r7, #0]
 8006da8:	61fb      	str	r3, [r7, #28]
 8006daa:	e002      	b.n	8006db2 <vTaskPriorityDisinheritAfterTimeout+0x4a>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8006dac:	69bb      	ldr	r3, [r7, #24]
 8006dae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006db0:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8006db2:	69bb      	ldr	r3, [r7, #24]
 8006db4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006db6:	69fa      	ldr	r2, [r7, #28]
 8006db8:	429a      	cmp	r2, r3
 8006dba:	d04f      	beq.n	8006e5c <vTaskPriorityDisinheritAfterTimeout+0xf4>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8006dbc:	69bb      	ldr	r3, [r7, #24]
 8006dbe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006dc0:	697a      	ldr	r2, [r7, #20]
 8006dc2:	429a      	cmp	r2, r3
 8006dc4:	d14a      	bne.n	8006e5c <vTaskPriorityDisinheritAfterTimeout+0xf4>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8006dc6:	4b27      	ldr	r3, [pc, #156]	; (8006e64 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	69ba      	ldr	r2, [r7, #24]
 8006dcc:	429a      	cmp	r2, r3
 8006dce:	d109      	bne.n	8006de4 <vTaskPriorityDisinheritAfterTimeout+0x7c>
 8006dd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dd4:	f383 8811 	msr	BASEPRI, r3
 8006dd8:	f3bf 8f6f 	isb	sy
 8006ddc:	f3bf 8f4f 	dsb	sy
 8006de0:	60bb      	str	r3, [r7, #8]
 8006de2:	e7fe      	b.n	8006de2 <vTaskPriorityDisinheritAfterTimeout+0x7a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8006de4:	69bb      	ldr	r3, [r7, #24]
 8006de6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006de8:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8006dea:	69bb      	ldr	r3, [r7, #24]
 8006dec:	69fa      	ldr	r2, [r7, #28]
 8006dee:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006df0:	69bb      	ldr	r3, [r7, #24]
 8006df2:	699b      	ldr	r3, [r3, #24]
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	db04      	blt.n	8006e02 <vTaskPriorityDisinheritAfterTimeout+0x9a>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006df8:	69fb      	ldr	r3, [r7, #28]
 8006dfa:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006dfe:	69bb      	ldr	r3, [r7, #24]
 8006e00:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8006e02:	69bb      	ldr	r3, [r7, #24]
 8006e04:	6959      	ldr	r1, [r3, #20]
 8006e06:	693a      	ldr	r2, [r7, #16]
 8006e08:	4613      	mov	r3, r2
 8006e0a:	009b      	lsls	r3, r3, #2
 8006e0c:	4413      	add	r3, r2
 8006e0e:	009b      	lsls	r3, r3, #2
 8006e10:	4a15      	ldr	r2, [pc, #84]	; (8006e68 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8006e12:	4413      	add	r3, r2
 8006e14:	4299      	cmp	r1, r3
 8006e16:	d101      	bne.n	8006e1c <vTaskPriorityDisinheritAfterTimeout+0xb4>
 8006e18:	2301      	movs	r3, #1
 8006e1a:	e000      	b.n	8006e1e <vTaskPriorityDisinheritAfterTimeout+0xb6>
 8006e1c:	2300      	movs	r3, #0
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d01c      	beq.n	8006e5c <vTaskPriorityDisinheritAfterTimeout+0xf4>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006e22:	69bb      	ldr	r3, [r7, #24]
 8006e24:	3304      	adds	r3, #4
 8006e26:	4618      	mov	r0, r3
 8006e28:	f7fe f980 	bl	800512c <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8006e2c:	69bb      	ldr	r3, [r7, #24]
 8006e2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e30:	4b0e      	ldr	r3, [pc, #56]	; (8006e6c <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	429a      	cmp	r2, r3
 8006e36:	d903      	bls.n	8006e40 <vTaskPriorityDisinheritAfterTimeout+0xd8>
 8006e38:	69bb      	ldr	r3, [r7, #24]
 8006e3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e3c:	4a0b      	ldr	r2, [pc, #44]	; (8006e6c <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8006e3e:	6013      	str	r3, [r2, #0]
 8006e40:	69bb      	ldr	r3, [r7, #24]
 8006e42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e44:	4613      	mov	r3, r2
 8006e46:	009b      	lsls	r3, r3, #2
 8006e48:	4413      	add	r3, r2
 8006e4a:	009b      	lsls	r3, r3, #2
 8006e4c:	4a06      	ldr	r2, [pc, #24]	; (8006e68 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8006e4e:	441a      	add	r2, r3
 8006e50:	69bb      	ldr	r3, [r7, #24]
 8006e52:	3304      	adds	r3, #4
 8006e54:	4619      	mov	r1, r3
 8006e56:	4610      	mov	r0, r2
 8006e58:	f7fe f90b 	bl	8005072 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006e5c:	bf00      	nop
 8006e5e:	3720      	adds	r7, #32
 8006e60:	46bd      	mov	sp, r7
 8006e62:	bd80      	pop	{r7, pc}
 8006e64:	20000780 	.word	0x20000780
 8006e68:	20000784 	.word	0x20000784
 8006e6c:	20000c5c 	.word	0x20000c5c

08006e70 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8006e70:	b480      	push	{r7}
 8006e72:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8006e74:	4b07      	ldr	r3, [pc, #28]	; (8006e94 <pvTaskIncrementMutexHeldCount+0x24>)
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d004      	beq.n	8006e86 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8006e7c:	4b05      	ldr	r3, [pc, #20]	; (8006e94 <pvTaskIncrementMutexHeldCount+0x24>)
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006e82:	3201      	adds	r2, #1
 8006e84:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8006e86:	4b03      	ldr	r3, [pc, #12]	; (8006e94 <pvTaskIncrementMutexHeldCount+0x24>)
 8006e88:	681b      	ldr	r3, [r3, #0]
	}
 8006e8a:	4618      	mov	r0, r3
 8006e8c:	46bd      	mov	sp, r7
 8006e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e92:	4770      	bx	lr
 8006e94:	20000780 	.word	0x20000780

08006e98 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006e98:	b580      	push	{r7, lr}
 8006e9a:	b084      	sub	sp, #16
 8006e9c:	af00      	add	r7, sp, #0
 8006e9e:	6078      	str	r0, [r7, #4]
 8006ea0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006ea2:	4b21      	ldr	r3, [pc, #132]	; (8006f28 <prvAddCurrentTaskToDelayedList+0x90>)
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006ea8:	4b20      	ldr	r3, [pc, #128]	; (8006f2c <prvAddCurrentTaskToDelayedList+0x94>)
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	3304      	adds	r3, #4
 8006eae:	4618      	mov	r0, r3
 8006eb0:	f7fe f93c 	bl	800512c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006eba:	d10a      	bne.n	8006ed2 <prvAddCurrentTaskToDelayedList+0x3a>
 8006ebc:	683b      	ldr	r3, [r7, #0]
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d007      	beq.n	8006ed2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006ec2:	4b1a      	ldr	r3, [pc, #104]	; (8006f2c <prvAddCurrentTaskToDelayedList+0x94>)
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	3304      	adds	r3, #4
 8006ec8:	4619      	mov	r1, r3
 8006eca:	4819      	ldr	r0, [pc, #100]	; (8006f30 <prvAddCurrentTaskToDelayedList+0x98>)
 8006ecc:	f7fe f8d1 	bl	8005072 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006ed0:	e026      	b.n	8006f20 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006ed2:	68fa      	ldr	r2, [r7, #12]
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	4413      	add	r3, r2
 8006ed8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006eda:	4b14      	ldr	r3, [pc, #80]	; (8006f2c <prvAddCurrentTaskToDelayedList+0x94>)
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	68ba      	ldr	r2, [r7, #8]
 8006ee0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006ee2:	68ba      	ldr	r2, [r7, #8]
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	429a      	cmp	r2, r3
 8006ee8:	d209      	bcs.n	8006efe <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006eea:	4b12      	ldr	r3, [pc, #72]	; (8006f34 <prvAddCurrentTaskToDelayedList+0x9c>)
 8006eec:	681a      	ldr	r2, [r3, #0]
 8006eee:	4b0f      	ldr	r3, [pc, #60]	; (8006f2c <prvAddCurrentTaskToDelayedList+0x94>)
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	3304      	adds	r3, #4
 8006ef4:	4619      	mov	r1, r3
 8006ef6:	4610      	mov	r0, r2
 8006ef8:	f7fe f8df 	bl	80050ba <vListInsert>
}
 8006efc:	e010      	b.n	8006f20 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006efe:	4b0e      	ldr	r3, [pc, #56]	; (8006f38 <prvAddCurrentTaskToDelayedList+0xa0>)
 8006f00:	681a      	ldr	r2, [r3, #0]
 8006f02:	4b0a      	ldr	r3, [pc, #40]	; (8006f2c <prvAddCurrentTaskToDelayedList+0x94>)
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	3304      	adds	r3, #4
 8006f08:	4619      	mov	r1, r3
 8006f0a:	4610      	mov	r0, r2
 8006f0c:	f7fe f8d5 	bl	80050ba <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006f10:	4b0a      	ldr	r3, [pc, #40]	; (8006f3c <prvAddCurrentTaskToDelayedList+0xa4>)
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	68ba      	ldr	r2, [r7, #8]
 8006f16:	429a      	cmp	r2, r3
 8006f18:	d202      	bcs.n	8006f20 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006f1a:	4a08      	ldr	r2, [pc, #32]	; (8006f3c <prvAddCurrentTaskToDelayedList+0xa4>)
 8006f1c:	68bb      	ldr	r3, [r7, #8]
 8006f1e:	6013      	str	r3, [r2, #0]
}
 8006f20:	bf00      	nop
 8006f22:	3710      	adds	r7, #16
 8006f24:	46bd      	mov	sp, r7
 8006f26:	bd80      	pop	{r7, pc}
 8006f28:	20000c58 	.word	0x20000c58
 8006f2c:	20000780 	.word	0x20000780
 8006f30:	20000c40 	.word	0x20000c40
 8006f34:	20000c10 	.word	0x20000c10
 8006f38:	20000c0c 	.word	0x20000c0c
 8006f3c:	20000c74 	.word	0x20000c74

08006f40 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006f40:	b580      	push	{r7, lr}
 8006f42:	b08a      	sub	sp, #40	; 0x28
 8006f44:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006f46:	2300      	movs	r3, #0
 8006f48:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006f4a:	f000 fac3 	bl	80074d4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006f4e:	4b1c      	ldr	r3, [pc, #112]	; (8006fc0 <xTimerCreateTimerTask+0x80>)
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d021      	beq.n	8006f9a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006f56:	2300      	movs	r3, #0
 8006f58:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006f5a:	2300      	movs	r3, #0
 8006f5c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006f5e:	1d3a      	adds	r2, r7, #4
 8006f60:	f107 0108 	add.w	r1, r7, #8
 8006f64:	f107 030c 	add.w	r3, r7, #12
 8006f68:	4618      	mov	r0, r3
 8006f6a:	f7fe f83b 	bl	8004fe4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006f6e:	6879      	ldr	r1, [r7, #4]
 8006f70:	68bb      	ldr	r3, [r7, #8]
 8006f72:	68fa      	ldr	r2, [r7, #12]
 8006f74:	9202      	str	r2, [sp, #8]
 8006f76:	9301      	str	r3, [sp, #4]
 8006f78:	2302      	movs	r3, #2
 8006f7a:	9300      	str	r3, [sp, #0]
 8006f7c:	2300      	movs	r3, #0
 8006f7e:	460a      	mov	r2, r1
 8006f80:	4910      	ldr	r1, [pc, #64]	; (8006fc4 <xTimerCreateTimerTask+0x84>)
 8006f82:	4811      	ldr	r0, [pc, #68]	; (8006fc8 <xTimerCreateTimerTask+0x88>)
 8006f84:	f7ff f866 	bl	8006054 <xTaskCreateStatic>
 8006f88:	4602      	mov	r2, r0
 8006f8a:	4b10      	ldr	r3, [pc, #64]	; (8006fcc <xTimerCreateTimerTask+0x8c>)
 8006f8c:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006f8e:	4b0f      	ldr	r3, [pc, #60]	; (8006fcc <xTimerCreateTimerTask+0x8c>)
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d001      	beq.n	8006f9a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006f96:	2301      	movs	r3, #1
 8006f98:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006f9a:	697b      	ldr	r3, [r7, #20]
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d109      	bne.n	8006fb4 <xTimerCreateTimerTask+0x74>
 8006fa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fa4:	f383 8811 	msr	BASEPRI, r3
 8006fa8:	f3bf 8f6f 	isb	sy
 8006fac:	f3bf 8f4f 	dsb	sy
 8006fb0:	613b      	str	r3, [r7, #16]
 8006fb2:	e7fe      	b.n	8006fb2 <xTimerCreateTimerTask+0x72>
	return xReturn;
 8006fb4:	697b      	ldr	r3, [r7, #20]
}
 8006fb6:	4618      	mov	r0, r3
 8006fb8:	3718      	adds	r7, #24
 8006fba:	46bd      	mov	sp, r7
 8006fbc:	bd80      	pop	{r7, pc}
 8006fbe:	bf00      	nop
 8006fc0:	20000cb0 	.word	0x20000cb0
 8006fc4:	08009e00 	.word	0x08009e00
 8006fc8:	080070e9 	.word	0x080070e9
 8006fcc:	20000cb4 	.word	0x20000cb4

08006fd0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006fd0:	b580      	push	{r7, lr}
 8006fd2:	b08a      	sub	sp, #40	; 0x28
 8006fd4:	af00      	add	r7, sp, #0
 8006fd6:	60f8      	str	r0, [r7, #12]
 8006fd8:	60b9      	str	r1, [r7, #8]
 8006fda:	607a      	str	r2, [r7, #4]
 8006fdc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006fde:	2300      	movs	r3, #0
 8006fe0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d109      	bne.n	8006ffc <xTimerGenericCommand+0x2c>
 8006fe8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fec:	f383 8811 	msr	BASEPRI, r3
 8006ff0:	f3bf 8f6f 	isb	sy
 8006ff4:	f3bf 8f4f 	dsb	sy
 8006ff8:	623b      	str	r3, [r7, #32]
 8006ffa:	e7fe      	b.n	8006ffa <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006ffc:	4b19      	ldr	r3, [pc, #100]	; (8007064 <xTimerGenericCommand+0x94>)
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	2b00      	cmp	r3, #0
 8007002:	d02a      	beq.n	800705a <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007004:	68bb      	ldr	r3, [r7, #8]
 8007006:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007010:	68bb      	ldr	r3, [r7, #8]
 8007012:	2b05      	cmp	r3, #5
 8007014:	dc18      	bgt.n	8007048 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007016:	f7ff fdaf 	bl	8006b78 <xTaskGetSchedulerState>
 800701a:	4603      	mov	r3, r0
 800701c:	2b02      	cmp	r3, #2
 800701e:	d109      	bne.n	8007034 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007020:	4b10      	ldr	r3, [pc, #64]	; (8007064 <xTimerGenericCommand+0x94>)
 8007022:	6818      	ldr	r0, [r3, #0]
 8007024:	f107 0110 	add.w	r1, r7, #16
 8007028:	2300      	movs	r3, #0
 800702a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800702c:	f7fe fa14 	bl	8005458 <xQueueGenericSend>
 8007030:	6278      	str	r0, [r7, #36]	; 0x24
 8007032:	e012      	b.n	800705a <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007034:	4b0b      	ldr	r3, [pc, #44]	; (8007064 <xTimerGenericCommand+0x94>)
 8007036:	6818      	ldr	r0, [r3, #0]
 8007038:	f107 0110 	add.w	r1, r7, #16
 800703c:	2300      	movs	r3, #0
 800703e:	2200      	movs	r2, #0
 8007040:	f7fe fa0a 	bl	8005458 <xQueueGenericSend>
 8007044:	6278      	str	r0, [r7, #36]	; 0x24
 8007046:	e008      	b.n	800705a <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007048:	4b06      	ldr	r3, [pc, #24]	; (8007064 <xTimerGenericCommand+0x94>)
 800704a:	6818      	ldr	r0, [r3, #0]
 800704c:	f107 0110 	add.w	r1, r7, #16
 8007050:	2300      	movs	r3, #0
 8007052:	683a      	ldr	r2, [r7, #0]
 8007054:	f7fe fafa 	bl	800564c <xQueueGenericSendFromISR>
 8007058:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800705a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800705c:	4618      	mov	r0, r3
 800705e:	3728      	adds	r7, #40	; 0x28
 8007060:	46bd      	mov	sp, r7
 8007062:	bd80      	pop	{r7, pc}
 8007064:	20000cb0 	.word	0x20000cb0

08007068 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007068:	b580      	push	{r7, lr}
 800706a:	b088      	sub	sp, #32
 800706c:	af02      	add	r7, sp, #8
 800706e:	6078      	str	r0, [r7, #4]
 8007070:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007072:	4b1c      	ldr	r3, [pc, #112]	; (80070e4 <prvProcessExpiredTimer+0x7c>)
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	68db      	ldr	r3, [r3, #12]
 8007078:	68db      	ldr	r3, [r3, #12]
 800707a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800707c:	697b      	ldr	r3, [r7, #20]
 800707e:	3304      	adds	r3, #4
 8007080:	4618      	mov	r0, r3
 8007082:	f7fe f853 	bl	800512c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8007086:	697b      	ldr	r3, [r7, #20]
 8007088:	69db      	ldr	r3, [r3, #28]
 800708a:	2b01      	cmp	r3, #1
 800708c:	d121      	bne.n	80070d2 <prvProcessExpiredTimer+0x6a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800708e:	697b      	ldr	r3, [r7, #20]
 8007090:	699a      	ldr	r2, [r3, #24]
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	18d1      	adds	r1, r2, r3
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	683a      	ldr	r2, [r7, #0]
 800709a:	6978      	ldr	r0, [r7, #20]
 800709c:	f000 f8c8 	bl	8007230 <prvInsertTimerInActiveList>
 80070a0:	4603      	mov	r3, r0
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d015      	beq.n	80070d2 <prvProcessExpiredTimer+0x6a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80070a6:	2300      	movs	r3, #0
 80070a8:	9300      	str	r3, [sp, #0]
 80070aa:	2300      	movs	r3, #0
 80070ac:	687a      	ldr	r2, [r7, #4]
 80070ae:	2100      	movs	r1, #0
 80070b0:	6978      	ldr	r0, [r7, #20]
 80070b2:	f7ff ff8d 	bl	8006fd0 <xTimerGenericCommand>
 80070b6:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80070b8:	693b      	ldr	r3, [r7, #16]
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d109      	bne.n	80070d2 <prvProcessExpiredTimer+0x6a>
 80070be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070c2:	f383 8811 	msr	BASEPRI, r3
 80070c6:	f3bf 8f6f 	isb	sy
 80070ca:	f3bf 8f4f 	dsb	sy
 80070ce:	60fb      	str	r3, [r7, #12]
 80070d0:	e7fe      	b.n	80070d0 <prvProcessExpiredTimer+0x68>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80070d2:	697b      	ldr	r3, [r7, #20]
 80070d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070d6:	6978      	ldr	r0, [r7, #20]
 80070d8:	4798      	blx	r3
}
 80070da:	bf00      	nop
 80070dc:	3718      	adds	r7, #24
 80070de:	46bd      	mov	sp, r7
 80070e0:	bd80      	pop	{r7, pc}
 80070e2:	bf00      	nop
 80070e4:	20000ca8 	.word	0x20000ca8

080070e8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 80070e8:	b580      	push	{r7, lr}
 80070ea:	b084      	sub	sp, #16
 80070ec:	af00      	add	r7, sp, #0
 80070ee:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80070f0:	f107 0308 	add.w	r3, r7, #8
 80070f4:	4618      	mov	r0, r3
 80070f6:	f000 f857 	bl	80071a8 <prvGetNextExpireTime>
 80070fa:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80070fc:	68bb      	ldr	r3, [r7, #8]
 80070fe:	4619      	mov	r1, r3
 8007100:	68f8      	ldr	r0, [r7, #12]
 8007102:	f000 f803 	bl	800710c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8007106:	f000 f8d5 	bl	80072b4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800710a:	e7f1      	b.n	80070f0 <prvTimerTask+0x8>

0800710c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800710c:	b580      	push	{r7, lr}
 800710e:	b084      	sub	sp, #16
 8007110:	af00      	add	r7, sp, #0
 8007112:	6078      	str	r0, [r7, #4]
 8007114:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8007116:	f7ff f951 	bl	80063bc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800711a:	f107 0308 	add.w	r3, r7, #8
 800711e:	4618      	mov	r0, r3
 8007120:	f000 f866 	bl	80071f0 <prvSampleTimeNow>
 8007124:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007126:	68bb      	ldr	r3, [r7, #8]
 8007128:	2b00      	cmp	r3, #0
 800712a:	d130      	bne.n	800718e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800712c:	683b      	ldr	r3, [r7, #0]
 800712e:	2b00      	cmp	r3, #0
 8007130:	d10a      	bne.n	8007148 <prvProcessTimerOrBlockTask+0x3c>
 8007132:	687a      	ldr	r2, [r7, #4]
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	429a      	cmp	r2, r3
 8007138:	d806      	bhi.n	8007148 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800713a:	f7ff f94d 	bl	80063d8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800713e:	68f9      	ldr	r1, [r7, #12]
 8007140:	6878      	ldr	r0, [r7, #4]
 8007142:	f7ff ff91 	bl	8007068 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8007146:	e024      	b.n	8007192 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007148:	683b      	ldr	r3, [r7, #0]
 800714a:	2b00      	cmp	r3, #0
 800714c:	d008      	beq.n	8007160 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800714e:	4b13      	ldr	r3, [pc, #76]	; (800719c <prvProcessTimerOrBlockTask+0x90>)
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	2b00      	cmp	r3, #0
 8007156:	bf0c      	ite	eq
 8007158:	2301      	moveq	r3, #1
 800715a:	2300      	movne	r3, #0
 800715c:	b2db      	uxtb	r3, r3
 800715e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007160:	4b0f      	ldr	r3, [pc, #60]	; (80071a0 <prvProcessTimerOrBlockTask+0x94>)
 8007162:	6818      	ldr	r0, [r3, #0]
 8007164:	687a      	ldr	r2, [r7, #4]
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	1ad3      	subs	r3, r2, r3
 800716a:	683a      	ldr	r2, [r7, #0]
 800716c:	4619      	mov	r1, r3
 800716e:	f7fe ff3d 	bl	8005fec <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007172:	f7ff f931 	bl	80063d8 <xTaskResumeAll>
 8007176:	4603      	mov	r3, r0
 8007178:	2b00      	cmp	r3, #0
 800717a:	d10a      	bne.n	8007192 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800717c:	4b09      	ldr	r3, [pc, #36]	; (80071a4 <prvProcessTimerOrBlockTask+0x98>)
 800717e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007182:	601a      	str	r2, [r3, #0]
 8007184:	f3bf 8f4f 	dsb	sy
 8007188:	f3bf 8f6f 	isb	sy
}
 800718c:	e001      	b.n	8007192 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800718e:	f7ff f923 	bl	80063d8 <xTaskResumeAll>
}
 8007192:	bf00      	nop
 8007194:	3710      	adds	r7, #16
 8007196:	46bd      	mov	sp, r7
 8007198:	bd80      	pop	{r7, pc}
 800719a:	bf00      	nop
 800719c:	20000cac 	.word	0x20000cac
 80071a0:	20000cb0 	.word	0x20000cb0
 80071a4:	e000ed04 	.word	0xe000ed04

080071a8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80071a8:	b480      	push	{r7}
 80071aa:	b085      	sub	sp, #20
 80071ac:	af00      	add	r7, sp, #0
 80071ae:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80071b0:	4b0e      	ldr	r3, [pc, #56]	; (80071ec <prvGetNextExpireTime+0x44>)
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	bf0c      	ite	eq
 80071ba:	2301      	moveq	r3, #1
 80071bc:	2300      	movne	r3, #0
 80071be:	b2db      	uxtb	r3, r3
 80071c0:	461a      	mov	r2, r3
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d105      	bne.n	80071da <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80071ce:	4b07      	ldr	r3, [pc, #28]	; (80071ec <prvGetNextExpireTime+0x44>)
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	68db      	ldr	r3, [r3, #12]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	60fb      	str	r3, [r7, #12]
 80071d8:	e001      	b.n	80071de <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80071da:	2300      	movs	r3, #0
 80071dc:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80071de:	68fb      	ldr	r3, [r7, #12]
}
 80071e0:	4618      	mov	r0, r3
 80071e2:	3714      	adds	r7, #20
 80071e4:	46bd      	mov	sp, r7
 80071e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ea:	4770      	bx	lr
 80071ec:	20000ca8 	.word	0x20000ca8

080071f0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80071f0:	b580      	push	{r7, lr}
 80071f2:	b084      	sub	sp, #16
 80071f4:	af00      	add	r7, sp, #0
 80071f6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80071f8:	f7ff f98a 	bl	8006510 <xTaskGetTickCount>
 80071fc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80071fe:	4b0b      	ldr	r3, [pc, #44]	; (800722c <prvSampleTimeNow+0x3c>)
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	68fa      	ldr	r2, [r7, #12]
 8007204:	429a      	cmp	r2, r3
 8007206:	d205      	bcs.n	8007214 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007208:	f000 f904 	bl	8007414 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	2201      	movs	r2, #1
 8007210:	601a      	str	r2, [r3, #0]
 8007212:	e002      	b.n	800721a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	2200      	movs	r2, #0
 8007218:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800721a:	4a04      	ldr	r2, [pc, #16]	; (800722c <prvSampleTimeNow+0x3c>)
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007220:	68fb      	ldr	r3, [r7, #12]
}
 8007222:	4618      	mov	r0, r3
 8007224:	3710      	adds	r7, #16
 8007226:	46bd      	mov	sp, r7
 8007228:	bd80      	pop	{r7, pc}
 800722a:	bf00      	nop
 800722c:	20000cb8 	.word	0x20000cb8

08007230 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007230:	b580      	push	{r7, lr}
 8007232:	b086      	sub	sp, #24
 8007234:	af00      	add	r7, sp, #0
 8007236:	60f8      	str	r0, [r7, #12]
 8007238:	60b9      	str	r1, [r7, #8]
 800723a:	607a      	str	r2, [r7, #4]
 800723c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800723e:	2300      	movs	r3, #0
 8007240:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	68ba      	ldr	r2, [r7, #8]
 8007246:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	68fa      	ldr	r2, [r7, #12]
 800724c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800724e:	68ba      	ldr	r2, [r7, #8]
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	429a      	cmp	r2, r3
 8007254:	d812      	bhi.n	800727c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007256:	687a      	ldr	r2, [r7, #4]
 8007258:	683b      	ldr	r3, [r7, #0]
 800725a:	1ad2      	subs	r2, r2, r3
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	699b      	ldr	r3, [r3, #24]
 8007260:	429a      	cmp	r2, r3
 8007262:	d302      	bcc.n	800726a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007264:	2301      	movs	r3, #1
 8007266:	617b      	str	r3, [r7, #20]
 8007268:	e01b      	b.n	80072a2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800726a:	4b10      	ldr	r3, [pc, #64]	; (80072ac <prvInsertTimerInActiveList+0x7c>)
 800726c:	681a      	ldr	r2, [r3, #0]
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	3304      	adds	r3, #4
 8007272:	4619      	mov	r1, r3
 8007274:	4610      	mov	r0, r2
 8007276:	f7fd ff20 	bl	80050ba <vListInsert>
 800727a:	e012      	b.n	80072a2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800727c:	687a      	ldr	r2, [r7, #4]
 800727e:	683b      	ldr	r3, [r7, #0]
 8007280:	429a      	cmp	r2, r3
 8007282:	d206      	bcs.n	8007292 <prvInsertTimerInActiveList+0x62>
 8007284:	68ba      	ldr	r2, [r7, #8]
 8007286:	683b      	ldr	r3, [r7, #0]
 8007288:	429a      	cmp	r2, r3
 800728a:	d302      	bcc.n	8007292 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800728c:	2301      	movs	r3, #1
 800728e:	617b      	str	r3, [r7, #20]
 8007290:	e007      	b.n	80072a2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007292:	4b07      	ldr	r3, [pc, #28]	; (80072b0 <prvInsertTimerInActiveList+0x80>)
 8007294:	681a      	ldr	r2, [r3, #0]
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	3304      	adds	r3, #4
 800729a:	4619      	mov	r1, r3
 800729c:	4610      	mov	r0, r2
 800729e:	f7fd ff0c 	bl	80050ba <vListInsert>
		}
	}

	return xProcessTimerNow;
 80072a2:	697b      	ldr	r3, [r7, #20]
}
 80072a4:	4618      	mov	r0, r3
 80072a6:	3718      	adds	r7, #24
 80072a8:	46bd      	mov	sp, r7
 80072aa:	bd80      	pop	{r7, pc}
 80072ac:	20000cac 	.word	0x20000cac
 80072b0:	20000ca8 	.word	0x20000ca8

080072b4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80072b4:	b580      	push	{r7, lr}
 80072b6:	b08e      	sub	sp, #56	; 0x38
 80072b8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80072ba:	e099      	b.n	80073f0 <prvProcessReceivedCommands+0x13c>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	2b00      	cmp	r3, #0
 80072c0:	da17      	bge.n	80072f2 <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80072c2:	1d3b      	adds	r3, r7, #4
 80072c4:	3304      	adds	r3, #4
 80072c6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80072c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d109      	bne.n	80072e2 <prvProcessReceivedCommands+0x2e>
 80072ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072d2:	f383 8811 	msr	BASEPRI, r3
 80072d6:	f3bf 8f6f 	isb	sy
 80072da:	f3bf 8f4f 	dsb	sy
 80072de:	61fb      	str	r3, [r7, #28]
 80072e0:	e7fe      	b.n	80072e0 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80072e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80072e8:	6850      	ldr	r0, [r2, #4]
 80072ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80072ec:	6892      	ldr	r2, [r2, #8]
 80072ee:	4611      	mov	r1, r2
 80072f0:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	db7a      	blt.n	80073ee <prvProcessReceivedCommands+0x13a>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80072fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072fe:	695b      	ldr	r3, [r3, #20]
 8007300:	2b00      	cmp	r3, #0
 8007302:	d004      	beq.n	800730e <prvProcessReceivedCommands+0x5a>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007304:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007306:	3304      	adds	r3, #4
 8007308:	4618      	mov	r0, r3
 800730a:	f7fd ff0f 	bl	800512c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800730e:	463b      	mov	r3, r7
 8007310:	4618      	mov	r0, r3
 8007312:	f7ff ff6d 	bl	80071f0 <prvSampleTimeNow>
 8007316:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	2b09      	cmp	r3, #9
 800731c:	d868      	bhi.n	80073f0 <prvProcessReceivedCommands+0x13c>
 800731e:	a201      	add	r2, pc, #4	; (adr r2, 8007324 <prvProcessReceivedCommands+0x70>)
 8007320:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007324:	0800734d 	.word	0x0800734d
 8007328:	0800734d 	.word	0x0800734d
 800732c:	0800734d 	.word	0x0800734d
 8007330:	080073f1 	.word	0x080073f1
 8007334:	080073a7 	.word	0x080073a7
 8007338:	080073dd 	.word	0x080073dd
 800733c:	0800734d 	.word	0x0800734d
 8007340:	0800734d 	.word	0x0800734d
 8007344:	080073f1 	.word	0x080073f1
 8007348:	080073a7 	.word	0x080073a7
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800734c:	68ba      	ldr	r2, [r7, #8]
 800734e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007350:	699b      	ldr	r3, [r3, #24]
 8007352:	18d1      	adds	r1, r2, r3
 8007354:	68bb      	ldr	r3, [r7, #8]
 8007356:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007358:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800735a:	f7ff ff69 	bl	8007230 <prvInsertTimerInActiveList>
 800735e:	4603      	mov	r3, r0
 8007360:	2b00      	cmp	r3, #0
 8007362:	d045      	beq.n	80073f0 <prvProcessReceivedCommands+0x13c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007364:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007368:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800736a:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800736c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800736e:	69db      	ldr	r3, [r3, #28]
 8007370:	2b01      	cmp	r3, #1
 8007372:	d13d      	bne.n	80073f0 <prvProcessReceivedCommands+0x13c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007374:	68ba      	ldr	r2, [r7, #8]
 8007376:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007378:	699b      	ldr	r3, [r3, #24]
 800737a:	441a      	add	r2, r3
 800737c:	2300      	movs	r3, #0
 800737e:	9300      	str	r3, [sp, #0]
 8007380:	2300      	movs	r3, #0
 8007382:	2100      	movs	r1, #0
 8007384:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007386:	f7ff fe23 	bl	8006fd0 <xTimerGenericCommand>
 800738a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800738c:	6a3b      	ldr	r3, [r7, #32]
 800738e:	2b00      	cmp	r3, #0
 8007390:	d12e      	bne.n	80073f0 <prvProcessReceivedCommands+0x13c>
 8007392:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007396:	f383 8811 	msr	BASEPRI, r3
 800739a:	f3bf 8f6f 	isb	sy
 800739e:	f3bf 8f4f 	dsb	sy
 80073a2:	61bb      	str	r3, [r7, #24]
 80073a4:	e7fe      	b.n	80073a4 <prvProcessReceivedCommands+0xf0>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80073a6:	68ba      	ldr	r2, [r7, #8]
 80073a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073aa:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80073ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073ae:	699b      	ldr	r3, [r3, #24]
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d109      	bne.n	80073c8 <prvProcessReceivedCommands+0x114>
 80073b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073b8:	f383 8811 	msr	BASEPRI, r3
 80073bc:	f3bf 8f6f 	isb	sy
 80073c0:	f3bf 8f4f 	dsb	sy
 80073c4:	617b      	str	r3, [r7, #20]
 80073c6:	e7fe      	b.n	80073c6 <prvProcessReceivedCommands+0x112>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80073c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073ca:	699a      	ldr	r2, [r3, #24]
 80073cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073ce:	18d1      	adds	r1, r2, r3
 80073d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80073d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80073d6:	f7ff ff2b 	bl	8007230 <prvInsertTimerInActiveList>
					break;
 80073da:	e009      	b.n	80073f0 <prvProcessReceivedCommands+0x13c>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80073dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073de:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d104      	bne.n	80073f0 <prvProcessReceivedCommands+0x13c>
						{
							vPortFree( pxTimer );
 80073e6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80073e8:	f000 fbb4 	bl	8007b54 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80073ec:	e000      	b.n	80073f0 <prvProcessReceivedCommands+0x13c>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80073ee:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80073f0:	4b07      	ldr	r3, [pc, #28]	; (8007410 <prvProcessReceivedCommands+0x15c>)
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	1d39      	adds	r1, r7, #4
 80073f6:	2200      	movs	r2, #0
 80073f8:	4618      	mov	r0, r3
 80073fa:	f7fe fa45 	bl	8005888 <xQueueReceive>
 80073fe:	4603      	mov	r3, r0
 8007400:	2b00      	cmp	r3, #0
 8007402:	f47f af5b 	bne.w	80072bc <prvProcessReceivedCommands+0x8>
	}
}
 8007406:	bf00      	nop
 8007408:	3730      	adds	r7, #48	; 0x30
 800740a:	46bd      	mov	sp, r7
 800740c:	bd80      	pop	{r7, pc}
 800740e:	bf00      	nop
 8007410:	20000cb0 	.word	0x20000cb0

08007414 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007414:	b580      	push	{r7, lr}
 8007416:	b088      	sub	sp, #32
 8007418:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800741a:	e044      	b.n	80074a6 <prvSwitchTimerLists+0x92>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800741c:	4b2b      	ldr	r3, [pc, #172]	; (80074cc <prvSwitchTimerLists+0xb8>)
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	68db      	ldr	r3, [r3, #12]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007426:	4b29      	ldr	r3, [pc, #164]	; (80074cc <prvSwitchTimerLists+0xb8>)
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	68db      	ldr	r3, [r3, #12]
 800742c:	68db      	ldr	r3, [r3, #12]
 800742e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	3304      	adds	r3, #4
 8007434:	4618      	mov	r0, r3
 8007436:	f7fd fe79 	bl	800512c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800743e:	68f8      	ldr	r0, [r7, #12]
 8007440:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	69db      	ldr	r3, [r3, #28]
 8007446:	2b01      	cmp	r3, #1
 8007448:	d12d      	bne.n	80074a6 <prvSwitchTimerLists+0x92>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	699b      	ldr	r3, [r3, #24]
 800744e:	693a      	ldr	r2, [r7, #16]
 8007450:	4413      	add	r3, r2
 8007452:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007454:	68ba      	ldr	r2, [r7, #8]
 8007456:	693b      	ldr	r3, [r7, #16]
 8007458:	429a      	cmp	r2, r3
 800745a:	d90e      	bls.n	800747a <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	68ba      	ldr	r2, [r7, #8]
 8007460:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	68fa      	ldr	r2, [r7, #12]
 8007466:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007468:	4b18      	ldr	r3, [pc, #96]	; (80074cc <prvSwitchTimerLists+0xb8>)
 800746a:	681a      	ldr	r2, [r3, #0]
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	3304      	adds	r3, #4
 8007470:	4619      	mov	r1, r3
 8007472:	4610      	mov	r0, r2
 8007474:	f7fd fe21 	bl	80050ba <vListInsert>
 8007478:	e015      	b.n	80074a6 <prvSwitchTimerLists+0x92>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800747a:	2300      	movs	r3, #0
 800747c:	9300      	str	r3, [sp, #0]
 800747e:	2300      	movs	r3, #0
 8007480:	693a      	ldr	r2, [r7, #16]
 8007482:	2100      	movs	r1, #0
 8007484:	68f8      	ldr	r0, [r7, #12]
 8007486:	f7ff fda3 	bl	8006fd0 <xTimerGenericCommand>
 800748a:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	2b00      	cmp	r3, #0
 8007490:	d109      	bne.n	80074a6 <prvSwitchTimerLists+0x92>
 8007492:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007496:	f383 8811 	msr	BASEPRI, r3
 800749a:	f3bf 8f6f 	isb	sy
 800749e:	f3bf 8f4f 	dsb	sy
 80074a2:	603b      	str	r3, [r7, #0]
 80074a4:	e7fe      	b.n	80074a4 <prvSwitchTimerLists+0x90>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80074a6:	4b09      	ldr	r3, [pc, #36]	; (80074cc <prvSwitchTimerLists+0xb8>)
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d1b5      	bne.n	800741c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80074b0:	4b06      	ldr	r3, [pc, #24]	; (80074cc <prvSwitchTimerLists+0xb8>)
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80074b6:	4b06      	ldr	r3, [pc, #24]	; (80074d0 <prvSwitchTimerLists+0xbc>)
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	4a04      	ldr	r2, [pc, #16]	; (80074cc <prvSwitchTimerLists+0xb8>)
 80074bc:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80074be:	4a04      	ldr	r2, [pc, #16]	; (80074d0 <prvSwitchTimerLists+0xbc>)
 80074c0:	697b      	ldr	r3, [r7, #20]
 80074c2:	6013      	str	r3, [r2, #0]
}
 80074c4:	bf00      	nop
 80074c6:	3718      	adds	r7, #24
 80074c8:	46bd      	mov	sp, r7
 80074ca:	bd80      	pop	{r7, pc}
 80074cc:	20000ca8 	.word	0x20000ca8
 80074d0:	20000cac 	.word	0x20000cac

080074d4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80074d4:	b580      	push	{r7, lr}
 80074d6:	b082      	sub	sp, #8
 80074d8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80074da:	f000 f95f 	bl	800779c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80074de:	4b15      	ldr	r3, [pc, #84]	; (8007534 <prvCheckForValidListAndQueue+0x60>)
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d120      	bne.n	8007528 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80074e6:	4814      	ldr	r0, [pc, #80]	; (8007538 <prvCheckForValidListAndQueue+0x64>)
 80074e8:	f7fd fd96 	bl	8005018 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80074ec:	4813      	ldr	r0, [pc, #76]	; (800753c <prvCheckForValidListAndQueue+0x68>)
 80074ee:	f7fd fd93 	bl	8005018 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80074f2:	4b13      	ldr	r3, [pc, #76]	; (8007540 <prvCheckForValidListAndQueue+0x6c>)
 80074f4:	4a10      	ldr	r2, [pc, #64]	; (8007538 <prvCheckForValidListAndQueue+0x64>)
 80074f6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80074f8:	4b12      	ldr	r3, [pc, #72]	; (8007544 <prvCheckForValidListAndQueue+0x70>)
 80074fa:	4a10      	ldr	r2, [pc, #64]	; (800753c <prvCheckForValidListAndQueue+0x68>)
 80074fc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80074fe:	2300      	movs	r3, #0
 8007500:	9300      	str	r3, [sp, #0]
 8007502:	4b11      	ldr	r3, [pc, #68]	; (8007548 <prvCheckForValidListAndQueue+0x74>)
 8007504:	4a11      	ldr	r2, [pc, #68]	; (800754c <prvCheckForValidListAndQueue+0x78>)
 8007506:	2110      	movs	r1, #16
 8007508:	200a      	movs	r0, #10
 800750a:	f7fd fea1 	bl	8005250 <xQueueGenericCreateStatic>
 800750e:	4602      	mov	r2, r0
 8007510:	4b08      	ldr	r3, [pc, #32]	; (8007534 <prvCheckForValidListAndQueue+0x60>)
 8007512:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007514:	4b07      	ldr	r3, [pc, #28]	; (8007534 <prvCheckForValidListAndQueue+0x60>)
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	2b00      	cmp	r3, #0
 800751a:	d005      	beq.n	8007528 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800751c:	4b05      	ldr	r3, [pc, #20]	; (8007534 <prvCheckForValidListAndQueue+0x60>)
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	490b      	ldr	r1, [pc, #44]	; (8007550 <prvCheckForValidListAndQueue+0x7c>)
 8007522:	4618      	mov	r0, r3
 8007524:	f7fe fd3a 	bl	8005f9c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007528:	f000 f966 	bl	80077f8 <vPortExitCritical>
}
 800752c:	bf00      	nop
 800752e:	46bd      	mov	sp, r7
 8007530:	bd80      	pop	{r7, pc}
 8007532:	bf00      	nop
 8007534:	20000cb0 	.word	0x20000cb0
 8007538:	20000c80 	.word	0x20000c80
 800753c:	20000c94 	.word	0x20000c94
 8007540:	20000ca8 	.word	0x20000ca8
 8007544:	20000cac 	.word	0x20000cac
 8007548:	20000d5c 	.word	0x20000d5c
 800754c:	20000cbc 	.word	0x20000cbc
 8007550:	08009e08 	.word	0x08009e08

08007554 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007554:	b480      	push	{r7}
 8007556:	b085      	sub	sp, #20
 8007558:	af00      	add	r7, sp, #0
 800755a:	60f8      	str	r0, [r7, #12]
 800755c:	60b9      	str	r1, [r7, #8]
 800755e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	3b04      	subs	r3, #4
 8007564:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800756c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	3b04      	subs	r3, #4
 8007572:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007574:	68bb      	ldr	r3, [r7, #8]
 8007576:	f023 0201 	bic.w	r2, r3, #1
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	3b04      	subs	r3, #4
 8007582:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007584:	4a0c      	ldr	r2, [pc, #48]	; (80075b8 <pxPortInitialiseStack+0x64>)
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	3b14      	subs	r3, #20
 800758e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007590:	687a      	ldr	r2, [r7, #4]
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	3b04      	subs	r3, #4
 800759a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	f06f 0202 	mvn.w	r2, #2
 80075a2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	3b20      	subs	r3, #32
 80075a8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80075aa:	68fb      	ldr	r3, [r7, #12]
}
 80075ac:	4618      	mov	r0, r3
 80075ae:	3714      	adds	r7, #20
 80075b0:	46bd      	mov	sp, r7
 80075b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b6:	4770      	bx	lr
 80075b8:	080075bd 	.word	0x080075bd

080075bc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80075bc:	b480      	push	{r7}
 80075be:	b085      	sub	sp, #20
 80075c0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80075c2:	2300      	movs	r3, #0
 80075c4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80075c6:	4b11      	ldr	r3, [pc, #68]	; (800760c <prvTaskExitError+0x50>)
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075ce:	d009      	beq.n	80075e4 <prvTaskExitError+0x28>
 80075d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075d4:	f383 8811 	msr	BASEPRI, r3
 80075d8:	f3bf 8f6f 	isb	sy
 80075dc:	f3bf 8f4f 	dsb	sy
 80075e0:	60fb      	str	r3, [r7, #12]
 80075e2:	e7fe      	b.n	80075e2 <prvTaskExitError+0x26>
 80075e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075e8:	f383 8811 	msr	BASEPRI, r3
 80075ec:	f3bf 8f6f 	isb	sy
 80075f0:	f3bf 8f4f 	dsb	sy
 80075f4:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80075f6:	bf00      	nop
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d0fc      	beq.n	80075f8 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80075fe:	bf00      	nop
 8007600:	3714      	adds	r7, #20
 8007602:	46bd      	mov	sp, r7
 8007604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007608:	4770      	bx	lr
 800760a:	bf00      	nop
 800760c:	20000008 	.word	0x20000008

08007610 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007610:	4b07      	ldr	r3, [pc, #28]	; (8007630 <pxCurrentTCBConst2>)
 8007612:	6819      	ldr	r1, [r3, #0]
 8007614:	6808      	ldr	r0, [r1, #0]
 8007616:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800761a:	f380 8809 	msr	PSP, r0
 800761e:	f3bf 8f6f 	isb	sy
 8007622:	f04f 0000 	mov.w	r0, #0
 8007626:	f380 8811 	msr	BASEPRI, r0
 800762a:	4770      	bx	lr
 800762c:	f3af 8000 	nop.w

08007630 <pxCurrentTCBConst2>:
 8007630:	20000780 	.word	0x20000780
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007634:	bf00      	nop
 8007636:	bf00      	nop

08007638 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007638:	4808      	ldr	r0, [pc, #32]	; (800765c <prvPortStartFirstTask+0x24>)
 800763a:	6800      	ldr	r0, [r0, #0]
 800763c:	6800      	ldr	r0, [r0, #0]
 800763e:	f380 8808 	msr	MSP, r0
 8007642:	f04f 0000 	mov.w	r0, #0
 8007646:	f380 8814 	msr	CONTROL, r0
 800764a:	b662      	cpsie	i
 800764c:	b661      	cpsie	f
 800764e:	f3bf 8f4f 	dsb	sy
 8007652:	f3bf 8f6f 	isb	sy
 8007656:	df00      	svc	0
 8007658:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800765a:	bf00      	nop
 800765c:	e000ed08 	.word	0xe000ed08

08007660 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007660:	b580      	push	{r7, lr}
 8007662:	b086      	sub	sp, #24
 8007664:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007666:	4b44      	ldr	r3, [pc, #272]	; (8007778 <xPortStartScheduler+0x118>)
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	4a44      	ldr	r2, [pc, #272]	; (800777c <xPortStartScheduler+0x11c>)
 800766c:	4293      	cmp	r3, r2
 800766e:	d109      	bne.n	8007684 <xPortStartScheduler+0x24>
 8007670:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007674:	f383 8811 	msr	BASEPRI, r3
 8007678:	f3bf 8f6f 	isb	sy
 800767c:	f3bf 8f4f 	dsb	sy
 8007680:	613b      	str	r3, [r7, #16]
 8007682:	e7fe      	b.n	8007682 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007684:	4b3c      	ldr	r3, [pc, #240]	; (8007778 <xPortStartScheduler+0x118>)
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	4a3d      	ldr	r2, [pc, #244]	; (8007780 <xPortStartScheduler+0x120>)
 800768a:	4293      	cmp	r3, r2
 800768c:	d109      	bne.n	80076a2 <xPortStartScheduler+0x42>
 800768e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007692:	f383 8811 	msr	BASEPRI, r3
 8007696:	f3bf 8f6f 	isb	sy
 800769a:	f3bf 8f4f 	dsb	sy
 800769e:	60fb      	str	r3, [r7, #12]
 80076a0:	e7fe      	b.n	80076a0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80076a2:	4b38      	ldr	r3, [pc, #224]	; (8007784 <xPortStartScheduler+0x124>)
 80076a4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80076a6:	697b      	ldr	r3, [r7, #20]
 80076a8:	781b      	ldrb	r3, [r3, #0]
 80076aa:	b2db      	uxtb	r3, r3
 80076ac:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80076ae:	697b      	ldr	r3, [r7, #20]
 80076b0:	22ff      	movs	r2, #255	; 0xff
 80076b2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80076b4:	697b      	ldr	r3, [r7, #20]
 80076b6:	781b      	ldrb	r3, [r3, #0]
 80076b8:	b2db      	uxtb	r3, r3
 80076ba:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80076bc:	78fb      	ldrb	r3, [r7, #3]
 80076be:	b2db      	uxtb	r3, r3
 80076c0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80076c4:	b2da      	uxtb	r2, r3
 80076c6:	4b30      	ldr	r3, [pc, #192]	; (8007788 <xPortStartScheduler+0x128>)
 80076c8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80076ca:	4b30      	ldr	r3, [pc, #192]	; (800778c <xPortStartScheduler+0x12c>)
 80076cc:	2207      	movs	r2, #7
 80076ce:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80076d0:	e009      	b.n	80076e6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 80076d2:	4b2e      	ldr	r3, [pc, #184]	; (800778c <xPortStartScheduler+0x12c>)
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	3b01      	subs	r3, #1
 80076d8:	4a2c      	ldr	r2, [pc, #176]	; (800778c <xPortStartScheduler+0x12c>)
 80076da:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80076dc:	78fb      	ldrb	r3, [r7, #3]
 80076de:	b2db      	uxtb	r3, r3
 80076e0:	005b      	lsls	r3, r3, #1
 80076e2:	b2db      	uxtb	r3, r3
 80076e4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80076e6:	78fb      	ldrb	r3, [r7, #3]
 80076e8:	b2db      	uxtb	r3, r3
 80076ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80076ee:	2b80      	cmp	r3, #128	; 0x80
 80076f0:	d0ef      	beq.n	80076d2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80076f2:	4b26      	ldr	r3, [pc, #152]	; (800778c <xPortStartScheduler+0x12c>)
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	f1c3 0307 	rsb	r3, r3, #7
 80076fa:	2b04      	cmp	r3, #4
 80076fc:	d009      	beq.n	8007712 <xPortStartScheduler+0xb2>
 80076fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007702:	f383 8811 	msr	BASEPRI, r3
 8007706:	f3bf 8f6f 	isb	sy
 800770a:	f3bf 8f4f 	dsb	sy
 800770e:	60bb      	str	r3, [r7, #8]
 8007710:	e7fe      	b.n	8007710 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007712:	4b1e      	ldr	r3, [pc, #120]	; (800778c <xPortStartScheduler+0x12c>)
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	021b      	lsls	r3, r3, #8
 8007718:	4a1c      	ldr	r2, [pc, #112]	; (800778c <xPortStartScheduler+0x12c>)
 800771a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800771c:	4b1b      	ldr	r3, [pc, #108]	; (800778c <xPortStartScheduler+0x12c>)
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007724:	4a19      	ldr	r2, [pc, #100]	; (800778c <xPortStartScheduler+0x12c>)
 8007726:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	b2da      	uxtb	r2, r3
 800772c:	697b      	ldr	r3, [r7, #20]
 800772e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007730:	4b17      	ldr	r3, [pc, #92]	; (8007790 <xPortStartScheduler+0x130>)
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	4a16      	ldr	r2, [pc, #88]	; (8007790 <xPortStartScheduler+0x130>)
 8007736:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800773a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800773c:	4b14      	ldr	r3, [pc, #80]	; (8007790 <xPortStartScheduler+0x130>)
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	4a13      	ldr	r2, [pc, #76]	; (8007790 <xPortStartScheduler+0x130>)
 8007742:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007746:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007748:	f000 f8d6 	bl	80078f8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800774c:	4b11      	ldr	r3, [pc, #68]	; (8007794 <xPortStartScheduler+0x134>)
 800774e:	2200      	movs	r2, #0
 8007750:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007752:	f000 f8f5 	bl	8007940 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007756:	4b10      	ldr	r3, [pc, #64]	; (8007798 <xPortStartScheduler+0x138>)
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	4a0f      	ldr	r2, [pc, #60]	; (8007798 <xPortStartScheduler+0x138>)
 800775c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007760:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007762:	f7ff ff69 	bl	8007638 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007766:	f7fe ffa1 	bl	80066ac <vTaskSwitchContext>
	prvTaskExitError();
 800776a:	f7ff ff27 	bl	80075bc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800776e:	2300      	movs	r3, #0
}
 8007770:	4618      	mov	r0, r3
 8007772:	3718      	adds	r7, #24
 8007774:	46bd      	mov	sp, r7
 8007776:	bd80      	pop	{r7, pc}
 8007778:	e000ed00 	.word	0xe000ed00
 800777c:	410fc271 	.word	0x410fc271
 8007780:	410fc270 	.word	0x410fc270
 8007784:	e000e400 	.word	0xe000e400
 8007788:	20000dac 	.word	0x20000dac
 800778c:	20000db0 	.word	0x20000db0
 8007790:	e000ed20 	.word	0xe000ed20
 8007794:	20000008 	.word	0x20000008
 8007798:	e000ef34 	.word	0xe000ef34

0800779c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800779c:	b480      	push	{r7}
 800779e:	b083      	sub	sp, #12
 80077a0:	af00      	add	r7, sp, #0
 80077a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077a6:	f383 8811 	msr	BASEPRI, r3
 80077aa:	f3bf 8f6f 	isb	sy
 80077ae:	f3bf 8f4f 	dsb	sy
 80077b2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80077b4:	4b0e      	ldr	r3, [pc, #56]	; (80077f0 <vPortEnterCritical+0x54>)
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	3301      	adds	r3, #1
 80077ba:	4a0d      	ldr	r2, [pc, #52]	; (80077f0 <vPortEnterCritical+0x54>)
 80077bc:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80077be:	4b0c      	ldr	r3, [pc, #48]	; (80077f0 <vPortEnterCritical+0x54>)
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	2b01      	cmp	r3, #1
 80077c4:	d10e      	bne.n	80077e4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80077c6:	4b0b      	ldr	r3, [pc, #44]	; (80077f4 <vPortEnterCritical+0x58>)
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	b2db      	uxtb	r3, r3
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d009      	beq.n	80077e4 <vPortEnterCritical+0x48>
 80077d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077d4:	f383 8811 	msr	BASEPRI, r3
 80077d8:	f3bf 8f6f 	isb	sy
 80077dc:	f3bf 8f4f 	dsb	sy
 80077e0:	603b      	str	r3, [r7, #0]
 80077e2:	e7fe      	b.n	80077e2 <vPortEnterCritical+0x46>
	}
}
 80077e4:	bf00      	nop
 80077e6:	370c      	adds	r7, #12
 80077e8:	46bd      	mov	sp, r7
 80077ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ee:	4770      	bx	lr
 80077f0:	20000008 	.word	0x20000008
 80077f4:	e000ed04 	.word	0xe000ed04

080077f8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80077f8:	b480      	push	{r7}
 80077fa:	b083      	sub	sp, #12
 80077fc:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80077fe:	4b11      	ldr	r3, [pc, #68]	; (8007844 <vPortExitCritical+0x4c>)
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	2b00      	cmp	r3, #0
 8007804:	d109      	bne.n	800781a <vPortExitCritical+0x22>
 8007806:	f04f 0350 	mov.w	r3, #80	; 0x50
 800780a:	f383 8811 	msr	BASEPRI, r3
 800780e:	f3bf 8f6f 	isb	sy
 8007812:	f3bf 8f4f 	dsb	sy
 8007816:	607b      	str	r3, [r7, #4]
 8007818:	e7fe      	b.n	8007818 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800781a:	4b0a      	ldr	r3, [pc, #40]	; (8007844 <vPortExitCritical+0x4c>)
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	3b01      	subs	r3, #1
 8007820:	4a08      	ldr	r2, [pc, #32]	; (8007844 <vPortExitCritical+0x4c>)
 8007822:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007824:	4b07      	ldr	r3, [pc, #28]	; (8007844 <vPortExitCritical+0x4c>)
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	2b00      	cmp	r3, #0
 800782a:	d104      	bne.n	8007836 <vPortExitCritical+0x3e>
 800782c:	2300      	movs	r3, #0
 800782e:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007830:	683b      	ldr	r3, [r7, #0]
 8007832:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8007836:	bf00      	nop
 8007838:	370c      	adds	r7, #12
 800783a:	46bd      	mov	sp, r7
 800783c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007840:	4770      	bx	lr
 8007842:	bf00      	nop
 8007844:	20000008 	.word	0x20000008
	...

08007850 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007850:	f3ef 8009 	mrs	r0, PSP
 8007854:	f3bf 8f6f 	isb	sy
 8007858:	4b15      	ldr	r3, [pc, #84]	; (80078b0 <pxCurrentTCBConst>)
 800785a:	681a      	ldr	r2, [r3, #0]
 800785c:	f01e 0f10 	tst.w	lr, #16
 8007860:	bf08      	it	eq
 8007862:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007866:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800786a:	6010      	str	r0, [r2, #0]
 800786c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007870:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007874:	f380 8811 	msr	BASEPRI, r0
 8007878:	f3bf 8f4f 	dsb	sy
 800787c:	f3bf 8f6f 	isb	sy
 8007880:	f7fe ff14 	bl	80066ac <vTaskSwitchContext>
 8007884:	f04f 0000 	mov.w	r0, #0
 8007888:	f380 8811 	msr	BASEPRI, r0
 800788c:	bc09      	pop	{r0, r3}
 800788e:	6819      	ldr	r1, [r3, #0]
 8007890:	6808      	ldr	r0, [r1, #0]
 8007892:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007896:	f01e 0f10 	tst.w	lr, #16
 800789a:	bf08      	it	eq
 800789c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80078a0:	f380 8809 	msr	PSP, r0
 80078a4:	f3bf 8f6f 	isb	sy
 80078a8:	4770      	bx	lr
 80078aa:	bf00      	nop
 80078ac:	f3af 8000 	nop.w

080078b0 <pxCurrentTCBConst>:
 80078b0:	20000780 	.word	0x20000780
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80078b4:	bf00      	nop
 80078b6:	bf00      	nop

080078b8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80078b8:	b580      	push	{r7, lr}
 80078ba:	b082      	sub	sp, #8
 80078bc:	af00      	add	r7, sp, #0
	__asm volatile
 80078be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078c2:	f383 8811 	msr	BASEPRI, r3
 80078c6:	f3bf 8f6f 	isb	sy
 80078ca:	f3bf 8f4f 	dsb	sy
 80078ce:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80078d0:	f7fe fe2e 	bl	8006530 <xTaskIncrementTick>
 80078d4:	4603      	mov	r3, r0
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d003      	beq.n	80078e2 <xPortSysTickHandler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80078da:	4b06      	ldr	r3, [pc, #24]	; (80078f4 <xPortSysTickHandler+0x3c>)
 80078dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80078e0:	601a      	str	r2, [r3, #0]
 80078e2:	2300      	movs	r3, #0
 80078e4:	603b      	str	r3, [r7, #0]
	__asm volatile
 80078e6:	683b      	ldr	r3, [r7, #0]
 80078e8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 80078ec:	bf00      	nop
 80078ee:	3708      	adds	r7, #8
 80078f0:	46bd      	mov	sp, r7
 80078f2:	bd80      	pop	{r7, pc}
 80078f4:	e000ed04 	.word	0xe000ed04

080078f8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80078f8:	b480      	push	{r7}
 80078fa:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80078fc:	4b0b      	ldr	r3, [pc, #44]	; (800792c <vPortSetupTimerInterrupt+0x34>)
 80078fe:	2200      	movs	r2, #0
 8007900:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007902:	4b0b      	ldr	r3, [pc, #44]	; (8007930 <vPortSetupTimerInterrupt+0x38>)
 8007904:	2200      	movs	r2, #0
 8007906:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007908:	4b0a      	ldr	r3, [pc, #40]	; (8007934 <vPortSetupTimerInterrupt+0x3c>)
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	4a0a      	ldr	r2, [pc, #40]	; (8007938 <vPortSetupTimerInterrupt+0x40>)
 800790e:	fba2 2303 	umull	r2, r3, r2, r3
 8007912:	099b      	lsrs	r3, r3, #6
 8007914:	4a09      	ldr	r2, [pc, #36]	; (800793c <vPortSetupTimerInterrupt+0x44>)
 8007916:	3b01      	subs	r3, #1
 8007918:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800791a:	4b04      	ldr	r3, [pc, #16]	; (800792c <vPortSetupTimerInterrupt+0x34>)
 800791c:	2207      	movs	r2, #7
 800791e:	601a      	str	r2, [r3, #0]
}
 8007920:	bf00      	nop
 8007922:	46bd      	mov	sp, r7
 8007924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007928:	4770      	bx	lr
 800792a:	bf00      	nop
 800792c:	e000e010 	.word	0xe000e010
 8007930:	e000e018 	.word	0xe000e018
 8007934:	2000000c 	.word	0x2000000c
 8007938:	10624dd3 	.word	0x10624dd3
 800793c:	e000e014 	.word	0xe000e014

08007940 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007940:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007950 <vPortEnableVFP+0x10>
 8007944:	6801      	ldr	r1, [r0, #0]
 8007946:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800794a:	6001      	str	r1, [r0, #0]
 800794c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800794e:	bf00      	nop
 8007950:	e000ed88 	.word	0xe000ed88

08007954 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007954:	b480      	push	{r7}
 8007956:	b085      	sub	sp, #20
 8007958:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800795a:	f3ef 8305 	mrs	r3, IPSR
 800795e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	2b0f      	cmp	r3, #15
 8007964:	d913      	bls.n	800798e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007966:	4a16      	ldr	r2, [pc, #88]	; (80079c0 <vPortValidateInterruptPriority+0x6c>)
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	4413      	add	r3, r2
 800796c:	781b      	ldrb	r3, [r3, #0]
 800796e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007970:	4b14      	ldr	r3, [pc, #80]	; (80079c4 <vPortValidateInterruptPriority+0x70>)
 8007972:	781b      	ldrb	r3, [r3, #0]
 8007974:	7afa      	ldrb	r2, [r7, #11]
 8007976:	429a      	cmp	r2, r3
 8007978:	d209      	bcs.n	800798e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800797a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800797e:	f383 8811 	msr	BASEPRI, r3
 8007982:	f3bf 8f6f 	isb	sy
 8007986:	f3bf 8f4f 	dsb	sy
 800798a:	607b      	str	r3, [r7, #4]
 800798c:	e7fe      	b.n	800798c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800798e:	4b0e      	ldr	r3, [pc, #56]	; (80079c8 <vPortValidateInterruptPriority+0x74>)
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007996:	4b0d      	ldr	r3, [pc, #52]	; (80079cc <vPortValidateInterruptPriority+0x78>)
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	429a      	cmp	r2, r3
 800799c:	d909      	bls.n	80079b2 <vPortValidateInterruptPriority+0x5e>
 800799e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079a2:	f383 8811 	msr	BASEPRI, r3
 80079a6:	f3bf 8f6f 	isb	sy
 80079aa:	f3bf 8f4f 	dsb	sy
 80079ae:	603b      	str	r3, [r7, #0]
 80079b0:	e7fe      	b.n	80079b0 <vPortValidateInterruptPriority+0x5c>
	}
 80079b2:	bf00      	nop
 80079b4:	3714      	adds	r7, #20
 80079b6:	46bd      	mov	sp, r7
 80079b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079bc:	4770      	bx	lr
 80079be:	bf00      	nop
 80079c0:	e000e3f0 	.word	0xe000e3f0
 80079c4:	20000dac 	.word	0x20000dac
 80079c8:	e000ed0c 	.word	0xe000ed0c
 80079cc:	20000db0 	.word	0x20000db0

080079d0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80079d0:	b580      	push	{r7, lr}
 80079d2:	b08a      	sub	sp, #40	; 0x28
 80079d4:	af00      	add	r7, sp, #0
 80079d6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80079d8:	2300      	movs	r3, #0
 80079da:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80079dc:	f7fe fcee 	bl	80063bc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80079e0:	4b57      	ldr	r3, [pc, #348]	; (8007b40 <pvPortMalloc+0x170>)
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d101      	bne.n	80079ec <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80079e8:	f000 f90c 	bl	8007c04 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80079ec:	4b55      	ldr	r3, [pc, #340]	; (8007b44 <pvPortMalloc+0x174>)
 80079ee:	681a      	ldr	r2, [r3, #0]
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	4013      	ands	r3, r2
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	f040 808c 	bne.w	8007b12 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d01c      	beq.n	8007a3a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8007a00:	2208      	movs	r2, #8
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	4413      	add	r3, r2
 8007a06:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	f003 0307 	and.w	r3, r3, #7
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d013      	beq.n	8007a3a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	f023 0307 	bic.w	r3, r3, #7
 8007a18:	3308      	adds	r3, #8
 8007a1a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	f003 0307 	and.w	r3, r3, #7
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d009      	beq.n	8007a3a <pvPortMalloc+0x6a>
 8007a26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a2a:	f383 8811 	msr	BASEPRI, r3
 8007a2e:	f3bf 8f6f 	isb	sy
 8007a32:	f3bf 8f4f 	dsb	sy
 8007a36:	617b      	str	r3, [r7, #20]
 8007a38:	e7fe      	b.n	8007a38 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d068      	beq.n	8007b12 <pvPortMalloc+0x142>
 8007a40:	4b41      	ldr	r3, [pc, #260]	; (8007b48 <pvPortMalloc+0x178>)
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	687a      	ldr	r2, [r7, #4]
 8007a46:	429a      	cmp	r2, r3
 8007a48:	d863      	bhi.n	8007b12 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007a4a:	4b40      	ldr	r3, [pc, #256]	; (8007b4c <pvPortMalloc+0x17c>)
 8007a4c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007a4e:	4b3f      	ldr	r3, [pc, #252]	; (8007b4c <pvPortMalloc+0x17c>)
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007a54:	e004      	b.n	8007a60 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8007a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a58:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a62:	685b      	ldr	r3, [r3, #4]
 8007a64:	687a      	ldr	r2, [r7, #4]
 8007a66:	429a      	cmp	r2, r3
 8007a68:	d903      	bls.n	8007a72 <pvPortMalloc+0xa2>
 8007a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d1f1      	bne.n	8007a56 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007a72:	4b33      	ldr	r3, [pc, #204]	; (8007b40 <pvPortMalloc+0x170>)
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a78:	429a      	cmp	r2, r3
 8007a7a:	d04a      	beq.n	8007b12 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007a7c:	6a3b      	ldr	r3, [r7, #32]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	2208      	movs	r2, #8
 8007a82:	4413      	add	r3, r2
 8007a84:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a88:	681a      	ldr	r2, [r3, #0]
 8007a8a:	6a3b      	ldr	r3, [r7, #32]
 8007a8c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a90:	685a      	ldr	r2, [r3, #4]
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	1ad2      	subs	r2, r2, r3
 8007a96:	2308      	movs	r3, #8
 8007a98:	005b      	lsls	r3, r3, #1
 8007a9a:	429a      	cmp	r2, r3
 8007a9c:	d91e      	bls.n	8007adc <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007a9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	4413      	add	r3, r2
 8007aa4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007aa6:	69bb      	ldr	r3, [r7, #24]
 8007aa8:	f003 0307 	and.w	r3, r3, #7
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d009      	beq.n	8007ac4 <pvPortMalloc+0xf4>
 8007ab0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ab4:	f383 8811 	msr	BASEPRI, r3
 8007ab8:	f3bf 8f6f 	isb	sy
 8007abc:	f3bf 8f4f 	dsb	sy
 8007ac0:	613b      	str	r3, [r7, #16]
 8007ac2:	e7fe      	b.n	8007ac2 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ac6:	685a      	ldr	r2, [r3, #4]
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	1ad2      	subs	r2, r2, r3
 8007acc:	69bb      	ldr	r3, [r7, #24]
 8007ace:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ad2:	687a      	ldr	r2, [r7, #4]
 8007ad4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007ad6:	69b8      	ldr	r0, [r7, #24]
 8007ad8:	f000 f8f6 	bl	8007cc8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007adc:	4b1a      	ldr	r3, [pc, #104]	; (8007b48 <pvPortMalloc+0x178>)
 8007ade:	681a      	ldr	r2, [r3, #0]
 8007ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ae2:	685b      	ldr	r3, [r3, #4]
 8007ae4:	1ad3      	subs	r3, r2, r3
 8007ae6:	4a18      	ldr	r2, [pc, #96]	; (8007b48 <pvPortMalloc+0x178>)
 8007ae8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007aea:	4b17      	ldr	r3, [pc, #92]	; (8007b48 <pvPortMalloc+0x178>)
 8007aec:	681a      	ldr	r2, [r3, #0]
 8007aee:	4b18      	ldr	r3, [pc, #96]	; (8007b50 <pvPortMalloc+0x180>)
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	429a      	cmp	r2, r3
 8007af4:	d203      	bcs.n	8007afe <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007af6:	4b14      	ldr	r3, [pc, #80]	; (8007b48 <pvPortMalloc+0x178>)
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	4a15      	ldr	r2, [pc, #84]	; (8007b50 <pvPortMalloc+0x180>)
 8007afc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b00:	685a      	ldr	r2, [r3, #4]
 8007b02:	4b10      	ldr	r3, [pc, #64]	; (8007b44 <pvPortMalloc+0x174>)
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	431a      	orrs	r2, r3
 8007b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b0a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b0e:	2200      	movs	r2, #0
 8007b10:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007b12:	f7fe fc61 	bl	80063d8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007b16:	69fb      	ldr	r3, [r7, #28]
 8007b18:	f003 0307 	and.w	r3, r3, #7
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d009      	beq.n	8007b34 <pvPortMalloc+0x164>
 8007b20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b24:	f383 8811 	msr	BASEPRI, r3
 8007b28:	f3bf 8f6f 	isb	sy
 8007b2c:	f3bf 8f4f 	dsb	sy
 8007b30:	60fb      	str	r3, [r7, #12]
 8007b32:	e7fe      	b.n	8007b32 <pvPortMalloc+0x162>
	return pvReturn;
 8007b34:	69fb      	ldr	r3, [r7, #28]
}
 8007b36:	4618      	mov	r0, r3
 8007b38:	3728      	adds	r7, #40	; 0x28
 8007b3a:	46bd      	mov	sp, r7
 8007b3c:	bd80      	pop	{r7, pc}
 8007b3e:	bf00      	nop
 8007b40:	20001974 	.word	0x20001974
 8007b44:	20001980 	.word	0x20001980
 8007b48:	20001978 	.word	0x20001978
 8007b4c:	2000196c 	.word	0x2000196c
 8007b50:	2000197c 	.word	0x2000197c

08007b54 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007b54:	b580      	push	{r7, lr}
 8007b56:	b086      	sub	sp, #24
 8007b58:	af00      	add	r7, sp, #0
 8007b5a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d046      	beq.n	8007bf4 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007b66:	2308      	movs	r3, #8
 8007b68:	425b      	negs	r3, r3
 8007b6a:	697a      	ldr	r2, [r7, #20]
 8007b6c:	4413      	add	r3, r2
 8007b6e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007b70:	697b      	ldr	r3, [r7, #20]
 8007b72:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007b74:	693b      	ldr	r3, [r7, #16]
 8007b76:	685a      	ldr	r2, [r3, #4]
 8007b78:	4b20      	ldr	r3, [pc, #128]	; (8007bfc <vPortFree+0xa8>)
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	4013      	ands	r3, r2
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d109      	bne.n	8007b96 <vPortFree+0x42>
 8007b82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b86:	f383 8811 	msr	BASEPRI, r3
 8007b8a:	f3bf 8f6f 	isb	sy
 8007b8e:	f3bf 8f4f 	dsb	sy
 8007b92:	60fb      	str	r3, [r7, #12]
 8007b94:	e7fe      	b.n	8007b94 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007b96:	693b      	ldr	r3, [r7, #16]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d009      	beq.n	8007bb2 <vPortFree+0x5e>
 8007b9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ba2:	f383 8811 	msr	BASEPRI, r3
 8007ba6:	f3bf 8f6f 	isb	sy
 8007baa:	f3bf 8f4f 	dsb	sy
 8007bae:	60bb      	str	r3, [r7, #8]
 8007bb0:	e7fe      	b.n	8007bb0 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007bb2:	693b      	ldr	r3, [r7, #16]
 8007bb4:	685a      	ldr	r2, [r3, #4]
 8007bb6:	4b11      	ldr	r3, [pc, #68]	; (8007bfc <vPortFree+0xa8>)
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	4013      	ands	r3, r2
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d019      	beq.n	8007bf4 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007bc0:	693b      	ldr	r3, [r7, #16]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d115      	bne.n	8007bf4 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007bc8:	693b      	ldr	r3, [r7, #16]
 8007bca:	685a      	ldr	r2, [r3, #4]
 8007bcc:	4b0b      	ldr	r3, [pc, #44]	; (8007bfc <vPortFree+0xa8>)
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	43db      	mvns	r3, r3
 8007bd2:	401a      	ands	r2, r3
 8007bd4:	693b      	ldr	r3, [r7, #16]
 8007bd6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007bd8:	f7fe fbf0 	bl	80063bc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007bdc:	693b      	ldr	r3, [r7, #16]
 8007bde:	685a      	ldr	r2, [r3, #4]
 8007be0:	4b07      	ldr	r3, [pc, #28]	; (8007c00 <vPortFree+0xac>)
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	4413      	add	r3, r2
 8007be6:	4a06      	ldr	r2, [pc, #24]	; (8007c00 <vPortFree+0xac>)
 8007be8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007bea:	6938      	ldr	r0, [r7, #16]
 8007bec:	f000 f86c 	bl	8007cc8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8007bf0:	f7fe fbf2 	bl	80063d8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007bf4:	bf00      	nop
 8007bf6:	3718      	adds	r7, #24
 8007bf8:	46bd      	mov	sp, r7
 8007bfa:	bd80      	pop	{r7, pc}
 8007bfc:	20001980 	.word	0x20001980
 8007c00:	20001978 	.word	0x20001978

08007c04 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007c04:	b480      	push	{r7}
 8007c06:	b085      	sub	sp, #20
 8007c08:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007c0a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8007c0e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007c10:	4b27      	ldr	r3, [pc, #156]	; (8007cb0 <prvHeapInit+0xac>)
 8007c12:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	f003 0307 	and.w	r3, r3, #7
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d00c      	beq.n	8007c38 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	3307      	adds	r3, #7
 8007c22:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	f023 0307 	bic.w	r3, r3, #7
 8007c2a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007c2c:	68ba      	ldr	r2, [r7, #8]
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	1ad3      	subs	r3, r2, r3
 8007c32:	4a1f      	ldr	r2, [pc, #124]	; (8007cb0 <prvHeapInit+0xac>)
 8007c34:	4413      	add	r3, r2
 8007c36:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007c3c:	4a1d      	ldr	r2, [pc, #116]	; (8007cb4 <prvHeapInit+0xb0>)
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007c42:	4b1c      	ldr	r3, [pc, #112]	; (8007cb4 <prvHeapInit+0xb0>)
 8007c44:	2200      	movs	r2, #0
 8007c46:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	68ba      	ldr	r2, [r7, #8]
 8007c4c:	4413      	add	r3, r2
 8007c4e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007c50:	2208      	movs	r2, #8
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	1a9b      	subs	r3, r3, r2
 8007c56:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	f023 0307 	bic.w	r3, r3, #7
 8007c5e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	4a15      	ldr	r2, [pc, #84]	; (8007cb8 <prvHeapInit+0xb4>)
 8007c64:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007c66:	4b14      	ldr	r3, [pc, #80]	; (8007cb8 <prvHeapInit+0xb4>)
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	2200      	movs	r2, #0
 8007c6c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007c6e:	4b12      	ldr	r3, [pc, #72]	; (8007cb8 <prvHeapInit+0xb4>)
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	2200      	movs	r2, #0
 8007c74:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007c7a:	683b      	ldr	r3, [r7, #0]
 8007c7c:	68fa      	ldr	r2, [r7, #12]
 8007c7e:	1ad2      	subs	r2, r2, r3
 8007c80:	683b      	ldr	r3, [r7, #0]
 8007c82:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007c84:	4b0c      	ldr	r3, [pc, #48]	; (8007cb8 <prvHeapInit+0xb4>)
 8007c86:	681a      	ldr	r2, [r3, #0]
 8007c88:	683b      	ldr	r3, [r7, #0]
 8007c8a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007c8c:	683b      	ldr	r3, [r7, #0]
 8007c8e:	685b      	ldr	r3, [r3, #4]
 8007c90:	4a0a      	ldr	r2, [pc, #40]	; (8007cbc <prvHeapInit+0xb8>)
 8007c92:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007c94:	683b      	ldr	r3, [r7, #0]
 8007c96:	685b      	ldr	r3, [r3, #4]
 8007c98:	4a09      	ldr	r2, [pc, #36]	; (8007cc0 <prvHeapInit+0xbc>)
 8007c9a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007c9c:	4b09      	ldr	r3, [pc, #36]	; (8007cc4 <prvHeapInit+0xc0>)
 8007c9e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007ca2:	601a      	str	r2, [r3, #0]
}
 8007ca4:	bf00      	nop
 8007ca6:	3714      	adds	r7, #20
 8007ca8:	46bd      	mov	sp, r7
 8007caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cae:	4770      	bx	lr
 8007cb0:	20000db4 	.word	0x20000db4
 8007cb4:	2000196c 	.word	0x2000196c
 8007cb8:	20001974 	.word	0x20001974
 8007cbc:	2000197c 	.word	0x2000197c
 8007cc0:	20001978 	.word	0x20001978
 8007cc4:	20001980 	.word	0x20001980

08007cc8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007cc8:	b480      	push	{r7}
 8007cca:	b085      	sub	sp, #20
 8007ccc:	af00      	add	r7, sp, #0
 8007cce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007cd0:	4b28      	ldr	r3, [pc, #160]	; (8007d74 <prvInsertBlockIntoFreeList+0xac>)
 8007cd2:	60fb      	str	r3, [r7, #12]
 8007cd4:	e002      	b.n	8007cdc <prvInsertBlockIntoFreeList+0x14>
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	60fb      	str	r3, [r7, #12]
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	687a      	ldr	r2, [r7, #4]
 8007ce2:	429a      	cmp	r2, r3
 8007ce4:	d8f7      	bhi.n	8007cd6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	685b      	ldr	r3, [r3, #4]
 8007cee:	68ba      	ldr	r2, [r7, #8]
 8007cf0:	4413      	add	r3, r2
 8007cf2:	687a      	ldr	r2, [r7, #4]
 8007cf4:	429a      	cmp	r2, r3
 8007cf6:	d108      	bne.n	8007d0a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	685a      	ldr	r2, [r3, #4]
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	685b      	ldr	r3, [r3, #4]
 8007d00:	441a      	add	r2, r3
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	685b      	ldr	r3, [r3, #4]
 8007d12:	68ba      	ldr	r2, [r7, #8]
 8007d14:	441a      	add	r2, r3
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	429a      	cmp	r2, r3
 8007d1c:	d118      	bne.n	8007d50 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	681a      	ldr	r2, [r3, #0]
 8007d22:	4b15      	ldr	r3, [pc, #84]	; (8007d78 <prvInsertBlockIntoFreeList+0xb0>)
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	429a      	cmp	r2, r3
 8007d28:	d00d      	beq.n	8007d46 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	685a      	ldr	r2, [r3, #4]
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	685b      	ldr	r3, [r3, #4]
 8007d34:	441a      	add	r2, r3
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	681a      	ldr	r2, [r3, #0]
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	601a      	str	r2, [r3, #0]
 8007d44:	e008      	b.n	8007d58 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007d46:	4b0c      	ldr	r3, [pc, #48]	; (8007d78 <prvInsertBlockIntoFreeList+0xb0>)
 8007d48:	681a      	ldr	r2, [r3, #0]
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	601a      	str	r2, [r3, #0]
 8007d4e:	e003      	b.n	8007d58 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	681a      	ldr	r2, [r3, #0]
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007d58:	68fa      	ldr	r2, [r7, #12]
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	429a      	cmp	r2, r3
 8007d5e:	d002      	beq.n	8007d66 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	687a      	ldr	r2, [r7, #4]
 8007d64:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007d66:	bf00      	nop
 8007d68:	3714      	adds	r7, #20
 8007d6a:	46bd      	mov	sp, r7
 8007d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d70:	4770      	bx	lr
 8007d72:	bf00      	nop
 8007d74:	2000196c 	.word	0x2000196c
 8007d78:	20001974 	.word	0x20001974

08007d7c <HAL_GetUID>:
osThreadId startup_handle;

uint8_t chipUid[12];

void HAL_GetUID(void)
{
 8007d7c:	b480      	push	{r7}
 8007d7e:	b083      	sub	sp, #12
 8007d80:	af00      	add	r7, sp, #0
	uint8_t i;
	uint8_t *pUID = (uint8_t *) (UID_BASE);
 8007d82:	4b0c      	ldr	r3, [pc, #48]	; (8007db4 <HAL_GetUID+0x38>)
 8007d84:	603b      	str	r3, [r7, #0]

	for (i = 0; i != 12; i++)
 8007d86:	2300      	movs	r3, #0
 8007d88:	71fb      	strb	r3, [r7, #7]
 8007d8a:	e009      	b.n	8007da0 <HAL_GetUID+0x24>
	{
		chipUid[i] = *pUID++;
 8007d8c:	683b      	ldr	r3, [r7, #0]
 8007d8e:	1c5a      	adds	r2, r3, #1
 8007d90:	603a      	str	r2, [r7, #0]
 8007d92:	79fa      	ldrb	r2, [r7, #7]
 8007d94:	7819      	ldrb	r1, [r3, #0]
 8007d96:	4b08      	ldr	r3, [pc, #32]	; (8007db8 <HAL_GetUID+0x3c>)
 8007d98:	5499      	strb	r1, [r3, r2]
	for (i = 0; i != 12; i++)
 8007d9a:	79fb      	ldrb	r3, [r7, #7]
 8007d9c:	3301      	adds	r3, #1
 8007d9e:	71fb      	strb	r3, [r7, #7]
 8007da0:	79fb      	ldrb	r3, [r7, #7]
 8007da2:	2b0c      	cmp	r3, #12
 8007da4:	d1f2      	bne.n	8007d8c <HAL_GetUID+0x10>
	}
}
 8007da6:	bf00      	nop
 8007da8:	370c      	adds	r7, #12
 8007daa:	46bd      	mov	sp, r7
 8007dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db0:	4770      	bx	lr
 8007db2:	bf00      	nop
 8007db4:	1fff7590 	.word	0x1fff7590
 8007db8:	20001a68 	.word	0x20001a68

08007dbc <prtsrce_sysinf>:
 * @brief  show system id ,and clock
 * @retval int
 */

void prtsrce_sysinf(void)
{
 8007dbc:	b580      	push	{r7, lr}
 8007dbe:	b082      	sub	sp, #8
 8007dc0:	af00      	add	r7, sp, #0
	uint8_t i = 0;
 8007dc2:	2300      	movs	r3, #0
 8007dc4:	71fb      	strb	r3, [r7, #7]

	printf("*****************************************************\n");
 8007dc6:	482d      	ldr	r0, [pc, #180]	; (8007e7c <prtsrce_sysinf+0xc0>)
 8007dc8:	f001 f8be 	bl	8008f48 <puts>
	printf(" *\tTerminus lock use freertos ,version:V10.0.1\n");
 8007dcc:	482c      	ldr	r0, [pc, #176]	; (8007e80 <prtsrce_sysinf+0xc4>)
 8007dce:	f001 f8bb 	bl	8008f48 <puts>
	printf(
 8007dd2:	482c      	ldr	r0, [pc, #176]	; (8007e84 <prtsrce_sysinf+0xc8>)
 8007dd4:	f001 f8b8 	bl	8008f48 <puts>
			" *\tBy terminus hwteam(BeiJing), project started in December 2018.\n");
	printf(" *\tBulid data=%s %s\n", __DATE__, __TIME__);
 8007dd8:	4a2b      	ldr	r2, [pc, #172]	; (8007e88 <prtsrce_sysinf+0xcc>)
 8007dda:	492c      	ldr	r1, [pc, #176]	; (8007e8c <prtsrce_sysinf+0xd0>)
 8007ddc:	482c      	ldr	r0, [pc, #176]	; (8007e90 <prtsrce_sysinf+0xd4>)
 8007dde:	f001 f82b 	bl	8008e38 <iprintf>
	//printf(" *\tCodeing version =%s\n" ,PRG_VERSION);
	//printf(" *\tSoft version =%s\n" ,SOFT_VERSION);
	//printf(" *\tHardware version =%s\n" ,HARD_VERSION);
	//printf(" *\tHardfault debug tool version =%s\n" ,CMB_SW_VERSION);
	printf(" *\tCPU:STM32L471REXX\n");
 8007de2:	482c      	ldr	r0, [pc, #176]	; (8007e94 <prtsrce_sysinf+0xd8>)
 8007de4:	f001 f8b0 	bl	8008f48 <puts>
	printf(" *\tHCLK:%ldHz\n", HAL_RCC_GetHCLKFreq());
 8007de8:	f7fa fa16 	bl	8002218 <HAL_RCC_GetHCLKFreq>
 8007dec:	4603      	mov	r3, r0
 8007dee:	4619      	mov	r1, r3
 8007df0:	4829      	ldr	r0, [pc, #164]	; (8007e98 <prtsrce_sysinf+0xdc>)
 8007df2:	f001 f821 	bl	8008e38 <iprintf>
	printf(" *\tPCLK1:%ldHz\n", HAL_RCC_GetPCLK1Freq());
 8007df6:	f7fa fa1b 	bl	8002230 <HAL_RCC_GetPCLK1Freq>
 8007dfa:	4603      	mov	r3, r0
 8007dfc:	4619      	mov	r1, r3
 8007dfe:	4827      	ldr	r0, [pc, #156]	; (8007e9c <prtsrce_sysinf+0xe0>)
 8007e00:	f001 f81a 	bl	8008e38 <iprintf>
	printf(" *\tPCLK2:%ldHz\n", HAL_RCC_GetPCLK2Freq());
 8007e04:	f7fa fa2a 	bl	800225c <HAL_RCC_GetPCLK2Freq>
 8007e08:	4603      	mov	r3, r0
 8007e0a:	4619      	mov	r1, r3
 8007e0c:	4824      	ldr	r0, [pc, #144]	; (8007ea0 <prtsrce_sysinf+0xe4>)
 8007e0e:	f001 f813 	bl	8008e38 <iprintf>
	printf(" *\tHAL version:0x%lX\n", HAL_GetHalVersion());
 8007e12:	f7f8 fbe3 	bl	80005dc <HAL_GetHalVersion>
 8007e16:	4603      	mov	r3, r0
 8007e18:	4619      	mov	r1, r3
 8007e1a:	4822      	ldr	r0, [pc, #136]	; (8007ea4 <prtsrce_sysinf+0xe8>)
 8007e1c:	f001 f80c 	bl	8008e38 <iprintf>
	printf(" *\tDevice revision ID:0x%lX\n", HAL_GetREVID());
 8007e20:	f7f8 fbe6 	bl	80005f0 <HAL_GetREVID>
 8007e24:	4603      	mov	r3, r0
 8007e26:	4619      	mov	r1, r3
 8007e28:	481f      	ldr	r0, [pc, #124]	; (8007ea8 <prtsrce_sysinf+0xec>)
 8007e2a:	f001 f805 	bl	8008e38 <iprintf>
	printf(" *\tDevice ID:0x%lX\n", HAL_GetDEVID());
 8007e2e:	f7f8 fbed 	bl	800060c <HAL_GetDEVID>
 8007e32:	4603      	mov	r3, r0
 8007e34:	4619      	mov	r1, r3
 8007e36:	481d      	ldr	r0, [pc, #116]	; (8007eac <prtsrce_sysinf+0xf0>)
 8007e38:	f000 fffe 	bl	8008e38 <iprintf>
	printf(" *\tUnique device ID:0x");
 8007e3c:	481c      	ldr	r0, [pc, #112]	; (8007eb0 <prtsrce_sysinf+0xf4>)
 8007e3e:	f000 fffb 	bl	8008e38 <iprintf>
	for (i = 0; i < 12; i++)
 8007e42:	2300      	movs	r3, #0
 8007e44:	71fb      	strb	r3, [r7, #7]
 8007e46:	e009      	b.n	8007e5c <prtsrce_sysinf+0xa0>
	{
		printf("%X", chipUid[i]);
 8007e48:	79fb      	ldrb	r3, [r7, #7]
 8007e4a:	4a1a      	ldr	r2, [pc, #104]	; (8007eb4 <prtsrce_sysinf+0xf8>)
 8007e4c:	5cd3      	ldrb	r3, [r2, r3]
 8007e4e:	4619      	mov	r1, r3
 8007e50:	4819      	ldr	r0, [pc, #100]	; (8007eb8 <prtsrce_sysinf+0xfc>)
 8007e52:	f000 fff1 	bl	8008e38 <iprintf>
	for (i = 0; i < 12; i++)
 8007e56:	79fb      	ldrb	r3, [r7, #7]
 8007e58:	3301      	adds	r3, #1
 8007e5a:	71fb      	strb	r3, [r7, #7]
 8007e5c:	79fb      	ldrb	r3, [r7, #7]
 8007e5e:	2b0b      	cmp	r3, #11
 8007e60:	d9f2      	bls.n	8007e48 <prtsrce_sysinf+0x8c>
	}
	printf("\n");
 8007e62:	200a      	movs	r0, #10
 8007e64:	f001 f800 	bl	8008e68 <putchar>
	printf("*****************************************************");
 8007e68:	4804      	ldr	r0, [pc, #16]	; (8007e7c <prtsrce_sysinf+0xc0>)
 8007e6a:	f000 ffe5 	bl	8008e38 <iprintf>
	printf("\n\n");
 8007e6e:	4813      	ldr	r0, [pc, #76]	; (8007ebc <prtsrce_sysinf+0x100>)
 8007e70:	f001 f86a 	bl	8008f48 <puts>
}
 8007e74:	bf00      	nop
 8007e76:	3708      	adds	r7, #8
 8007e78:	46bd      	mov	sp, r7
 8007e7a:	bd80      	pop	{r7, pc}
 8007e7c:	08009e10 	.word	0x08009e10
 8007e80:	08009e48 	.word	0x08009e48
 8007e84:	08009e78 	.word	0x08009e78
 8007e88:	08009ebc 	.word	0x08009ebc
 8007e8c:	08009ec8 	.word	0x08009ec8
 8007e90:	08009ed4 	.word	0x08009ed4
 8007e94:	08009eec 	.word	0x08009eec
 8007e98:	08009f04 	.word	0x08009f04
 8007e9c:	08009f14 	.word	0x08009f14
 8007ea0:	08009f24 	.word	0x08009f24
 8007ea4:	08009f34 	.word	0x08009f34
 8007ea8:	08009f4c 	.word	0x08009f4c
 8007eac:	08009f6c 	.word	0x08009f6c
 8007eb0:	08009f80 	.word	0x08009f80
 8007eb4:	20001a68 	.word	0x20001a68
 8007eb8:	08009f98 	.word	0x08009f98
 8007ebc:	08009f9c 	.word	0x08009f9c

08007ec0 <main>:
 * @brief  The application entry point.
 * @retval int
 */

int main(void)
{
 8007ec0:	b580      	push	{r7, lr}
 8007ec2:	af00      	add	r7, sp, #0
	/* Output error message for HARDFAULT*/
	//HAL_HardfaultDebug_init();
	/* reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8007ec4:	f7f8 fb54 	bl	8000570 <HAL_Init>

	/* Get chip uid*/
	HAL_GetUID();
 8007ec8:	f7ff ff58 	bl	8007d7c <HAL_GetUID>

	/* Configure the system clock */
	HAL_Sysclk_Init();
 8007ecc:	f000 f840 	bl	8007f50 <HAL_Sysclk_Init>

	/* Config pwr clock*/
	//HAL_Pwr_Init();
	/* Init serial for printf port*/
	HAL_Debug_init();
 8007ed0:	f000 fda8 	bl	8008a24 <serial1_hal_init>

	/* Call init function for freertos objects (in freertos.c) */
	//startup();
	/* Printf system info ,clock device version...*/
	prtsrce_sysinf();
 8007ed4:	f7ff ff72 	bl	8007dbc <prtsrce_sysinf>

	/* Start scheduler */
	osKernelStart();
 8007ed8:	f7fd f836 	bl	8004f48 <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */

	/* Infinite loop */
	while (1)
 8007edc:	e7fe      	b.n	8007edc <main+0x1c>

08007ede <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8007ede:	b480      	push	{r7}
 8007ee0:	af00      	add	r7, sp, #0
	/* User can add his own implementation to report the HAL error return state */
	//log(ERR, "Into Error_Handler , file=%s ,line=%d.\n", file ,line);
}
 8007ee2:	bf00      	nop
 8007ee4:	46bd      	mov	sp, r7
 8007ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eea:	4770      	bx	lr

08007eec <assert_failed>:
 * @param  line: assert_param error line source number
 * @retval None
 */
extern void after_sleep(void);
void assert_failed(char *file, uint32_t line)
{
 8007eec:	b480      	push	{r7}
 8007eee:	b083      	sub	sp, #12
 8007ef0:	af00      	add	r7, sp, #0
 8007ef2:	6078      	str	r0, [r7, #4]
 8007ef4:	6039      	str	r1, [r7, #0]
	//after_sleep();
	//printf("Wrong parameters value: file %s on line %d\r\n", file, line);
}
 8007ef6:	bf00      	nop
 8007ef8:	370c      	adds	r7, #12
 8007efa:	46bd      	mov	sp, r7
 8007efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f00:	4770      	bx	lr
	...

08007f04 <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */
PUTCHAR_PROTOTYPE
{
 8007f04:	b580      	push	{r7, lr}
 8007f06:	b084      	sub	sp, #16
 8007f08:	af00      	add	r7, sp, #0
 8007f0a:	6078      	str	r0, [r7, #4]
	if (ch == '\n')
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	2b0a      	cmp	r3, #10
 8007f10:	d109      	bne.n	8007f26 <__io_putchar+0x22>
	{
		uint8_t enter = '\r';
 8007f12:	230d      	movs	r3, #13
 8007f14:	73fb      	strb	r3, [r7, #15]
		HAL_UART_Transmit(&huart1, &enter, 1, 5000);
 8007f16:	f107 010f 	add.w	r1, r7, #15
 8007f1a:	f241 3388 	movw	r3, #5000	; 0x1388
 8007f1e:	2201      	movs	r2, #1
 8007f20:	480a      	ldr	r0, [pc, #40]	; (8007f4c <__io_putchar+0x48>)
 8007f22:	f7fb fe5f 	bl	8003be4 <HAL_UART_Transmit>
	}

	if ((HAL_UART_Transmit(&huart1, (uint8_t *) &ch, 1, 5000)) != HAL_OK)
 8007f26:	1d39      	adds	r1, r7, #4
 8007f28:	f241 3388 	movw	r3, #5000	; 0x1388
 8007f2c:	2201      	movs	r2, #1
 8007f2e:	4807      	ldr	r0, [pc, #28]	; (8007f4c <__io_putchar+0x48>)
 8007f30:	f7fb fe58 	bl	8003be4 <HAL_UART_Transmit>
 8007f34:	4603      	mov	r3, r0
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d002      	beq.n	8007f40 <__io_putchar+0x3c>
	{
		return -1;
 8007f3a:	f04f 33ff 	mov.w	r3, #4294967295
 8007f3e:	e000      	b.n	8007f42 <__io_putchar+0x3e>
	}
	return ch;
 8007f40:	687b      	ldr	r3, [r7, #4]
}
 8007f42:	4618      	mov	r0, r3
 8007f44:	3710      	adds	r7, #16
 8007f46:	46bd      	mov	sp, r7
 8007f48:	bd80      	pop	{r7, pc}
 8007f4a:	bf00      	nop
 8007f4c:	20001ac4 	.word	0x20001ac4

08007f50 <HAL_Sysclk_Init>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void HAL_Sysclk_Init(void)
{
 8007f50:	b580      	push	{r7, lr}
 8007f52:	b0b8      	sub	sp, #224	; 0xe0
 8007f54:	af00      	add	r7, sp, #0
    RCC_ClkInitTypeDef RCC_ClkInitStruct;
    RCC_PeriphCLKInitTypeDef PeriphClkInit;

    /**Configure LSE Drive Capability
    */
    __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8007f56:	4b4c      	ldr	r3, [pc, #304]	; (8008088 <HAL_Sysclk_Init+0x138>)
 8007f58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007f5c:	4a4a      	ldr	r2, [pc, #296]	; (8008088 <HAL_Sysclk_Init+0x138>)
 8007f5e:	f023 0318 	bic.w	r3, r3, #24
 8007f62:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /**Initializes the CPU, AHB and APB busses clocks
    */

    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE
 8007f66:	230d      	movs	r3, #13
 8007f68:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
                                       |RCC_OSCILLATORTYPE_LSE;
    RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8007f6c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007f70:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8007f74:	2301      	movs	r3, #1
 8007f76:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8007f7a:	2301      	movs	r3, #1
 8007f7c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8007f80:	2302      	movs	r3, #2
 8007f82:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8007f86:	2303      	movs	r3, #3
 8007f88:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    RCC_OscInitStruct.PLL.PLLM = 1;
 8007f8c:	2301      	movs	r3, #1
 8007f8e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    RCC_OscInitStruct.PLL.PLLN = 20;
 8007f92:	2314      	movs	r3, #20
 8007f94:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8007f98:	2307      	movs	r3, #7
 8007f9a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8007f9e:	2302      	movs	r3, #2
 8007fa0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8007fa4:	2302      	movs	r3, #2
 8007fa6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8007faa:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8007fae:	4618      	mov	r0, r3
 8007fb0:	f7f9 fa38 	bl	8001424 <HAL_RCC_OscConfig>
 8007fb4:	4603      	mov	r3, r0
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d001      	beq.n	8007fbe <HAL_Sysclk_Init+0x6e>
    {
        Error_Handler();
 8007fba:	f7ff ff90 	bl	8007ede <Error_Handler>
    }

    /**Initializes the CPU, AHB and APB busses clocks
    */
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8007fbe:	230f      	movs	r3, #15
 8007fc0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                                  |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8007fc4:	2303      	movs	r3, #3
 8007fc6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8007fca:	2300      	movs	r3, #0
 8007fcc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8007fd0:	2300      	movs	r3, #0
 8007fd2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8007fd6:	2300      	movs	r3, #0
 8007fd8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8007fdc:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8007fe0:	2103      	movs	r1, #3
 8007fe2:	4618      	mov	r0, r3
 8007fe4:	f7f9 ff0c 	bl	8001e00 <HAL_RCC_ClockConfig>
 8007fe8:	4603      	mov	r3, r0
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d001      	beq.n	8007ff2 <HAL_Sysclk_Init+0xa2>
    {
        Error_Handler();
 8007fee:	f7ff ff76 	bl	8007ede <Error_Handler>
    }

    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART1
 8007ff2:	4b26      	ldr	r3, [pc, #152]	; (800808c <HAL_Sysclk_Init+0x13c>)
 8007ff4:	607b      	str	r3, [r7, #4]
                                         |RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_USART3
                                         |RCC_PERIPHCLK_UART4|RCC_PERIPHCLK_UART5
                                         |RCC_PERIPHCLK_ADC;
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8007ff6:	2300      	movs	r3, #0
 8007ff8:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8007ffa:	2300      	movs	r3, #0
 8007ffc:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8007ffe:	2300      	movs	r3, #0
 8008000:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8008002:	2300      	movs	r3, #0
 8008004:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInit.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 8008006:	2300      	movs	r3, #0
 8008008:	64fb      	str	r3, [r7, #76]	; 0x4c
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800800a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800800e:	67bb      	str	r3, [r7, #120]	; 0x78
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8008010:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008014:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSE;
 8008018:	2303      	movs	r3, #3
 800801a:	60bb      	str	r3, [r7, #8]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800801c:	2301      	movs	r3, #1
 800801e:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 8008020:	2310      	movs	r3, #16
 8008022:	613b      	str	r3, [r7, #16]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8008024:	2307      	movs	r3, #7
 8008026:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8008028:	2302      	movs	r3, #2
 800802a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800802c:	2302      	movs	r3, #2
 800802e:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8008030:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008034:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8008036:	1d3b      	adds	r3, r7, #4
 8008038:	4618      	mov	r0, r3
 800803a:	f7fa f9c7 	bl	80023cc <HAL_RCCEx_PeriphCLKConfig>
 800803e:	4603      	mov	r3, r0
 8008040:	2b00      	cmp	r3, #0
 8008042:	d001      	beq.n	8008048 <HAL_Sysclk_Init+0xf8>
    {
        Error_Handler();
 8008044:	f7ff ff4b 	bl	8007ede <Error_Handler>
    }

    /**Configure the main internal regulator output voltage
    */
    if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8008048:	f44f 7000 	mov.w	r0, #512	; 0x200
 800804c:	f7f9 f988 	bl	8001360 <HAL_PWREx_ControlVoltageScaling>
 8008050:	4603      	mov	r3, r0
 8008052:	2b00      	cmp	r3, #0
 8008054:	d001      	beq.n	800805a <HAL_Sysclk_Init+0x10a>
    {
        Error_Handler();
 8008056:	f7ff ff42 	bl	8007ede <Error_Handler>
    }

    /**Configure the Systick interrupt time
    */
    HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 800805a:	f7fa f8dd 	bl	8002218 <HAL_RCC_GetHCLKFreq>
 800805e:	4602      	mov	r2, r0
 8008060:	4b0b      	ldr	r3, [pc, #44]	; (8008090 <HAL_Sysclk_Init+0x140>)
 8008062:	fba3 2302 	umull	r2, r3, r3, r2
 8008066:	099b      	lsrs	r3, r3, #6
 8008068:	4618      	mov	r0, r3
 800806a:	f7f8 fc11 	bl	8000890 <HAL_SYSTICK_Config>

    /**Configure the Systick
    */
    HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 800806e:	2004      	movs	r0, #4
 8008070:	f7f8 fc1a 	bl	80008a8 <HAL_SYSTICK_CLKSourceConfig>

    /* SysTick_IRQn interrupt configuration */
    HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 8008074:	2200      	movs	r2, #0
 8008076:	210f      	movs	r1, #15
 8008078:	f04f 30ff 	mov.w	r0, #4294967295
 800807c:	f7f8 fbc4 	bl	8000808 <HAL_NVIC_SetPriority>
}
 8008080:	bf00      	nop
 8008082:	37e0      	adds	r7, #224	; 0xe0
 8008084:	46bd      	mov	sp, r7
 8008086:	bd80      	pop	{r7, pc}
 8008088:	40021000 	.word	0x40021000
 800808c:	0002401f 	.word	0x0002401f
 8008090:	10624dd3 	.word	0x10624dd3

08008094 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8008094:	b580      	push	{r7, lr}
 8008096:	b082      	sub	sp, #8
 8008098:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800809a:	4b11      	ldr	r3, [pc, #68]	; (80080e0 <HAL_MspInit+0x4c>)
 800809c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800809e:	4a10      	ldr	r2, [pc, #64]	; (80080e0 <HAL_MspInit+0x4c>)
 80080a0:	f043 0301 	orr.w	r3, r3, #1
 80080a4:	6613      	str	r3, [r2, #96]	; 0x60
 80080a6:	4b0e      	ldr	r3, [pc, #56]	; (80080e0 <HAL_MspInit+0x4c>)
 80080a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80080aa:	f003 0301 	and.w	r3, r3, #1
 80080ae:	607b      	str	r3, [r7, #4]
 80080b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80080b2:	4b0b      	ldr	r3, [pc, #44]	; (80080e0 <HAL_MspInit+0x4c>)
 80080b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80080b6:	4a0a      	ldr	r2, [pc, #40]	; (80080e0 <HAL_MspInit+0x4c>)
 80080b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80080bc:	6593      	str	r3, [r2, #88]	; 0x58
 80080be:	4b08      	ldr	r3, [pc, #32]	; (80080e0 <HAL_MspInit+0x4c>)
 80080c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80080c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80080c6:	603b      	str	r3, [r7, #0]
 80080c8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80080ca:	2200      	movs	r2, #0
 80080cc:	210f      	movs	r1, #15
 80080ce:	f06f 0001 	mvn.w	r0, #1
 80080d2:	f7f8 fb99 	bl	8000808 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80080d6:	bf00      	nop
 80080d8:	3708      	adds	r7, #8
 80080da:	46bd      	mov	sp, r7
 80080dc:	bd80      	pop	{r7, pc}
 80080de:	bf00      	nop
 80080e0:	40021000 	.word	0x40021000

080080e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80080e4:	b480      	push	{r7}
 80080e6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80080e8:	bf00      	nop
 80080ea:	46bd      	mov	sp, r7
 80080ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f0:	4770      	bx	lr

080080f2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80080f2:	b480      	push	{r7}
 80080f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80080f6:	e7fe      	b.n	80080f6 <HardFault_Handler+0x4>

080080f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80080f8:	b480      	push	{r7}
 80080fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80080fc:	e7fe      	b.n	80080fc <MemManage_Handler+0x4>

080080fe <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80080fe:	b480      	push	{r7}
 8008100:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8008102:	e7fe      	b.n	8008102 <BusFault_Handler+0x4>

08008104 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8008104:	b480      	push	{r7}
 8008106:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8008108:	e7fe      	b.n	8008108 <UsageFault_Handler+0x4>

0800810a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800810a:	b480      	push	{r7}
 800810c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800810e:	bf00      	nop
 8008110:	46bd      	mov	sp, r7
 8008112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008116:	4770      	bx	lr

08008118 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8008118:	b580      	push	{r7, lr}
 800811a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800811c:	f7f8 fa40 	bl	80005a0 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8008120:	f7fe fd2a 	bl	8006b78 <xTaskGetSchedulerState>
 8008124:	4603      	mov	r3, r0
 8008126:	2b01      	cmp	r3, #1
 8008128:	d001      	beq.n	800812e <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 800812a:	f7ff fbc5 	bl	80078b8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800812e:	bf00      	nop
 8008130:	bd80      	pop	{r7, pc}

08008132 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8008132:	b580      	push	{r7, lr}
 8008134:	b086      	sub	sp, #24
 8008136:	af00      	add	r7, sp, #0
 8008138:	60f8      	str	r0, [r7, #12]
 800813a:	60b9      	str	r1, [r7, #8]
 800813c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800813e:	2300      	movs	r3, #0
 8008140:	617b      	str	r3, [r7, #20]
 8008142:	e00a      	b.n	800815a <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8008144:	f3af 8000 	nop.w
 8008148:	4601      	mov	r1, r0
 800814a:	68bb      	ldr	r3, [r7, #8]
 800814c:	1c5a      	adds	r2, r3, #1
 800814e:	60ba      	str	r2, [r7, #8]
 8008150:	b2ca      	uxtb	r2, r1
 8008152:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008154:	697b      	ldr	r3, [r7, #20]
 8008156:	3301      	adds	r3, #1
 8008158:	617b      	str	r3, [r7, #20]
 800815a:	697a      	ldr	r2, [r7, #20]
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	429a      	cmp	r2, r3
 8008160:	dbf0      	blt.n	8008144 <_read+0x12>
	}

return len;
 8008162:	687b      	ldr	r3, [r7, #4]
}
 8008164:	4618      	mov	r0, r3
 8008166:	3718      	adds	r7, #24
 8008168:	46bd      	mov	sp, r7
 800816a:	bd80      	pop	{r7, pc}

0800816c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800816c:	b580      	push	{r7, lr}
 800816e:	b086      	sub	sp, #24
 8008170:	af00      	add	r7, sp, #0
 8008172:	60f8      	str	r0, [r7, #12]
 8008174:	60b9      	str	r1, [r7, #8]
 8008176:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008178:	2300      	movs	r3, #0
 800817a:	617b      	str	r3, [r7, #20]
 800817c:	e009      	b.n	8008192 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800817e:	68bb      	ldr	r3, [r7, #8]
 8008180:	1c5a      	adds	r2, r3, #1
 8008182:	60ba      	str	r2, [r7, #8]
 8008184:	781b      	ldrb	r3, [r3, #0]
 8008186:	4618      	mov	r0, r3
 8008188:	f7ff febc 	bl	8007f04 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800818c:	697b      	ldr	r3, [r7, #20]
 800818e:	3301      	adds	r3, #1
 8008190:	617b      	str	r3, [r7, #20]
 8008192:	697a      	ldr	r2, [r7, #20]
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	429a      	cmp	r2, r3
 8008198:	dbf1      	blt.n	800817e <_write+0x12>
	}
	return len;
 800819a:	687b      	ldr	r3, [r7, #4]
}
 800819c:	4618      	mov	r0, r3
 800819e:	3718      	adds	r7, #24
 80081a0:	46bd      	mov	sp, r7
 80081a2:	bd80      	pop	{r7, pc}

080081a4 <_close>:

int _close(int file)
{
 80081a4:	b480      	push	{r7}
 80081a6:	b083      	sub	sp, #12
 80081a8:	af00      	add	r7, sp, #0
 80081aa:	6078      	str	r0, [r7, #4]
	return -1;
 80081ac:	f04f 33ff 	mov.w	r3, #4294967295
}
 80081b0:	4618      	mov	r0, r3
 80081b2:	370c      	adds	r7, #12
 80081b4:	46bd      	mov	sp, r7
 80081b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ba:	4770      	bx	lr

080081bc <_fstat>:


int _fstat(int file, struct stat *st)
{
 80081bc:	b480      	push	{r7}
 80081be:	b083      	sub	sp, #12
 80081c0:	af00      	add	r7, sp, #0
 80081c2:	6078      	str	r0, [r7, #4]
 80081c4:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80081c6:	683b      	ldr	r3, [r7, #0]
 80081c8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80081cc:	605a      	str	r2, [r3, #4]
	return 0;
 80081ce:	2300      	movs	r3, #0
}
 80081d0:	4618      	mov	r0, r3
 80081d2:	370c      	adds	r7, #12
 80081d4:	46bd      	mov	sp, r7
 80081d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081da:	4770      	bx	lr

080081dc <_isatty>:

int _isatty(int file)
{
 80081dc:	b480      	push	{r7}
 80081de:	b083      	sub	sp, #12
 80081e0:	af00      	add	r7, sp, #0
 80081e2:	6078      	str	r0, [r7, #4]
	return 1;
 80081e4:	2301      	movs	r3, #1
}
 80081e6:	4618      	mov	r0, r3
 80081e8:	370c      	adds	r7, #12
 80081ea:	46bd      	mov	sp, r7
 80081ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081f0:	4770      	bx	lr

080081f2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80081f2:	b480      	push	{r7}
 80081f4:	b085      	sub	sp, #20
 80081f6:	af00      	add	r7, sp, #0
 80081f8:	60f8      	str	r0, [r7, #12]
 80081fa:	60b9      	str	r1, [r7, #8]
 80081fc:	607a      	str	r2, [r7, #4]
	return 0;
 80081fe:	2300      	movs	r3, #0
}
 8008200:	4618      	mov	r0, r3
 8008202:	3714      	adds	r7, #20
 8008204:	46bd      	mov	sp, r7
 8008206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800820a:	4770      	bx	lr

0800820c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800820c:	b580      	push	{r7, lr}
 800820e:	b084      	sub	sp, #16
 8008210:	af00      	add	r7, sp, #0
 8008212:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8008214:	4b11      	ldr	r3, [pc, #68]	; (800825c <_sbrk+0x50>)
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	2b00      	cmp	r3, #0
 800821a:	d102      	bne.n	8008222 <_sbrk+0x16>
		heap_end = &end;
 800821c:	4b0f      	ldr	r3, [pc, #60]	; (800825c <_sbrk+0x50>)
 800821e:	4a10      	ldr	r2, [pc, #64]	; (8008260 <_sbrk+0x54>)
 8008220:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8008222:	4b0e      	ldr	r3, [pc, #56]	; (800825c <_sbrk+0x50>)
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8008228:	4b0c      	ldr	r3, [pc, #48]	; (800825c <_sbrk+0x50>)
 800822a:	681a      	ldr	r2, [r3, #0]
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	4413      	add	r3, r2
 8008230:	466a      	mov	r2, sp
 8008232:	4293      	cmp	r3, r2
 8008234:	d907      	bls.n	8008246 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8008236:	f000 fd09 	bl	8008c4c <__errno>
 800823a:	4602      	mov	r2, r0
 800823c:	230c      	movs	r3, #12
 800823e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8008240:	f04f 33ff 	mov.w	r3, #4294967295
 8008244:	e006      	b.n	8008254 <_sbrk+0x48>
	}

	heap_end += incr;
 8008246:	4b05      	ldr	r3, [pc, #20]	; (800825c <_sbrk+0x50>)
 8008248:	681a      	ldr	r2, [r3, #0]
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	4413      	add	r3, r2
 800824e:	4a03      	ldr	r2, [pc, #12]	; (800825c <_sbrk+0x50>)
 8008250:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8008252:	68fb      	ldr	r3, [r7, #12]
}
 8008254:	4618      	mov	r0, r3
 8008256:	3710      	adds	r7, #16
 8008258:	46bd      	mov	sp, r7
 800825a:	bd80      	pop	{r7, pc}
 800825c:	20001984 	.word	0x20001984
 8008260:	10000000 	.word	0x10000000

08008264 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8008264:	b480      	push	{r7}
 8008266:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8008268:	4b17      	ldr	r3, [pc, #92]	; (80082c8 <SystemInit+0x64>)
 800826a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800826e:	4a16      	ldr	r2, [pc, #88]	; (80082c8 <SystemInit+0x64>)
 8008270:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008274:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8008278:	4b14      	ldr	r3, [pc, #80]	; (80082cc <SystemInit+0x68>)
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	4a13      	ldr	r2, [pc, #76]	; (80082cc <SystemInit+0x68>)
 800827e:	f043 0301 	orr.w	r3, r3, #1
 8008282:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8008284:	4b11      	ldr	r3, [pc, #68]	; (80082cc <SystemInit+0x68>)
 8008286:	2200      	movs	r2, #0
 8008288:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 800828a:	4b10      	ldr	r3, [pc, #64]	; (80082cc <SystemInit+0x68>)
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	4a0f      	ldr	r2, [pc, #60]	; (80082cc <SystemInit+0x68>)
 8008290:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8008294:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8008298:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 800829a:	4b0c      	ldr	r3, [pc, #48]	; (80082cc <SystemInit+0x68>)
 800829c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80082a0:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80082a2:	4b0a      	ldr	r3, [pc, #40]	; (80082cc <SystemInit+0x68>)
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	4a09      	ldr	r2, [pc, #36]	; (80082cc <SystemInit+0x68>)
 80082a8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80082ac:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80082ae:	4b07      	ldr	r3, [pc, #28]	; (80082cc <SystemInit+0x68>)
 80082b0:	2200      	movs	r2, #0
 80082b2:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80082b4:	4b04      	ldr	r3, [pc, #16]	; (80082c8 <SystemInit+0x64>)
 80082b6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80082ba:	609a      	str	r2, [r3, #8]
#endif
}
 80082bc:	bf00      	nop
 80082be:	46bd      	mov	sp, r7
 80082c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082c4:	4770      	bx	lr
 80082c6:	bf00      	nop
 80082c8:	e000ed00 	.word	0xe000ed00
 80082cc:	40021000 	.word	0x40021000

080082d0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80082d0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8008308 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80082d4:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80082d6:	e003      	b.n	80082e0 <LoopCopyDataInit>

080082d8 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80082d8:	4b0c      	ldr	r3, [pc, #48]	; (800830c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80082da:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80082dc:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80082de:	3104      	adds	r1, #4

080082e0 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80082e0:	480b      	ldr	r0, [pc, #44]	; (8008310 <LoopForever+0xa>)
	ldr	r3, =_edata
 80082e2:	4b0c      	ldr	r3, [pc, #48]	; (8008314 <LoopForever+0xe>)
	adds	r2, r0, r1
 80082e4:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80082e6:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80082e8:	d3f6      	bcc.n	80082d8 <CopyDataInit>
	ldr	r2, =_sbss
 80082ea:	4a0b      	ldr	r2, [pc, #44]	; (8008318 <LoopForever+0x12>)
	b	LoopFillZerobss
 80082ec:	e002      	b.n	80082f4 <LoopFillZerobss>

080082ee <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80082ee:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80082f0:	f842 3b04 	str.w	r3, [r2], #4

080082f4 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80082f4:	4b09      	ldr	r3, [pc, #36]	; (800831c <LoopForever+0x16>)
	cmp	r2, r3
 80082f6:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80082f8:	d3f9      	bcc.n	80082ee <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80082fa:	f7ff ffb3 	bl	8008264 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80082fe:	f000 fcab 	bl	8008c58 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8008302:	f7ff fddd 	bl	8007ec0 <main>

08008306 <LoopForever>:

LoopForever:
    b LoopForever
 8008306:	e7fe      	b.n	8008306 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8008308:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 800830c:	0800a0b4 	.word	0x0800a0b4
	ldr	r0, =_sdata
 8008310:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8008314:	200000a8 	.word	0x200000a8
	ldr	r2, =_sbss
 8008318:	200000a8 	.word	0x200000a8
	ldr	r3, = _ebss
 800831c:	20001b74 	.word	0x20001b74

08008320 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8008320:	e7fe      	b.n	8008320 <ADC1_2_IRQHandler>

08008322 <list_create>:
 * list_release(), but private value of every node need to be freed
 * by the user before to call list_release().
 *
 * On error, NULL is returned. otherwise the pointer to the new list. */
list *list_create(void)
{
 8008322:	b580      	push	{r7, lr}
 8008324:	b082      	sub	sp, #8
 8008326:	af00      	add	r7, sp, #0
    struct list *list;

    if ((list = malloc(sizeof(*list))) == NULL)
 8008328:	2018      	movs	r0, #24
 800832a:	f000 fcb9 	bl	8008ca0 <malloc>
 800832e:	4603      	mov	r3, r0
 8008330:	607b      	str	r3, [r7, #4]
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	2b00      	cmp	r3, #0
 8008336:	d101      	bne.n	800833c <list_create+0x1a>
        return NULL;
 8008338:	2300      	movs	r3, #0
 800833a:	e013      	b.n	8008364 <list_create+0x42>
    list->head = list->tail = NULL;
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	2200      	movs	r2, #0
 8008340:	605a      	str	r2, [r3, #4]
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	685a      	ldr	r2, [r3, #4]
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	601a      	str	r2, [r3, #0]
    list->len = 0;
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	2200      	movs	r2, #0
 800834e:	615a      	str	r2, [r3, #20]
    list->dup = NULL;
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	2200      	movs	r2, #0
 8008354:	609a      	str	r2, [r3, #8]
    list->free = NULL;
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	2200      	movs	r2, #0
 800835a:	60da      	str	r2, [r3, #12]
    list->match = NULL;
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	2200      	movs	r2, #0
 8008360:	611a      	str	r2, [r3, #16]
    return list;
 8008362:	687b      	ldr	r3, [r7, #4]
}
 8008364:	4618      	mov	r0, r3
 8008366:	3708      	adds	r7, #8
 8008368:	46bd      	mov	sp, r7
 800836a:	bd80      	pop	{r7, pc}

0800836c <list_add_node_tail>:
 *
 * On error, NULL is returned and no operation is performed (i.e. the
 * list remains unaltered).
 * On success the 'list' pointer you pass to the function is returned. */
list *list_add_node_tail(list *list, void *value)
{
 800836c:	b580      	push	{r7, lr}
 800836e:	b084      	sub	sp, #16
 8008370:	af00      	add	r7, sp, #0
 8008372:	6078      	str	r0, [r7, #4]
 8008374:	6039      	str	r1, [r7, #0]
    list_node *node;

    if ((node = malloc(sizeof(*node))) == NULL)
 8008376:	200c      	movs	r0, #12
 8008378:	f000 fc92 	bl	8008ca0 <malloc>
 800837c:	4603      	mov	r3, r0
 800837e:	60fb      	str	r3, [r7, #12]
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	2b00      	cmp	r3, #0
 8008384:	d101      	bne.n	800838a <list_add_node_tail+0x1e>
        return NULL;
 8008386:	2300      	movs	r3, #0
 8008388:	e029      	b.n	80083de <list_add_node_tail+0x72>
    node->value = value;
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	683a      	ldr	r2, [r7, #0]
 800838e:	609a      	str	r2, [r3, #8]
    if (list->len == 0) {
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	695b      	ldr	r3, [r3, #20]
 8008394:	2b00      	cmp	r3, #0
 8008396:	d10e      	bne.n	80083b6 <list_add_node_tail+0x4a>
        list->head = list->tail = node;
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	68fa      	ldr	r2, [r7, #12]
 800839c:	605a      	str	r2, [r3, #4]
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	685a      	ldr	r2, [r3, #4]
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	601a      	str	r2, [r3, #0]
        node->prev = node->next = NULL;
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	2200      	movs	r2, #0
 80083aa:	605a      	str	r2, [r3, #4]
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	685a      	ldr	r2, [r3, #4]
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	601a      	str	r2, [r3, #0]
 80083b4:	e00d      	b.n	80083d2 <list_add_node_tail+0x66>
    } else {
        node->prev = list->tail;
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	685a      	ldr	r2, [r3, #4]
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	601a      	str	r2, [r3, #0]
        node->next = NULL;
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	2200      	movs	r2, #0
 80083c2:	605a      	str	r2, [r3, #4]
        list->tail->next = node;
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	685b      	ldr	r3, [r3, #4]
 80083c8:	68fa      	ldr	r2, [r7, #12]
 80083ca:	605a      	str	r2, [r3, #4]
        list->tail = node;
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	68fa      	ldr	r2, [r7, #12]
 80083d0:	605a      	str	r2, [r3, #4]
    }
    list->len++;
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	695b      	ldr	r3, [r3, #20]
 80083d6:	1c5a      	adds	r2, r3, #1
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	615a      	str	r2, [r3, #20]
    return list;
 80083dc:	687b      	ldr	r3, [r7, #4]
}
 80083de:	4618      	mov	r0, r3
 80083e0:	3710      	adds	r7, #16
 80083e2:	46bd      	mov	sp, r7
 80083e4:	bd80      	pop	{r7, pc}

080083e6 <list_get_iterator>:
/* Returns a list iterator 'iter'. After the initialization every
 * call to list_next() will return the next element of the list.
 *
 * This function can't fail. */
list_iter *list_get_iterator(list *list, int direction)
{
 80083e6:	b580      	push	{r7, lr}
 80083e8:	b084      	sub	sp, #16
 80083ea:	af00      	add	r7, sp, #0
 80083ec:	6078      	str	r0, [r7, #4]
 80083ee:	6039      	str	r1, [r7, #0]
    list_iter *iter;

    if ((iter = malloc(sizeof(*iter))) == NULL) return NULL;
 80083f0:	2008      	movs	r0, #8
 80083f2:	f000 fc55 	bl	8008ca0 <malloc>
 80083f6:	4603      	mov	r3, r0
 80083f8:	60fb      	str	r3, [r7, #12]
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d101      	bne.n	8008404 <list_get_iterator+0x1e>
 8008400:	2300      	movs	r3, #0
 8008402:	e00f      	b.n	8008424 <list_get_iterator+0x3e>
    if (direction == START_FROM_HEAD)
 8008404:	683b      	ldr	r3, [r7, #0]
 8008406:	2b00      	cmp	r3, #0
 8008408:	d104      	bne.n	8008414 <list_get_iterator+0x2e>
        iter->next = list->head;
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	681a      	ldr	r2, [r3, #0]
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	601a      	str	r2, [r3, #0]
 8008412:	e003      	b.n	800841c <list_get_iterator+0x36>
    else
        iter->next = list->tail;
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	685a      	ldr	r2, [r3, #4]
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	601a      	str	r2, [r3, #0]
    iter->direction = direction;
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	683a      	ldr	r2, [r7, #0]
 8008420:	605a      	str	r2, [r3, #4]
    return iter;
 8008422:	68fb      	ldr	r3, [r7, #12]
}
 8008424:	4618      	mov	r0, r3
 8008426:	3710      	adds	r7, #16
 8008428:	46bd      	mov	sp, r7
 800842a:	bd80      	pop	{r7, pc}

0800842c <list_release_iterator>:

/* Release the iterator memory */
void list_release_iterator(list_iter *iter) {
 800842c:	b580      	push	{r7, lr}
 800842e:	b082      	sub	sp, #8
 8008430:	af00      	add	r7, sp, #0
 8008432:	6078      	str	r0, [r7, #4]
    free(iter);
 8008434:	6878      	ldr	r0, [r7, #4]
 8008436:	f000 fc3b 	bl	8008cb0 <free>
}
 800843a:	bf00      	nop
 800843c:	3708      	adds	r7, #8
 800843e:	46bd      	mov	sp, r7
 8008440:	bd80      	pop	{r7, pc}

08008442 <list_next>:
 *     do_something_with(list_node_value(node));
 * }
 *
 * */
list_node *list_next(list_iter *iter)
{
 8008442:	b480      	push	{r7}
 8008444:	b085      	sub	sp, #20
 8008446:	af00      	add	r7, sp, #0
 8008448:	6078      	str	r0, [r7, #4]
    list_node *current = iter->next;
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	60fb      	str	r3, [r7, #12]

    if (current != NULL) {
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	2b00      	cmp	r3, #0
 8008454:	d00c      	beq.n	8008470 <list_next+0x2e>
        if (iter->direction == START_FROM_HEAD)
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	685b      	ldr	r3, [r3, #4]
 800845a:	2b00      	cmp	r3, #0
 800845c:	d104      	bne.n	8008468 <list_next+0x26>
            iter->next = current->next;
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	685a      	ldr	r2, [r3, #4]
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	601a      	str	r2, [r3, #0]
 8008466:	e003      	b.n	8008470 <list_next+0x2e>
        else
            iter->next = current->prev;
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	681a      	ldr	r2, [r3, #0]
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	601a      	str	r2, [r3, #0]
    }
    return current;
 8008470:	68fb      	ldr	r3, [r7, #12]
}
 8008472:	4618      	mov	r0, r3
 8008474:	3714      	adds	r7, #20
 8008476:	46bd      	mov	sp, r7
 8008478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800847c:	4770      	bx	lr

0800847e <in_isr_mode>:
#include "priv_os.h"

/* Determine whether we are in thread mode or handler mode. */
static int in_isr_mode(void)
{
 800847e:	b480      	push	{r7}
 8008480:	b083      	sub	sp, #12
 8008482:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008484:	f3ef 8305 	mrs	r3, IPSR
 8008488:	607b      	str	r3, [r7, #4]
  return(result);
 800848a:	687b      	ldr	r3, [r7, #4]
    return (__get_IPSR() != 0?1:0);
 800848c:	2b00      	cmp	r3, #0
 800848e:	bf14      	ite	ne
 8008490:	2301      	movne	r3, #1
 8008492:	2300      	moveq	r3, #0
 8008494:	b2db      	uxtb	r3, r3
}
 8008496:	4618      	mov	r0, r3
 8008498:	370c      	adds	r7, #12
 800849a:	46bd      	mov	sp, r7
 800849c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084a0:	4770      	bx	lr

080084a2 <creat_semqphore>:
}



sc_semaphore_t creat_semqphore( void )
{
 80084a2:	b580      	push	{r7, lr}
 80084a4:	b082      	sub	sp, #8
 80084a6:	af00      	add	r7, sp, #0
    sc_semaphore_t seamp;

    configASSERT((seamp = xSemaphoreCreateBinary()));
 80084a8:	2203      	movs	r2, #3
 80084aa:	2100      	movs	r1, #0
 80084ac:	2001      	movs	r0, #1
 80084ae:	f7fc ff41 	bl	8005334 <xQueueGenericCreate>
 80084b2:	6078      	str	r0, [r7, #4]
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d109      	bne.n	80084ce <creat_semqphore+0x2c>
 80084ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084be:	f383 8811 	msr	BASEPRI, r3
 80084c2:	f3bf 8f6f 	isb	sy
 80084c6:	f3bf 8f4f 	dsb	sy
 80084ca:	603b      	str	r3, [r7, #0]
 80084cc:	e7fe      	b.n	80084cc <creat_semqphore+0x2a>

    return seamp;
 80084ce:	687b      	ldr	r3, [r7, #4]
}
 80084d0:	4618      	mov	r0, r3
 80084d2:	3708      	adds	r7, #8
 80084d4:	46bd      	mov	sp, r7
 80084d6:	bd80      	pop	{r7, pc}

080084d8 <read_semaphore>:

int read_semaphore(sc_semaphore_t id, uint32_t millisec)
{
 80084d8:	b580      	push	{r7, lr}
 80084da:	b084      	sub	sp, #16
 80084dc:	af00      	add	r7, sp, #0
 80084de:	6078      	str	r0, [r7, #4]
 80084e0:	6039      	str	r1, [r7, #0]
    portBASE_TYPE taskWoken = pdFALSE;
 80084e2:	2300      	movs	r3, #0
 80084e4:	60bb      	str	r3, [r7, #8]
    TickType_t ticks = 0;
 80084e6:	2300      	movs	r3, #0
 80084e8:	60fb      	str	r3, [r7, #12]
 
    if (millisec == WAIT_FOR_EVER)
 80084ea:	683b      	ldr	r3, [r7, #0]
 80084ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084f0:	d103      	bne.n	80084fa <read_semaphore+0x22>
    {
        ticks = portMAX_DELAY;
 80084f2:	f04f 33ff 	mov.w	r3, #4294967295
 80084f6:	60fb      	str	r3, [r7, #12]
 80084f8:	e009      	b.n	800850e <read_semaphore+0x36>
    }
    else if (millisec != 0)
 80084fa:	683b      	ldr	r3, [r7, #0]
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d006      	beq.n	800850e <read_semaphore+0x36>
    {
        ticks = millisec / portTICK_PERIOD_MS;
 8008500:	683b      	ldr	r3, [r7, #0]
 8008502:	60fb      	str	r3, [r7, #12]
        if (ticks == 0)
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	2b00      	cmp	r3, #0
 8008508:	d101      	bne.n	800850e <read_semaphore+0x36>
        {
            ticks = 1;
 800850a:	2301      	movs	r3, #1
 800850c:	60fb      	str	r3, [r7, #12]
        }
    }

    if (in_isr_mode())
 800850e:	f7ff ffb6 	bl	800847e <in_isr_mode>
 8008512:	4603      	mov	r3, r0
 8008514:	2b00      	cmp	r3, #0
 8008516:	d018      	beq.n	800854a <read_semaphore+0x72>
    {
        if (xSemaphoreTakeFromISR(id, &taskWoken) != pdTRUE)
 8008518:	f107 0308 	add.w	r3, r7, #8
 800851c:	461a      	mov	r2, r3
 800851e:	2100      	movs	r1, #0
 8008520:	6878      	ldr	r0, [r7, #4]
 8008522:	f7fd fb95 	bl	8005c50 <xQueueReceiveFromISR>
 8008526:	4603      	mov	r3, r0
 8008528:	2b01      	cmp	r3, #1
 800852a:	d002      	beq.n	8008532 <read_semaphore+0x5a>
        {
            return -1;
 800852c:	f04f 33ff 	mov.w	r3, #4294967295
 8008530:	e016      	b.n	8008560 <read_semaphore+0x88>
        }
        portEND_SWITCHING_ISR(taskWoken);
 8008532:	68bb      	ldr	r3, [r7, #8]
 8008534:	2b00      	cmp	r3, #0
 8008536:	d012      	beq.n	800855e <read_semaphore+0x86>
 8008538:	4b0b      	ldr	r3, [pc, #44]	; (8008568 <read_semaphore+0x90>)
 800853a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800853e:	601a      	str	r2, [r3, #0]
 8008540:	f3bf 8f4f 	dsb	sy
 8008544:	f3bf 8f6f 	isb	sy
 8008548:	e009      	b.n	800855e <read_semaphore+0x86>
    }
    else if (xSemaphoreTake(id, ticks) != pdTRUE)
 800854a:	68f9      	ldr	r1, [r7, #12]
 800854c:	6878      	ldr	r0, [r7, #4]
 800854e:	f7fd fa77 	bl	8005a40 <xQueueSemaphoreTake>
 8008552:	4603      	mov	r3, r0
 8008554:	2b01      	cmp	r3, #1
 8008556:	d002      	beq.n	800855e <read_semaphore+0x86>
    {
        return -1;
 8008558:	f04f 33ff 	mov.w	r3, #4294967295
 800855c:	e000      	b.n	8008560 <read_semaphore+0x88>
    }

    return 0;
 800855e:	2300      	movs	r3, #0
}
 8008560:	4618      	mov	r0, r3
 8008562:	3710      	adds	r7, #16
 8008564:	46bd      	mov	sp, r7
 8008566:	bd80      	pop	{r7, pc}
 8008568:	e000ed04 	.word	0xe000ed04

0800856c <send_semaphore>:

int send_semaphore(sc_semaphore_t id)
{
 800856c:	b580      	push	{r7, lr}
 800856e:	b084      	sub	sp, #16
 8008570:	af00      	add	r7, sp, #0
 8008572:	6078      	str	r0, [r7, #4]
    portBASE_TYPE taskWoken = pdFALSE;
 8008574:	2300      	movs	r3, #0
 8008576:	60fb      	str	r3, [r7, #12]

    if (in_isr_mode())
 8008578:	f7ff ff81 	bl	800847e <in_isr_mode>
 800857c:	4603      	mov	r3, r0
 800857e:	2b00      	cmp	r3, #0
 8008580:	d017      	beq.n	80085b2 <send_semaphore+0x46>
    {
        if (xSemaphoreGiveFromISR(id, &taskWoken) != pdTRUE)
 8008582:	f107 030c 	add.w	r3, r7, #12
 8008586:	4619      	mov	r1, r3
 8008588:	6878      	ldr	r0, [r7, #4]
 800858a:	f7fd f8f3 	bl	8005774 <xQueueGiveFromISR>
 800858e:	4603      	mov	r3, r0
 8008590:	2b01      	cmp	r3, #1
 8008592:	d002      	beq.n	800859a <send_semaphore+0x2e>
        {
            return -1;
 8008594:	f04f 33ff 	mov.w	r3, #4294967295
 8008598:	e018      	b.n	80085cc <send_semaphore+0x60>
        }
        portEND_SWITCHING_ISR(taskWoken);
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	2b00      	cmp	r3, #0
 800859e:	d014      	beq.n	80085ca <send_semaphore+0x5e>
 80085a0:	4b0c      	ldr	r3, [pc, #48]	; (80085d4 <send_semaphore+0x68>)
 80085a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80085a6:	601a      	str	r2, [r3, #0]
 80085a8:	f3bf 8f4f 	dsb	sy
 80085ac:	f3bf 8f6f 	isb	sy
 80085b0:	e00b      	b.n	80085ca <send_semaphore+0x5e>
    }
    else
    {
        if (xSemaphoreGive(id) != pdTRUE)
 80085b2:	2300      	movs	r3, #0
 80085b4:	2200      	movs	r2, #0
 80085b6:	2100      	movs	r1, #0
 80085b8:	6878      	ldr	r0, [r7, #4]
 80085ba:	f7fc ff4d 	bl	8005458 <xQueueGenericSend>
 80085be:	4603      	mov	r3, r0
 80085c0:	2b01      	cmp	r3, #1
 80085c2:	d002      	beq.n	80085ca <send_semaphore+0x5e>
        {
            return  -1;
 80085c4:	f04f 33ff 	mov.w	r3, #4294967295
 80085c8:	e000      	b.n	80085cc <send_semaphore+0x60>
        }
    }

    return 0;
 80085ca:	2300      	movs	r3, #0
}
 80085cc:	4618      	mov	r0, r3
 80085ce:	3710      	adds	r7, #16
 80085d0:	46bd      	mov	sp, r7
 80085d2:	bd80      	pop	{r7, pc}
 80085d4:	e000ed04 	.word	0xe000ed04

080085d8 <misc_init>:
static list_iter *msicdev_list_iter;
static uint8_t DYNAMIC_MINORS = DYNAMIC_MINORS_MAX + 1;
sc_mutex_t misc_mtx;

int misc_init(void)
{
 80085d8:	b580      	push	{r7, lr}
 80085da:	af00      	add	r7, sp, #0
	msicdev_list = list_create();
 80085dc:	f7ff fea1 	bl	8008322 <list_create>
 80085e0:	4602      	mov	r2, r0
 80085e2:	4b0b      	ldr	r3, [pc, #44]	; (8008610 <misc_init+0x38>)
 80085e4:	601a      	str	r2, [r3, #0]
	msicdev_list_iter = list_get_iterator(msicdev_list, START_FROM_HEAD);
 80085e6:	4b0a      	ldr	r3, [pc, #40]	; (8008610 <misc_init+0x38>)
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	2100      	movs	r1, #0
 80085ec:	4618      	mov	r0, r3
 80085ee:	f7ff fefa 	bl	80083e6 <list_get_iterator>
 80085f2:	4602      	mov	r2, r0
 80085f4:	4b07      	ldr	r3, [pc, #28]	; (8008614 <misc_init+0x3c>)
 80085f6:	601a      	str	r2, [r3, #0]

	if ((msicdev_list == NULL) || (msicdev_list_iter == NULL))
 80085f8:	4b05      	ldr	r3, [pc, #20]	; (8008610 <misc_init+0x38>)
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	2b00      	cmp	r3, #0
	{
		/*msicdev列表初始化失败,系统重启*/
		//soft_system_resert(__func__);
	}
    
    misc_mtx = creat_mutex();
 80085fe:	2001      	movs	r0, #1
 8008600:	f7fc ff12 	bl	8005428 <xQueueCreateMutex>
 8008604:	4602      	mov	r2, r0
 8008606:	4b04      	ldr	r3, [pc, #16]	; (8008618 <misc_init+0x40>)
 8008608:	601a      	str	r2, [r3, #0]
    
    return 0;
 800860a:	2300      	movs	r3, #0
}
 800860c:	4618      	mov	r0, r3
 800860e:	bd80      	pop	{r7, pc}
 8008610:	20001988 	.word	0x20001988
 8008614:	2000198c 	.word	0x2000198c
 8008618:	20001a78 	.word	0x20001a78

0800861c <misc_list_empty>:
{
	return msicdev_list;
}

static list_node *misc_list_empty(struct miscdevice *misc)
{
 800861c:	b580      	push	{r7, lr}
 800861e:	b084      	sub	sp, #16
 8008620:	af00      	add	r7, sp, #0
 8008622:	6078      	str	r0, [r7, #4]
	list_iter *iter;
	list_node *node;

	iter = list_get_iterator(msicdev_list, START_FROM_HEAD);
 8008624:	4b10      	ldr	r3, [pc, #64]	; (8008668 <misc_list_empty+0x4c>)
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	2100      	movs	r1, #0
 800862a:	4618      	mov	r0, r3
 800862c:	f7ff fedb 	bl	80083e6 <list_get_iterator>
 8008630:	60f8      	str	r0, [r7, #12]
	while ((node = list_next(iter)) != NULL)
 8008632:	e009      	b.n	8008648 <misc_list_empty+0x2c>
	{
		if (misc == node->value)
 8008634:	68bb      	ldr	r3, [r7, #8]
 8008636:	689b      	ldr	r3, [r3, #8]
 8008638:	687a      	ldr	r2, [r7, #4]
 800863a:	429a      	cmp	r2, r3
 800863c:	d104      	bne.n	8008648 <misc_list_empty+0x2c>
		{
			list_release_iterator(iter);
 800863e:	68f8      	ldr	r0, [r7, #12]
 8008640:	f7ff fef4 	bl	800842c <list_release_iterator>
			return node;
 8008644:	68bb      	ldr	r3, [r7, #8]
 8008646:	e00a      	b.n	800865e <misc_list_empty+0x42>
	while ((node = list_next(iter)) != NULL)
 8008648:	68f8      	ldr	r0, [r7, #12]
 800864a:	f7ff fefa 	bl	8008442 <list_next>
 800864e:	60b8      	str	r0, [r7, #8]
 8008650:	68bb      	ldr	r3, [r7, #8]
 8008652:	2b00      	cmp	r3, #0
 8008654:	d1ee      	bne.n	8008634 <misc_list_empty+0x18>
		}
	}
	list_release_iterator(iter);
 8008656:	68f8      	ldr	r0, [r7, #12]
 8008658:	f7ff fee8 	bl	800842c <list_release_iterator>
	return NULL;
 800865c:	2300      	movs	r3, #0
}
 800865e:	4618      	mov	r0, r3
 8008660:	3710      	adds	r7, #16
 8008662:	46bd      	mov	sp, r7
 8008664:	bd80      	pop	{r7, pc}
 8008666:	bf00      	nop
 8008668:	20001988 	.word	0x20001988

0800866c <misc_search_enter>:

static bool misc_search_enter(uint8_t minor)
{
 800866c:	b580      	push	{r7, lr}
 800866e:	b086      	sub	sp, #24
 8008670:	af00      	add	r7, sp, #0
 8008672:	4603      	mov	r3, r0
 8008674:	71fb      	strb	r3, [r7, #7]
	list_iter *iter;
	list_node *node;
	struct miscdevice *misc;

	iter = list_get_iterator(msicdev_list, START_FROM_HEAD);
 8008676:	4b12      	ldr	r3, [pc, #72]	; (80086c0 <misc_search_enter+0x54>)
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	2100      	movs	r1, #0
 800867c:	4618      	mov	r0, r3
 800867e:	f7ff feb2 	bl	80083e6 <list_get_iterator>
 8008682:	6178      	str	r0, [r7, #20]
	while ((node = list_next(iter)) != NULL)
 8008684:	e00c      	b.n	80086a0 <misc_search_enter+0x34>
	{
		misc = (struct miscdevice *)(node->value);
 8008686:	693b      	ldr	r3, [r7, #16]
 8008688:	689b      	ldr	r3, [r3, #8]
 800868a:	60fb      	str	r3, [r7, #12]
		if (misc->minor == minor)
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	785b      	ldrb	r3, [r3, #1]
 8008690:	79fa      	ldrb	r2, [r7, #7]
 8008692:	429a      	cmp	r2, r3
 8008694:	d104      	bne.n	80086a0 <misc_search_enter+0x34>
		{
			list_release_iterator(iter);
 8008696:	6978      	ldr	r0, [r7, #20]
 8008698:	f7ff fec8 	bl	800842c <list_release_iterator>
			return true;
 800869c:	2301      	movs	r3, #1
 800869e:	e00a      	b.n	80086b6 <misc_search_enter+0x4a>
	while ((node = list_next(iter)) != NULL)
 80086a0:	6978      	ldr	r0, [r7, #20]
 80086a2:	f7ff fece 	bl	8008442 <list_next>
 80086a6:	6138      	str	r0, [r7, #16]
 80086a8:	693b      	ldr	r3, [r7, #16]
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d1eb      	bne.n	8008686 <misc_search_enter+0x1a>
		}
	}
	list_release_iterator(iter);
 80086ae:	6978      	ldr	r0, [r7, #20]
 80086b0:	f7ff febc 	bl	800842c <list_release_iterator>
	return false;
 80086b4:	2300      	movs	r3, #0
}
 80086b6:	4618      	mov	r0, r3
 80086b8:	3718      	adds	r7, #24
 80086ba:	46bd      	mov	sp, r7
 80086bc:	bd80      	pop	{r7, pc}
 80086be:	bf00      	nop
 80086c0:	20001988 	.word	0x20001988

080086c4 <misc_register>:

int misc_register(struct miscdevice *misc)
{
 80086c4:	b580      	push	{r7, lr}
 80086c6:	b084      	sub	sp, #16
 80086c8:	af00      	add	r7, sp, #0
 80086ca:	6078      	str	r0, [r7, #4]
	int err = 0;
 80086cc:	2300      	movs	r3, #0
 80086ce:	60fb      	str	r3, [r7, #12]
    
    if ( misc_list_empty(misc) != NULL )
 80086d0:	6878      	ldr	r0, [r7, #4]
 80086d2:	f7ff ffa3 	bl	800861c <misc_list_empty>
 80086d6:	4603      	mov	r3, r0
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d002      	beq.n	80086e2 <misc_register+0x1e>
    {
        //INIT_PRINT(INIT_FAIL,"%s hasbeen register" , misc->name);
		return -EINVAL;
 80086dc:	f06f 0315 	mvn.w	r3, #21
 80086e0:	e026      	b.n	8008730 <misc_register+0x6c>
    }
	if (misc->minor != MISC_DYNAMIC_MINOR)
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	785b      	ldrb	r3, [r3, #1]
 80086e6:	2bff      	cmp	r3, #255	; 0xff
 80086e8:	d00a      	beq.n	8008700 <misc_register+0x3c>
	{
		if (misc_search_enter(misc->minor) == true)
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	785b      	ldrb	r3, [r3, #1]
 80086ee:	4618      	mov	r0, r3
 80086f0:	f7ff ffbc 	bl	800866c <misc_search_enter>
 80086f4:	4603      	mov	r3, r0
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d00a      	beq.n	8008710 <misc_register+0x4c>
		{
            //INIT_PRINT(INIT_FAIL,"%s have the same minor=%d" , misc->name ,misc->minor);
			return -EBUSY;
 80086fa:	f06f 030f 	mvn.w	r3, #15
 80086fe:	e017      	b.n	8008730 <misc_register+0x6c>
		}
	}
	else
	{
		misc->minor = DYNAMIC_MINORS++;
 8008700:	4b0d      	ldr	r3, [pc, #52]	; (8008738 <misc_register+0x74>)
 8008702:	781b      	ldrb	r3, [r3, #0]
 8008704:	1c5a      	adds	r2, r3, #1
 8008706:	b2d1      	uxtb	r1, r2
 8008708:	4a0b      	ldr	r2, [pc, #44]	; (8008738 <misc_register+0x74>)
 800870a:	7011      	strb	r1, [r2, #0]
 800870c:	687a      	ldr	r2, [r7, #4]
 800870e:	7053      	strb	r3, [r2, #1]
	}

	misc->major = MISC_MAJOR;
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	2200      	movs	r2, #0
 8008714:	701a      	strb	r2, [r3, #0]
	if (list_add_node_tail(msicdev_list, misc) == NULL)
 8008716:	4b09      	ldr	r3, [pc, #36]	; (800873c <misc_register+0x78>)
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	6879      	ldr	r1, [r7, #4]
 800871c:	4618      	mov	r0, r3
 800871e:	f7ff fe25 	bl	800836c <list_add_node_tail>
 8008722:	4603      	mov	r3, r0
 8008724:	2b00      	cmp	r3, #0
 8008726:	d102      	bne.n	800872e <misc_register+0x6a>
	{
        //INIT_PRINT(INIT_FAIL,"%s register" , misc->name);
		return -ENOMEM;
 8008728:	f06f 030b 	mvn.w	r3, #11
 800872c:	e000      	b.n	8008730 <misc_register+0x6c>
	}
    
    //INIT_PRINT(INIT_OK,"%s register" , misc->name);

	return err;
 800872e:	68fb      	ldr	r3, [r7, #12]
}
 8008730:	4618      	mov	r0, r3
 8008732:	3710      	adds	r7, #16
 8008734:	46bd      	mov	sp, r7
 8008736:	bd80      	pop	{r7, pc}
 8008738:	20000010 	.word	0x20000010
 800873c:	20001988 	.word	0x20001988

08008740 <USART1_IRQHandler>:
static uint8_t serdbg_msg[DEBUG_RX_MAX];
static uint32_t ser_read_mode = WAIT_FOR_EVER;
static uint32_t temp;

void USART1_IRQHandler(void)
{
 8008740:	b580      	push	{r7, lr}
 8008742:	af00      	add	r7, sp, #0

    if (((__HAL_UART_GET_FLAG(&SD_PORT, UART_FLAG_IDLE)) != RESET))
 8008744:	4b12      	ldr	r3, [pc, #72]	; (8008790 <USART1_IRQHandler+0x50>)
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	69db      	ldr	r3, [r3, #28]
 800874a:	f003 0310 	and.w	r3, r3, #16
 800874e:	2b10      	cmp	r3, #16
 8008750:	d118      	bne.n	8008784 <USART1_IRQHandler+0x44>
    {
        __HAL_UART_CLEAR_IDLEFLAG(&SD_PORT);
 8008752:	4b0f      	ldr	r3, [pc, #60]	; (8008790 <USART1_IRQHandler+0x50>)
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	2210      	movs	r2, #16
 8008758:	621a      	str	r2, [r3, #32]
        temp = SD_PORT.Instance->ISR;
 800875a:	4b0d      	ldr	r3, [pc, #52]	; (8008790 <USART1_IRQHandler+0x50>)
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	69db      	ldr	r3, [r3, #28]
 8008760:	4a0c      	ldr	r2, [pc, #48]	; (8008794 <USART1_IRQHandler+0x54>)
 8008762:	6013      	str	r3, [r2, #0]
        temp = SD_PORT.Instance->RDR;
 8008764:	4b0a      	ldr	r3, [pc, #40]	; (8008790 <USART1_IRQHandler+0x50>)
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800876a:	b29b      	uxth	r3, r3
 800876c:	461a      	mov	r2, r3
 800876e:	4b09      	ldr	r3, [pc, #36]	; (8008794 <USART1_IRQHandler+0x54>)
 8008770:	601a      	str	r2, [r3, #0]

        if (serdbg_semap != NULL)
 8008772:	4b09      	ldr	r3, [pc, #36]	; (8008798 <USART1_IRQHandler+0x58>)
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	2b00      	cmp	r3, #0
 8008778:	d004      	beq.n	8008784 <USART1_IRQHandler+0x44>
        {
            send_semaphore(serdbg_semap);
 800877a:	4b07      	ldr	r3, [pc, #28]	; (8008798 <USART1_IRQHandler+0x58>)
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	4618      	mov	r0, r3
 8008780:	f7ff fef4 	bl	800856c <send_semaphore>
        }
    }

    HAL_UART_IRQHandler(&SD_PORT);
 8008784:	4802      	ldr	r0, [pc, #8]	; (8008790 <USART1_IRQHandler+0x50>)
 8008786:	f7fb fb45 	bl	8003e14 <HAL_UART_IRQHandler>
}
 800878a:	bf00      	nop
 800878c:	bd80      	pop	{r7, pc}
 800878e:	bf00      	nop
 8008790:	20001ac4 	.word	0x20001ac4
 8008794:	200019d4 	.word	0x200019d4
 8008798:	20001990 	.word	0x20001990

0800879c <serial1_dma_init>:
    __HAL_UART_CLEAR_IDLEFLAG(&SD_PORT);
    __HAL_UART_ENABLE_IT(&SD_PORT, UART_IT_IDLE);
}

void serial1_dma_init(void)
{
 800879c:	b480      	push	{r7}
 800879e:	b083      	sub	sp, #12
 80087a0:	af00      	add	r7, sp, #0
    HAL_RCC_DMA_CLOCK_ENABLE();
 80087a2:	4b09      	ldr	r3, [pc, #36]	; (80087c8 <serial1_dma_init+0x2c>)
 80087a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80087a6:	4a08      	ldr	r2, [pc, #32]	; (80087c8 <serial1_dma_init+0x2c>)
 80087a8:	f043 0301 	orr.w	r3, r3, #1
 80087ac:	6493      	str	r3, [r2, #72]	; 0x48
 80087ae:	4b06      	ldr	r3, [pc, #24]	; (80087c8 <serial1_dma_init+0x2c>)
 80087b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80087b2:	f003 0301 	and.w	r3, r3, #1
 80087b6:	607b      	str	r3, [r7, #4]
 80087b8:	687b      	ldr	r3, [r7, #4]
}
 80087ba:	bf00      	nop
 80087bc:	370c      	adds	r7, #12
 80087be:	46bd      	mov	sp, r7
 80087c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087c4:	4770      	bx	lr
 80087c6:	bf00      	nop
 80087c8:	40021000 	.word	0x40021000

080087cc <serial1_gpio_init>:

void serial1_gpio_init(void)
{
 80087cc:	b580      	push	{r7, lr}
 80087ce:	b086      	sub	sp, #24
 80087d0:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 80087d2:	1d3b      	adds	r3, r7, #4
 80087d4:	2200      	movs	r2, #0
 80087d6:	601a      	str	r2, [r3, #0]
 80087d8:	605a      	str	r2, [r3, #4]
 80087da:	609a      	str	r2, [r3, #8]
 80087dc:	60da      	str	r2, [r3, #12]
 80087de:	611a      	str	r2, [r3, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80087e0:	4b14      	ldr	r3, [pc, #80]	; (8008834 <serial1_gpio_init+0x68>)
 80087e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80087e4:	4a13      	ldr	r2, [pc, #76]	; (8008834 <serial1_gpio_init+0x68>)
 80087e6:	f043 0301 	orr.w	r3, r3, #1
 80087ea:	64d3      	str	r3, [r2, #76]	; 0x4c
 80087ec:	4b11      	ldr	r3, [pc, #68]	; (8008834 <serial1_gpio_init+0x68>)
 80087ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80087f0:	f003 0301 	and.w	r3, r3, #1
 80087f4:	603b      	str	r3, [r7, #0]
 80087f6:	683b      	ldr	r3, [r7, #0]

    GPIO_InitStruct.Pin = HAL_TX_PIN;
 80087f8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80087fc:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80087fe:	2302      	movs	r3, #2
 8008800:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008802:	2300      	movs	r3, #0
 8008804:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008806:	2303      	movs	r3, #3
 8008808:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800880a:	2307      	movs	r3, #7
 800880c:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(HAL_TX_PORT, &GPIO_InitStruct);
 800880e:	1d3b      	adds	r3, r7, #4
 8008810:	4619      	mov	r1, r3
 8008812:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8008816:	f7f8 fb07 	bl	8000e28 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HAL_RX_PIN;
 800881a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800881e:	607b      	str	r3, [r7, #4]
    HAL_GPIO_Init(HAL_RX_PORT, &GPIO_InitStruct);
 8008820:	1d3b      	adds	r3, r7, #4
 8008822:	4619      	mov	r1, r3
 8008824:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8008828:	f7f8 fafe 	bl	8000e28 <HAL_GPIO_Init>
}
 800882c:	bf00      	nop
 800882e:	3718      	adds	r7, #24
 8008830:	46bd      	mov	sp, r7
 8008832:	bd80      	pop	{r7, pc}
 8008834:	40021000 	.word	0x40021000

08008838 <serial1_gpio_deinit>:

void serial1_gpio_deinit(void)
{
 8008838:	b580      	push	{r7, lr}
 800883a:	b086      	sub	sp, #24
 800883c:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStructure = {0};
 800883e:	1d3b      	adds	r3, r7, #4
 8008840:	2200      	movs	r2, #0
 8008842:	601a      	str	r2, [r3, #0]
 8008844:	605a      	str	r2, [r3, #4]
 8008846:	609a      	str	r2, [r3, #8]
 8008848:	60da      	str	r2, [r3, #12]
 800884a:	611a      	str	r2, [r3, #16]
    
    GPIO_InitStructure.Pin = HAL_RX_PIN;      
 800884c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008850:	607b      	str	r3, [r7, #4]
    GPIO_InitStructure.Mode = GPIO_MODE_ANALOG; 
 8008852:	2303      	movs	r3, #3
 8008854:	60bb      	str	r3, [r7, #8]
    GPIO_InitStructure.Pull = GPIO_NOPULL;      
 8008856:	2300      	movs	r3, #0
 8008858:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(HAL_RX_PORT, &GPIO_InitStructure);  
 800885a:	1d3b      	adds	r3, r7, #4
 800885c:	4619      	mov	r1, r3
 800885e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8008862:	f7f8 fae1 	bl	8000e28 <HAL_GPIO_Init>
    
    GPIO_InitStructure.Pin = HAL_TX_PIN; 
 8008866:	f44f 7300 	mov.w	r3, #512	; 0x200
 800886a:	607b      	str	r3, [r7, #4]
    HAL_GPIO_Init(HAL_TX_PORT, &GPIO_InitStructure);  
 800886c:	1d3b      	adds	r3, r7, #4
 800886e:	4619      	mov	r1, r3
 8008870:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8008874:	f7f8 fad8 	bl	8000e28 <HAL_GPIO_Init>
}
 8008878:	bf00      	nop
 800887a:	3718      	adds	r7, #24
 800887c:	46bd      	mov	sp, r7
 800887e:	bd80      	pop	{r7, pc}

08008880 <serial_1_mspinit>:

void serial_1_mspinit(UART_HandleTypeDef *uartHandle)
{
 8008880:	b580      	push	{r7, lr}
 8008882:	b08a      	sub	sp, #40	; 0x28
 8008884:	af00      	add	r7, sp, #0
 8008886:	6078      	str	r0, [r7, #4]
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008888:	f107 0314 	add.w	r3, r7, #20
 800888c:	2200      	movs	r2, #0
 800888e:	601a      	str	r2, [r3, #0]
 8008890:	605a      	str	r2, [r3, #4]
 8008892:	609a      	str	r2, [r3, #8]
 8008894:	60da      	str	r2, [r3, #12]
 8008896:	611a      	str	r2, [r3, #16]

    __HAL_RCC_USART1_CLK_ENABLE();
 8008898:	4b2f      	ldr	r3, [pc, #188]	; (8008958 <serial_1_mspinit+0xd8>)
 800889a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800889c:	4a2e      	ldr	r2, [pc, #184]	; (8008958 <serial_1_mspinit+0xd8>)
 800889e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80088a2:	6613      	str	r3, [r2, #96]	; 0x60
 80088a4:	4b2c      	ldr	r3, [pc, #176]	; (8008958 <serial_1_mspinit+0xd8>)
 80088a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80088a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80088ac:	613b      	str	r3, [r7, #16]
 80088ae:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80088b0:	4b29      	ldr	r3, [pc, #164]	; (8008958 <serial_1_mspinit+0xd8>)
 80088b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80088b4:	4a28      	ldr	r2, [pc, #160]	; (8008958 <serial_1_mspinit+0xd8>)
 80088b6:	f043 0301 	orr.w	r3, r3, #1
 80088ba:	64d3      	str	r3, [r2, #76]	; 0x4c
 80088bc:	4b26      	ldr	r3, [pc, #152]	; (8008958 <serial_1_mspinit+0xd8>)
 80088be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80088c0:	f003 0301 	and.w	r3, r3, #1
 80088c4:	60fb      	str	r3, [r7, #12]
 80088c6:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9 | GPIO_PIN_10;
 80088c8:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80088cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80088ce:	2302      	movs	r3, #2
 80088d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80088d2:	2300      	movs	r3, #0
 80088d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80088d6:	2303      	movs	r3, #3
 80088d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80088da:	2307      	movs	r3, #7
 80088dc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80088de:	f107 0314 	add.w	r3, r7, #20
 80088e2:	4619      	mov	r1, r3
 80088e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80088e8:	f7f8 fa9e 	bl	8000e28 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 80088ec:	4b1b      	ldr	r3, [pc, #108]	; (800895c <serial_1_mspinit+0xdc>)
 80088ee:	4a1c      	ldr	r2, [pc, #112]	; (8008960 <serial_1_mspinit+0xe0>)
 80088f0:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_2;
 80088f2:	4b1a      	ldr	r3, [pc, #104]	; (800895c <serial_1_mspinit+0xdc>)
 80088f4:	2202      	movs	r2, #2
 80088f6:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80088f8:	4b18      	ldr	r3, [pc, #96]	; (800895c <serial_1_mspinit+0xdc>)
 80088fa:	2200      	movs	r2, #0
 80088fc:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80088fe:	4b17      	ldr	r3, [pc, #92]	; (800895c <serial_1_mspinit+0xdc>)
 8008900:	2200      	movs	r2, #0
 8008902:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8008904:	4b15      	ldr	r3, [pc, #84]	; (800895c <serial_1_mspinit+0xdc>)
 8008906:	2280      	movs	r2, #128	; 0x80
 8008908:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800890a:	4b14      	ldr	r3, [pc, #80]	; (800895c <serial_1_mspinit+0xdc>)
 800890c:	2200      	movs	r2, #0
 800890e:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8008910:	4b12      	ldr	r3, [pc, #72]	; (800895c <serial_1_mspinit+0xdc>)
 8008912:	2200      	movs	r2, #0
 8008914:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8008916:	4b11      	ldr	r3, [pc, #68]	; (800895c <serial_1_mspinit+0xdc>)
 8008918:	2200      	movs	r2, #0
 800891a:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800891c:	4b0f      	ldr	r3, [pc, #60]	; (800895c <serial_1_mspinit+0xdc>)
 800891e:	2200      	movs	r2, #0
 8008920:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8008922:	480e      	ldr	r0, [pc, #56]	; (800895c <serial_1_mspinit+0xdc>)
 8008924:	f7f7 ffe8 	bl	80008f8 <HAL_DMA_Init>
 8008928:	4603      	mov	r3, r0
 800892a:	2b00      	cmp	r3, #0
 800892c:	d001      	beq.n	8008932 <serial_1_mspinit+0xb2>
    {
        Error_Handler();
 800892e:	f7ff fad6 	bl	8007ede <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle, hdmarx, hdma_usart1_rx);
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	4a09      	ldr	r2, [pc, #36]	; (800895c <serial_1_mspinit+0xdc>)
 8008936:	66da      	str	r2, [r3, #108]	; 0x6c
 8008938:	4a08      	ldr	r2, [pc, #32]	; (800895c <serial_1_mspinit+0xdc>)
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 800893e:	2200      	movs	r2, #0
 8008940:	2105      	movs	r1, #5
 8008942:	2025      	movs	r0, #37	; 0x25
 8008944:	f7f7 ff60 	bl	8000808 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8008948:	2025      	movs	r0, #37	; 0x25
 800894a:	f7f7 ff89 	bl	8000860 <HAL_NVIC_EnableIRQ>
}
 800894e:	bf00      	nop
 8008950:	3728      	adds	r7, #40	; 0x28
 8008952:	46bd      	mov	sp, r7
 8008954:	bd80      	pop	{r7, pc}
 8008956:	bf00      	nop
 8008958:	40021000 	.word	0x40021000
 800895c:	20001a7c 	.word	0x20001a7c
 8008960:	40020058 	.word	0x40020058

08008964 <serial_1_init>:

void serial_1_init(void)
{
 8008964:	b580      	push	{r7, lr}
 8008966:	af00      	add	r7, sp, #0
    SD_PORT.Instance = USART1;
 8008968:	4b1a      	ldr	r3, [pc, #104]	; (80089d4 <serial_1_init+0x70>)
 800896a:	4a1b      	ldr	r2, [pc, #108]	; (80089d8 <serial_1_init+0x74>)
 800896c:	601a      	str	r2, [r3, #0]
    SD_PORT.Init.BaudRate = 921600;
 800896e:	4b19      	ldr	r3, [pc, #100]	; (80089d4 <serial_1_init+0x70>)
 8008970:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 8008974:	605a      	str	r2, [r3, #4]
    SD_PORT.Init.WordLength = UART_WORDLENGTH_8B;
 8008976:	4b17      	ldr	r3, [pc, #92]	; (80089d4 <serial_1_init+0x70>)
 8008978:	2200      	movs	r2, #0
 800897a:	609a      	str	r2, [r3, #8]
    SD_PORT.Init.StopBits = UART_STOPBITS_1;
 800897c:	4b15      	ldr	r3, [pc, #84]	; (80089d4 <serial_1_init+0x70>)
 800897e:	2200      	movs	r2, #0
 8008980:	60da      	str	r2, [r3, #12]
    SD_PORT.Init.Parity = UART_PARITY_NONE;
 8008982:	4b14      	ldr	r3, [pc, #80]	; (80089d4 <serial_1_init+0x70>)
 8008984:	2200      	movs	r2, #0
 8008986:	611a      	str	r2, [r3, #16]
    SD_PORT.Init.Mode = UART_MODE_TX_RX;
 8008988:	4b12      	ldr	r3, [pc, #72]	; (80089d4 <serial_1_init+0x70>)
 800898a:	220c      	movs	r2, #12
 800898c:	615a      	str	r2, [r3, #20]
    SD_PORT.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800898e:	4b11      	ldr	r3, [pc, #68]	; (80089d4 <serial_1_init+0x70>)
 8008990:	2200      	movs	r2, #0
 8008992:	619a      	str	r2, [r3, #24]
    SD_PORT.Init.OverSampling = UART_OVERSAMPLING_16;
 8008994:	4b0f      	ldr	r3, [pc, #60]	; (80089d4 <serial_1_init+0x70>)
 8008996:	2200      	movs	r2, #0
 8008998:	61da      	str	r2, [r3, #28]
    SD_PORT.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800899a:	4b0e      	ldr	r3, [pc, #56]	; (80089d4 <serial_1_init+0x70>)
 800899c:	2200      	movs	r2, #0
 800899e:	621a      	str	r2, [r3, #32]
    SD_PORT.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT | UART_ADVFEATURE_DMADISABLEONERROR_INIT;
 80089a0:	4b0c      	ldr	r3, [pc, #48]	; (80089d4 <serial_1_init+0x70>)
 80089a2:	2230      	movs	r2, #48	; 0x30
 80089a4:	625a      	str	r2, [r3, #36]	; 0x24
    SD_PORT.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 80089a6:	4b0b      	ldr	r3, [pc, #44]	; (80089d4 <serial_1_init+0x70>)
 80089a8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80089ac:	639a      	str	r2, [r3, #56]	; 0x38
    SD_PORT.AdvancedInit.DMADisableonRxError = UART_ADVFEATURE_DMA_DISABLEONRXERROR;
 80089ae:	4b09      	ldr	r3, [pc, #36]	; (80089d4 <serial_1_init+0x70>)
 80089b0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80089b4:	63da      	str	r2, [r3, #60]	; 0x3c
    SD_PORT.MspInitCallback = serial_1_mspinit;
 80089b6:	4b07      	ldr	r3, [pc, #28]	; (80089d4 <serial_1_init+0x70>)
 80089b8:	4a08      	ldr	r2, [pc, #32]	; (80089dc <serial_1_init+0x78>)
 80089ba:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
    if (HAL_UART_Init(&SD_PORT) != HAL_OK)
 80089be:	4805      	ldr	r0, [pc, #20]	; (80089d4 <serial_1_init+0x70>)
 80089c0:	f7fb f84e 	bl	8003a60 <HAL_UART_Init>
 80089c4:	4603      	mov	r3, r0
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d001      	beq.n	80089ce <serial_1_init+0x6a>
    {
        Error_Handler();
 80089ca:	f7ff fa88 	bl	8007ede <Error_Handler>
    }
}
 80089ce:	bf00      	nop
 80089d0:	bd80      	pop	{r7, pc}
 80089d2:	bf00      	nop
 80089d4:	20001ac4 	.word	0x20001ac4
 80089d8:	40013800 	.word	0x40013800
 80089dc:	08008881 	.word	0x08008881

080089e0 <serial_1_start>:

int serial_1_start(void)
{
 80089e0:	b580      	push	{r7, lr}
 80089e2:	af00      	add	r7, sp, #0
    serdbg_semap = creat_semqphore();
 80089e4:	f7ff fd5d 	bl	80084a2 <creat_semqphore>
 80089e8:	4602      	mov	r2, r0
 80089ea:	4b0b      	ldr	r3, [pc, #44]	; (8008a18 <serial_1_start+0x38>)
 80089ec:	601a      	str	r2, [r3, #0]
    //INIT_PRINT((serdbg_semap == NULL) ? INIT_FAIL : INIT_OK, "serial debug semqphore creat");

    HAL_UART_Receive_DMA(&SD_PORT, serdbg_msg, DEBUG_RX_MAX);
 80089ee:	2240      	movs	r2, #64	; 0x40
 80089f0:	490a      	ldr	r1, [pc, #40]	; (8008a1c <serial_1_start+0x3c>)
 80089f2:	480b      	ldr	r0, [pc, #44]	; (8008a20 <serial_1_start+0x40>)
 80089f4:	f7fb f98a 	bl	8003d0c <HAL_UART_Receive_DMA>
    __HAL_UART_CLEAR_IDLEFLAG(&SD_PORT);
 80089f8:	4b09      	ldr	r3, [pc, #36]	; (8008a20 <serial_1_start+0x40>)
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	2210      	movs	r2, #16
 80089fe:	621a      	str	r2, [r3, #32]
    __HAL_UART_ENABLE_IT(&SD_PORT, UART_IT_IDLE);
 8008a00:	4b07      	ldr	r3, [pc, #28]	; (8008a20 <serial_1_start+0x40>)
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	681a      	ldr	r2, [r3, #0]
 8008a06:	4b06      	ldr	r3, [pc, #24]	; (8008a20 <serial_1_start+0x40>)
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	f042 0210 	orr.w	r2, r2, #16
 8008a0e:	601a      	str	r2, [r3, #0]

    return 0;
 8008a10:	2300      	movs	r3, #0
}
 8008a12:	4618      	mov	r0, r3
 8008a14:	bd80      	pop	{r7, pc}
 8008a16:	bf00      	nop
 8008a18:	20001990 	.word	0x20001990
 8008a1c:	20001994 	.word	0x20001994
 8008a20:	20001ac4 	.word	0x20001ac4

08008a24 <serial1_hal_init>:

void serial1_hal_init(void)
{
 8008a24:	b580      	push	{r7, lr}
 8008a26:	af00      	add	r7, sp, #0
    serial1_dma_init();
 8008a28:	f7ff feb8 	bl	800879c <serial1_dma_init>
    serial_1_init();
 8008a2c:	f7ff ff9a 	bl	8008964 <serial_1_init>
    serial_1_start();
 8008a30:	f7ff ffd6 	bl	80089e0 <serial_1_start>
}
 8008a34:	bf00      	nop
 8008a36:	bd80      	pop	{r7, pc}

08008a38 <serial_1_open>:

int serial_1_open(FIL_HAND *fd)
{
 8008a38:	b480      	push	{r7}
 8008a3a:	b083      	sub	sp, #12
 8008a3c:	af00      	add	r7, sp, #0
 8008a3e:	6078      	str	r0, [r7, #4]

    return 0;
 8008a40:	2300      	movs	r3, #0
}
 8008a42:	4618      	mov	r0, r3
 8008a44:	370c      	adds	r7, #12
 8008a46:	46bd      	mov	sp, r7
 8008a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a4c:	4770      	bx	lr
	...

08008a50 <serial_1_write>:

int serial_1_write(FIL_HAND *fd, const void *buf, uint32_t count)
{
 8008a50:	b580      	push	{r7, lr}
 8008a52:	b084      	sub	sp, #16
 8008a54:	af00      	add	r7, sp, #0
 8008a56:	60f8      	str	r0, [r7, #12]
 8008a58:	60b9      	str	r1, [r7, #8]
 8008a5a:	607a      	str	r2, [r7, #4]
    if ((HAL_UART_Transmit(&SD_PORT, (uint8_t *)buf, count, 500)) != HAL_OK)
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	b29a      	uxth	r2, r3
 8008a60:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8008a64:	68b9      	ldr	r1, [r7, #8]
 8008a66:	4807      	ldr	r0, [pc, #28]	; (8008a84 <serial_1_write+0x34>)
 8008a68:	f7fb f8bc 	bl	8003be4 <HAL_UART_Transmit>
 8008a6c:	4603      	mov	r3, r0
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d002      	beq.n	8008a78 <serial_1_write+0x28>
    {
        return -EIO;
 8008a72:	f06f 0304 	mvn.w	r3, #4
 8008a76:	e000      	b.n	8008a7a <serial_1_write+0x2a>
    }

    return 0;
 8008a78:	2300      	movs	r3, #0
}
 8008a7a:	4618      	mov	r0, r3
 8008a7c:	3710      	adds	r7, #16
 8008a7e:	46bd      	mov	sp, r7
 8008a80:	bd80      	pop	{r7, pc}
 8008a82:	bf00      	nop
 8008a84:	20001ac4 	.word	0x20001ac4

08008a88 <serial_1_read>:

int serial_1_read(FIL_HAND *fd, void *data, uint32_t count)
{
 8008a88:	b580      	push	{r7, lr}
 8008a8a:	b096      	sub	sp, #88	; 0x58
 8008a8c:	af00      	add	r7, sp, #0
 8008a8e:	60f8      	str	r0, [r7, #12]
 8008a90:	60b9      	str	r1, [r7, #8]
 8008a92:	607a      	str	r2, [r7, #4]
    uint32_t rxsize = 0;
 8008a94:	2300      	movs	r3, #0
 8008a96:	657b      	str	r3, [r7, #84]	; 0x54
    uint32_t rxlen = 0;
 8008a98:	2300      	movs	r3, #0
 8008a9a:	653b      	str	r3, [r7, #80]	; 0x50
    uint8_t temp[DEBUG_RX_MAX];

    if (SD_PORT.hdmarx->Instance->CNDTR == DEBUG_RX_MAX) //缓存没有数据
 8008a9c:	4b48      	ldr	r3, [pc, #288]	; (8008bc0 <serial_1_read+0x138>)
 8008a9e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	685b      	ldr	r3, [r3, #4]
 8008aa4:	2b40      	cmp	r3, #64	; 0x40
 8008aa6:	d110      	bne.n	8008aca <serial_1_read+0x42>
    {
        //如果接收停止，开启接收
        if (SD_PORT.RxState == HAL_UART_STATE_READY)
 8008aa8:	4b45      	ldr	r3, [pc, #276]	; (8008bc0 <serial_1_read+0x138>)
 8008aaa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008aac:	2b20      	cmp	r3, #32
 8008aae:	d104      	bne.n	8008aba <serial_1_read+0x32>
        {
            //log(DEBUG, "rx state is ready , start receive\n");
            HAL_UART_Receive_DMA(&SD_PORT, serdbg_msg, DEBUG_RX_MAX);
 8008ab0:	2240      	movs	r2, #64	; 0x40
 8008ab2:	4944      	ldr	r1, [pc, #272]	; (8008bc4 <serial_1_read+0x13c>)
 8008ab4:	4842      	ldr	r0, [pc, #264]	; (8008bc0 <serial_1_read+0x138>)
 8008ab6:	f7fb f929 	bl	8003d0c <HAL_UART_Receive_DMA>
        }
        //等待接收完成信号
        read_semaphore(serdbg_semap, ser_read_mode);
 8008aba:	4b43      	ldr	r3, [pc, #268]	; (8008bc8 <serial_1_read+0x140>)
 8008abc:	681a      	ldr	r2, [r3, #0]
 8008abe:	4b43      	ldr	r3, [pc, #268]	; (8008bcc <serial_1_read+0x144>)
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	4619      	mov	r1, r3
 8008ac4:	4610      	mov	r0, r2
 8008ac6:	f7ff fd07 	bl	80084d8 <read_semaphore>
    }

    rxsize = DEBUG_RX_MAX - SD_PORT.hdmarx->Instance->CNDTR;
 8008aca:	4b3d      	ldr	r3, [pc, #244]	; (8008bc0 <serial_1_read+0x138>)
 8008acc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	685b      	ldr	r3, [r3, #4]
 8008ad2:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8008ad6:	657b      	str	r3, [r7, #84]	; 0x54
    if (rxsize >= count) //接受到的总长度大于read希望获取的长度
 8008ad8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	429a      	cmp	r2, r3
 8008ade:	d329      	bcc.n	8008b34 <serial_1_read+0xac>
    {
        memcpy(data, serdbg_msg, count); //提取数据
 8008ae0:	687a      	ldr	r2, [r7, #4]
 8008ae2:	4938      	ldr	r1, [pc, #224]	; (8008bc4 <serial_1_read+0x13c>)
 8008ae4:	68b8      	ldr	r0, [r7, #8]
 8008ae6:	f000 f8eb 	bl	8008cc0 <memcpy>
        rxsize -= count;
 8008aea:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	1ad3      	subs	r3, r2, r3
 8008af0:	657b      	str	r3, [r7, #84]	; 0x54

        if (rxsize > 0) //还有剩余的数据
 8008af2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d015      	beq.n	8008b24 <serial_1_read+0x9c>
        {
            memcpy(temp, serdbg_msg + count, rxsize); //其余数据放入临时缓存
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	4a32      	ldr	r2, [pc, #200]	; (8008bc4 <serial_1_read+0x13c>)
 8008afc:	1899      	adds	r1, r3, r2
 8008afe:	f107 0310 	add.w	r3, r7, #16
 8008b02:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008b04:	4618      	mov	r0, r3
 8008b06:	f000 f8db 	bl	8008cc0 <memcpy>
            memset(serdbg_msg, 0x00, DEBUG_RX_MAX);   //清空接收缓存
 8008b0a:	2240      	movs	r2, #64	; 0x40
 8008b0c:	2100      	movs	r1, #0
 8008b0e:	482d      	ldr	r0, [pc, #180]	; (8008bc4 <serial_1_read+0x13c>)
 8008b10:	f000 f8e1 	bl	8008cd6 <memset>
            memcpy(serdbg_msg, temp, rxsize);
 8008b14:	f107 0310 	add.w	r3, r7, #16
 8008b18:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008b1a:	4619      	mov	r1, r3
 8008b1c:	4829      	ldr	r0, [pc, #164]	; (8008bc4 <serial_1_read+0x13c>)
 8008b1e:	f000 f8cf 	bl	8008cc0 <memcpy>
 8008b22:	e004      	b.n	8008b2e <serial_1_read+0xa6>
        }
        else
        {
            memset(serdbg_msg, 0x00, DEBUG_RX_MAX); //清空接收缓存
 8008b24:	2240      	movs	r2, #64	; 0x40
 8008b26:	2100      	movs	r1, #0
 8008b28:	4826      	ldr	r0, [pc, #152]	; (8008bc4 <serial_1_read+0x13c>)
 8008b2a:	f000 f8d4 	bl	8008cd6 <memset>
        }

        rxlen = count;
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	653b      	str	r3, [r7, #80]	; 0x50
 8008b32:	e00d      	b.n	8008b50 <serial_1_read+0xc8>
    }
    else //接收到的数据长度小于read希望获取的长度
    {
        memcpy(data, serdbg_msg, rxsize);       //提取数据
 8008b34:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008b36:	4923      	ldr	r1, [pc, #140]	; (8008bc4 <serial_1_read+0x13c>)
 8008b38:	68b8      	ldr	r0, [r7, #8]
 8008b3a:	f000 f8c1 	bl	8008cc0 <memcpy>
        memset(serdbg_msg, 0x00, DEBUG_RX_MAX); //清空接收缓存
 8008b3e:	2240      	movs	r2, #64	; 0x40
 8008b40:	2100      	movs	r1, #0
 8008b42:	4820      	ldr	r0, [pc, #128]	; (8008bc4 <serial_1_read+0x13c>)
 8008b44:	f000 f8c7 	bl	8008cd6 <memset>

        rxlen = rxsize;
 8008b48:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008b4a:	653b      	str	r3, [r7, #80]	; 0x50
        rxsize = 0;
 8008b4c:	2300      	movs	r3, #0
 8008b4e:	657b      	str	r3, [r7, #84]	; 0x54
    }

    if (SD_PORT.RxState == HAL_UART_STATE_READY)
 8008b50:	4b1b      	ldr	r3, [pc, #108]	; (8008bc0 <serial_1_read+0x138>)
 8008b52:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008b54:	2b20      	cmp	r3, #32
 8008b56:	d10c      	bne.n	8008b72 <serial_1_read+0xea>
    {
        HAL_UART_Receive_DMA(&SD_PORT, serdbg_msg + rxsize, DEBUG_RX_MAX - rxsize);
 8008b58:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008b5a:	4a1a      	ldr	r2, [pc, #104]	; (8008bc4 <serial_1_read+0x13c>)
 8008b5c:	1899      	adds	r1, r3, r2
 8008b5e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008b60:	b29b      	uxth	r3, r3
 8008b62:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8008b66:	b29b      	uxth	r3, r3
 8008b68:	461a      	mov	r2, r3
 8008b6a:	4815      	ldr	r0, [pc, #84]	; (8008bc0 <serial_1_read+0x138>)
 8008b6c:	f7fb f8ce 	bl	8003d0c <HAL_UART_Receive_DMA>
 8008b70:	e021      	b.n	8008bb6 <serial_1_read+0x12e>
    }
    else
    {
        __HAL_DMA_DISABLE(SD_PORT.hdmarx);
 8008b72:	4b13      	ldr	r3, [pc, #76]	; (8008bc0 <serial_1_read+0x138>)
 8008b74:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	681a      	ldr	r2, [r3, #0]
 8008b7a:	4b11      	ldr	r3, [pc, #68]	; (8008bc0 <serial_1_read+0x138>)
 8008b7c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	f022 0201 	bic.w	r2, r2, #1
 8008b84:	601a      	str	r2, [r3, #0]
        SD_PORT.hdmarx->Instance->CMAR = (uint32_t)(serdbg_msg + rxsize);
 8008b86:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008b88:	4a0e      	ldr	r2, [pc, #56]	; (8008bc4 <serial_1_read+0x13c>)
 8008b8a:	441a      	add	r2, r3
 8008b8c:	4b0c      	ldr	r3, [pc, #48]	; (8008bc0 <serial_1_read+0x138>)
 8008b8e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	60da      	str	r2, [r3, #12]
        SD_PORT.hdmarx->Instance->CNDTR = DEBUG_RX_MAX - rxsize;
 8008b94:	4b0a      	ldr	r3, [pc, #40]	; (8008bc0 <serial_1_read+0x138>)
 8008b96:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008b9c:	f1c2 0240 	rsb	r2, r2, #64	; 0x40
 8008ba0:	605a      	str	r2, [r3, #4]
        __HAL_DMA_ENABLE(SD_PORT.hdmarx);
 8008ba2:	4b07      	ldr	r3, [pc, #28]	; (8008bc0 <serial_1_read+0x138>)
 8008ba4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	681a      	ldr	r2, [r3, #0]
 8008baa:	4b05      	ldr	r3, [pc, #20]	; (8008bc0 <serial_1_read+0x138>)
 8008bac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	f042 0201 	orr.w	r2, r2, #1
 8008bb4:	601a      	str	r2, [r3, #0]
    }
    return rxlen;
 8008bb6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
}
 8008bb8:	4618      	mov	r0, r3
 8008bba:	3758      	adds	r7, #88	; 0x58
 8008bbc:	46bd      	mov	sp, r7
 8008bbe:	bd80      	pop	{r7, pc}
 8008bc0:	20001ac4 	.word	0x20001ac4
 8008bc4:	20001994 	.word	0x20001994
 8008bc8:	20001990 	.word	0x20001990
 8008bcc:	20000014 	.word	0x20000014

08008bd0 <serial1_resume>:


int serial1_resume(FIL_HAND *fd)
{
 8008bd0:	b580      	push	{r7, lr}
 8008bd2:	b082      	sub	sp, #8
 8008bd4:	af00      	add	r7, sp, #0
 8008bd6:	6078      	str	r0, [r7, #4]
    HAL_Sysclk_Init();
 8008bd8:	f7ff f9ba 	bl	8007f50 <HAL_Sysclk_Init>
    serial1_gpio_init();
 8008bdc:	f7ff fdf6 	bl	80087cc <serial1_gpio_init>

    return 0;
 8008be0:	2300      	movs	r3, #0
}
 8008be2:	4618      	mov	r0, r3
 8008be4:	3708      	adds	r7, #8
 8008be6:	46bd      	mov	sp, r7
 8008be8:	bd80      	pop	{r7, pc}

08008bea <serial1_suspend>:

int serial1_suspend(FIL_HAND *fd)
{
 8008bea:	b580      	push	{r7, lr}
 8008bec:	b082      	sub	sp, #8
 8008bee:	af00      	add	r7, sp, #0
 8008bf0:	6078      	str	r0, [r7, #4]
    serial1_gpio_deinit();
 8008bf2:	f7ff fe21 	bl	8008838 <serial1_gpio_deinit>
    
    return 0;
 8008bf6:	2300      	movs	r3, #0
}
 8008bf8:	4618      	mov	r0, r3
 8008bfa:	3708      	adds	r7, #8
 8008bfc:	46bd      	mov	sp, r7
 8008bfe:	bd80      	pop	{r7, pc}

08008c00 <serial1_ioctl>:


int serial1_ioctl(FIL_HAND *fd, void *buf, uint32_t count, uint32_t flag)
{
 8008c00:	b580      	push	{r7, lr}
 8008c02:	b084      	sub	sp, #16
 8008c04:	af00      	add	r7, sp, #0
 8008c06:	60f8      	str	r0, [r7, #12]
 8008c08:	60b9      	str	r1, [r7, #8]
 8008c0a:	607a      	str	r2, [r7, #4]
 8008c0c:	603b      	str	r3, [r7, #0]
    if( flag & IOCTL_FLAG_RESUME)
 8008c0e:	683b      	ldr	r3, [r7, #0]
 8008c10:	f003 0301 	and.w	r3, r3, #1
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d002      	beq.n	8008c1e <serial1_ioctl+0x1e>
    {
        serial1_resume(fd);
 8008c18:	68f8      	ldr	r0, [r7, #12]
 8008c1a:	f7ff ffd9 	bl	8008bd0 <serial1_resume>
    }
    if( flag & IOCTL_FLAG_SUSPEND)
 8008c1e:	683b      	ldr	r3, [r7, #0]
 8008c20:	f003 0302 	and.w	r3, r3, #2
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d002      	beq.n	8008c2e <serial1_ioctl+0x2e>
    {
        serial1_suspend(fd);
 8008c28:	68f8      	ldr	r0, [r7, #12]
 8008c2a:	f7ff ffde 	bl	8008bea <serial1_suspend>
    }
    
    return 0;
 8008c2e:	2300      	movs	r3, #0
}
 8008c30:	4618      	mov	r0, r3
 8008c32:	3710      	adds	r7, #16
 8008c34:	46bd      	mov	sp, r7
 8008c36:	bd80      	pop	{r7, pc}

08008c38 <serial1_init>:
    .fops = &serial1_fops,
    .nodename = "device",
};

int serial1_init(void)
{
 8008c38:	b580      	push	{r7, lr}
 8008c3a:	af00      	add	r7, sp, #0
    return (misc_register(&serial1));
 8008c3c:	4802      	ldr	r0, [pc, #8]	; (8008c48 <serial1_init+0x10>)
 8008c3e:	f7ff fd41 	bl	80086c4 <misc_register>
 8008c42:	4603      	mov	r3, r0
}
 8008c44:	4618      	mov	r0, r3
 8008c46:	bd80      	pop	{r7, pc}
 8008c48:	20000034 	.word	0x20000034

08008c4c <__errno>:
 8008c4c:	4b01      	ldr	r3, [pc, #4]	; (8008c54 <__errno+0x8>)
 8008c4e:	6818      	ldr	r0, [r3, #0]
 8008c50:	4770      	bx	lr
 8008c52:	bf00      	nop
 8008c54:	20000044 	.word	0x20000044

08008c58 <__libc_init_array>:
 8008c58:	b570      	push	{r4, r5, r6, lr}
 8008c5a:	4e0d      	ldr	r6, [pc, #52]	; (8008c90 <__libc_init_array+0x38>)
 8008c5c:	4c0d      	ldr	r4, [pc, #52]	; (8008c94 <__libc_init_array+0x3c>)
 8008c5e:	1ba4      	subs	r4, r4, r6
 8008c60:	10a4      	asrs	r4, r4, #2
 8008c62:	2500      	movs	r5, #0
 8008c64:	42a5      	cmp	r5, r4
 8008c66:	d109      	bne.n	8008c7c <__libc_init_array+0x24>
 8008c68:	4e0b      	ldr	r6, [pc, #44]	; (8008c98 <__libc_init_array+0x40>)
 8008c6a:	4c0c      	ldr	r4, [pc, #48]	; (8008c9c <__libc_init_array+0x44>)
 8008c6c:	f000 ffce 	bl	8009c0c <_init>
 8008c70:	1ba4      	subs	r4, r4, r6
 8008c72:	10a4      	asrs	r4, r4, #2
 8008c74:	2500      	movs	r5, #0
 8008c76:	42a5      	cmp	r5, r4
 8008c78:	d105      	bne.n	8008c86 <__libc_init_array+0x2e>
 8008c7a:	bd70      	pop	{r4, r5, r6, pc}
 8008c7c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008c80:	4798      	blx	r3
 8008c82:	3501      	adds	r5, #1
 8008c84:	e7ee      	b.n	8008c64 <__libc_init_array+0xc>
 8008c86:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008c8a:	4798      	blx	r3
 8008c8c:	3501      	adds	r5, #1
 8008c8e:	e7f2      	b.n	8008c76 <__libc_init_array+0x1e>
 8008c90:	0800a0a4 	.word	0x0800a0a4
 8008c94:	0800a0a4 	.word	0x0800a0a4
 8008c98:	0800a0a4 	.word	0x0800a0a4
 8008c9c:	0800a0a8 	.word	0x0800a0a8

08008ca0 <malloc>:
 8008ca0:	4b02      	ldr	r3, [pc, #8]	; (8008cac <malloc+0xc>)
 8008ca2:	4601      	mov	r1, r0
 8008ca4:	6818      	ldr	r0, [r3, #0]
 8008ca6:	f000 b86d 	b.w	8008d84 <_malloc_r>
 8008caa:	bf00      	nop
 8008cac:	20000044 	.word	0x20000044

08008cb0 <free>:
 8008cb0:	4b02      	ldr	r3, [pc, #8]	; (8008cbc <free+0xc>)
 8008cb2:	4601      	mov	r1, r0
 8008cb4:	6818      	ldr	r0, [r3, #0]
 8008cb6:	f000 b817 	b.w	8008ce8 <_free_r>
 8008cba:	bf00      	nop
 8008cbc:	20000044 	.word	0x20000044

08008cc0 <memcpy>:
 8008cc0:	b510      	push	{r4, lr}
 8008cc2:	1e43      	subs	r3, r0, #1
 8008cc4:	440a      	add	r2, r1
 8008cc6:	4291      	cmp	r1, r2
 8008cc8:	d100      	bne.n	8008ccc <memcpy+0xc>
 8008cca:	bd10      	pop	{r4, pc}
 8008ccc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008cd0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008cd4:	e7f7      	b.n	8008cc6 <memcpy+0x6>

08008cd6 <memset>:
 8008cd6:	4402      	add	r2, r0
 8008cd8:	4603      	mov	r3, r0
 8008cda:	4293      	cmp	r3, r2
 8008cdc:	d100      	bne.n	8008ce0 <memset+0xa>
 8008cde:	4770      	bx	lr
 8008ce0:	f803 1b01 	strb.w	r1, [r3], #1
 8008ce4:	e7f9      	b.n	8008cda <memset+0x4>
	...

08008ce8 <_free_r>:
 8008ce8:	b538      	push	{r3, r4, r5, lr}
 8008cea:	4605      	mov	r5, r0
 8008cec:	2900      	cmp	r1, #0
 8008cee:	d045      	beq.n	8008d7c <_free_r+0x94>
 8008cf0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008cf4:	1f0c      	subs	r4, r1, #4
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	bfb8      	it	lt
 8008cfa:	18e4      	addlt	r4, r4, r3
 8008cfc:	f000 fbda 	bl	80094b4 <__malloc_lock>
 8008d00:	4a1f      	ldr	r2, [pc, #124]	; (8008d80 <_free_r+0x98>)
 8008d02:	6813      	ldr	r3, [r2, #0]
 8008d04:	4610      	mov	r0, r2
 8008d06:	b933      	cbnz	r3, 8008d16 <_free_r+0x2e>
 8008d08:	6063      	str	r3, [r4, #4]
 8008d0a:	6014      	str	r4, [r2, #0]
 8008d0c:	4628      	mov	r0, r5
 8008d0e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008d12:	f000 bbd0 	b.w	80094b6 <__malloc_unlock>
 8008d16:	42a3      	cmp	r3, r4
 8008d18:	d90c      	bls.n	8008d34 <_free_r+0x4c>
 8008d1a:	6821      	ldr	r1, [r4, #0]
 8008d1c:	1862      	adds	r2, r4, r1
 8008d1e:	4293      	cmp	r3, r2
 8008d20:	bf04      	itt	eq
 8008d22:	681a      	ldreq	r2, [r3, #0]
 8008d24:	685b      	ldreq	r3, [r3, #4]
 8008d26:	6063      	str	r3, [r4, #4]
 8008d28:	bf04      	itt	eq
 8008d2a:	1852      	addeq	r2, r2, r1
 8008d2c:	6022      	streq	r2, [r4, #0]
 8008d2e:	6004      	str	r4, [r0, #0]
 8008d30:	e7ec      	b.n	8008d0c <_free_r+0x24>
 8008d32:	4613      	mov	r3, r2
 8008d34:	685a      	ldr	r2, [r3, #4]
 8008d36:	b10a      	cbz	r2, 8008d3c <_free_r+0x54>
 8008d38:	42a2      	cmp	r2, r4
 8008d3a:	d9fa      	bls.n	8008d32 <_free_r+0x4a>
 8008d3c:	6819      	ldr	r1, [r3, #0]
 8008d3e:	1858      	adds	r0, r3, r1
 8008d40:	42a0      	cmp	r0, r4
 8008d42:	d10b      	bne.n	8008d5c <_free_r+0x74>
 8008d44:	6820      	ldr	r0, [r4, #0]
 8008d46:	4401      	add	r1, r0
 8008d48:	1858      	adds	r0, r3, r1
 8008d4a:	4282      	cmp	r2, r0
 8008d4c:	6019      	str	r1, [r3, #0]
 8008d4e:	d1dd      	bne.n	8008d0c <_free_r+0x24>
 8008d50:	6810      	ldr	r0, [r2, #0]
 8008d52:	6852      	ldr	r2, [r2, #4]
 8008d54:	605a      	str	r2, [r3, #4]
 8008d56:	4401      	add	r1, r0
 8008d58:	6019      	str	r1, [r3, #0]
 8008d5a:	e7d7      	b.n	8008d0c <_free_r+0x24>
 8008d5c:	d902      	bls.n	8008d64 <_free_r+0x7c>
 8008d5e:	230c      	movs	r3, #12
 8008d60:	602b      	str	r3, [r5, #0]
 8008d62:	e7d3      	b.n	8008d0c <_free_r+0x24>
 8008d64:	6820      	ldr	r0, [r4, #0]
 8008d66:	1821      	adds	r1, r4, r0
 8008d68:	428a      	cmp	r2, r1
 8008d6a:	bf04      	itt	eq
 8008d6c:	6811      	ldreq	r1, [r2, #0]
 8008d6e:	6852      	ldreq	r2, [r2, #4]
 8008d70:	6062      	str	r2, [r4, #4]
 8008d72:	bf04      	itt	eq
 8008d74:	1809      	addeq	r1, r1, r0
 8008d76:	6021      	streq	r1, [r4, #0]
 8008d78:	605c      	str	r4, [r3, #4]
 8008d7a:	e7c7      	b.n	8008d0c <_free_r+0x24>
 8008d7c:	bd38      	pop	{r3, r4, r5, pc}
 8008d7e:	bf00      	nop
 8008d80:	200019d8 	.word	0x200019d8

08008d84 <_malloc_r>:
 8008d84:	b570      	push	{r4, r5, r6, lr}
 8008d86:	1ccd      	adds	r5, r1, #3
 8008d88:	f025 0503 	bic.w	r5, r5, #3
 8008d8c:	3508      	adds	r5, #8
 8008d8e:	2d0c      	cmp	r5, #12
 8008d90:	bf38      	it	cc
 8008d92:	250c      	movcc	r5, #12
 8008d94:	2d00      	cmp	r5, #0
 8008d96:	4606      	mov	r6, r0
 8008d98:	db01      	blt.n	8008d9e <_malloc_r+0x1a>
 8008d9a:	42a9      	cmp	r1, r5
 8008d9c:	d903      	bls.n	8008da6 <_malloc_r+0x22>
 8008d9e:	230c      	movs	r3, #12
 8008da0:	6033      	str	r3, [r6, #0]
 8008da2:	2000      	movs	r0, #0
 8008da4:	bd70      	pop	{r4, r5, r6, pc}
 8008da6:	f000 fb85 	bl	80094b4 <__malloc_lock>
 8008daa:	4a21      	ldr	r2, [pc, #132]	; (8008e30 <_malloc_r+0xac>)
 8008dac:	6814      	ldr	r4, [r2, #0]
 8008dae:	4621      	mov	r1, r4
 8008db0:	b991      	cbnz	r1, 8008dd8 <_malloc_r+0x54>
 8008db2:	4c20      	ldr	r4, [pc, #128]	; (8008e34 <_malloc_r+0xb0>)
 8008db4:	6823      	ldr	r3, [r4, #0]
 8008db6:	b91b      	cbnz	r3, 8008dc0 <_malloc_r+0x3c>
 8008db8:	4630      	mov	r0, r6
 8008dba:	f000 f8cd 	bl	8008f58 <_sbrk_r>
 8008dbe:	6020      	str	r0, [r4, #0]
 8008dc0:	4629      	mov	r1, r5
 8008dc2:	4630      	mov	r0, r6
 8008dc4:	f000 f8c8 	bl	8008f58 <_sbrk_r>
 8008dc8:	1c43      	adds	r3, r0, #1
 8008dca:	d124      	bne.n	8008e16 <_malloc_r+0x92>
 8008dcc:	230c      	movs	r3, #12
 8008dce:	6033      	str	r3, [r6, #0]
 8008dd0:	4630      	mov	r0, r6
 8008dd2:	f000 fb70 	bl	80094b6 <__malloc_unlock>
 8008dd6:	e7e4      	b.n	8008da2 <_malloc_r+0x1e>
 8008dd8:	680b      	ldr	r3, [r1, #0]
 8008dda:	1b5b      	subs	r3, r3, r5
 8008ddc:	d418      	bmi.n	8008e10 <_malloc_r+0x8c>
 8008dde:	2b0b      	cmp	r3, #11
 8008de0:	d90f      	bls.n	8008e02 <_malloc_r+0x7e>
 8008de2:	600b      	str	r3, [r1, #0]
 8008de4:	50cd      	str	r5, [r1, r3]
 8008de6:	18cc      	adds	r4, r1, r3
 8008de8:	4630      	mov	r0, r6
 8008dea:	f000 fb64 	bl	80094b6 <__malloc_unlock>
 8008dee:	f104 000b 	add.w	r0, r4, #11
 8008df2:	1d23      	adds	r3, r4, #4
 8008df4:	f020 0007 	bic.w	r0, r0, #7
 8008df8:	1ac3      	subs	r3, r0, r3
 8008dfa:	d0d3      	beq.n	8008da4 <_malloc_r+0x20>
 8008dfc:	425a      	negs	r2, r3
 8008dfe:	50e2      	str	r2, [r4, r3]
 8008e00:	e7d0      	b.n	8008da4 <_malloc_r+0x20>
 8008e02:	428c      	cmp	r4, r1
 8008e04:	684b      	ldr	r3, [r1, #4]
 8008e06:	bf16      	itet	ne
 8008e08:	6063      	strne	r3, [r4, #4]
 8008e0a:	6013      	streq	r3, [r2, #0]
 8008e0c:	460c      	movne	r4, r1
 8008e0e:	e7eb      	b.n	8008de8 <_malloc_r+0x64>
 8008e10:	460c      	mov	r4, r1
 8008e12:	6849      	ldr	r1, [r1, #4]
 8008e14:	e7cc      	b.n	8008db0 <_malloc_r+0x2c>
 8008e16:	1cc4      	adds	r4, r0, #3
 8008e18:	f024 0403 	bic.w	r4, r4, #3
 8008e1c:	42a0      	cmp	r0, r4
 8008e1e:	d005      	beq.n	8008e2c <_malloc_r+0xa8>
 8008e20:	1a21      	subs	r1, r4, r0
 8008e22:	4630      	mov	r0, r6
 8008e24:	f000 f898 	bl	8008f58 <_sbrk_r>
 8008e28:	3001      	adds	r0, #1
 8008e2a:	d0cf      	beq.n	8008dcc <_malloc_r+0x48>
 8008e2c:	6025      	str	r5, [r4, #0]
 8008e2e:	e7db      	b.n	8008de8 <_malloc_r+0x64>
 8008e30:	200019d8 	.word	0x200019d8
 8008e34:	200019dc 	.word	0x200019dc

08008e38 <iprintf>:
 8008e38:	b40f      	push	{r0, r1, r2, r3}
 8008e3a:	4b0a      	ldr	r3, [pc, #40]	; (8008e64 <iprintf+0x2c>)
 8008e3c:	b513      	push	{r0, r1, r4, lr}
 8008e3e:	681c      	ldr	r4, [r3, #0]
 8008e40:	b124      	cbz	r4, 8008e4c <iprintf+0x14>
 8008e42:	69a3      	ldr	r3, [r4, #24]
 8008e44:	b913      	cbnz	r3, 8008e4c <iprintf+0x14>
 8008e46:	4620      	mov	r0, r4
 8008e48:	f000 fa46 	bl	80092d8 <__sinit>
 8008e4c:	ab05      	add	r3, sp, #20
 8008e4e:	9a04      	ldr	r2, [sp, #16]
 8008e50:	68a1      	ldr	r1, [r4, #8]
 8008e52:	9301      	str	r3, [sp, #4]
 8008e54:	4620      	mov	r0, r4
 8008e56:	f000 fb59 	bl	800950c <_vfiprintf_r>
 8008e5a:	b002      	add	sp, #8
 8008e5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008e60:	b004      	add	sp, #16
 8008e62:	4770      	bx	lr
 8008e64:	20000044 	.word	0x20000044

08008e68 <putchar>:
 8008e68:	b538      	push	{r3, r4, r5, lr}
 8008e6a:	4b08      	ldr	r3, [pc, #32]	; (8008e8c <putchar+0x24>)
 8008e6c:	681c      	ldr	r4, [r3, #0]
 8008e6e:	4605      	mov	r5, r0
 8008e70:	b124      	cbz	r4, 8008e7c <putchar+0x14>
 8008e72:	69a3      	ldr	r3, [r4, #24]
 8008e74:	b913      	cbnz	r3, 8008e7c <putchar+0x14>
 8008e76:	4620      	mov	r0, r4
 8008e78:	f000 fa2e 	bl	80092d8 <__sinit>
 8008e7c:	68a2      	ldr	r2, [r4, #8]
 8008e7e:	4629      	mov	r1, r5
 8008e80:	4620      	mov	r0, r4
 8008e82:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008e86:	f000 bddf 	b.w	8009a48 <_putc_r>
 8008e8a:	bf00      	nop
 8008e8c:	20000044 	.word	0x20000044

08008e90 <_puts_r>:
 8008e90:	b570      	push	{r4, r5, r6, lr}
 8008e92:	460e      	mov	r6, r1
 8008e94:	4605      	mov	r5, r0
 8008e96:	b118      	cbz	r0, 8008ea0 <_puts_r+0x10>
 8008e98:	6983      	ldr	r3, [r0, #24]
 8008e9a:	b90b      	cbnz	r3, 8008ea0 <_puts_r+0x10>
 8008e9c:	f000 fa1c 	bl	80092d8 <__sinit>
 8008ea0:	69ab      	ldr	r3, [r5, #24]
 8008ea2:	68ac      	ldr	r4, [r5, #8]
 8008ea4:	b913      	cbnz	r3, 8008eac <_puts_r+0x1c>
 8008ea6:	4628      	mov	r0, r5
 8008ea8:	f000 fa16 	bl	80092d8 <__sinit>
 8008eac:	4b23      	ldr	r3, [pc, #140]	; (8008f3c <_puts_r+0xac>)
 8008eae:	429c      	cmp	r4, r3
 8008eb0:	d117      	bne.n	8008ee2 <_puts_r+0x52>
 8008eb2:	686c      	ldr	r4, [r5, #4]
 8008eb4:	89a3      	ldrh	r3, [r4, #12]
 8008eb6:	071b      	lsls	r3, r3, #28
 8008eb8:	d51d      	bpl.n	8008ef6 <_puts_r+0x66>
 8008eba:	6923      	ldr	r3, [r4, #16]
 8008ebc:	b1db      	cbz	r3, 8008ef6 <_puts_r+0x66>
 8008ebe:	3e01      	subs	r6, #1
 8008ec0:	68a3      	ldr	r3, [r4, #8]
 8008ec2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008ec6:	3b01      	subs	r3, #1
 8008ec8:	60a3      	str	r3, [r4, #8]
 8008eca:	b9e9      	cbnz	r1, 8008f08 <_puts_r+0x78>
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	da2e      	bge.n	8008f2e <_puts_r+0x9e>
 8008ed0:	4622      	mov	r2, r4
 8008ed2:	210a      	movs	r1, #10
 8008ed4:	4628      	mov	r0, r5
 8008ed6:	f000 f84f 	bl	8008f78 <__swbuf_r>
 8008eda:	3001      	adds	r0, #1
 8008edc:	d011      	beq.n	8008f02 <_puts_r+0x72>
 8008ede:	200a      	movs	r0, #10
 8008ee0:	e011      	b.n	8008f06 <_puts_r+0x76>
 8008ee2:	4b17      	ldr	r3, [pc, #92]	; (8008f40 <_puts_r+0xb0>)
 8008ee4:	429c      	cmp	r4, r3
 8008ee6:	d101      	bne.n	8008eec <_puts_r+0x5c>
 8008ee8:	68ac      	ldr	r4, [r5, #8]
 8008eea:	e7e3      	b.n	8008eb4 <_puts_r+0x24>
 8008eec:	4b15      	ldr	r3, [pc, #84]	; (8008f44 <_puts_r+0xb4>)
 8008eee:	429c      	cmp	r4, r3
 8008ef0:	bf08      	it	eq
 8008ef2:	68ec      	ldreq	r4, [r5, #12]
 8008ef4:	e7de      	b.n	8008eb4 <_puts_r+0x24>
 8008ef6:	4621      	mov	r1, r4
 8008ef8:	4628      	mov	r0, r5
 8008efa:	f000 f88f 	bl	800901c <__swsetup_r>
 8008efe:	2800      	cmp	r0, #0
 8008f00:	d0dd      	beq.n	8008ebe <_puts_r+0x2e>
 8008f02:	f04f 30ff 	mov.w	r0, #4294967295
 8008f06:	bd70      	pop	{r4, r5, r6, pc}
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	da04      	bge.n	8008f16 <_puts_r+0x86>
 8008f0c:	69a2      	ldr	r2, [r4, #24]
 8008f0e:	429a      	cmp	r2, r3
 8008f10:	dc06      	bgt.n	8008f20 <_puts_r+0x90>
 8008f12:	290a      	cmp	r1, #10
 8008f14:	d004      	beq.n	8008f20 <_puts_r+0x90>
 8008f16:	6823      	ldr	r3, [r4, #0]
 8008f18:	1c5a      	adds	r2, r3, #1
 8008f1a:	6022      	str	r2, [r4, #0]
 8008f1c:	7019      	strb	r1, [r3, #0]
 8008f1e:	e7cf      	b.n	8008ec0 <_puts_r+0x30>
 8008f20:	4622      	mov	r2, r4
 8008f22:	4628      	mov	r0, r5
 8008f24:	f000 f828 	bl	8008f78 <__swbuf_r>
 8008f28:	3001      	adds	r0, #1
 8008f2a:	d1c9      	bne.n	8008ec0 <_puts_r+0x30>
 8008f2c:	e7e9      	b.n	8008f02 <_puts_r+0x72>
 8008f2e:	6823      	ldr	r3, [r4, #0]
 8008f30:	200a      	movs	r0, #10
 8008f32:	1c5a      	adds	r2, r3, #1
 8008f34:	6022      	str	r2, [r4, #0]
 8008f36:	7018      	strb	r0, [r3, #0]
 8008f38:	e7e5      	b.n	8008f06 <_puts_r+0x76>
 8008f3a:	bf00      	nop
 8008f3c:	0800a028 	.word	0x0800a028
 8008f40:	0800a048 	.word	0x0800a048
 8008f44:	0800a008 	.word	0x0800a008

08008f48 <puts>:
 8008f48:	4b02      	ldr	r3, [pc, #8]	; (8008f54 <puts+0xc>)
 8008f4a:	4601      	mov	r1, r0
 8008f4c:	6818      	ldr	r0, [r3, #0]
 8008f4e:	f7ff bf9f 	b.w	8008e90 <_puts_r>
 8008f52:	bf00      	nop
 8008f54:	20000044 	.word	0x20000044

08008f58 <_sbrk_r>:
 8008f58:	b538      	push	{r3, r4, r5, lr}
 8008f5a:	4c06      	ldr	r4, [pc, #24]	; (8008f74 <_sbrk_r+0x1c>)
 8008f5c:	2300      	movs	r3, #0
 8008f5e:	4605      	mov	r5, r0
 8008f60:	4608      	mov	r0, r1
 8008f62:	6023      	str	r3, [r4, #0]
 8008f64:	f7ff f952 	bl	800820c <_sbrk>
 8008f68:	1c43      	adds	r3, r0, #1
 8008f6a:	d102      	bne.n	8008f72 <_sbrk_r+0x1a>
 8008f6c:	6823      	ldr	r3, [r4, #0]
 8008f6e:	b103      	cbz	r3, 8008f72 <_sbrk_r+0x1a>
 8008f70:	602b      	str	r3, [r5, #0]
 8008f72:	bd38      	pop	{r3, r4, r5, pc}
 8008f74:	20001b70 	.word	0x20001b70

08008f78 <__swbuf_r>:
 8008f78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f7a:	460e      	mov	r6, r1
 8008f7c:	4614      	mov	r4, r2
 8008f7e:	4605      	mov	r5, r0
 8008f80:	b118      	cbz	r0, 8008f8a <__swbuf_r+0x12>
 8008f82:	6983      	ldr	r3, [r0, #24]
 8008f84:	b90b      	cbnz	r3, 8008f8a <__swbuf_r+0x12>
 8008f86:	f000 f9a7 	bl	80092d8 <__sinit>
 8008f8a:	4b21      	ldr	r3, [pc, #132]	; (8009010 <__swbuf_r+0x98>)
 8008f8c:	429c      	cmp	r4, r3
 8008f8e:	d12a      	bne.n	8008fe6 <__swbuf_r+0x6e>
 8008f90:	686c      	ldr	r4, [r5, #4]
 8008f92:	69a3      	ldr	r3, [r4, #24]
 8008f94:	60a3      	str	r3, [r4, #8]
 8008f96:	89a3      	ldrh	r3, [r4, #12]
 8008f98:	071a      	lsls	r2, r3, #28
 8008f9a:	d52e      	bpl.n	8008ffa <__swbuf_r+0x82>
 8008f9c:	6923      	ldr	r3, [r4, #16]
 8008f9e:	b363      	cbz	r3, 8008ffa <__swbuf_r+0x82>
 8008fa0:	6923      	ldr	r3, [r4, #16]
 8008fa2:	6820      	ldr	r0, [r4, #0]
 8008fa4:	1ac0      	subs	r0, r0, r3
 8008fa6:	6963      	ldr	r3, [r4, #20]
 8008fa8:	b2f6      	uxtb	r6, r6
 8008faa:	4283      	cmp	r3, r0
 8008fac:	4637      	mov	r7, r6
 8008fae:	dc04      	bgt.n	8008fba <__swbuf_r+0x42>
 8008fb0:	4621      	mov	r1, r4
 8008fb2:	4628      	mov	r0, r5
 8008fb4:	f000 f926 	bl	8009204 <_fflush_r>
 8008fb8:	bb28      	cbnz	r0, 8009006 <__swbuf_r+0x8e>
 8008fba:	68a3      	ldr	r3, [r4, #8]
 8008fbc:	3b01      	subs	r3, #1
 8008fbe:	60a3      	str	r3, [r4, #8]
 8008fc0:	6823      	ldr	r3, [r4, #0]
 8008fc2:	1c5a      	adds	r2, r3, #1
 8008fc4:	6022      	str	r2, [r4, #0]
 8008fc6:	701e      	strb	r6, [r3, #0]
 8008fc8:	6963      	ldr	r3, [r4, #20]
 8008fca:	3001      	adds	r0, #1
 8008fcc:	4283      	cmp	r3, r0
 8008fce:	d004      	beq.n	8008fda <__swbuf_r+0x62>
 8008fd0:	89a3      	ldrh	r3, [r4, #12]
 8008fd2:	07db      	lsls	r3, r3, #31
 8008fd4:	d519      	bpl.n	800900a <__swbuf_r+0x92>
 8008fd6:	2e0a      	cmp	r6, #10
 8008fd8:	d117      	bne.n	800900a <__swbuf_r+0x92>
 8008fda:	4621      	mov	r1, r4
 8008fdc:	4628      	mov	r0, r5
 8008fde:	f000 f911 	bl	8009204 <_fflush_r>
 8008fe2:	b190      	cbz	r0, 800900a <__swbuf_r+0x92>
 8008fe4:	e00f      	b.n	8009006 <__swbuf_r+0x8e>
 8008fe6:	4b0b      	ldr	r3, [pc, #44]	; (8009014 <__swbuf_r+0x9c>)
 8008fe8:	429c      	cmp	r4, r3
 8008fea:	d101      	bne.n	8008ff0 <__swbuf_r+0x78>
 8008fec:	68ac      	ldr	r4, [r5, #8]
 8008fee:	e7d0      	b.n	8008f92 <__swbuf_r+0x1a>
 8008ff0:	4b09      	ldr	r3, [pc, #36]	; (8009018 <__swbuf_r+0xa0>)
 8008ff2:	429c      	cmp	r4, r3
 8008ff4:	bf08      	it	eq
 8008ff6:	68ec      	ldreq	r4, [r5, #12]
 8008ff8:	e7cb      	b.n	8008f92 <__swbuf_r+0x1a>
 8008ffa:	4621      	mov	r1, r4
 8008ffc:	4628      	mov	r0, r5
 8008ffe:	f000 f80d 	bl	800901c <__swsetup_r>
 8009002:	2800      	cmp	r0, #0
 8009004:	d0cc      	beq.n	8008fa0 <__swbuf_r+0x28>
 8009006:	f04f 37ff 	mov.w	r7, #4294967295
 800900a:	4638      	mov	r0, r7
 800900c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800900e:	bf00      	nop
 8009010:	0800a028 	.word	0x0800a028
 8009014:	0800a048 	.word	0x0800a048
 8009018:	0800a008 	.word	0x0800a008

0800901c <__swsetup_r>:
 800901c:	4b32      	ldr	r3, [pc, #200]	; (80090e8 <__swsetup_r+0xcc>)
 800901e:	b570      	push	{r4, r5, r6, lr}
 8009020:	681d      	ldr	r5, [r3, #0]
 8009022:	4606      	mov	r6, r0
 8009024:	460c      	mov	r4, r1
 8009026:	b125      	cbz	r5, 8009032 <__swsetup_r+0x16>
 8009028:	69ab      	ldr	r3, [r5, #24]
 800902a:	b913      	cbnz	r3, 8009032 <__swsetup_r+0x16>
 800902c:	4628      	mov	r0, r5
 800902e:	f000 f953 	bl	80092d8 <__sinit>
 8009032:	4b2e      	ldr	r3, [pc, #184]	; (80090ec <__swsetup_r+0xd0>)
 8009034:	429c      	cmp	r4, r3
 8009036:	d10f      	bne.n	8009058 <__swsetup_r+0x3c>
 8009038:	686c      	ldr	r4, [r5, #4]
 800903a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800903e:	b29a      	uxth	r2, r3
 8009040:	0715      	lsls	r5, r2, #28
 8009042:	d42c      	bmi.n	800909e <__swsetup_r+0x82>
 8009044:	06d0      	lsls	r0, r2, #27
 8009046:	d411      	bmi.n	800906c <__swsetup_r+0x50>
 8009048:	2209      	movs	r2, #9
 800904a:	6032      	str	r2, [r6, #0]
 800904c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009050:	81a3      	strh	r3, [r4, #12]
 8009052:	f04f 30ff 	mov.w	r0, #4294967295
 8009056:	e03e      	b.n	80090d6 <__swsetup_r+0xba>
 8009058:	4b25      	ldr	r3, [pc, #148]	; (80090f0 <__swsetup_r+0xd4>)
 800905a:	429c      	cmp	r4, r3
 800905c:	d101      	bne.n	8009062 <__swsetup_r+0x46>
 800905e:	68ac      	ldr	r4, [r5, #8]
 8009060:	e7eb      	b.n	800903a <__swsetup_r+0x1e>
 8009062:	4b24      	ldr	r3, [pc, #144]	; (80090f4 <__swsetup_r+0xd8>)
 8009064:	429c      	cmp	r4, r3
 8009066:	bf08      	it	eq
 8009068:	68ec      	ldreq	r4, [r5, #12]
 800906a:	e7e6      	b.n	800903a <__swsetup_r+0x1e>
 800906c:	0751      	lsls	r1, r2, #29
 800906e:	d512      	bpl.n	8009096 <__swsetup_r+0x7a>
 8009070:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009072:	b141      	cbz	r1, 8009086 <__swsetup_r+0x6a>
 8009074:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009078:	4299      	cmp	r1, r3
 800907a:	d002      	beq.n	8009082 <__swsetup_r+0x66>
 800907c:	4630      	mov	r0, r6
 800907e:	f7ff fe33 	bl	8008ce8 <_free_r>
 8009082:	2300      	movs	r3, #0
 8009084:	6363      	str	r3, [r4, #52]	; 0x34
 8009086:	89a3      	ldrh	r3, [r4, #12]
 8009088:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800908c:	81a3      	strh	r3, [r4, #12]
 800908e:	2300      	movs	r3, #0
 8009090:	6063      	str	r3, [r4, #4]
 8009092:	6923      	ldr	r3, [r4, #16]
 8009094:	6023      	str	r3, [r4, #0]
 8009096:	89a3      	ldrh	r3, [r4, #12]
 8009098:	f043 0308 	orr.w	r3, r3, #8
 800909c:	81a3      	strh	r3, [r4, #12]
 800909e:	6923      	ldr	r3, [r4, #16]
 80090a0:	b94b      	cbnz	r3, 80090b6 <__swsetup_r+0x9a>
 80090a2:	89a3      	ldrh	r3, [r4, #12]
 80090a4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80090a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80090ac:	d003      	beq.n	80090b6 <__swsetup_r+0x9a>
 80090ae:	4621      	mov	r1, r4
 80090b0:	4630      	mov	r0, r6
 80090b2:	f000 f9bf 	bl	8009434 <__smakebuf_r>
 80090b6:	89a2      	ldrh	r2, [r4, #12]
 80090b8:	f012 0301 	ands.w	r3, r2, #1
 80090bc:	d00c      	beq.n	80090d8 <__swsetup_r+0xbc>
 80090be:	2300      	movs	r3, #0
 80090c0:	60a3      	str	r3, [r4, #8]
 80090c2:	6963      	ldr	r3, [r4, #20]
 80090c4:	425b      	negs	r3, r3
 80090c6:	61a3      	str	r3, [r4, #24]
 80090c8:	6923      	ldr	r3, [r4, #16]
 80090ca:	b953      	cbnz	r3, 80090e2 <__swsetup_r+0xc6>
 80090cc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80090d0:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80090d4:	d1ba      	bne.n	800904c <__swsetup_r+0x30>
 80090d6:	bd70      	pop	{r4, r5, r6, pc}
 80090d8:	0792      	lsls	r2, r2, #30
 80090da:	bf58      	it	pl
 80090dc:	6963      	ldrpl	r3, [r4, #20]
 80090de:	60a3      	str	r3, [r4, #8]
 80090e0:	e7f2      	b.n	80090c8 <__swsetup_r+0xac>
 80090e2:	2000      	movs	r0, #0
 80090e4:	e7f7      	b.n	80090d6 <__swsetup_r+0xba>
 80090e6:	bf00      	nop
 80090e8:	20000044 	.word	0x20000044
 80090ec:	0800a028 	.word	0x0800a028
 80090f0:	0800a048 	.word	0x0800a048
 80090f4:	0800a008 	.word	0x0800a008

080090f8 <__sflush_r>:
 80090f8:	898a      	ldrh	r2, [r1, #12]
 80090fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80090fe:	4605      	mov	r5, r0
 8009100:	0710      	lsls	r0, r2, #28
 8009102:	460c      	mov	r4, r1
 8009104:	d458      	bmi.n	80091b8 <__sflush_r+0xc0>
 8009106:	684b      	ldr	r3, [r1, #4]
 8009108:	2b00      	cmp	r3, #0
 800910a:	dc05      	bgt.n	8009118 <__sflush_r+0x20>
 800910c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800910e:	2b00      	cmp	r3, #0
 8009110:	dc02      	bgt.n	8009118 <__sflush_r+0x20>
 8009112:	2000      	movs	r0, #0
 8009114:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009118:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800911a:	2e00      	cmp	r6, #0
 800911c:	d0f9      	beq.n	8009112 <__sflush_r+0x1a>
 800911e:	2300      	movs	r3, #0
 8009120:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009124:	682f      	ldr	r7, [r5, #0]
 8009126:	6a21      	ldr	r1, [r4, #32]
 8009128:	602b      	str	r3, [r5, #0]
 800912a:	d032      	beq.n	8009192 <__sflush_r+0x9a>
 800912c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800912e:	89a3      	ldrh	r3, [r4, #12]
 8009130:	075a      	lsls	r2, r3, #29
 8009132:	d505      	bpl.n	8009140 <__sflush_r+0x48>
 8009134:	6863      	ldr	r3, [r4, #4]
 8009136:	1ac0      	subs	r0, r0, r3
 8009138:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800913a:	b10b      	cbz	r3, 8009140 <__sflush_r+0x48>
 800913c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800913e:	1ac0      	subs	r0, r0, r3
 8009140:	2300      	movs	r3, #0
 8009142:	4602      	mov	r2, r0
 8009144:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009146:	6a21      	ldr	r1, [r4, #32]
 8009148:	4628      	mov	r0, r5
 800914a:	47b0      	blx	r6
 800914c:	1c43      	adds	r3, r0, #1
 800914e:	89a3      	ldrh	r3, [r4, #12]
 8009150:	d106      	bne.n	8009160 <__sflush_r+0x68>
 8009152:	6829      	ldr	r1, [r5, #0]
 8009154:	291d      	cmp	r1, #29
 8009156:	d848      	bhi.n	80091ea <__sflush_r+0xf2>
 8009158:	4a29      	ldr	r2, [pc, #164]	; (8009200 <__sflush_r+0x108>)
 800915a:	40ca      	lsrs	r2, r1
 800915c:	07d6      	lsls	r6, r2, #31
 800915e:	d544      	bpl.n	80091ea <__sflush_r+0xf2>
 8009160:	2200      	movs	r2, #0
 8009162:	6062      	str	r2, [r4, #4]
 8009164:	04d9      	lsls	r1, r3, #19
 8009166:	6922      	ldr	r2, [r4, #16]
 8009168:	6022      	str	r2, [r4, #0]
 800916a:	d504      	bpl.n	8009176 <__sflush_r+0x7e>
 800916c:	1c42      	adds	r2, r0, #1
 800916e:	d101      	bne.n	8009174 <__sflush_r+0x7c>
 8009170:	682b      	ldr	r3, [r5, #0]
 8009172:	b903      	cbnz	r3, 8009176 <__sflush_r+0x7e>
 8009174:	6560      	str	r0, [r4, #84]	; 0x54
 8009176:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009178:	602f      	str	r7, [r5, #0]
 800917a:	2900      	cmp	r1, #0
 800917c:	d0c9      	beq.n	8009112 <__sflush_r+0x1a>
 800917e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009182:	4299      	cmp	r1, r3
 8009184:	d002      	beq.n	800918c <__sflush_r+0x94>
 8009186:	4628      	mov	r0, r5
 8009188:	f7ff fdae 	bl	8008ce8 <_free_r>
 800918c:	2000      	movs	r0, #0
 800918e:	6360      	str	r0, [r4, #52]	; 0x34
 8009190:	e7c0      	b.n	8009114 <__sflush_r+0x1c>
 8009192:	2301      	movs	r3, #1
 8009194:	4628      	mov	r0, r5
 8009196:	47b0      	blx	r6
 8009198:	1c41      	adds	r1, r0, #1
 800919a:	d1c8      	bne.n	800912e <__sflush_r+0x36>
 800919c:	682b      	ldr	r3, [r5, #0]
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d0c5      	beq.n	800912e <__sflush_r+0x36>
 80091a2:	2b1d      	cmp	r3, #29
 80091a4:	d001      	beq.n	80091aa <__sflush_r+0xb2>
 80091a6:	2b16      	cmp	r3, #22
 80091a8:	d101      	bne.n	80091ae <__sflush_r+0xb6>
 80091aa:	602f      	str	r7, [r5, #0]
 80091ac:	e7b1      	b.n	8009112 <__sflush_r+0x1a>
 80091ae:	89a3      	ldrh	r3, [r4, #12]
 80091b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80091b4:	81a3      	strh	r3, [r4, #12]
 80091b6:	e7ad      	b.n	8009114 <__sflush_r+0x1c>
 80091b8:	690f      	ldr	r7, [r1, #16]
 80091ba:	2f00      	cmp	r7, #0
 80091bc:	d0a9      	beq.n	8009112 <__sflush_r+0x1a>
 80091be:	0793      	lsls	r3, r2, #30
 80091c0:	680e      	ldr	r6, [r1, #0]
 80091c2:	bf08      	it	eq
 80091c4:	694b      	ldreq	r3, [r1, #20]
 80091c6:	600f      	str	r7, [r1, #0]
 80091c8:	bf18      	it	ne
 80091ca:	2300      	movne	r3, #0
 80091cc:	eba6 0807 	sub.w	r8, r6, r7
 80091d0:	608b      	str	r3, [r1, #8]
 80091d2:	f1b8 0f00 	cmp.w	r8, #0
 80091d6:	dd9c      	ble.n	8009112 <__sflush_r+0x1a>
 80091d8:	4643      	mov	r3, r8
 80091da:	463a      	mov	r2, r7
 80091dc:	6a21      	ldr	r1, [r4, #32]
 80091de:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80091e0:	4628      	mov	r0, r5
 80091e2:	47b0      	blx	r6
 80091e4:	2800      	cmp	r0, #0
 80091e6:	dc06      	bgt.n	80091f6 <__sflush_r+0xfe>
 80091e8:	89a3      	ldrh	r3, [r4, #12]
 80091ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80091ee:	81a3      	strh	r3, [r4, #12]
 80091f0:	f04f 30ff 	mov.w	r0, #4294967295
 80091f4:	e78e      	b.n	8009114 <__sflush_r+0x1c>
 80091f6:	4407      	add	r7, r0
 80091f8:	eba8 0800 	sub.w	r8, r8, r0
 80091fc:	e7e9      	b.n	80091d2 <__sflush_r+0xda>
 80091fe:	bf00      	nop
 8009200:	20400001 	.word	0x20400001

08009204 <_fflush_r>:
 8009204:	b538      	push	{r3, r4, r5, lr}
 8009206:	690b      	ldr	r3, [r1, #16]
 8009208:	4605      	mov	r5, r0
 800920a:	460c      	mov	r4, r1
 800920c:	b1db      	cbz	r3, 8009246 <_fflush_r+0x42>
 800920e:	b118      	cbz	r0, 8009218 <_fflush_r+0x14>
 8009210:	6983      	ldr	r3, [r0, #24]
 8009212:	b90b      	cbnz	r3, 8009218 <_fflush_r+0x14>
 8009214:	f000 f860 	bl	80092d8 <__sinit>
 8009218:	4b0c      	ldr	r3, [pc, #48]	; (800924c <_fflush_r+0x48>)
 800921a:	429c      	cmp	r4, r3
 800921c:	d109      	bne.n	8009232 <_fflush_r+0x2e>
 800921e:	686c      	ldr	r4, [r5, #4]
 8009220:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009224:	b17b      	cbz	r3, 8009246 <_fflush_r+0x42>
 8009226:	4621      	mov	r1, r4
 8009228:	4628      	mov	r0, r5
 800922a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800922e:	f7ff bf63 	b.w	80090f8 <__sflush_r>
 8009232:	4b07      	ldr	r3, [pc, #28]	; (8009250 <_fflush_r+0x4c>)
 8009234:	429c      	cmp	r4, r3
 8009236:	d101      	bne.n	800923c <_fflush_r+0x38>
 8009238:	68ac      	ldr	r4, [r5, #8]
 800923a:	e7f1      	b.n	8009220 <_fflush_r+0x1c>
 800923c:	4b05      	ldr	r3, [pc, #20]	; (8009254 <_fflush_r+0x50>)
 800923e:	429c      	cmp	r4, r3
 8009240:	bf08      	it	eq
 8009242:	68ec      	ldreq	r4, [r5, #12]
 8009244:	e7ec      	b.n	8009220 <_fflush_r+0x1c>
 8009246:	2000      	movs	r0, #0
 8009248:	bd38      	pop	{r3, r4, r5, pc}
 800924a:	bf00      	nop
 800924c:	0800a028 	.word	0x0800a028
 8009250:	0800a048 	.word	0x0800a048
 8009254:	0800a008 	.word	0x0800a008

08009258 <std>:
 8009258:	2300      	movs	r3, #0
 800925a:	b510      	push	{r4, lr}
 800925c:	4604      	mov	r4, r0
 800925e:	e9c0 3300 	strd	r3, r3, [r0]
 8009262:	6083      	str	r3, [r0, #8]
 8009264:	8181      	strh	r1, [r0, #12]
 8009266:	6643      	str	r3, [r0, #100]	; 0x64
 8009268:	81c2      	strh	r2, [r0, #14]
 800926a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800926e:	6183      	str	r3, [r0, #24]
 8009270:	4619      	mov	r1, r3
 8009272:	2208      	movs	r2, #8
 8009274:	305c      	adds	r0, #92	; 0x5c
 8009276:	f7ff fd2e 	bl	8008cd6 <memset>
 800927a:	4b05      	ldr	r3, [pc, #20]	; (8009290 <std+0x38>)
 800927c:	6263      	str	r3, [r4, #36]	; 0x24
 800927e:	4b05      	ldr	r3, [pc, #20]	; (8009294 <std+0x3c>)
 8009280:	62a3      	str	r3, [r4, #40]	; 0x28
 8009282:	4b05      	ldr	r3, [pc, #20]	; (8009298 <std+0x40>)
 8009284:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009286:	4b05      	ldr	r3, [pc, #20]	; (800929c <std+0x44>)
 8009288:	6224      	str	r4, [r4, #32]
 800928a:	6323      	str	r3, [r4, #48]	; 0x30
 800928c:	bd10      	pop	{r4, pc}
 800928e:	bf00      	nop
 8009290:	08009ab5 	.word	0x08009ab5
 8009294:	08009ad7 	.word	0x08009ad7
 8009298:	08009b0f 	.word	0x08009b0f
 800929c:	08009b33 	.word	0x08009b33

080092a0 <_cleanup_r>:
 80092a0:	4901      	ldr	r1, [pc, #4]	; (80092a8 <_cleanup_r+0x8>)
 80092a2:	f000 b885 	b.w	80093b0 <_fwalk_reent>
 80092a6:	bf00      	nop
 80092a8:	08009205 	.word	0x08009205

080092ac <__sfmoreglue>:
 80092ac:	b570      	push	{r4, r5, r6, lr}
 80092ae:	1e4a      	subs	r2, r1, #1
 80092b0:	2568      	movs	r5, #104	; 0x68
 80092b2:	4355      	muls	r5, r2
 80092b4:	460e      	mov	r6, r1
 80092b6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80092ba:	f7ff fd63 	bl	8008d84 <_malloc_r>
 80092be:	4604      	mov	r4, r0
 80092c0:	b140      	cbz	r0, 80092d4 <__sfmoreglue+0x28>
 80092c2:	2100      	movs	r1, #0
 80092c4:	e9c0 1600 	strd	r1, r6, [r0]
 80092c8:	300c      	adds	r0, #12
 80092ca:	60a0      	str	r0, [r4, #8]
 80092cc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80092d0:	f7ff fd01 	bl	8008cd6 <memset>
 80092d4:	4620      	mov	r0, r4
 80092d6:	bd70      	pop	{r4, r5, r6, pc}

080092d8 <__sinit>:
 80092d8:	6983      	ldr	r3, [r0, #24]
 80092da:	b510      	push	{r4, lr}
 80092dc:	4604      	mov	r4, r0
 80092de:	bb33      	cbnz	r3, 800932e <__sinit+0x56>
 80092e0:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80092e4:	6503      	str	r3, [r0, #80]	; 0x50
 80092e6:	4b12      	ldr	r3, [pc, #72]	; (8009330 <__sinit+0x58>)
 80092e8:	4a12      	ldr	r2, [pc, #72]	; (8009334 <__sinit+0x5c>)
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	6282      	str	r2, [r0, #40]	; 0x28
 80092ee:	4298      	cmp	r0, r3
 80092f0:	bf04      	itt	eq
 80092f2:	2301      	moveq	r3, #1
 80092f4:	6183      	streq	r3, [r0, #24]
 80092f6:	f000 f81f 	bl	8009338 <__sfp>
 80092fa:	6060      	str	r0, [r4, #4]
 80092fc:	4620      	mov	r0, r4
 80092fe:	f000 f81b 	bl	8009338 <__sfp>
 8009302:	60a0      	str	r0, [r4, #8]
 8009304:	4620      	mov	r0, r4
 8009306:	f000 f817 	bl	8009338 <__sfp>
 800930a:	2200      	movs	r2, #0
 800930c:	60e0      	str	r0, [r4, #12]
 800930e:	2104      	movs	r1, #4
 8009310:	6860      	ldr	r0, [r4, #4]
 8009312:	f7ff ffa1 	bl	8009258 <std>
 8009316:	2201      	movs	r2, #1
 8009318:	2109      	movs	r1, #9
 800931a:	68a0      	ldr	r0, [r4, #8]
 800931c:	f7ff ff9c 	bl	8009258 <std>
 8009320:	2202      	movs	r2, #2
 8009322:	2112      	movs	r1, #18
 8009324:	68e0      	ldr	r0, [r4, #12]
 8009326:	f7ff ff97 	bl	8009258 <std>
 800932a:	2301      	movs	r3, #1
 800932c:	61a3      	str	r3, [r4, #24]
 800932e:	bd10      	pop	{r4, pc}
 8009330:	0800a004 	.word	0x0800a004
 8009334:	080092a1 	.word	0x080092a1

08009338 <__sfp>:
 8009338:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800933a:	4b1b      	ldr	r3, [pc, #108]	; (80093a8 <__sfp+0x70>)
 800933c:	681e      	ldr	r6, [r3, #0]
 800933e:	69b3      	ldr	r3, [r6, #24]
 8009340:	4607      	mov	r7, r0
 8009342:	b913      	cbnz	r3, 800934a <__sfp+0x12>
 8009344:	4630      	mov	r0, r6
 8009346:	f7ff ffc7 	bl	80092d8 <__sinit>
 800934a:	3648      	adds	r6, #72	; 0x48
 800934c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009350:	3b01      	subs	r3, #1
 8009352:	d503      	bpl.n	800935c <__sfp+0x24>
 8009354:	6833      	ldr	r3, [r6, #0]
 8009356:	b133      	cbz	r3, 8009366 <__sfp+0x2e>
 8009358:	6836      	ldr	r6, [r6, #0]
 800935a:	e7f7      	b.n	800934c <__sfp+0x14>
 800935c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009360:	b16d      	cbz	r5, 800937e <__sfp+0x46>
 8009362:	3468      	adds	r4, #104	; 0x68
 8009364:	e7f4      	b.n	8009350 <__sfp+0x18>
 8009366:	2104      	movs	r1, #4
 8009368:	4638      	mov	r0, r7
 800936a:	f7ff ff9f 	bl	80092ac <__sfmoreglue>
 800936e:	6030      	str	r0, [r6, #0]
 8009370:	2800      	cmp	r0, #0
 8009372:	d1f1      	bne.n	8009358 <__sfp+0x20>
 8009374:	230c      	movs	r3, #12
 8009376:	603b      	str	r3, [r7, #0]
 8009378:	4604      	mov	r4, r0
 800937a:	4620      	mov	r0, r4
 800937c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800937e:	4b0b      	ldr	r3, [pc, #44]	; (80093ac <__sfp+0x74>)
 8009380:	6665      	str	r5, [r4, #100]	; 0x64
 8009382:	e9c4 5500 	strd	r5, r5, [r4]
 8009386:	60a5      	str	r5, [r4, #8]
 8009388:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800938c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8009390:	2208      	movs	r2, #8
 8009392:	4629      	mov	r1, r5
 8009394:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009398:	f7ff fc9d 	bl	8008cd6 <memset>
 800939c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80093a0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80093a4:	e7e9      	b.n	800937a <__sfp+0x42>
 80093a6:	bf00      	nop
 80093a8:	0800a004 	.word	0x0800a004
 80093ac:	ffff0001 	.word	0xffff0001

080093b0 <_fwalk_reent>:
 80093b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80093b4:	4680      	mov	r8, r0
 80093b6:	4689      	mov	r9, r1
 80093b8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80093bc:	2600      	movs	r6, #0
 80093be:	b914      	cbnz	r4, 80093c6 <_fwalk_reent+0x16>
 80093c0:	4630      	mov	r0, r6
 80093c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80093c6:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80093ca:	3f01      	subs	r7, #1
 80093cc:	d501      	bpl.n	80093d2 <_fwalk_reent+0x22>
 80093ce:	6824      	ldr	r4, [r4, #0]
 80093d0:	e7f5      	b.n	80093be <_fwalk_reent+0xe>
 80093d2:	89ab      	ldrh	r3, [r5, #12]
 80093d4:	2b01      	cmp	r3, #1
 80093d6:	d907      	bls.n	80093e8 <_fwalk_reent+0x38>
 80093d8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80093dc:	3301      	adds	r3, #1
 80093de:	d003      	beq.n	80093e8 <_fwalk_reent+0x38>
 80093e0:	4629      	mov	r1, r5
 80093e2:	4640      	mov	r0, r8
 80093e4:	47c8      	blx	r9
 80093e6:	4306      	orrs	r6, r0
 80093e8:	3568      	adds	r5, #104	; 0x68
 80093ea:	e7ee      	b.n	80093ca <_fwalk_reent+0x1a>

080093ec <__swhatbuf_r>:
 80093ec:	b570      	push	{r4, r5, r6, lr}
 80093ee:	460e      	mov	r6, r1
 80093f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80093f4:	2900      	cmp	r1, #0
 80093f6:	b096      	sub	sp, #88	; 0x58
 80093f8:	4614      	mov	r4, r2
 80093fa:	461d      	mov	r5, r3
 80093fc:	da07      	bge.n	800940e <__swhatbuf_r+0x22>
 80093fe:	2300      	movs	r3, #0
 8009400:	602b      	str	r3, [r5, #0]
 8009402:	89b3      	ldrh	r3, [r6, #12]
 8009404:	061a      	lsls	r2, r3, #24
 8009406:	d410      	bmi.n	800942a <__swhatbuf_r+0x3e>
 8009408:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800940c:	e00e      	b.n	800942c <__swhatbuf_r+0x40>
 800940e:	466a      	mov	r2, sp
 8009410:	f000 fbb6 	bl	8009b80 <_fstat_r>
 8009414:	2800      	cmp	r0, #0
 8009416:	dbf2      	blt.n	80093fe <__swhatbuf_r+0x12>
 8009418:	9a01      	ldr	r2, [sp, #4]
 800941a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800941e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009422:	425a      	negs	r2, r3
 8009424:	415a      	adcs	r2, r3
 8009426:	602a      	str	r2, [r5, #0]
 8009428:	e7ee      	b.n	8009408 <__swhatbuf_r+0x1c>
 800942a:	2340      	movs	r3, #64	; 0x40
 800942c:	2000      	movs	r0, #0
 800942e:	6023      	str	r3, [r4, #0]
 8009430:	b016      	add	sp, #88	; 0x58
 8009432:	bd70      	pop	{r4, r5, r6, pc}

08009434 <__smakebuf_r>:
 8009434:	898b      	ldrh	r3, [r1, #12]
 8009436:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009438:	079d      	lsls	r5, r3, #30
 800943a:	4606      	mov	r6, r0
 800943c:	460c      	mov	r4, r1
 800943e:	d507      	bpl.n	8009450 <__smakebuf_r+0x1c>
 8009440:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009444:	6023      	str	r3, [r4, #0]
 8009446:	6123      	str	r3, [r4, #16]
 8009448:	2301      	movs	r3, #1
 800944a:	6163      	str	r3, [r4, #20]
 800944c:	b002      	add	sp, #8
 800944e:	bd70      	pop	{r4, r5, r6, pc}
 8009450:	ab01      	add	r3, sp, #4
 8009452:	466a      	mov	r2, sp
 8009454:	f7ff ffca 	bl	80093ec <__swhatbuf_r>
 8009458:	9900      	ldr	r1, [sp, #0]
 800945a:	4605      	mov	r5, r0
 800945c:	4630      	mov	r0, r6
 800945e:	f7ff fc91 	bl	8008d84 <_malloc_r>
 8009462:	b948      	cbnz	r0, 8009478 <__smakebuf_r+0x44>
 8009464:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009468:	059a      	lsls	r2, r3, #22
 800946a:	d4ef      	bmi.n	800944c <__smakebuf_r+0x18>
 800946c:	f023 0303 	bic.w	r3, r3, #3
 8009470:	f043 0302 	orr.w	r3, r3, #2
 8009474:	81a3      	strh	r3, [r4, #12]
 8009476:	e7e3      	b.n	8009440 <__smakebuf_r+0xc>
 8009478:	4b0d      	ldr	r3, [pc, #52]	; (80094b0 <__smakebuf_r+0x7c>)
 800947a:	62b3      	str	r3, [r6, #40]	; 0x28
 800947c:	89a3      	ldrh	r3, [r4, #12]
 800947e:	6020      	str	r0, [r4, #0]
 8009480:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009484:	81a3      	strh	r3, [r4, #12]
 8009486:	9b00      	ldr	r3, [sp, #0]
 8009488:	6163      	str	r3, [r4, #20]
 800948a:	9b01      	ldr	r3, [sp, #4]
 800948c:	6120      	str	r0, [r4, #16]
 800948e:	b15b      	cbz	r3, 80094a8 <__smakebuf_r+0x74>
 8009490:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009494:	4630      	mov	r0, r6
 8009496:	f000 fb85 	bl	8009ba4 <_isatty_r>
 800949a:	b128      	cbz	r0, 80094a8 <__smakebuf_r+0x74>
 800949c:	89a3      	ldrh	r3, [r4, #12]
 800949e:	f023 0303 	bic.w	r3, r3, #3
 80094a2:	f043 0301 	orr.w	r3, r3, #1
 80094a6:	81a3      	strh	r3, [r4, #12]
 80094a8:	89a3      	ldrh	r3, [r4, #12]
 80094aa:	431d      	orrs	r5, r3
 80094ac:	81a5      	strh	r5, [r4, #12]
 80094ae:	e7cd      	b.n	800944c <__smakebuf_r+0x18>
 80094b0:	080092a1 	.word	0x080092a1

080094b4 <__malloc_lock>:
 80094b4:	4770      	bx	lr

080094b6 <__malloc_unlock>:
 80094b6:	4770      	bx	lr

080094b8 <__sfputc_r>:
 80094b8:	6893      	ldr	r3, [r2, #8]
 80094ba:	3b01      	subs	r3, #1
 80094bc:	2b00      	cmp	r3, #0
 80094be:	b410      	push	{r4}
 80094c0:	6093      	str	r3, [r2, #8]
 80094c2:	da08      	bge.n	80094d6 <__sfputc_r+0x1e>
 80094c4:	6994      	ldr	r4, [r2, #24]
 80094c6:	42a3      	cmp	r3, r4
 80094c8:	db01      	blt.n	80094ce <__sfputc_r+0x16>
 80094ca:	290a      	cmp	r1, #10
 80094cc:	d103      	bne.n	80094d6 <__sfputc_r+0x1e>
 80094ce:	f85d 4b04 	ldr.w	r4, [sp], #4
 80094d2:	f7ff bd51 	b.w	8008f78 <__swbuf_r>
 80094d6:	6813      	ldr	r3, [r2, #0]
 80094d8:	1c58      	adds	r0, r3, #1
 80094da:	6010      	str	r0, [r2, #0]
 80094dc:	7019      	strb	r1, [r3, #0]
 80094de:	4608      	mov	r0, r1
 80094e0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80094e4:	4770      	bx	lr

080094e6 <__sfputs_r>:
 80094e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094e8:	4606      	mov	r6, r0
 80094ea:	460f      	mov	r7, r1
 80094ec:	4614      	mov	r4, r2
 80094ee:	18d5      	adds	r5, r2, r3
 80094f0:	42ac      	cmp	r4, r5
 80094f2:	d101      	bne.n	80094f8 <__sfputs_r+0x12>
 80094f4:	2000      	movs	r0, #0
 80094f6:	e007      	b.n	8009508 <__sfputs_r+0x22>
 80094f8:	463a      	mov	r2, r7
 80094fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80094fe:	4630      	mov	r0, r6
 8009500:	f7ff ffda 	bl	80094b8 <__sfputc_r>
 8009504:	1c43      	adds	r3, r0, #1
 8009506:	d1f3      	bne.n	80094f0 <__sfputs_r+0xa>
 8009508:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800950c <_vfiprintf_r>:
 800950c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009510:	460c      	mov	r4, r1
 8009512:	b09d      	sub	sp, #116	; 0x74
 8009514:	4617      	mov	r7, r2
 8009516:	461d      	mov	r5, r3
 8009518:	4606      	mov	r6, r0
 800951a:	b118      	cbz	r0, 8009524 <_vfiprintf_r+0x18>
 800951c:	6983      	ldr	r3, [r0, #24]
 800951e:	b90b      	cbnz	r3, 8009524 <_vfiprintf_r+0x18>
 8009520:	f7ff feda 	bl	80092d8 <__sinit>
 8009524:	4b7c      	ldr	r3, [pc, #496]	; (8009718 <_vfiprintf_r+0x20c>)
 8009526:	429c      	cmp	r4, r3
 8009528:	d158      	bne.n	80095dc <_vfiprintf_r+0xd0>
 800952a:	6874      	ldr	r4, [r6, #4]
 800952c:	89a3      	ldrh	r3, [r4, #12]
 800952e:	0718      	lsls	r0, r3, #28
 8009530:	d55e      	bpl.n	80095f0 <_vfiprintf_r+0xe4>
 8009532:	6923      	ldr	r3, [r4, #16]
 8009534:	2b00      	cmp	r3, #0
 8009536:	d05b      	beq.n	80095f0 <_vfiprintf_r+0xe4>
 8009538:	2300      	movs	r3, #0
 800953a:	9309      	str	r3, [sp, #36]	; 0x24
 800953c:	2320      	movs	r3, #32
 800953e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009542:	2330      	movs	r3, #48	; 0x30
 8009544:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009548:	9503      	str	r5, [sp, #12]
 800954a:	f04f 0b01 	mov.w	fp, #1
 800954e:	46b8      	mov	r8, r7
 8009550:	4645      	mov	r5, r8
 8009552:	f815 3b01 	ldrb.w	r3, [r5], #1
 8009556:	b10b      	cbz	r3, 800955c <_vfiprintf_r+0x50>
 8009558:	2b25      	cmp	r3, #37	; 0x25
 800955a:	d154      	bne.n	8009606 <_vfiprintf_r+0xfa>
 800955c:	ebb8 0a07 	subs.w	sl, r8, r7
 8009560:	d00b      	beq.n	800957a <_vfiprintf_r+0x6e>
 8009562:	4653      	mov	r3, sl
 8009564:	463a      	mov	r2, r7
 8009566:	4621      	mov	r1, r4
 8009568:	4630      	mov	r0, r6
 800956a:	f7ff ffbc 	bl	80094e6 <__sfputs_r>
 800956e:	3001      	adds	r0, #1
 8009570:	f000 80c2 	beq.w	80096f8 <_vfiprintf_r+0x1ec>
 8009574:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009576:	4453      	add	r3, sl
 8009578:	9309      	str	r3, [sp, #36]	; 0x24
 800957a:	f898 3000 	ldrb.w	r3, [r8]
 800957e:	2b00      	cmp	r3, #0
 8009580:	f000 80ba 	beq.w	80096f8 <_vfiprintf_r+0x1ec>
 8009584:	2300      	movs	r3, #0
 8009586:	f04f 32ff 	mov.w	r2, #4294967295
 800958a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800958e:	9304      	str	r3, [sp, #16]
 8009590:	9307      	str	r3, [sp, #28]
 8009592:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009596:	931a      	str	r3, [sp, #104]	; 0x68
 8009598:	46a8      	mov	r8, r5
 800959a:	2205      	movs	r2, #5
 800959c:	f818 1b01 	ldrb.w	r1, [r8], #1
 80095a0:	485e      	ldr	r0, [pc, #376]	; (800971c <_vfiprintf_r+0x210>)
 80095a2:	f7f6 fe15 	bl	80001d0 <memchr>
 80095a6:	9b04      	ldr	r3, [sp, #16]
 80095a8:	bb78      	cbnz	r0, 800960a <_vfiprintf_r+0xfe>
 80095aa:	06d9      	lsls	r1, r3, #27
 80095ac:	bf44      	itt	mi
 80095ae:	2220      	movmi	r2, #32
 80095b0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80095b4:	071a      	lsls	r2, r3, #28
 80095b6:	bf44      	itt	mi
 80095b8:	222b      	movmi	r2, #43	; 0x2b
 80095ba:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80095be:	782a      	ldrb	r2, [r5, #0]
 80095c0:	2a2a      	cmp	r2, #42	; 0x2a
 80095c2:	d02a      	beq.n	800961a <_vfiprintf_r+0x10e>
 80095c4:	9a07      	ldr	r2, [sp, #28]
 80095c6:	46a8      	mov	r8, r5
 80095c8:	2000      	movs	r0, #0
 80095ca:	250a      	movs	r5, #10
 80095cc:	4641      	mov	r1, r8
 80095ce:	f811 3b01 	ldrb.w	r3, [r1], #1
 80095d2:	3b30      	subs	r3, #48	; 0x30
 80095d4:	2b09      	cmp	r3, #9
 80095d6:	d969      	bls.n	80096ac <_vfiprintf_r+0x1a0>
 80095d8:	b360      	cbz	r0, 8009634 <_vfiprintf_r+0x128>
 80095da:	e024      	b.n	8009626 <_vfiprintf_r+0x11a>
 80095dc:	4b50      	ldr	r3, [pc, #320]	; (8009720 <_vfiprintf_r+0x214>)
 80095de:	429c      	cmp	r4, r3
 80095e0:	d101      	bne.n	80095e6 <_vfiprintf_r+0xda>
 80095e2:	68b4      	ldr	r4, [r6, #8]
 80095e4:	e7a2      	b.n	800952c <_vfiprintf_r+0x20>
 80095e6:	4b4f      	ldr	r3, [pc, #316]	; (8009724 <_vfiprintf_r+0x218>)
 80095e8:	429c      	cmp	r4, r3
 80095ea:	bf08      	it	eq
 80095ec:	68f4      	ldreq	r4, [r6, #12]
 80095ee:	e79d      	b.n	800952c <_vfiprintf_r+0x20>
 80095f0:	4621      	mov	r1, r4
 80095f2:	4630      	mov	r0, r6
 80095f4:	f7ff fd12 	bl	800901c <__swsetup_r>
 80095f8:	2800      	cmp	r0, #0
 80095fa:	d09d      	beq.n	8009538 <_vfiprintf_r+0x2c>
 80095fc:	f04f 30ff 	mov.w	r0, #4294967295
 8009600:	b01d      	add	sp, #116	; 0x74
 8009602:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009606:	46a8      	mov	r8, r5
 8009608:	e7a2      	b.n	8009550 <_vfiprintf_r+0x44>
 800960a:	4a44      	ldr	r2, [pc, #272]	; (800971c <_vfiprintf_r+0x210>)
 800960c:	1a80      	subs	r0, r0, r2
 800960e:	fa0b f000 	lsl.w	r0, fp, r0
 8009612:	4318      	orrs	r0, r3
 8009614:	9004      	str	r0, [sp, #16]
 8009616:	4645      	mov	r5, r8
 8009618:	e7be      	b.n	8009598 <_vfiprintf_r+0x8c>
 800961a:	9a03      	ldr	r2, [sp, #12]
 800961c:	1d11      	adds	r1, r2, #4
 800961e:	6812      	ldr	r2, [r2, #0]
 8009620:	9103      	str	r1, [sp, #12]
 8009622:	2a00      	cmp	r2, #0
 8009624:	db01      	blt.n	800962a <_vfiprintf_r+0x11e>
 8009626:	9207      	str	r2, [sp, #28]
 8009628:	e004      	b.n	8009634 <_vfiprintf_r+0x128>
 800962a:	4252      	negs	r2, r2
 800962c:	f043 0302 	orr.w	r3, r3, #2
 8009630:	9207      	str	r2, [sp, #28]
 8009632:	9304      	str	r3, [sp, #16]
 8009634:	f898 3000 	ldrb.w	r3, [r8]
 8009638:	2b2e      	cmp	r3, #46	; 0x2e
 800963a:	d10e      	bne.n	800965a <_vfiprintf_r+0x14e>
 800963c:	f898 3001 	ldrb.w	r3, [r8, #1]
 8009640:	2b2a      	cmp	r3, #42	; 0x2a
 8009642:	d138      	bne.n	80096b6 <_vfiprintf_r+0x1aa>
 8009644:	9b03      	ldr	r3, [sp, #12]
 8009646:	1d1a      	adds	r2, r3, #4
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	9203      	str	r2, [sp, #12]
 800964c:	2b00      	cmp	r3, #0
 800964e:	bfb8      	it	lt
 8009650:	f04f 33ff 	movlt.w	r3, #4294967295
 8009654:	f108 0802 	add.w	r8, r8, #2
 8009658:	9305      	str	r3, [sp, #20]
 800965a:	4d33      	ldr	r5, [pc, #204]	; (8009728 <_vfiprintf_r+0x21c>)
 800965c:	f898 1000 	ldrb.w	r1, [r8]
 8009660:	2203      	movs	r2, #3
 8009662:	4628      	mov	r0, r5
 8009664:	f7f6 fdb4 	bl	80001d0 <memchr>
 8009668:	b140      	cbz	r0, 800967c <_vfiprintf_r+0x170>
 800966a:	2340      	movs	r3, #64	; 0x40
 800966c:	1b40      	subs	r0, r0, r5
 800966e:	fa03 f000 	lsl.w	r0, r3, r0
 8009672:	9b04      	ldr	r3, [sp, #16]
 8009674:	4303      	orrs	r3, r0
 8009676:	f108 0801 	add.w	r8, r8, #1
 800967a:	9304      	str	r3, [sp, #16]
 800967c:	f898 1000 	ldrb.w	r1, [r8]
 8009680:	482a      	ldr	r0, [pc, #168]	; (800972c <_vfiprintf_r+0x220>)
 8009682:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009686:	2206      	movs	r2, #6
 8009688:	f108 0701 	add.w	r7, r8, #1
 800968c:	f7f6 fda0 	bl	80001d0 <memchr>
 8009690:	2800      	cmp	r0, #0
 8009692:	d037      	beq.n	8009704 <_vfiprintf_r+0x1f8>
 8009694:	4b26      	ldr	r3, [pc, #152]	; (8009730 <_vfiprintf_r+0x224>)
 8009696:	bb1b      	cbnz	r3, 80096e0 <_vfiprintf_r+0x1d4>
 8009698:	9b03      	ldr	r3, [sp, #12]
 800969a:	3307      	adds	r3, #7
 800969c:	f023 0307 	bic.w	r3, r3, #7
 80096a0:	3308      	adds	r3, #8
 80096a2:	9303      	str	r3, [sp, #12]
 80096a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80096a6:	444b      	add	r3, r9
 80096a8:	9309      	str	r3, [sp, #36]	; 0x24
 80096aa:	e750      	b.n	800954e <_vfiprintf_r+0x42>
 80096ac:	fb05 3202 	mla	r2, r5, r2, r3
 80096b0:	2001      	movs	r0, #1
 80096b2:	4688      	mov	r8, r1
 80096b4:	e78a      	b.n	80095cc <_vfiprintf_r+0xc0>
 80096b6:	2300      	movs	r3, #0
 80096b8:	f108 0801 	add.w	r8, r8, #1
 80096bc:	9305      	str	r3, [sp, #20]
 80096be:	4619      	mov	r1, r3
 80096c0:	250a      	movs	r5, #10
 80096c2:	4640      	mov	r0, r8
 80096c4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80096c8:	3a30      	subs	r2, #48	; 0x30
 80096ca:	2a09      	cmp	r2, #9
 80096cc:	d903      	bls.n	80096d6 <_vfiprintf_r+0x1ca>
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	d0c3      	beq.n	800965a <_vfiprintf_r+0x14e>
 80096d2:	9105      	str	r1, [sp, #20]
 80096d4:	e7c1      	b.n	800965a <_vfiprintf_r+0x14e>
 80096d6:	fb05 2101 	mla	r1, r5, r1, r2
 80096da:	2301      	movs	r3, #1
 80096dc:	4680      	mov	r8, r0
 80096de:	e7f0      	b.n	80096c2 <_vfiprintf_r+0x1b6>
 80096e0:	ab03      	add	r3, sp, #12
 80096e2:	9300      	str	r3, [sp, #0]
 80096e4:	4622      	mov	r2, r4
 80096e6:	4b13      	ldr	r3, [pc, #76]	; (8009734 <_vfiprintf_r+0x228>)
 80096e8:	a904      	add	r1, sp, #16
 80096ea:	4630      	mov	r0, r6
 80096ec:	f3af 8000 	nop.w
 80096f0:	f1b0 3fff 	cmp.w	r0, #4294967295
 80096f4:	4681      	mov	r9, r0
 80096f6:	d1d5      	bne.n	80096a4 <_vfiprintf_r+0x198>
 80096f8:	89a3      	ldrh	r3, [r4, #12]
 80096fa:	065b      	lsls	r3, r3, #25
 80096fc:	f53f af7e 	bmi.w	80095fc <_vfiprintf_r+0xf0>
 8009700:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009702:	e77d      	b.n	8009600 <_vfiprintf_r+0xf4>
 8009704:	ab03      	add	r3, sp, #12
 8009706:	9300      	str	r3, [sp, #0]
 8009708:	4622      	mov	r2, r4
 800970a:	4b0a      	ldr	r3, [pc, #40]	; (8009734 <_vfiprintf_r+0x228>)
 800970c:	a904      	add	r1, sp, #16
 800970e:	4630      	mov	r0, r6
 8009710:	f000 f888 	bl	8009824 <_printf_i>
 8009714:	e7ec      	b.n	80096f0 <_vfiprintf_r+0x1e4>
 8009716:	bf00      	nop
 8009718:	0800a028 	.word	0x0800a028
 800971c:	0800a068 	.word	0x0800a068
 8009720:	0800a048 	.word	0x0800a048
 8009724:	0800a008 	.word	0x0800a008
 8009728:	0800a06e 	.word	0x0800a06e
 800972c:	0800a072 	.word	0x0800a072
 8009730:	00000000 	.word	0x00000000
 8009734:	080094e7 	.word	0x080094e7

08009738 <_printf_common>:
 8009738:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800973c:	4691      	mov	r9, r2
 800973e:	461f      	mov	r7, r3
 8009740:	688a      	ldr	r2, [r1, #8]
 8009742:	690b      	ldr	r3, [r1, #16]
 8009744:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009748:	4293      	cmp	r3, r2
 800974a:	bfb8      	it	lt
 800974c:	4613      	movlt	r3, r2
 800974e:	f8c9 3000 	str.w	r3, [r9]
 8009752:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009756:	4606      	mov	r6, r0
 8009758:	460c      	mov	r4, r1
 800975a:	b112      	cbz	r2, 8009762 <_printf_common+0x2a>
 800975c:	3301      	adds	r3, #1
 800975e:	f8c9 3000 	str.w	r3, [r9]
 8009762:	6823      	ldr	r3, [r4, #0]
 8009764:	0699      	lsls	r1, r3, #26
 8009766:	bf42      	ittt	mi
 8009768:	f8d9 3000 	ldrmi.w	r3, [r9]
 800976c:	3302      	addmi	r3, #2
 800976e:	f8c9 3000 	strmi.w	r3, [r9]
 8009772:	6825      	ldr	r5, [r4, #0]
 8009774:	f015 0506 	ands.w	r5, r5, #6
 8009778:	d107      	bne.n	800978a <_printf_common+0x52>
 800977a:	f104 0a19 	add.w	sl, r4, #25
 800977e:	68e3      	ldr	r3, [r4, #12]
 8009780:	f8d9 2000 	ldr.w	r2, [r9]
 8009784:	1a9b      	subs	r3, r3, r2
 8009786:	42ab      	cmp	r3, r5
 8009788:	dc28      	bgt.n	80097dc <_printf_common+0xa4>
 800978a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800978e:	6822      	ldr	r2, [r4, #0]
 8009790:	3300      	adds	r3, #0
 8009792:	bf18      	it	ne
 8009794:	2301      	movne	r3, #1
 8009796:	0692      	lsls	r2, r2, #26
 8009798:	d42d      	bmi.n	80097f6 <_printf_common+0xbe>
 800979a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800979e:	4639      	mov	r1, r7
 80097a0:	4630      	mov	r0, r6
 80097a2:	47c0      	blx	r8
 80097a4:	3001      	adds	r0, #1
 80097a6:	d020      	beq.n	80097ea <_printf_common+0xb2>
 80097a8:	6823      	ldr	r3, [r4, #0]
 80097aa:	68e5      	ldr	r5, [r4, #12]
 80097ac:	f8d9 2000 	ldr.w	r2, [r9]
 80097b0:	f003 0306 	and.w	r3, r3, #6
 80097b4:	2b04      	cmp	r3, #4
 80097b6:	bf08      	it	eq
 80097b8:	1aad      	subeq	r5, r5, r2
 80097ba:	68a3      	ldr	r3, [r4, #8]
 80097bc:	6922      	ldr	r2, [r4, #16]
 80097be:	bf0c      	ite	eq
 80097c0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80097c4:	2500      	movne	r5, #0
 80097c6:	4293      	cmp	r3, r2
 80097c8:	bfc4      	itt	gt
 80097ca:	1a9b      	subgt	r3, r3, r2
 80097cc:	18ed      	addgt	r5, r5, r3
 80097ce:	f04f 0900 	mov.w	r9, #0
 80097d2:	341a      	adds	r4, #26
 80097d4:	454d      	cmp	r5, r9
 80097d6:	d11a      	bne.n	800980e <_printf_common+0xd6>
 80097d8:	2000      	movs	r0, #0
 80097da:	e008      	b.n	80097ee <_printf_common+0xb6>
 80097dc:	2301      	movs	r3, #1
 80097de:	4652      	mov	r2, sl
 80097e0:	4639      	mov	r1, r7
 80097e2:	4630      	mov	r0, r6
 80097e4:	47c0      	blx	r8
 80097e6:	3001      	adds	r0, #1
 80097e8:	d103      	bne.n	80097f2 <_printf_common+0xba>
 80097ea:	f04f 30ff 	mov.w	r0, #4294967295
 80097ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80097f2:	3501      	adds	r5, #1
 80097f4:	e7c3      	b.n	800977e <_printf_common+0x46>
 80097f6:	18e1      	adds	r1, r4, r3
 80097f8:	1c5a      	adds	r2, r3, #1
 80097fa:	2030      	movs	r0, #48	; 0x30
 80097fc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009800:	4422      	add	r2, r4
 8009802:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009806:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800980a:	3302      	adds	r3, #2
 800980c:	e7c5      	b.n	800979a <_printf_common+0x62>
 800980e:	2301      	movs	r3, #1
 8009810:	4622      	mov	r2, r4
 8009812:	4639      	mov	r1, r7
 8009814:	4630      	mov	r0, r6
 8009816:	47c0      	blx	r8
 8009818:	3001      	adds	r0, #1
 800981a:	d0e6      	beq.n	80097ea <_printf_common+0xb2>
 800981c:	f109 0901 	add.w	r9, r9, #1
 8009820:	e7d8      	b.n	80097d4 <_printf_common+0x9c>
	...

08009824 <_printf_i>:
 8009824:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009828:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800982c:	460c      	mov	r4, r1
 800982e:	7e09      	ldrb	r1, [r1, #24]
 8009830:	b085      	sub	sp, #20
 8009832:	296e      	cmp	r1, #110	; 0x6e
 8009834:	4617      	mov	r7, r2
 8009836:	4606      	mov	r6, r0
 8009838:	4698      	mov	r8, r3
 800983a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800983c:	f000 80b3 	beq.w	80099a6 <_printf_i+0x182>
 8009840:	d822      	bhi.n	8009888 <_printf_i+0x64>
 8009842:	2963      	cmp	r1, #99	; 0x63
 8009844:	d036      	beq.n	80098b4 <_printf_i+0x90>
 8009846:	d80a      	bhi.n	800985e <_printf_i+0x3a>
 8009848:	2900      	cmp	r1, #0
 800984a:	f000 80b9 	beq.w	80099c0 <_printf_i+0x19c>
 800984e:	2958      	cmp	r1, #88	; 0x58
 8009850:	f000 8083 	beq.w	800995a <_printf_i+0x136>
 8009854:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009858:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800985c:	e032      	b.n	80098c4 <_printf_i+0xa0>
 800985e:	2964      	cmp	r1, #100	; 0x64
 8009860:	d001      	beq.n	8009866 <_printf_i+0x42>
 8009862:	2969      	cmp	r1, #105	; 0x69
 8009864:	d1f6      	bne.n	8009854 <_printf_i+0x30>
 8009866:	6820      	ldr	r0, [r4, #0]
 8009868:	6813      	ldr	r3, [r2, #0]
 800986a:	0605      	lsls	r5, r0, #24
 800986c:	f103 0104 	add.w	r1, r3, #4
 8009870:	d52a      	bpl.n	80098c8 <_printf_i+0xa4>
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	6011      	str	r1, [r2, #0]
 8009876:	2b00      	cmp	r3, #0
 8009878:	da03      	bge.n	8009882 <_printf_i+0x5e>
 800987a:	222d      	movs	r2, #45	; 0x2d
 800987c:	425b      	negs	r3, r3
 800987e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8009882:	486f      	ldr	r0, [pc, #444]	; (8009a40 <_printf_i+0x21c>)
 8009884:	220a      	movs	r2, #10
 8009886:	e039      	b.n	80098fc <_printf_i+0xd8>
 8009888:	2973      	cmp	r1, #115	; 0x73
 800988a:	f000 809d 	beq.w	80099c8 <_printf_i+0x1a4>
 800988e:	d808      	bhi.n	80098a2 <_printf_i+0x7e>
 8009890:	296f      	cmp	r1, #111	; 0x6f
 8009892:	d020      	beq.n	80098d6 <_printf_i+0xb2>
 8009894:	2970      	cmp	r1, #112	; 0x70
 8009896:	d1dd      	bne.n	8009854 <_printf_i+0x30>
 8009898:	6823      	ldr	r3, [r4, #0]
 800989a:	f043 0320 	orr.w	r3, r3, #32
 800989e:	6023      	str	r3, [r4, #0]
 80098a0:	e003      	b.n	80098aa <_printf_i+0x86>
 80098a2:	2975      	cmp	r1, #117	; 0x75
 80098a4:	d017      	beq.n	80098d6 <_printf_i+0xb2>
 80098a6:	2978      	cmp	r1, #120	; 0x78
 80098a8:	d1d4      	bne.n	8009854 <_printf_i+0x30>
 80098aa:	2378      	movs	r3, #120	; 0x78
 80098ac:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80098b0:	4864      	ldr	r0, [pc, #400]	; (8009a44 <_printf_i+0x220>)
 80098b2:	e055      	b.n	8009960 <_printf_i+0x13c>
 80098b4:	6813      	ldr	r3, [r2, #0]
 80098b6:	1d19      	adds	r1, r3, #4
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	6011      	str	r1, [r2, #0]
 80098bc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80098c0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80098c4:	2301      	movs	r3, #1
 80098c6:	e08c      	b.n	80099e2 <_printf_i+0x1be>
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	6011      	str	r1, [r2, #0]
 80098cc:	f010 0f40 	tst.w	r0, #64	; 0x40
 80098d0:	bf18      	it	ne
 80098d2:	b21b      	sxthne	r3, r3
 80098d4:	e7cf      	b.n	8009876 <_printf_i+0x52>
 80098d6:	6813      	ldr	r3, [r2, #0]
 80098d8:	6825      	ldr	r5, [r4, #0]
 80098da:	1d18      	adds	r0, r3, #4
 80098dc:	6010      	str	r0, [r2, #0]
 80098de:	0628      	lsls	r0, r5, #24
 80098e0:	d501      	bpl.n	80098e6 <_printf_i+0xc2>
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	e002      	b.n	80098ec <_printf_i+0xc8>
 80098e6:	0668      	lsls	r0, r5, #25
 80098e8:	d5fb      	bpl.n	80098e2 <_printf_i+0xbe>
 80098ea:	881b      	ldrh	r3, [r3, #0]
 80098ec:	4854      	ldr	r0, [pc, #336]	; (8009a40 <_printf_i+0x21c>)
 80098ee:	296f      	cmp	r1, #111	; 0x6f
 80098f0:	bf14      	ite	ne
 80098f2:	220a      	movne	r2, #10
 80098f4:	2208      	moveq	r2, #8
 80098f6:	2100      	movs	r1, #0
 80098f8:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80098fc:	6865      	ldr	r5, [r4, #4]
 80098fe:	60a5      	str	r5, [r4, #8]
 8009900:	2d00      	cmp	r5, #0
 8009902:	f2c0 8095 	blt.w	8009a30 <_printf_i+0x20c>
 8009906:	6821      	ldr	r1, [r4, #0]
 8009908:	f021 0104 	bic.w	r1, r1, #4
 800990c:	6021      	str	r1, [r4, #0]
 800990e:	2b00      	cmp	r3, #0
 8009910:	d13d      	bne.n	800998e <_printf_i+0x16a>
 8009912:	2d00      	cmp	r5, #0
 8009914:	f040 808e 	bne.w	8009a34 <_printf_i+0x210>
 8009918:	4665      	mov	r5, ip
 800991a:	2a08      	cmp	r2, #8
 800991c:	d10b      	bne.n	8009936 <_printf_i+0x112>
 800991e:	6823      	ldr	r3, [r4, #0]
 8009920:	07db      	lsls	r3, r3, #31
 8009922:	d508      	bpl.n	8009936 <_printf_i+0x112>
 8009924:	6923      	ldr	r3, [r4, #16]
 8009926:	6862      	ldr	r2, [r4, #4]
 8009928:	429a      	cmp	r2, r3
 800992a:	bfde      	ittt	le
 800992c:	2330      	movle	r3, #48	; 0x30
 800992e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009932:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009936:	ebac 0305 	sub.w	r3, ip, r5
 800993a:	6123      	str	r3, [r4, #16]
 800993c:	f8cd 8000 	str.w	r8, [sp]
 8009940:	463b      	mov	r3, r7
 8009942:	aa03      	add	r2, sp, #12
 8009944:	4621      	mov	r1, r4
 8009946:	4630      	mov	r0, r6
 8009948:	f7ff fef6 	bl	8009738 <_printf_common>
 800994c:	3001      	adds	r0, #1
 800994e:	d14d      	bne.n	80099ec <_printf_i+0x1c8>
 8009950:	f04f 30ff 	mov.w	r0, #4294967295
 8009954:	b005      	add	sp, #20
 8009956:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800995a:	4839      	ldr	r0, [pc, #228]	; (8009a40 <_printf_i+0x21c>)
 800995c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8009960:	6813      	ldr	r3, [r2, #0]
 8009962:	6821      	ldr	r1, [r4, #0]
 8009964:	1d1d      	adds	r5, r3, #4
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	6015      	str	r5, [r2, #0]
 800996a:	060a      	lsls	r2, r1, #24
 800996c:	d50b      	bpl.n	8009986 <_printf_i+0x162>
 800996e:	07ca      	lsls	r2, r1, #31
 8009970:	bf44      	itt	mi
 8009972:	f041 0120 	orrmi.w	r1, r1, #32
 8009976:	6021      	strmi	r1, [r4, #0]
 8009978:	b91b      	cbnz	r3, 8009982 <_printf_i+0x15e>
 800997a:	6822      	ldr	r2, [r4, #0]
 800997c:	f022 0220 	bic.w	r2, r2, #32
 8009980:	6022      	str	r2, [r4, #0]
 8009982:	2210      	movs	r2, #16
 8009984:	e7b7      	b.n	80098f6 <_printf_i+0xd2>
 8009986:	064d      	lsls	r5, r1, #25
 8009988:	bf48      	it	mi
 800998a:	b29b      	uxthmi	r3, r3
 800998c:	e7ef      	b.n	800996e <_printf_i+0x14a>
 800998e:	4665      	mov	r5, ip
 8009990:	fbb3 f1f2 	udiv	r1, r3, r2
 8009994:	fb02 3311 	mls	r3, r2, r1, r3
 8009998:	5cc3      	ldrb	r3, [r0, r3]
 800999a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800999e:	460b      	mov	r3, r1
 80099a0:	2900      	cmp	r1, #0
 80099a2:	d1f5      	bne.n	8009990 <_printf_i+0x16c>
 80099a4:	e7b9      	b.n	800991a <_printf_i+0xf6>
 80099a6:	6813      	ldr	r3, [r2, #0]
 80099a8:	6825      	ldr	r5, [r4, #0]
 80099aa:	6961      	ldr	r1, [r4, #20]
 80099ac:	1d18      	adds	r0, r3, #4
 80099ae:	6010      	str	r0, [r2, #0]
 80099b0:	0628      	lsls	r0, r5, #24
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	d501      	bpl.n	80099ba <_printf_i+0x196>
 80099b6:	6019      	str	r1, [r3, #0]
 80099b8:	e002      	b.n	80099c0 <_printf_i+0x19c>
 80099ba:	066a      	lsls	r2, r5, #25
 80099bc:	d5fb      	bpl.n	80099b6 <_printf_i+0x192>
 80099be:	8019      	strh	r1, [r3, #0]
 80099c0:	2300      	movs	r3, #0
 80099c2:	6123      	str	r3, [r4, #16]
 80099c4:	4665      	mov	r5, ip
 80099c6:	e7b9      	b.n	800993c <_printf_i+0x118>
 80099c8:	6813      	ldr	r3, [r2, #0]
 80099ca:	1d19      	adds	r1, r3, #4
 80099cc:	6011      	str	r1, [r2, #0]
 80099ce:	681d      	ldr	r5, [r3, #0]
 80099d0:	6862      	ldr	r2, [r4, #4]
 80099d2:	2100      	movs	r1, #0
 80099d4:	4628      	mov	r0, r5
 80099d6:	f7f6 fbfb 	bl	80001d0 <memchr>
 80099da:	b108      	cbz	r0, 80099e0 <_printf_i+0x1bc>
 80099dc:	1b40      	subs	r0, r0, r5
 80099de:	6060      	str	r0, [r4, #4]
 80099e0:	6863      	ldr	r3, [r4, #4]
 80099e2:	6123      	str	r3, [r4, #16]
 80099e4:	2300      	movs	r3, #0
 80099e6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80099ea:	e7a7      	b.n	800993c <_printf_i+0x118>
 80099ec:	6923      	ldr	r3, [r4, #16]
 80099ee:	462a      	mov	r2, r5
 80099f0:	4639      	mov	r1, r7
 80099f2:	4630      	mov	r0, r6
 80099f4:	47c0      	blx	r8
 80099f6:	3001      	adds	r0, #1
 80099f8:	d0aa      	beq.n	8009950 <_printf_i+0x12c>
 80099fa:	6823      	ldr	r3, [r4, #0]
 80099fc:	079b      	lsls	r3, r3, #30
 80099fe:	d413      	bmi.n	8009a28 <_printf_i+0x204>
 8009a00:	68e0      	ldr	r0, [r4, #12]
 8009a02:	9b03      	ldr	r3, [sp, #12]
 8009a04:	4298      	cmp	r0, r3
 8009a06:	bfb8      	it	lt
 8009a08:	4618      	movlt	r0, r3
 8009a0a:	e7a3      	b.n	8009954 <_printf_i+0x130>
 8009a0c:	2301      	movs	r3, #1
 8009a0e:	464a      	mov	r2, r9
 8009a10:	4639      	mov	r1, r7
 8009a12:	4630      	mov	r0, r6
 8009a14:	47c0      	blx	r8
 8009a16:	3001      	adds	r0, #1
 8009a18:	d09a      	beq.n	8009950 <_printf_i+0x12c>
 8009a1a:	3501      	adds	r5, #1
 8009a1c:	68e3      	ldr	r3, [r4, #12]
 8009a1e:	9a03      	ldr	r2, [sp, #12]
 8009a20:	1a9b      	subs	r3, r3, r2
 8009a22:	42ab      	cmp	r3, r5
 8009a24:	dcf2      	bgt.n	8009a0c <_printf_i+0x1e8>
 8009a26:	e7eb      	b.n	8009a00 <_printf_i+0x1dc>
 8009a28:	2500      	movs	r5, #0
 8009a2a:	f104 0919 	add.w	r9, r4, #25
 8009a2e:	e7f5      	b.n	8009a1c <_printf_i+0x1f8>
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	d1ac      	bne.n	800998e <_printf_i+0x16a>
 8009a34:	7803      	ldrb	r3, [r0, #0]
 8009a36:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009a3a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009a3e:	e76c      	b.n	800991a <_printf_i+0xf6>
 8009a40:	0800a079 	.word	0x0800a079
 8009a44:	0800a08a 	.word	0x0800a08a

08009a48 <_putc_r>:
 8009a48:	b570      	push	{r4, r5, r6, lr}
 8009a4a:	460d      	mov	r5, r1
 8009a4c:	4614      	mov	r4, r2
 8009a4e:	4606      	mov	r6, r0
 8009a50:	b118      	cbz	r0, 8009a5a <_putc_r+0x12>
 8009a52:	6983      	ldr	r3, [r0, #24]
 8009a54:	b90b      	cbnz	r3, 8009a5a <_putc_r+0x12>
 8009a56:	f7ff fc3f 	bl	80092d8 <__sinit>
 8009a5a:	4b13      	ldr	r3, [pc, #76]	; (8009aa8 <_putc_r+0x60>)
 8009a5c:	429c      	cmp	r4, r3
 8009a5e:	d112      	bne.n	8009a86 <_putc_r+0x3e>
 8009a60:	6874      	ldr	r4, [r6, #4]
 8009a62:	68a3      	ldr	r3, [r4, #8]
 8009a64:	3b01      	subs	r3, #1
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	60a3      	str	r3, [r4, #8]
 8009a6a:	da16      	bge.n	8009a9a <_putc_r+0x52>
 8009a6c:	69a2      	ldr	r2, [r4, #24]
 8009a6e:	4293      	cmp	r3, r2
 8009a70:	db02      	blt.n	8009a78 <_putc_r+0x30>
 8009a72:	b2eb      	uxtb	r3, r5
 8009a74:	2b0a      	cmp	r3, #10
 8009a76:	d110      	bne.n	8009a9a <_putc_r+0x52>
 8009a78:	4622      	mov	r2, r4
 8009a7a:	4629      	mov	r1, r5
 8009a7c:	4630      	mov	r0, r6
 8009a7e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009a82:	f7ff ba79 	b.w	8008f78 <__swbuf_r>
 8009a86:	4b09      	ldr	r3, [pc, #36]	; (8009aac <_putc_r+0x64>)
 8009a88:	429c      	cmp	r4, r3
 8009a8a:	d101      	bne.n	8009a90 <_putc_r+0x48>
 8009a8c:	68b4      	ldr	r4, [r6, #8]
 8009a8e:	e7e8      	b.n	8009a62 <_putc_r+0x1a>
 8009a90:	4b07      	ldr	r3, [pc, #28]	; (8009ab0 <_putc_r+0x68>)
 8009a92:	429c      	cmp	r4, r3
 8009a94:	bf08      	it	eq
 8009a96:	68f4      	ldreq	r4, [r6, #12]
 8009a98:	e7e3      	b.n	8009a62 <_putc_r+0x1a>
 8009a9a:	6823      	ldr	r3, [r4, #0]
 8009a9c:	1c5a      	adds	r2, r3, #1
 8009a9e:	6022      	str	r2, [r4, #0]
 8009aa0:	701d      	strb	r5, [r3, #0]
 8009aa2:	b2e8      	uxtb	r0, r5
 8009aa4:	bd70      	pop	{r4, r5, r6, pc}
 8009aa6:	bf00      	nop
 8009aa8:	0800a028 	.word	0x0800a028
 8009aac:	0800a048 	.word	0x0800a048
 8009ab0:	0800a008 	.word	0x0800a008

08009ab4 <__sread>:
 8009ab4:	b510      	push	{r4, lr}
 8009ab6:	460c      	mov	r4, r1
 8009ab8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009abc:	f000 f894 	bl	8009be8 <_read_r>
 8009ac0:	2800      	cmp	r0, #0
 8009ac2:	bfab      	itete	ge
 8009ac4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009ac6:	89a3      	ldrhlt	r3, [r4, #12]
 8009ac8:	181b      	addge	r3, r3, r0
 8009aca:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009ace:	bfac      	ite	ge
 8009ad0:	6563      	strge	r3, [r4, #84]	; 0x54
 8009ad2:	81a3      	strhlt	r3, [r4, #12]
 8009ad4:	bd10      	pop	{r4, pc}

08009ad6 <__swrite>:
 8009ad6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009ada:	461f      	mov	r7, r3
 8009adc:	898b      	ldrh	r3, [r1, #12]
 8009ade:	05db      	lsls	r3, r3, #23
 8009ae0:	4605      	mov	r5, r0
 8009ae2:	460c      	mov	r4, r1
 8009ae4:	4616      	mov	r6, r2
 8009ae6:	d505      	bpl.n	8009af4 <__swrite+0x1e>
 8009ae8:	2302      	movs	r3, #2
 8009aea:	2200      	movs	r2, #0
 8009aec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009af0:	f000 f868 	bl	8009bc4 <_lseek_r>
 8009af4:	89a3      	ldrh	r3, [r4, #12]
 8009af6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009afa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009afe:	81a3      	strh	r3, [r4, #12]
 8009b00:	4632      	mov	r2, r6
 8009b02:	463b      	mov	r3, r7
 8009b04:	4628      	mov	r0, r5
 8009b06:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009b0a:	f000 b817 	b.w	8009b3c <_write_r>

08009b0e <__sseek>:
 8009b0e:	b510      	push	{r4, lr}
 8009b10:	460c      	mov	r4, r1
 8009b12:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009b16:	f000 f855 	bl	8009bc4 <_lseek_r>
 8009b1a:	1c43      	adds	r3, r0, #1
 8009b1c:	89a3      	ldrh	r3, [r4, #12]
 8009b1e:	bf15      	itete	ne
 8009b20:	6560      	strne	r0, [r4, #84]	; 0x54
 8009b22:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009b26:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009b2a:	81a3      	strheq	r3, [r4, #12]
 8009b2c:	bf18      	it	ne
 8009b2e:	81a3      	strhne	r3, [r4, #12]
 8009b30:	bd10      	pop	{r4, pc}

08009b32 <__sclose>:
 8009b32:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009b36:	f000 b813 	b.w	8009b60 <_close_r>
	...

08009b3c <_write_r>:
 8009b3c:	b538      	push	{r3, r4, r5, lr}
 8009b3e:	4c07      	ldr	r4, [pc, #28]	; (8009b5c <_write_r+0x20>)
 8009b40:	4605      	mov	r5, r0
 8009b42:	4608      	mov	r0, r1
 8009b44:	4611      	mov	r1, r2
 8009b46:	2200      	movs	r2, #0
 8009b48:	6022      	str	r2, [r4, #0]
 8009b4a:	461a      	mov	r2, r3
 8009b4c:	f7fe fb0e 	bl	800816c <_write>
 8009b50:	1c43      	adds	r3, r0, #1
 8009b52:	d102      	bne.n	8009b5a <_write_r+0x1e>
 8009b54:	6823      	ldr	r3, [r4, #0]
 8009b56:	b103      	cbz	r3, 8009b5a <_write_r+0x1e>
 8009b58:	602b      	str	r3, [r5, #0]
 8009b5a:	bd38      	pop	{r3, r4, r5, pc}
 8009b5c:	20001b70 	.word	0x20001b70

08009b60 <_close_r>:
 8009b60:	b538      	push	{r3, r4, r5, lr}
 8009b62:	4c06      	ldr	r4, [pc, #24]	; (8009b7c <_close_r+0x1c>)
 8009b64:	2300      	movs	r3, #0
 8009b66:	4605      	mov	r5, r0
 8009b68:	4608      	mov	r0, r1
 8009b6a:	6023      	str	r3, [r4, #0]
 8009b6c:	f7fe fb1a 	bl	80081a4 <_close>
 8009b70:	1c43      	adds	r3, r0, #1
 8009b72:	d102      	bne.n	8009b7a <_close_r+0x1a>
 8009b74:	6823      	ldr	r3, [r4, #0]
 8009b76:	b103      	cbz	r3, 8009b7a <_close_r+0x1a>
 8009b78:	602b      	str	r3, [r5, #0]
 8009b7a:	bd38      	pop	{r3, r4, r5, pc}
 8009b7c:	20001b70 	.word	0x20001b70

08009b80 <_fstat_r>:
 8009b80:	b538      	push	{r3, r4, r5, lr}
 8009b82:	4c07      	ldr	r4, [pc, #28]	; (8009ba0 <_fstat_r+0x20>)
 8009b84:	2300      	movs	r3, #0
 8009b86:	4605      	mov	r5, r0
 8009b88:	4608      	mov	r0, r1
 8009b8a:	4611      	mov	r1, r2
 8009b8c:	6023      	str	r3, [r4, #0]
 8009b8e:	f7fe fb15 	bl	80081bc <_fstat>
 8009b92:	1c43      	adds	r3, r0, #1
 8009b94:	d102      	bne.n	8009b9c <_fstat_r+0x1c>
 8009b96:	6823      	ldr	r3, [r4, #0]
 8009b98:	b103      	cbz	r3, 8009b9c <_fstat_r+0x1c>
 8009b9a:	602b      	str	r3, [r5, #0]
 8009b9c:	bd38      	pop	{r3, r4, r5, pc}
 8009b9e:	bf00      	nop
 8009ba0:	20001b70 	.word	0x20001b70

08009ba4 <_isatty_r>:
 8009ba4:	b538      	push	{r3, r4, r5, lr}
 8009ba6:	4c06      	ldr	r4, [pc, #24]	; (8009bc0 <_isatty_r+0x1c>)
 8009ba8:	2300      	movs	r3, #0
 8009baa:	4605      	mov	r5, r0
 8009bac:	4608      	mov	r0, r1
 8009bae:	6023      	str	r3, [r4, #0]
 8009bb0:	f7fe fb14 	bl	80081dc <_isatty>
 8009bb4:	1c43      	adds	r3, r0, #1
 8009bb6:	d102      	bne.n	8009bbe <_isatty_r+0x1a>
 8009bb8:	6823      	ldr	r3, [r4, #0]
 8009bba:	b103      	cbz	r3, 8009bbe <_isatty_r+0x1a>
 8009bbc:	602b      	str	r3, [r5, #0]
 8009bbe:	bd38      	pop	{r3, r4, r5, pc}
 8009bc0:	20001b70 	.word	0x20001b70

08009bc4 <_lseek_r>:
 8009bc4:	b538      	push	{r3, r4, r5, lr}
 8009bc6:	4c07      	ldr	r4, [pc, #28]	; (8009be4 <_lseek_r+0x20>)
 8009bc8:	4605      	mov	r5, r0
 8009bca:	4608      	mov	r0, r1
 8009bcc:	4611      	mov	r1, r2
 8009bce:	2200      	movs	r2, #0
 8009bd0:	6022      	str	r2, [r4, #0]
 8009bd2:	461a      	mov	r2, r3
 8009bd4:	f7fe fb0d 	bl	80081f2 <_lseek>
 8009bd8:	1c43      	adds	r3, r0, #1
 8009bda:	d102      	bne.n	8009be2 <_lseek_r+0x1e>
 8009bdc:	6823      	ldr	r3, [r4, #0]
 8009bde:	b103      	cbz	r3, 8009be2 <_lseek_r+0x1e>
 8009be0:	602b      	str	r3, [r5, #0]
 8009be2:	bd38      	pop	{r3, r4, r5, pc}
 8009be4:	20001b70 	.word	0x20001b70

08009be8 <_read_r>:
 8009be8:	b538      	push	{r3, r4, r5, lr}
 8009bea:	4c07      	ldr	r4, [pc, #28]	; (8009c08 <_read_r+0x20>)
 8009bec:	4605      	mov	r5, r0
 8009bee:	4608      	mov	r0, r1
 8009bf0:	4611      	mov	r1, r2
 8009bf2:	2200      	movs	r2, #0
 8009bf4:	6022      	str	r2, [r4, #0]
 8009bf6:	461a      	mov	r2, r3
 8009bf8:	f7fe fa9b 	bl	8008132 <_read>
 8009bfc:	1c43      	adds	r3, r0, #1
 8009bfe:	d102      	bne.n	8009c06 <_read_r+0x1e>
 8009c00:	6823      	ldr	r3, [r4, #0]
 8009c02:	b103      	cbz	r3, 8009c06 <_read_r+0x1e>
 8009c04:	602b      	str	r3, [r5, #0]
 8009c06:	bd38      	pop	{r3, r4, r5, pc}
 8009c08:	20001b70 	.word	0x20001b70

08009c0c <_init>:
 8009c0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c0e:	bf00      	nop
 8009c10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009c12:	bc08      	pop	{r3}
 8009c14:	469e      	mov	lr, r3
 8009c16:	4770      	bx	lr

08009c18 <_fini>:
 8009c18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c1a:	bf00      	nop
 8009c1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009c1e:	bc08      	pop	{r3}
 8009c20:	469e      	mov	lr, r3
 8009c22:	4770      	bx	lr
