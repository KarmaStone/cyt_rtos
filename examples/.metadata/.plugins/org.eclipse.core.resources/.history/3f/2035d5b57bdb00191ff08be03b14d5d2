/* Includes ------------------------------------------------------------------*/
#include <stdio.h>
#include "stm32l4xx_hal.h"
#include "main.h"
#include "cmsis_os.h"
#include "task.h"
#include "init_d.h"
#include "log.h"
#include "miscdevice.h"
#include "time.h"

#define	TAG	"main"
//#include "cmb_def.h"
//#include "version.h"
//#include "cm_backtrace.h"
//#include "watchdog.h"

extern UART_HandleTypeDef huart1;
extern void serial1_hal_init(void);
#define HAL_Debug_init serial1_hal_init

osThreadId startup_handle;

uint8_t chipUid[12];

void HAL_GetUID(void)
{
	uint8_t i;
	uint8_t *pUID = (uint8_t *) (UID_BASE);

	for (i = 0; i != 12; i++)
	{
		chipUid[i] = *pUID++;
	}
}
/**
 * @brief  show system id ,and clock
 * @retval int
 */

void prtsrce_sysinf(void)
{
	uint8_t i = 0;

	printf("*****************************************************\n");
	printf(" *\tTerminus lock use freertos ,version:V10.0.1\n");
	printf(
			" *\tBy terminus hwteam(BeiJing), project started in December 2018.\n");
	printf(" *\tBulid data=%s %s\n", __DATE__, __TIME__);
	//printf(" *\tCodeing version =%s\n" ,PRG_VERSION);
	//printf(" *\tSoft version =%s\n" ,SOFT_VERSION);
	//printf(" *\tHardware version =%s\n" ,HARD_VERSION);
	//printf(" *\tHardfault debug tool version =%s\n" ,CMB_SW_VERSION);
	printf(" *\tCPU:STM32L471REXX\n");
	printf(" *\tHCLK:%ldHz\n", HAL_RCC_GetHCLKFreq());
	printf(" *\tPCLK1:%ldHz\n", HAL_RCC_GetPCLK1Freq());
	printf(" *\tPCLK2:%ldHz\n", HAL_RCC_GetPCLK2Freq());
	printf(" *\tHAL version:0x%lX\n", HAL_GetHalVersion());
	printf(" *\tDevice revision ID:0x%lX\n", HAL_GetREVID());
	printf(" *\tDevice ID:0x%lX\n", HAL_GetDEVID());
	printf(" *\tUnique device ID:0x");
	for (i = 0; i < 12; i++)
	{
		printf("%X", chipUid[i]);
	}
	printf("\n");
	printf("*****************************************************");
	printf("\n\n");
}

DEV_HAND nvfd;
void startup_task(void *argument)
{
	/* memory , plarform , components ...init*/
	driver_init();

	/* task init*/
	_setup();

	CYT_LOGE(TAG, "start up task\n");
	CYT_LOGW(TAG, "start up task\n");
	CYT_LOGI(TAG, "start up task\n");
	CYT_LOGD(TAG, "start up task\n");

	while (1)
	{
		//feed_dog();
		osDelay(20000);
	}
}

/**
 * @brief  creat start task, module init must into task
 * @retval int
 */
void startup(void)
{
	//osThreadDef(stup_task, startup_task, osPriorityNormal,    0, 256);
	//startup_handle = osThreadCreate(osThread(stup_task), NULL);

	const osThreadAttr_t defaultTask_attributes =
	{ .name = "defaultTask", .priority = (osPriority_t) osPriorityNormal,
			.stack_size = 256 };
	startup_handle = osThreadNew(startup_task, NULL, &defaultTask_attributes);

}

/**
 * @brief  The application entry point.
 * @retval int
 */

int main(void)
{
	/* Output error message for HARDFAULT*/
	//HAL_HardfaultDebug_init();
	/* reset of all peripherals, Initializes the Flash interface and the Systick. */

	CYT_LOG_ADD(TAG, CYT_LOG_DEBUG);

	HAL_Init();

	/* Get chip uid*/
	HAL_GetUID();

	/* Configure the system clock */
	HAL_Sysclk_Init();

	/* Config pwr clock*/
	//HAL_Pwr_Init();
	/* Init serial for printf port*/
	HAL_Debug_init();

	/* Call init function for freertos objects (in freertos.c) */
	//startup();
	/* Printf system info ,clock device version...*/
	prtsrce_sysinf();

	/* Start scheduler */
	osKernelStart();

	/* We should never get here as control is now taken by the scheduler */

	/* Infinite loop */
	while (1)
		;
}

/**
 * @brief  idle hook
 * @retval None
 */
void vApplicationIdleHook(void)
{

}
/**
 * @brief  Overflow stack
 * @retval None
 */
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
	//log(ERR, "Into vApplicationStackOverflowHook , task name = %s .\n", pcTaskName);
}

/**
 * @brief  malloc fail
 * @retval None
 */
void vApplicationMallocFailedHook(void)
{
	//log(ERR, "Into vApplicationMallocFailedHook\n");
}

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
	/* User can add his own implementation to report the HAL error return state */
	//log(ERR, "Into Error_Handler , file=%s ,line=%d.\n", file ,line);
}

#ifdef USE_FULL_ASSERT
/**
 * @brief  Reports the name of the source file and the source line number
 *         where the assert_param error has occurred.
 * @param  file: pointer to the source file name
 * @param  line: assert_param error line source number
 * @retval None
 */
extern void after_sleep(void);
void assert_failed(char *file, uint32_t line)
{
	//after_sleep();
	//printf("Wrong parameters value: file %s on line %d\r\n", file, line);
}
#endif /* USE_FULL_ASSERT */

#ifdef __GNUC__
/* With GCC/RAISONANCE, small printf (option LD Linker->Libraries->Small printf
 set to 'Yes') calls __io_putchar() */
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */
PUTCHAR_PROTOTYPE
{
	if (ch == '\n')
	{
		uint8_t enter = '\r';
		HAL_UART_Transmit(&huart1, &enter, 1, 5000);
	}

	if ((HAL_UART_Transmit(&huart1, (uint8_t *) &ch, 1, 5000)) != HAL_OK)
	{
		return -1;
	}
	return ch;
}

/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/
