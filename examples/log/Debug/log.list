
log.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007528  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d0  080076b8  080076b8  000176b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007788  08007788  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08007788  08007788  00017788  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007790  08007790  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007790  08007790  00017790  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007794  08007794  00017794  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08007798  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001e04  20000074  0800780c  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001e78  0800780c  00021e78  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   000229fb  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000040aa  00000000  00000000  00042a9f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001b00  00000000  00000000  00046b50  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001928  00000000  00000000  00048650  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00028c09  00000000  00000000  00049f78  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00015ea0  00000000  00000000  00072b81  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000f50cf  00000000  00000000  00088a21  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0017daf0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007714  00000000  00000000  0017db6c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080076a0 	.word	0x080076a0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	080076a0 	.word	0x080076a0

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b972 	b.w	80004cc <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9e08      	ldr	r6, [sp, #32]
 8000206:	4604      	mov	r4, r0
 8000208:	4688      	mov	r8, r1
 800020a:	2b00      	cmp	r3, #0
 800020c:	d14b      	bne.n	80002a6 <__udivmoddi4+0xa6>
 800020e:	428a      	cmp	r2, r1
 8000210:	4615      	mov	r5, r2
 8000212:	d967      	bls.n	80002e4 <__udivmoddi4+0xe4>
 8000214:	fab2 f282 	clz	r2, r2
 8000218:	b14a      	cbz	r2, 800022e <__udivmoddi4+0x2e>
 800021a:	f1c2 0720 	rsb	r7, r2, #32
 800021e:	fa01 f302 	lsl.w	r3, r1, r2
 8000222:	fa20 f707 	lsr.w	r7, r0, r7
 8000226:	4095      	lsls	r5, r2
 8000228:	ea47 0803 	orr.w	r8, r7, r3
 800022c:	4094      	lsls	r4, r2
 800022e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000232:	0c23      	lsrs	r3, r4, #16
 8000234:	fbb8 f7fe 	udiv	r7, r8, lr
 8000238:	fa1f fc85 	uxth.w	ip, r5
 800023c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000240:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000244:	fb07 f10c 	mul.w	r1, r7, ip
 8000248:	4299      	cmp	r1, r3
 800024a:	d909      	bls.n	8000260 <__udivmoddi4+0x60>
 800024c:	18eb      	adds	r3, r5, r3
 800024e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000252:	f080 811b 	bcs.w	800048c <__udivmoddi4+0x28c>
 8000256:	4299      	cmp	r1, r3
 8000258:	f240 8118 	bls.w	800048c <__udivmoddi4+0x28c>
 800025c:	3f02      	subs	r7, #2
 800025e:	442b      	add	r3, r5
 8000260:	1a5b      	subs	r3, r3, r1
 8000262:	b2a4      	uxth	r4, r4
 8000264:	fbb3 f0fe 	udiv	r0, r3, lr
 8000268:	fb0e 3310 	mls	r3, lr, r0, r3
 800026c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000270:	fb00 fc0c 	mul.w	ip, r0, ip
 8000274:	45a4      	cmp	ip, r4
 8000276:	d909      	bls.n	800028c <__udivmoddi4+0x8c>
 8000278:	192c      	adds	r4, r5, r4
 800027a:	f100 33ff 	add.w	r3, r0, #4294967295
 800027e:	f080 8107 	bcs.w	8000490 <__udivmoddi4+0x290>
 8000282:	45a4      	cmp	ip, r4
 8000284:	f240 8104 	bls.w	8000490 <__udivmoddi4+0x290>
 8000288:	3802      	subs	r0, #2
 800028a:	442c      	add	r4, r5
 800028c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000290:	eba4 040c 	sub.w	r4, r4, ip
 8000294:	2700      	movs	r7, #0
 8000296:	b11e      	cbz	r6, 80002a0 <__udivmoddi4+0xa0>
 8000298:	40d4      	lsrs	r4, r2
 800029a:	2300      	movs	r3, #0
 800029c:	e9c6 4300 	strd	r4, r3, [r6]
 80002a0:	4639      	mov	r1, r7
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	428b      	cmp	r3, r1
 80002a8:	d909      	bls.n	80002be <__udivmoddi4+0xbe>
 80002aa:	2e00      	cmp	r6, #0
 80002ac:	f000 80eb 	beq.w	8000486 <__udivmoddi4+0x286>
 80002b0:	2700      	movs	r7, #0
 80002b2:	e9c6 0100 	strd	r0, r1, [r6]
 80002b6:	4638      	mov	r0, r7
 80002b8:	4639      	mov	r1, r7
 80002ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002be:	fab3 f783 	clz	r7, r3
 80002c2:	2f00      	cmp	r7, #0
 80002c4:	d147      	bne.n	8000356 <__udivmoddi4+0x156>
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xd0>
 80002ca:	4282      	cmp	r2, r0
 80002cc:	f200 80fa 	bhi.w	80004c4 <__udivmoddi4+0x2c4>
 80002d0:	1a84      	subs	r4, r0, r2
 80002d2:	eb61 0303 	sbc.w	r3, r1, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	4698      	mov	r8, r3
 80002da:	2e00      	cmp	r6, #0
 80002dc:	d0e0      	beq.n	80002a0 <__udivmoddi4+0xa0>
 80002de:	e9c6 4800 	strd	r4, r8, [r6]
 80002e2:	e7dd      	b.n	80002a0 <__udivmoddi4+0xa0>
 80002e4:	b902      	cbnz	r2, 80002e8 <__udivmoddi4+0xe8>
 80002e6:	deff      	udf	#255	; 0xff
 80002e8:	fab2 f282 	clz	r2, r2
 80002ec:	2a00      	cmp	r2, #0
 80002ee:	f040 808f 	bne.w	8000410 <__udivmoddi4+0x210>
 80002f2:	1b49      	subs	r1, r1, r5
 80002f4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f8:	fa1f f885 	uxth.w	r8, r5
 80002fc:	2701      	movs	r7, #1
 80002fe:	fbb1 fcfe 	udiv	ip, r1, lr
 8000302:	0c23      	lsrs	r3, r4, #16
 8000304:	fb0e 111c 	mls	r1, lr, ip, r1
 8000308:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800030c:	fb08 f10c 	mul.w	r1, r8, ip
 8000310:	4299      	cmp	r1, r3
 8000312:	d907      	bls.n	8000324 <__udivmoddi4+0x124>
 8000314:	18eb      	adds	r3, r5, r3
 8000316:	f10c 30ff 	add.w	r0, ip, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x122>
 800031c:	4299      	cmp	r1, r3
 800031e:	f200 80cd 	bhi.w	80004bc <__udivmoddi4+0x2bc>
 8000322:	4684      	mov	ip, r0
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	b2a3      	uxth	r3, r4
 8000328:	fbb1 f0fe 	udiv	r0, r1, lr
 800032c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000330:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000334:	fb08 f800 	mul.w	r8, r8, r0
 8000338:	45a0      	cmp	r8, r4
 800033a:	d907      	bls.n	800034c <__udivmoddi4+0x14c>
 800033c:	192c      	adds	r4, r5, r4
 800033e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x14a>
 8000344:	45a0      	cmp	r8, r4
 8000346:	f200 80b6 	bhi.w	80004b6 <__udivmoddi4+0x2b6>
 800034a:	4618      	mov	r0, r3
 800034c:	eba4 0408 	sub.w	r4, r4, r8
 8000350:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000354:	e79f      	b.n	8000296 <__udivmoddi4+0x96>
 8000356:	f1c7 0c20 	rsb	ip, r7, #32
 800035a:	40bb      	lsls	r3, r7
 800035c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000360:	ea4e 0e03 	orr.w	lr, lr, r3
 8000364:	fa01 f407 	lsl.w	r4, r1, r7
 8000368:	fa20 f50c 	lsr.w	r5, r0, ip
 800036c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000370:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000374:	4325      	orrs	r5, r4
 8000376:	fbb3 f9f8 	udiv	r9, r3, r8
 800037a:	0c2c      	lsrs	r4, r5, #16
 800037c:	fb08 3319 	mls	r3, r8, r9, r3
 8000380:	fa1f fa8e 	uxth.w	sl, lr
 8000384:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000388:	fb09 f40a 	mul.w	r4, r9, sl
 800038c:	429c      	cmp	r4, r3
 800038e:	fa02 f207 	lsl.w	r2, r2, r7
 8000392:	fa00 f107 	lsl.w	r1, r0, r7
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b0>
 8000398:	eb1e 0303 	adds.w	r3, lr, r3
 800039c:	f109 30ff 	add.w	r0, r9, #4294967295
 80003a0:	f080 8087 	bcs.w	80004b2 <__udivmoddi4+0x2b2>
 80003a4:	429c      	cmp	r4, r3
 80003a6:	f240 8084 	bls.w	80004b2 <__udivmoddi4+0x2b2>
 80003aa:	f1a9 0902 	sub.w	r9, r9, #2
 80003ae:	4473      	add	r3, lr
 80003b0:	1b1b      	subs	r3, r3, r4
 80003b2:	b2ad      	uxth	r5, r5
 80003b4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b8:	fb08 3310 	mls	r3, r8, r0, r3
 80003bc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003c0:	fb00 fa0a 	mul.w	sl, r0, sl
 80003c4:	45a2      	cmp	sl, r4
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1da>
 80003c8:	eb1e 0404 	adds.w	r4, lr, r4
 80003cc:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d0:	d26b      	bcs.n	80004aa <__udivmoddi4+0x2aa>
 80003d2:	45a2      	cmp	sl, r4
 80003d4:	d969      	bls.n	80004aa <__udivmoddi4+0x2aa>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4474      	add	r4, lr
 80003da:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003de:	fba0 8902 	umull	r8, r9, r0, r2
 80003e2:	eba4 040a 	sub.w	r4, r4, sl
 80003e6:	454c      	cmp	r4, r9
 80003e8:	46c2      	mov	sl, r8
 80003ea:	464b      	mov	r3, r9
 80003ec:	d354      	bcc.n	8000498 <__udivmoddi4+0x298>
 80003ee:	d051      	beq.n	8000494 <__udivmoddi4+0x294>
 80003f0:	2e00      	cmp	r6, #0
 80003f2:	d069      	beq.n	80004c8 <__udivmoddi4+0x2c8>
 80003f4:	ebb1 050a 	subs.w	r5, r1, sl
 80003f8:	eb64 0403 	sbc.w	r4, r4, r3
 80003fc:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000400:	40fd      	lsrs	r5, r7
 8000402:	40fc      	lsrs	r4, r7
 8000404:	ea4c 0505 	orr.w	r5, ip, r5
 8000408:	e9c6 5400 	strd	r5, r4, [r6]
 800040c:	2700      	movs	r7, #0
 800040e:	e747      	b.n	80002a0 <__udivmoddi4+0xa0>
 8000410:	f1c2 0320 	rsb	r3, r2, #32
 8000414:	fa20 f703 	lsr.w	r7, r0, r3
 8000418:	4095      	lsls	r5, r2
 800041a:	fa01 f002 	lsl.w	r0, r1, r2
 800041e:	fa21 f303 	lsr.w	r3, r1, r3
 8000422:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000426:	4338      	orrs	r0, r7
 8000428:	0c01      	lsrs	r1, r0, #16
 800042a:	fbb3 f7fe 	udiv	r7, r3, lr
 800042e:	fa1f f885 	uxth.w	r8, r5
 8000432:	fb0e 3317 	mls	r3, lr, r7, r3
 8000436:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800043a:	fb07 f308 	mul.w	r3, r7, r8
 800043e:	428b      	cmp	r3, r1
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d907      	bls.n	8000456 <__udivmoddi4+0x256>
 8000446:	1869      	adds	r1, r5, r1
 8000448:	f107 3cff 	add.w	ip, r7, #4294967295
 800044c:	d22f      	bcs.n	80004ae <__udivmoddi4+0x2ae>
 800044e:	428b      	cmp	r3, r1
 8000450:	d92d      	bls.n	80004ae <__udivmoddi4+0x2ae>
 8000452:	3f02      	subs	r7, #2
 8000454:	4429      	add	r1, r5
 8000456:	1acb      	subs	r3, r1, r3
 8000458:	b281      	uxth	r1, r0
 800045a:	fbb3 f0fe 	udiv	r0, r3, lr
 800045e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000462:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000466:	fb00 f308 	mul.w	r3, r0, r8
 800046a:	428b      	cmp	r3, r1
 800046c:	d907      	bls.n	800047e <__udivmoddi4+0x27e>
 800046e:	1869      	adds	r1, r5, r1
 8000470:	f100 3cff 	add.w	ip, r0, #4294967295
 8000474:	d217      	bcs.n	80004a6 <__udivmoddi4+0x2a6>
 8000476:	428b      	cmp	r3, r1
 8000478:	d915      	bls.n	80004a6 <__udivmoddi4+0x2a6>
 800047a:	3802      	subs	r0, #2
 800047c:	4429      	add	r1, r5
 800047e:	1ac9      	subs	r1, r1, r3
 8000480:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000484:	e73b      	b.n	80002fe <__udivmoddi4+0xfe>
 8000486:	4637      	mov	r7, r6
 8000488:	4630      	mov	r0, r6
 800048a:	e709      	b.n	80002a0 <__udivmoddi4+0xa0>
 800048c:	4607      	mov	r7, r0
 800048e:	e6e7      	b.n	8000260 <__udivmoddi4+0x60>
 8000490:	4618      	mov	r0, r3
 8000492:	e6fb      	b.n	800028c <__udivmoddi4+0x8c>
 8000494:	4541      	cmp	r1, r8
 8000496:	d2ab      	bcs.n	80003f0 <__udivmoddi4+0x1f0>
 8000498:	ebb8 0a02 	subs.w	sl, r8, r2
 800049c:	eb69 020e 	sbc.w	r2, r9, lr
 80004a0:	3801      	subs	r0, #1
 80004a2:	4613      	mov	r3, r2
 80004a4:	e7a4      	b.n	80003f0 <__udivmoddi4+0x1f0>
 80004a6:	4660      	mov	r0, ip
 80004a8:	e7e9      	b.n	800047e <__udivmoddi4+0x27e>
 80004aa:	4618      	mov	r0, r3
 80004ac:	e795      	b.n	80003da <__udivmoddi4+0x1da>
 80004ae:	4667      	mov	r7, ip
 80004b0:	e7d1      	b.n	8000456 <__udivmoddi4+0x256>
 80004b2:	4681      	mov	r9, r0
 80004b4:	e77c      	b.n	80003b0 <__udivmoddi4+0x1b0>
 80004b6:	3802      	subs	r0, #2
 80004b8:	442c      	add	r4, r5
 80004ba:	e747      	b.n	800034c <__udivmoddi4+0x14c>
 80004bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c0:	442b      	add	r3, r5
 80004c2:	e72f      	b.n	8000324 <__udivmoddi4+0x124>
 80004c4:	4638      	mov	r0, r7
 80004c6:	e708      	b.n	80002da <__udivmoddi4+0xda>
 80004c8:	4637      	mov	r7, r6
 80004ca:	e6e9      	b.n	80002a0 <__udivmoddi4+0xa0>

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b082      	sub	sp, #8
 80004d4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80004d6:	2300      	movs	r3, #0
 80004d8:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80004da:	2003      	movs	r0, #3
 80004dc:	f000 f91a 	bl	8000714 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80004e0:	200f      	movs	r0, #15
 80004e2:	f000 f80d 	bl	8000500 <HAL_InitTick>
 80004e6:	4603      	mov	r3, r0
 80004e8:	2b00      	cmp	r3, #0
 80004ea:	d002      	beq.n	80004f2 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80004ec:	2301      	movs	r3, #1
 80004ee:	71fb      	strb	r3, [r7, #7]
 80004f0:	e001      	b.n	80004f6 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80004f2:	f006 f875 	bl	80065e0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80004f6:	79fb      	ldrb	r3, [r7, #7]
}
 80004f8:	4618      	mov	r0, r3
 80004fa:	3708      	adds	r7, #8
 80004fc:	46bd      	mov	sp, r7
 80004fe:	bd80      	pop	{r7, pc}

08000500 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b084      	sub	sp, #16
 8000504:	af00      	add	r7, sp, #0
 8000506:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000508:	2300      	movs	r3, #0
 800050a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800050c:	4b16      	ldr	r3, [pc, #88]	; (8000568 <HAL_InitTick+0x68>)
 800050e:	681b      	ldr	r3, [r3, #0]
 8000510:	2b00      	cmp	r3, #0
 8000512:	d022      	beq.n	800055a <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000514:	4b15      	ldr	r3, [pc, #84]	; (800056c <HAL_InitTick+0x6c>)
 8000516:	681a      	ldr	r2, [r3, #0]
 8000518:	4b13      	ldr	r3, [pc, #76]	; (8000568 <HAL_InitTick+0x68>)
 800051a:	681b      	ldr	r3, [r3, #0]
 800051c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000520:	fbb1 f3f3 	udiv	r3, r1, r3
 8000524:	fbb2 f3f3 	udiv	r3, r2, r3
 8000528:	4618      	mov	r0, r3
 800052a:	f000 f91a 	bl	8000762 <HAL_SYSTICK_Config>
 800052e:	4603      	mov	r3, r0
 8000530:	2b00      	cmp	r3, #0
 8000532:	d10f      	bne.n	8000554 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	2b0f      	cmp	r3, #15
 8000538:	d809      	bhi.n	800054e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800053a:	2200      	movs	r2, #0
 800053c:	6879      	ldr	r1, [r7, #4]
 800053e:	f04f 30ff 	mov.w	r0, #4294967295
 8000542:	f000 f8f2 	bl	800072a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000546:	4a0a      	ldr	r2, [pc, #40]	; (8000570 <HAL_InitTick+0x70>)
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	6013      	str	r3, [r2, #0]
 800054c:	e007      	b.n	800055e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800054e:	2301      	movs	r3, #1
 8000550:	73fb      	strb	r3, [r7, #15]
 8000552:	e004      	b.n	800055e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000554:	2301      	movs	r3, #1
 8000556:	73fb      	strb	r3, [r7, #15]
 8000558:	e001      	b.n	800055e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800055a:	2301      	movs	r3, #1
 800055c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800055e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000560:	4618      	mov	r0, r3
 8000562:	3710      	adds	r7, #16
 8000564:	46bd      	mov	sp, r7
 8000566:	bd80      	pop	{r7, pc}
 8000568:	20000004 	.word	0x20000004
 800056c:	2000000c 	.word	0x2000000c
 8000570:	20000000 	.word	0x20000000

08000574 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000574:	b480      	push	{r7}
 8000576:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000578:	4b05      	ldr	r3, [pc, #20]	; (8000590 <HAL_IncTick+0x1c>)
 800057a:	681a      	ldr	r2, [r3, #0]
 800057c:	4b05      	ldr	r3, [pc, #20]	; (8000594 <HAL_IncTick+0x20>)
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	4413      	add	r3, r2
 8000582:	4a03      	ldr	r2, [pc, #12]	; (8000590 <HAL_IncTick+0x1c>)
 8000584:	6013      	str	r3, [r2, #0]
}
 8000586:	bf00      	nop
 8000588:	46bd      	mov	sp, r7
 800058a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800058e:	4770      	bx	lr
 8000590:	20001964 	.word	0x20001964
 8000594:	20000004 	.word	0x20000004

08000598 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000598:	b480      	push	{r7}
 800059a:	af00      	add	r7, sp, #0
  return uwTick;
 800059c:	4b03      	ldr	r3, [pc, #12]	; (80005ac <HAL_GetTick+0x14>)
 800059e:	681b      	ldr	r3, [r3, #0]
}
 80005a0:	4618      	mov	r0, r3
 80005a2:	46bd      	mov	sp, r7
 80005a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop
 80005ac:	20001964 	.word	0x20001964

080005b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80005b0:	b480      	push	{r7}
 80005b2:	b085      	sub	sp, #20
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	f003 0307 	and.w	r3, r3, #7
 80005be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80005c0:	4b0c      	ldr	r3, [pc, #48]	; (80005f4 <__NVIC_SetPriorityGrouping+0x44>)
 80005c2:	68db      	ldr	r3, [r3, #12]
 80005c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80005c6:	68ba      	ldr	r2, [r7, #8]
 80005c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80005cc:	4013      	ands	r3, r2
 80005ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80005d0:	68fb      	ldr	r3, [r7, #12]
 80005d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80005d4:	68bb      	ldr	r3, [r7, #8]
 80005d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80005d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80005dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80005e2:	4a04      	ldr	r2, [pc, #16]	; (80005f4 <__NVIC_SetPriorityGrouping+0x44>)
 80005e4:	68bb      	ldr	r3, [r7, #8]
 80005e6:	60d3      	str	r3, [r2, #12]
}
 80005e8:	bf00      	nop
 80005ea:	3714      	adds	r7, #20
 80005ec:	46bd      	mov	sp, r7
 80005ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f2:	4770      	bx	lr
 80005f4:	e000ed00 	.word	0xe000ed00

080005f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80005f8:	b480      	push	{r7}
 80005fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80005fc:	4b04      	ldr	r3, [pc, #16]	; (8000610 <__NVIC_GetPriorityGrouping+0x18>)
 80005fe:	68db      	ldr	r3, [r3, #12]
 8000600:	0a1b      	lsrs	r3, r3, #8
 8000602:	f003 0307 	and.w	r3, r3, #7
}
 8000606:	4618      	mov	r0, r3
 8000608:	46bd      	mov	sp, r7
 800060a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060e:	4770      	bx	lr
 8000610:	e000ed00 	.word	0xe000ed00

08000614 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000614:	b480      	push	{r7}
 8000616:	b083      	sub	sp, #12
 8000618:	af00      	add	r7, sp, #0
 800061a:	4603      	mov	r3, r0
 800061c:	6039      	str	r1, [r7, #0]
 800061e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000620:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000624:	2b00      	cmp	r3, #0
 8000626:	db0a      	blt.n	800063e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000628:	683b      	ldr	r3, [r7, #0]
 800062a:	b2da      	uxtb	r2, r3
 800062c:	490c      	ldr	r1, [pc, #48]	; (8000660 <__NVIC_SetPriority+0x4c>)
 800062e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000632:	0112      	lsls	r2, r2, #4
 8000634:	b2d2      	uxtb	r2, r2
 8000636:	440b      	add	r3, r1
 8000638:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800063c:	e00a      	b.n	8000654 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800063e:	683b      	ldr	r3, [r7, #0]
 8000640:	b2da      	uxtb	r2, r3
 8000642:	4908      	ldr	r1, [pc, #32]	; (8000664 <__NVIC_SetPriority+0x50>)
 8000644:	79fb      	ldrb	r3, [r7, #7]
 8000646:	f003 030f 	and.w	r3, r3, #15
 800064a:	3b04      	subs	r3, #4
 800064c:	0112      	lsls	r2, r2, #4
 800064e:	b2d2      	uxtb	r2, r2
 8000650:	440b      	add	r3, r1
 8000652:	761a      	strb	r2, [r3, #24]
}
 8000654:	bf00      	nop
 8000656:	370c      	adds	r7, #12
 8000658:	46bd      	mov	sp, r7
 800065a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800065e:	4770      	bx	lr
 8000660:	e000e100 	.word	0xe000e100
 8000664:	e000ed00 	.word	0xe000ed00

08000668 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000668:	b480      	push	{r7}
 800066a:	b089      	sub	sp, #36	; 0x24
 800066c:	af00      	add	r7, sp, #0
 800066e:	60f8      	str	r0, [r7, #12]
 8000670:	60b9      	str	r1, [r7, #8]
 8000672:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000674:	68fb      	ldr	r3, [r7, #12]
 8000676:	f003 0307 	and.w	r3, r3, #7
 800067a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800067c:	69fb      	ldr	r3, [r7, #28]
 800067e:	f1c3 0307 	rsb	r3, r3, #7
 8000682:	2b04      	cmp	r3, #4
 8000684:	bf28      	it	cs
 8000686:	2304      	movcs	r3, #4
 8000688:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800068a:	69fb      	ldr	r3, [r7, #28]
 800068c:	3304      	adds	r3, #4
 800068e:	2b06      	cmp	r3, #6
 8000690:	d902      	bls.n	8000698 <NVIC_EncodePriority+0x30>
 8000692:	69fb      	ldr	r3, [r7, #28]
 8000694:	3b03      	subs	r3, #3
 8000696:	e000      	b.n	800069a <NVIC_EncodePriority+0x32>
 8000698:	2300      	movs	r3, #0
 800069a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800069c:	f04f 32ff 	mov.w	r2, #4294967295
 80006a0:	69bb      	ldr	r3, [r7, #24]
 80006a2:	fa02 f303 	lsl.w	r3, r2, r3
 80006a6:	43da      	mvns	r2, r3
 80006a8:	68bb      	ldr	r3, [r7, #8]
 80006aa:	401a      	ands	r2, r3
 80006ac:	697b      	ldr	r3, [r7, #20]
 80006ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80006b0:	f04f 31ff 	mov.w	r1, #4294967295
 80006b4:	697b      	ldr	r3, [r7, #20]
 80006b6:	fa01 f303 	lsl.w	r3, r1, r3
 80006ba:	43d9      	mvns	r1, r3
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006c0:	4313      	orrs	r3, r2
         );
}
 80006c2:	4618      	mov	r0, r3
 80006c4:	3724      	adds	r7, #36	; 0x24
 80006c6:	46bd      	mov	sp, r7
 80006c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006cc:	4770      	bx	lr
	...

080006d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b082      	sub	sp, #8
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	3b01      	subs	r3, #1
 80006dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80006e0:	d301      	bcc.n	80006e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80006e2:	2301      	movs	r3, #1
 80006e4:	e00f      	b.n	8000706 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80006e6:	4a0a      	ldr	r2, [pc, #40]	; (8000710 <SysTick_Config+0x40>)
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	3b01      	subs	r3, #1
 80006ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80006ee:	210f      	movs	r1, #15
 80006f0:	f04f 30ff 	mov.w	r0, #4294967295
 80006f4:	f7ff ff8e 	bl	8000614 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80006f8:	4b05      	ldr	r3, [pc, #20]	; (8000710 <SysTick_Config+0x40>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80006fe:	4b04      	ldr	r3, [pc, #16]	; (8000710 <SysTick_Config+0x40>)
 8000700:	2207      	movs	r2, #7
 8000702:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000704:	2300      	movs	r3, #0
}
 8000706:	4618      	mov	r0, r3
 8000708:	3708      	adds	r7, #8
 800070a:	46bd      	mov	sp, r7
 800070c:	bd80      	pop	{r7, pc}
 800070e:	bf00      	nop
 8000710:	e000e010 	.word	0xe000e010

08000714 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b082      	sub	sp, #8
 8000718:	af00      	add	r7, sp, #0
 800071a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800071c:	6878      	ldr	r0, [r7, #4]
 800071e:	f7ff ff47 	bl	80005b0 <__NVIC_SetPriorityGrouping>
}
 8000722:	bf00      	nop
 8000724:	3708      	adds	r7, #8
 8000726:	46bd      	mov	sp, r7
 8000728:	bd80      	pop	{r7, pc}

0800072a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800072a:	b580      	push	{r7, lr}
 800072c:	b086      	sub	sp, #24
 800072e:	af00      	add	r7, sp, #0
 8000730:	4603      	mov	r3, r0
 8000732:	60b9      	str	r1, [r7, #8]
 8000734:	607a      	str	r2, [r7, #4]
 8000736:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000738:	2300      	movs	r3, #0
 800073a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800073c:	f7ff ff5c 	bl	80005f8 <__NVIC_GetPriorityGrouping>
 8000740:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000742:	687a      	ldr	r2, [r7, #4]
 8000744:	68b9      	ldr	r1, [r7, #8]
 8000746:	6978      	ldr	r0, [r7, #20]
 8000748:	f7ff ff8e 	bl	8000668 <NVIC_EncodePriority>
 800074c:	4602      	mov	r2, r0
 800074e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000752:	4611      	mov	r1, r2
 8000754:	4618      	mov	r0, r3
 8000756:	f7ff ff5d 	bl	8000614 <__NVIC_SetPriority>
}
 800075a:	bf00      	nop
 800075c:	3718      	adds	r7, #24
 800075e:	46bd      	mov	sp, r7
 8000760:	bd80      	pop	{r7, pc}

08000762 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000762:	b580      	push	{r7, lr}
 8000764:	b082      	sub	sp, #8
 8000766:	af00      	add	r7, sp, #0
 8000768:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800076a:	6878      	ldr	r0, [r7, #4]
 800076c:	f7ff ffb0 	bl	80006d0 <SysTick_Config>
 8000770:	4603      	mov	r3, r0
}
 8000772:	4618      	mov	r0, r3
 8000774:	3708      	adds	r7, #8
 8000776:	46bd      	mov	sp, r7
 8000778:	bd80      	pop	{r7, pc}

0800077a <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800077a:	b580      	push	{r7, lr}
 800077c:	b084      	sub	sp, #16
 800077e:	af00      	add	r7, sp, #0
 8000780:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000782:	2300      	movs	r3, #0
 8000784:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800078c:	b2db      	uxtb	r3, r3
 800078e:	2b02      	cmp	r3, #2
 8000790:	d005      	beq.n	800079e <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	2204      	movs	r2, #4
 8000796:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8000798:	2301      	movs	r3, #1
 800079a:	73fb      	strb	r3, [r7, #15]
 800079c:	e029      	b.n	80007f2 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	681a      	ldr	r2, [r3, #0]
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	f022 020e 	bic.w	r2, r2, #14
 80007ac:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	681a      	ldr	r2, [r3, #0]
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	f022 0201 	bic.w	r2, r2, #1
 80007bc:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007c2:	f003 021c 	and.w	r2, r3, #28
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007ca:	2101      	movs	r1, #1
 80007cc:	fa01 f202 	lsl.w	r2, r1, r2
 80007d0:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	2201      	movs	r2, #1
 80007d6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	2200      	movs	r2, #0
 80007de:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d003      	beq.n	80007f2 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80007ee:	6878      	ldr	r0, [r7, #4]
 80007f0:	4798      	blx	r3
    }
  }
  return status;
 80007f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80007f4:	4618      	mov	r0, r3
 80007f6:	3710      	adds	r7, #16
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bd80      	pop	{r7, pc}

080007fc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80007fc:	b480      	push	{r7}
 80007fe:	b087      	sub	sp, #28
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
 8000804:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000806:	2300      	movs	r3, #0
 8000808:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800080a:	e17f      	b.n	8000b0c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800080c:	683b      	ldr	r3, [r7, #0]
 800080e:	681a      	ldr	r2, [r3, #0]
 8000810:	2101      	movs	r1, #1
 8000812:	697b      	ldr	r3, [r7, #20]
 8000814:	fa01 f303 	lsl.w	r3, r1, r3
 8000818:	4013      	ands	r3, r2
 800081a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800081c:	68fb      	ldr	r3, [r7, #12]
 800081e:	2b00      	cmp	r3, #0
 8000820:	f000 8171 	beq.w	8000b06 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000824:	683b      	ldr	r3, [r7, #0]
 8000826:	685b      	ldr	r3, [r3, #4]
 8000828:	2b02      	cmp	r3, #2
 800082a:	d003      	beq.n	8000834 <HAL_GPIO_Init+0x38>
 800082c:	683b      	ldr	r3, [r7, #0]
 800082e:	685b      	ldr	r3, [r3, #4]
 8000830:	2b12      	cmp	r3, #18
 8000832:	d123      	bne.n	800087c <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000834:	697b      	ldr	r3, [r7, #20]
 8000836:	08da      	lsrs	r2, r3, #3
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	3208      	adds	r2, #8
 800083c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000840:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000842:	697b      	ldr	r3, [r7, #20]
 8000844:	f003 0307 	and.w	r3, r3, #7
 8000848:	009b      	lsls	r3, r3, #2
 800084a:	220f      	movs	r2, #15
 800084c:	fa02 f303 	lsl.w	r3, r2, r3
 8000850:	43db      	mvns	r3, r3
 8000852:	693a      	ldr	r2, [r7, #16]
 8000854:	4013      	ands	r3, r2
 8000856:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000858:	683b      	ldr	r3, [r7, #0]
 800085a:	691a      	ldr	r2, [r3, #16]
 800085c:	697b      	ldr	r3, [r7, #20]
 800085e:	f003 0307 	and.w	r3, r3, #7
 8000862:	009b      	lsls	r3, r3, #2
 8000864:	fa02 f303 	lsl.w	r3, r2, r3
 8000868:	693a      	ldr	r2, [r7, #16]
 800086a:	4313      	orrs	r3, r2
 800086c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800086e:	697b      	ldr	r3, [r7, #20]
 8000870:	08da      	lsrs	r2, r3, #3
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	3208      	adds	r2, #8
 8000876:	6939      	ldr	r1, [r7, #16]
 8000878:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000882:	697b      	ldr	r3, [r7, #20]
 8000884:	005b      	lsls	r3, r3, #1
 8000886:	2203      	movs	r2, #3
 8000888:	fa02 f303 	lsl.w	r3, r2, r3
 800088c:	43db      	mvns	r3, r3
 800088e:	693a      	ldr	r2, [r7, #16]
 8000890:	4013      	ands	r3, r2
 8000892:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000894:	683b      	ldr	r3, [r7, #0]
 8000896:	685b      	ldr	r3, [r3, #4]
 8000898:	f003 0203 	and.w	r2, r3, #3
 800089c:	697b      	ldr	r3, [r7, #20]
 800089e:	005b      	lsls	r3, r3, #1
 80008a0:	fa02 f303 	lsl.w	r3, r2, r3
 80008a4:	693a      	ldr	r2, [r7, #16]
 80008a6:	4313      	orrs	r3, r2
 80008a8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	693a      	ldr	r2, [r7, #16]
 80008ae:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80008b0:	683b      	ldr	r3, [r7, #0]
 80008b2:	685b      	ldr	r3, [r3, #4]
 80008b4:	2b01      	cmp	r3, #1
 80008b6:	d00b      	beq.n	80008d0 <HAL_GPIO_Init+0xd4>
 80008b8:	683b      	ldr	r3, [r7, #0]
 80008ba:	685b      	ldr	r3, [r3, #4]
 80008bc:	2b02      	cmp	r3, #2
 80008be:	d007      	beq.n	80008d0 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80008c0:	683b      	ldr	r3, [r7, #0]
 80008c2:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80008c4:	2b11      	cmp	r3, #17
 80008c6:	d003      	beq.n	80008d0 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80008c8:	683b      	ldr	r3, [r7, #0]
 80008ca:	685b      	ldr	r3, [r3, #4]
 80008cc:	2b12      	cmp	r3, #18
 80008ce:	d130      	bne.n	8000932 <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	689b      	ldr	r3, [r3, #8]
 80008d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80008d6:	697b      	ldr	r3, [r7, #20]
 80008d8:	005b      	lsls	r3, r3, #1
 80008da:	2203      	movs	r2, #3
 80008dc:	fa02 f303 	lsl.w	r3, r2, r3
 80008e0:	43db      	mvns	r3, r3
 80008e2:	693a      	ldr	r2, [r7, #16]
 80008e4:	4013      	ands	r3, r2
 80008e6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80008e8:	683b      	ldr	r3, [r7, #0]
 80008ea:	68da      	ldr	r2, [r3, #12]
 80008ec:	697b      	ldr	r3, [r7, #20]
 80008ee:	005b      	lsls	r3, r3, #1
 80008f0:	fa02 f303 	lsl.w	r3, r2, r3
 80008f4:	693a      	ldr	r2, [r7, #16]
 80008f6:	4313      	orrs	r3, r2
 80008f8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	693a      	ldr	r2, [r7, #16]
 80008fe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	685b      	ldr	r3, [r3, #4]
 8000904:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000906:	2201      	movs	r2, #1
 8000908:	697b      	ldr	r3, [r7, #20]
 800090a:	fa02 f303 	lsl.w	r3, r2, r3
 800090e:	43db      	mvns	r3, r3
 8000910:	693a      	ldr	r2, [r7, #16]
 8000912:	4013      	ands	r3, r2
 8000914:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000916:	683b      	ldr	r3, [r7, #0]
 8000918:	685b      	ldr	r3, [r3, #4]
 800091a:	091b      	lsrs	r3, r3, #4
 800091c:	f003 0201 	and.w	r2, r3, #1
 8000920:	697b      	ldr	r3, [r7, #20]
 8000922:	fa02 f303 	lsl.w	r3, r2, r3
 8000926:	693a      	ldr	r2, [r7, #16]
 8000928:	4313      	orrs	r3, r2
 800092a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	693a      	ldr	r2, [r7, #16]
 8000930:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000932:	683b      	ldr	r3, [r7, #0]
 8000934:	685b      	ldr	r3, [r3, #4]
 8000936:	f003 0303 	and.w	r3, r3, #3
 800093a:	2b03      	cmp	r3, #3
 800093c:	d118      	bne.n	8000970 <HAL_GPIO_Init+0x174>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000942:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000944:	2201      	movs	r2, #1
 8000946:	697b      	ldr	r3, [r7, #20]
 8000948:	fa02 f303 	lsl.w	r3, r2, r3
 800094c:	43db      	mvns	r3, r3
 800094e:	693a      	ldr	r2, [r7, #16]
 8000950:	4013      	ands	r3, r2
 8000952:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8000954:	683b      	ldr	r3, [r7, #0]
 8000956:	685b      	ldr	r3, [r3, #4]
 8000958:	08db      	lsrs	r3, r3, #3
 800095a:	f003 0201 	and.w	r2, r3, #1
 800095e:	697b      	ldr	r3, [r7, #20]
 8000960:	fa02 f303 	lsl.w	r3, r2, r3
 8000964:	693a      	ldr	r2, [r7, #16]
 8000966:	4313      	orrs	r3, r2
 8000968:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	693a      	ldr	r2, [r7, #16]
 800096e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	68db      	ldr	r3, [r3, #12]
 8000974:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000976:	697b      	ldr	r3, [r7, #20]
 8000978:	005b      	lsls	r3, r3, #1
 800097a:	2203      	movs	r2, #3
 800097c:	fa02 f303 	lsl.w	r3, r2, r3
 8000980:	43db      	mvns	r3, r3
 8000982:	693a      	ldr	r2, [r7, #16]
 8000984:	4013      	ands	r3, r2
 8000986:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000988:	683b      	ldr	r3, [r7, #0]
 800098a:	689a      	ldr	r2, [r3, #8]
 800098c:	697b      	ldr	r3, [r7, #20]
 800098e:	005b      	lsls	r3, r3, #1
 8000990:	fa02 f303 	lsl.w	r3, r2, r3
 8000994:	693a      	ldr	r2, [r7, #16]
 8000996:	4313      	orrs	r3, r2
 8000998:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	693a      	ldr	r2, [r7, #16]
 800099e:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80009a0:	683b      	ldr	r3, [r7, #0]
 80009a2:	685b      	ldr	r3, [r3, #4]
 80009a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	f000 80ac 	beq.w	8000b06 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009ae:	4b5e      	ldr	r3, [pc, #376]	; (8000b28 <HAL_GPIO_Init+0x32c>)
 80009b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009b2:	4a5d      	ldr	r2, [pc, #372]	; (8000b28 <HAL_GPIO_Init+0x32c>)
 80009b4:	f043 0301 	orr.w	r3, r3, #1
 80009b8:	6613      	str	r3, [r2, #96]	; 0x60
 80009ba:	4b5b      	ldr	r3, [pc, #364]	; (8000b28 <HAL_GPIO_Init+0x32c>)
 80009bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009be:	f003 0301 	and.w	r3, r3, #1
 80009c2:	60bb      	str	r3, [r7, #8]
 80009c4:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80009c6:	4a59      	ldr	r2, [pc, #356]	; (8000b2c <HAL_GPIO_Init+0x330>)
 80009c8:	697b      	ldr	r3, [r7, #20]
 80009ca:	089b      	lsrs	r3, r3, #2
 80009cc:	3302      	adds	r3, #2
 80009ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009d2:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80009d4:	697b      	ldr	r3, [r7, #20]
 80009d6:	f003 0303 	and.w	r3, r3, #3
 80009da:	009b      	lsls	r3, r3, #2
 80009dc:	220f      	movs	r2, #15
 80009de:	fa02 f303 	lsl.w	r3, r2, r3
 80009e2:	43db      	mvns	r3, r3
 80009e4:	693a      	ldr	r2, [r7, #16]
 80009e6:	4013      	ands	r3, r2
 80009e8:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80009f0:	d025      	beq.n	8000a3e <HAL_GPIO_Init+0x242>
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	4a4e      	ldr	r2, [pc, #312]	; (8000b30 <HAL_GPIO_Init+0x334>)
 80009f6:	4293      	cmp	r3, r2
 80009f8:	d01f      	beq.n	8000a3a <HAL_GPIO_Init+0x23e>
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	4a4d      	ldr	r2, [pc, #308]	; (8000b34 <HAL_GPIO_Init+0x338>)
 80009fe:	4293      	cmp	r3, r2
 8000a00:	d019      	beq.n	8000a36 <HAL_GPIO_Init+0x23a>
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	4a4c      	ldr	r2, [pc, #304]	; (8000b38 <HAL_GPIO_Init+0x33c>)
 8000a06:	4293      	cmp	r3, r2
 8000a08:	d013      	beq.n	8000a32 <HAL_GPIO_Init+0x236>
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	4a4b      	ldr	r2, [pc, #300]	; (8000b3c <HAL_GPIO_Init+0x340>)
 8000a0e:	4293      	cmp	r3, r2
 8000a10:	d00d      	beq.n	8000a2e <HAL_GPIO_Init+0x232>
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	4a4a      	ldr	r2, [pc, #296]	; (8000b40 <HAL_GPIO_Init+0x344>)
 8000a16:	4293      	cmp	r3, r2
 8000a18:	d007      	beq.n	8000a2a <HAL_GPIO_Init+0x22e>
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	4a49      	ldr	r2, [pc, #292]	; (8000b44 <HAL_GPIO_Init+0x348>)
 8000a1e:	4293      	cmp	r3, r2
 8000a20:	d101      	bne.n	8000a26 <HAL_GPIO_Init+0x22a>
 8000a22:	2306      	movs	r3, #6
 8000a24:	e00c      	b.n	8000a40 <HAL_GPIO_Init+0x244>
 8000a26:	2307      	movs	r3, #7
 8000a28:	e00a      	b.n	8000a40 <HAL_GPIO_Init+0x244>
 8000a2a:	2305      	movs	r3, #5
 8000a2c:	e008      	b.n	8000a40 <HAL_GPIO_Init+0x244>
 8000a2e:	2304      	movs	r3, #4
 8000a30:	e006      	b.n	8000a40 <HAL_GPIO_Init+0x244>
 8000a32:	2303      	movs	r3, #3
 8000a34:	e004      	b.n	8000a40 <HAL_GPIO_Init+0x244>
 8000a36:	2302      	movs	r3, #2
 8000a38:	e002      	b.n	8000a40 <HAL_GPIO_Init+0x244>
 8000a3a:	2301      	movs	r3, #1
 8000a3c:	e000      	b.n	8000a40 <HAL_GPIO_Init+0x244>
 8000a3e:	2300      	movs	r3, #0
 8000a40:	697a      	ldr	r2, [r7, #20]
 8000a42:	f002 0203 	and.w	r2, r2, #3
 8000a46:	0092      	lsls	r2, r2, #2
 8000a48:	4093      	lsls	r3, r2
 8000a4a:	693a      	ldr	r2, [r7, #16]
 8000a4c:	4313      	orrs	r3, r2
 8000a4e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000a50:	4936      	ldr	r1, [pc, #216]	; (8000b2c <HAL_GPIO_Init+0x330>)
 8000a52:	697b      	ldr	r3, [r7, #20]
 8000a54:	089b      	lsrs	r3, r3, #2
 8000a56:	3302      	adds	r3, #2
 8000a58:	693a      	ldr	r2, [r7, #16]
 8000a5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000a5e:	4b3a      	ldr	r3, [pc, #232]	; (8000b48 <HAL_GPIO_Init+0x34c>)
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a64:	68fb      	ldr	r3, [r7, #12]
 8000a66:	43db      	mvns	r3, r3
 8000a68:	693a      	ldr	r2, [r7, #16]
 8000a6a:	4013      	ands	r3, r2
 8000a6c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000a6e:	683b      	ldr	r3, [r7, #0]
 8000a70:	685b      	ldr	r3, [r3, #4]
 8000a72:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d003      	beq.n	8000a82 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000a7a:	693a      	ldr	r2, [r7, #16]
 8000a7c:	68fb      	ldr	r3, [r7, #12]
 8000a7e:	4313      	orrs	r3, r2
 8000a80:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000a82:	4a31      	ldr	r2, [pc, #196]	; (8000b48 <HAL_GPIO_Init+0x34c>)
 8000a84:	693b      	ldr	r3, [r7, #16]
 8000a86:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8000a88:	4b2f      	ldr	r3, [pc, #188]	; (8000b48 <HAL_GPIO_Init+0x34c>)
 8000a8a:	685b      	ldr	r3, [r3, #4]
 8000a8c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a8e:	68fb      	ldr	r3, [r7, #12]
 8000a90:	43db      	mvns	r3, r3
 8000a92:	693a      	ldr	r2, [r7, #16]
 8000a94:	4013      	ands	r3, r2
 8000a96:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000a98:	683b      	ldr	r3, [r7, #0]
 8000a9a:	685b      	ldr	r3, [r3, #4]
 8000a9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d003      	beq.n	8000aac <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000aa4:	693a      	ldr	r2, [r7, #16]
 8000aa6:	68fb      	ldr	r3, [r7, #12]
 8000aa8:	4313      	orrs	r3, r2
 8000aaa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000aac:	4a26      	ldr	r2, [pc, #152]	; (8000b48 <HAL_GPIO_Init+0x34c>)
 8000aae:	693b      	ldr	r3, [r7, #16]
 8000ab0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000ab2:	4b25      	ldr	r3, [pc, #148]	; (8000b48 <HAL_GPIO_Init+0x34c>)
 8000ab4:	689b      	ldr	r3, [r3, #8]
 8000ab6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ab8:	68fb      	ldr	r3, [r7, #12]
 8000aba:	43db      	mvns	r3, r3
 8000abc:	693a      	ldr	r2, [r7, #16]
 8000abe:	4013      	ands	r3, r2
 8000ac0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000ac2:	683b      	ldr	r3, [r7, #0]
 8000ac4:	685b      	ldr	r3, [r3, #4]
 8000ac6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d003      	beq.n	8000ad6 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8000ace:	693a      	ldr	r2, [r7, #16]
 8000ad0:	68fb      	ldr	r3, [r7, #12]
 8000ad2:	4313      	orrs	r3, r2
 8000ad4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000ad6:	4a1c      	ldr	r2, [pc, #112]	; (8000b48 <HAL_GPIO_Init+0x34c>)
 8000ad8:	693b      	ldr	r3, [r7, #16]
 8000ada:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000adc:	4b1a      	ldr	r3, [pc, #104]	; (8000b48 <HAL_GPIO_Init+0x34c>)
 8000ade:	68db      	ldr	r3, [r3, #12]
 8000ae0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ae2:	68fb      	ldr	r3, [r7, #12]
 8000ae4:	43db      	mvns	r3, r3
 8000ae6:	693a      	ldr	r2, [r7, #16]
 8000ae8:	4013      	ands	r3, r2
 8000aea:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000aec:	683b      	ldr	r3, [r7, #0]
 8000aee:	685b      	ldr	r3, [r3, #4]
 8000af0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d003      	beq.n	8000b00 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8000af8:	693a      	ldr	r2, [r7, #16]
 8000afa:	68fb      	ldr	r3, [r7, #12]
 8000afc:	4313      	orrs	r3, r2
 8000afe:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000b00:	4a11      	ldr	r2, [pc, #68]	; (8000b48 <HAL_GPIO_Init+0x34c>)
 8000b02:	693b      	ldr	r3, [r7, #16]
 8000b04:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000b06:	697b      	ldr	r3, [r7, #20]
 8000b08:	3301      	adds	r3, #1
 8000b0a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b0c:	683b      	ldr	r3, [r7, #0]
 8000b0e:	681a      	ldr	r2, [r3, #0]
 8000b10:	697b      	ldr	r3, [r7, #20]
 8000b12:	fa22 f303 	lsr.w	r3, r2, r3
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	f47f ae78 	bne.w	800080c <HAL_GPIO_Init+0x10>
  }
}
 8000b1c:	bf00      	nop
 8000b1e:	371c      	adds	r7, #28
 8000b20:	46bd      	mov	sp, r7
 8000b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b26:	4770      	bx	lr
 8000b28:	40021000 	.word	0x40021000
 8000b2c:	40010000 	.word	0x40010000
 8000b30:	48000400 	.word	0x48000400
 8000b34:	48000800 	.word	0x48000800
 8000b38:	48000c00 	.word	0x48000c00
 8000b3c:	48001000 	.word	0x48001000
 8000b40:	48001400 	.word	0x48001400
 8000b44:	48001800 	.word	0x48001800
 8000b48:	40010400 	.word	0x40010400

08000b4c <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8000b50:	4b05      	ldr	r3, [pc, #20]	; (8000b68 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	4a04      	ldr	r2, [pc, #16]	; (8000b68 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8000b56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b5a:	6013      	str	r3, [r2, #0]
}
 8000b5c:	bf00      	nop
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop
 8000b68:	40007000 	.word	0x40007000

08000b6c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000b70:	4b04      	ldr	r3, [pc, #16]	; (8000b84 <HAL_PWREx_GetVoltageRange+0x18>)
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8000b78:	4618      	mov	r0, r3
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b80:	4770      	bx	lr
 8000b82:	bf00      	nop
 8000b84:	40007000 	.word	0x40007000

08000b88 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	b085      	sub	sp, #20
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000b96:	d130      	bne.n	8000bfa <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000b98:	4b23      	ldr	r3, [pc, #140]	; (8000c28 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000ba0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000ba4:	d038      	beq.n	8000c18 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ba6:	4b20      	ldr	r3, [pc, #128]	; (8000c28 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000bae:	4a1e      	ldr	r2, [pc, #120]	; (8000c28 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000bb0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000bb4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000bb6:	4b1d      	ldr	r3, [pc, #116]	; (8000c2c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	2232      	movs	r2, #50	; 0x32
 8000bbc:	fb02 f303 	mul.w	r3, r2, r3
 8000bc0:	4a1b      	ldr	r2, [pc, #108]	; (8000c30 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000bc2:	fba2 2303 	umull	r2, r3, r2, r3
 8000bc6:	0c9b      	lsrs	r3, r3, #18
 8000bc8:	3301      	adds	r3, #1
 8000bca:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000bcc:	e002      	b.n	8000bd4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8000bce:	68fb      	ldr	r3, [r7, #12]
 8000bd0:	3b01      	subs	r3, #1
 8000bd2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000bd4:	4b14      	ldr	r3, [pc, #80]	; (8000c28 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000bd6:	695b      	ldr	r3, [r3, #20]
 8000bd8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000bdc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000be0:	d102      	bne.n	8000be8 <HAL_PWREx_ControlVoltageScaling+0x60>
 8000be2:	68fb      	ldr	r3, [r7, #12]
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d1f2      	bne.n	8000bce <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000be8:	4b0f      	ldr	r3, [pc, #60]	; (8000c28 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000bea:	695b      	ldr	r3, [r3, #20]
 8000bec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000bf0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000bf4:	d110      	bne.n	8000c18 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8000bf6:	2303      	movs	r3, #3
 8000bf8:	e00f      	b.n	8000c1a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8000bfa:	4b0b      	ldr	r3, [pc, #44]	; (8000c28 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000c02:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000c06:	d007      	beq.n	8000c18 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000c08:	4b07      	ldr	r3, [pc, #28]	; (8000c28 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000c10:	4a05      	ldr	r2, [pc, #20]	; (8000c28 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000c12:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c16:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8000c18:	2300      	movs	r3, #0
}
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	3714      	adds	r7, #20
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c24:	4770      	bx	lr
 8000c26:	bf00      	nop
 8000c28:	40007000 	.word	0x40007000
 8000c2c:	2000000c 	.word	0x2000000c
 8000c30:	431bde83 	.word	0x431bde83

08000c34 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b088      	sub	sp, #32
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d101      	bne.n	8000c46 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000c42:	2301      	movs	r3, #1
 8000c44:	e39d      	b.n	8001382 <HAL_RCC_OscConfig+0x74e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000c46:	4ba4      	ldr	r3, [pc, #656]	; (8000ed8 <HAL_RCC_OscConfig+0x2a4>)
 8000c48:	689b      	ldr	r3, [r3, #8]
 8000c4a:	f003 030c 	and.w	r3, r3, #12
 8000c4e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000c50:	4ba1      	ldr	r3, [pc, #644]	; (8000ed8 <HAL_RCC_OscConfig+0x2a4>)
 8000c52:	68db      	ldr	r3, [r3, #12]
 8000c54:	f003 0303 	and.w	r3, r3, #3
 8000c58:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	f003 0310 	and.w	r3, r3, #16
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	f000 80e1 	beq.w	8000e2a <HAL_RCC_OscConfig+0x1f6>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8000c68:	69bb      	ldr	r3, [r7, #24]
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d007      	beq.n	8000c7e <HAL_RCC_OscConfig+0x4a>
 8000c6e:	69bb      	ldr	r3, [r7, #24]
 8000c70:	2b0c      	cmp	r3, #12
 8000c72:	f040 8088 	bne.w	8000d86 <HAL_RCC_OscConfig+0x152>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8000c76:	697b      	ldr	r3, [r7, #20]
 8000c78:	2b01      	cmp	r3, #1
 8000c7a:	f040 8084 	bne.w	8000d86 <HAL_RCC_OscConfig+0x152>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000c7e:	4b96      	ldr	r3, [pc, #600]	; (8000ed8 <HAL_RCC_OscConfig+0x2a4>)
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	f003 0302 	and.w	r3, r3, #2
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d005      	beq.n	8000c96 <HAL_RCC_OscConfig+0x62>
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	699b      	ldr	r3, [r3, #24]
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d101      	bne.n	8000c96 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8000c92:	2301      	movs	r3, #1
 8000c94:	e375      	b.n	8001382 <HAL_RCC_OscConfig+0x74e>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	6a1a      	ldr	r2, [r3, #32]
 8000c9a:	4b8f      	ldr	r3, [pc, #572]	; (8000ed8 <HAL_RCC_OscConfig+0x2a4>)
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	f003 0308 	and.w	r3, r3, #8
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d004      	beq.n	8000cb0 <HAL_RCC_OscConfig+0x7c>
 8000ca6:	4b8c      	ldr	r3, [pc, #560]	; (8000ed8 <HAL_RCC_OscConfig+0x2a4>)
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000cae:	e005      	b.n	8000cbc <HAL_RCC_OscConfig+0x88>
 8000cb0:	4b89      	ldr	r3, [pc, #548]	; (8000ed8 <HAL_RCC_OscConfig+0x2a4>)
 8000cb2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000cb6:	091b      	lsrs	r3, r3, #4
 8000cb8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000cbc:	4293      	cmp	r3, r2
 8000cbe:	d223      	bcs.n	8000d08 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	6a1b      	ldr	r3, [r3, #32]
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	f000 fd09 	bl	80016dc <RCC_SetFlashLatencyFromMSIRange>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d001      	beq.n	8000cd4 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8000cd0:	2301      	movs	r3, #1
 8000cd2:	e356      	b.n	8001382 <HAL_RCC_OscConfig+0x74e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000cd4:	4b80      	ldr	r3, [pc, #512]	; (8000ed8 <HAL_RCC_OscConfig+0x2a4>)
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	4a7f      	ldr	r2, [pc, #508]	; (8000ed8 <HAL_RCC_OscConfig+0x2a4>)
 8000cda:	f043 0308 	orr.w	r3, r3, #8
 8000cde:	6013      	str	r3, [r2, #0]
 8000ce0:	4b7d      	ldr	r3, [pc, #500]	; (8000ed8 <HAL_RCC_OscConfig+0x2a4>)
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	6a1b      	ldr	r3, [r3, #32]
 8000cec:	497a      	ldr	r1, [pc, #488]	; (8000ed8 <HAL_RCC_OscConfig+0x2a4>)
 8000cee:	4313      	orrs	r3, r2
 8000cf0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000cf2:	4b79      	ldr	r3, [pc, #484]	; (8000ed8 <HAL_RCC_OscConfig+0x2a4>)
 8000cf4:	685b      	ldr	r3, [r3, #4]
 8000cf6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	69db      	ldr	r3, [r3, #28]
 8000cfe:	021b      	lsls	r3, r3, #8
 8000d00:	4975      	ldr	r1, [pc, #468]	; (8000ed8 <HAL_RCC_OscConfig+0x2a4>)
 8000d02:	4313      	orrs	r3, r2
 8000d04:	604b      	str	r3, [r1, #4]
 8000d06:	e022      	b.n	8000d4e <HAL_RCC_OscConfig+0x11a>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000d08:	4b73      	ldr	r3, [pc, #460]	; (8000ed8 <HAL_RCC_OscConfig+0x2a4>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	4a72      	ldr	r2, [pc, #456]	; (8000ed8 <HAL_RCC_OscConfig+0x2a4>)
 8000d0e:	f043 0308 	orr.w	r3, r3, #8
 8000d12:	6013      	str	r3, [r2, #0]
 8000d14:	4b70      	ldr	r3, [pc, #448]	; (8000ed8 <HAL_RCC_OscConfig+0x2a4>)
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	6a1b      	ldr	r3, [r3, #32]
 8000d20:	496d      	ldr	r1, [pc, #436]	; (8000ed8 <HAL_RCC_OscConfig+0x2a4>)
 8000d22:	4313      	orrs	r3, r2
 8000d24:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000d26:	4b6c      	ldr	r3, [pc, #432]	; (8000ed8 <HAL_RCC_OscConfig+0x2a4>)
 8000d28:	685b      	ldr	r3, [r3, #4]
 8000d2a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	69db      	ldr	r3, [r3, #28]
 8000d32:	021b      	lsls	r3, r3, #8
 8000d34:	4968      	ldr	r1, [pc, #416]	; (8000ed8 <HAL_RCC_OscConfig+0x2a4>)
 8000d36:	4313      	orrs	r3, r2
 8000d38:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	6a1b      	ldr	r3, [r3, #32]
 8000d3e:	4618      	mov	r0, r3
 8000d40:	f000 fccc 	bl	80016dc <RCC_SetFlashLatencyFromMSIRange>
 8000d44:	4603      	mov	r3, r0
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d001      	beq.n	8000d4e <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_ERROR;
 8000d4a:	2301      	movs	r3, #1
 8000d4c:	e319      	b.n	8001382 <HAL_RCC_OscConfig+0x74e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8000d4e:	f000 fc03 	bl	8001558 <HAL_RCC_GetSysClockFreq>
 8000d52:	4601      	mov	r1, r0
 8000d54:	4b60      	ldr	r3, [pc, #384]	; (8000ed8 <HAL_RCC_OscConfig+0x2a4>)
 8000d56:	689b      	ldr	r3, [r3, #8]
 8000d58:	091b      	lsrs	r3, r3, #4
 8000d5a:	f003 030f 	and.w	r3, r3, #15
 8000d5e:	4a5f      	ldr	r2, [pc, #380]	; (8000edc <HAL_RCC_OscConfig+0x2a8>)
 8000d60:	5cd3      	ldrb	r3, [r2, r3]
 8000d62:	f003 031f 	and.w	r3, r3, #31
 8000d66:	fa21 f303 	lsr.w	r3, r1, r3
 8000d6a:	4a5d      	ldr	r2, [pc, #372]	; (8000ee0 <HAL_RCC_OscConfig+0x2ac>)
 8000d6c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8000d6e:	4b5d      	ldr	r3, [pc, #372]	; (8000ee4 <HAL_RCC_OscConfig+0x2b0>)
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	4618      	mov	r0, r3
 8000d74:	f7ff fbc4 	bl	8000500 <HAL_InitTick>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8000d7c:	7bfb      	ldrb	r3, [r7, #15]
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d052      	beq.n	8000e28 <HAL_RCC_OscConfig+0x1f4>
        {
          return status;
 8000d82:	7bfb      	ldrb	r3, [r7, #15]
 8000d84:	e2fd      	b.n	8001382 <HAL_RCC_OscConfig+0x74e>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	699b      	ldr	r3, [r3, #24]
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d032      	beq.n	8000df4 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8000d8e:	4b52      	ldr	r3, [pc, #328]	; (8000ed8 <HAL_RCC_OscConfig+0x2a4>)
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	4a51      	ldr	r2, [pc, #324]	; (8000ed8 <HAL_RCC_OscConfig+0x2a4>)
 8000d94:	f043 0301 	orr.w	r3, r3, #1
 8000d98:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000d9a:	f7ff fbfd 	bl	8000598 <HAL_GetTick>
 8000d9e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000da0:	e008      	b.n	8000db4 <HAL_RCC_OscConfig+0x180>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000da2:	f7ff fbf9 	bl	8000598 <HAL_GetTick>
 8000da6:	4602      	mov	r2, r0
 8000da8:	693b      	ldr	r3, [r7, #16]
 8000daa:	1ad3      	subs	r3, r2, r3
 8000dac:	2b02      	cmp	r3, #2
 8000dae:	d901      	bls.n	8000db4 <HAL_RCC_OscConfig+0x180>
          {
            return HAL_TIMEOUT;
 8000db0:	2303      	movs	r3, #3
 8000db2:	e2e6      	b.n	8001382 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000db4:	4b48      	ldr	r3, [pc, #288]	; (8000ed8 <HAL_RCC_OscConfig+0x2a4>)
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	f003 0302 	and.w	r3, r3, #2
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d0f0      	beq.n	8000da2 <HAL_RCC_OscConfig+0x16e>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000dc0:	4b45      	ldr	r3, [pc, #276]	; (8000ed8 <HAL_RCC_OscConfig+0x2a4>)
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	4a44      	ldr	r2, [pc, #272]	; (8000ed8 <HAL_RCC_OscConfig+0x2a4>)
 8000dc6:	f043 0308 	orr.w	r3, r3, #8
 8000dca:	6013      	str	r3, [r2, #0]
 8000dcc:	4b42      	ldr	r3, [pc, #264]	; (8000ed8 <HAL_RCC_OscConfig+0x2a4>)
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	6a1b      	ldr	r3, [r3, #32]
 8000dd8:	493f      	ldr	r1, [pc, #252]	; (8000ed8 <HAL_RCC_OscConfig+0x2a4>)
 8000dda:	4313      	orrs	r3, r2
 8000ddc:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000dde:	4b3e      	ldr	r3, [pc, #248]	; (8000ed8 <HAL_RCC_OscConfig+0x2a4>)
 8000de0:	685b      	ldr	r3, [r3, #4]
 8000de2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	69db      	ldr	r3, [r3, #28]
 8000dea:	021b      	lsls	r3, r3, #8
 8000dec:	493a      	ldr	r1, [pc, #232]	; (8000ed8 <HAL_RCC_OscConfig+0x2a4>)
 8000dee:	4313      	orrs	r3, r2
 8000df0:	604b      	str	r3, [r1, #4]
 8000df2:	e01a      	b.n	8000e2a <HAL_RCC_OscConfig+0x1f6>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8000df4:	4b38      	ldr	r3, [pc, #224]	; (8000ed8 <HAL_RCC_OscConfig+0x2a4>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	4a37      	ldr	r2, [pc, #220]	; (8000ed8 <HAL_RCC_OscConfig+0x2a4>)
 8000dfa:	f023 0301 	bic.w	r3, r3, #1
 8000dfe:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000e00:	f7ff fbca 	bl	8000598 <HAL_GetTick>
 8000e04:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000e06:	e008      	b.n	8000e1a <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000e08:	f7ff fbc6 	bl	8000598 <HAL_GetTick>
 8000e0c:	4602      	mov	r2, r0
 8000e0e:	693b      	ldr	r3, [r7, #16]
 8000e10:	1ad3      	subs	r3, r2, r3
 8000e12:	2b02      	cmp	r3, #2
 8000e14:	d901      	bls.n	8000e1a <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8000e16:	2303      	movs	r3, #3
 8000e18:	e2b3      	b.n	8001382 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000e1a:	4b2f      	ldr	r3, [pc, #188]	; (8000ed8 <HAL_RCC_OscConfig+0x2a4>)
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	f003 0302 	and.w	r3, r3, #2
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d1f0      	bne.n	8000e08 <HAL_RCC_OscConfig+0x1d4>
 8000e26:	e000      	b.n	8000e2a <HAL_RCC_OscConfig+0x1f6>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000e28:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	f003 0301 	and.w	r3, r3, #1
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d074      	beq.n	8000f20 <HAL_RCC_OscConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8000e36:	69bb      	ldr	r3, [r7, #24]
 8000e38:	2b08      	cmp	r3, #8
 8000e3a:	d005      	beq.n	8000e48 <HAL_RCC_OscConfig+0x214>
 8000e3c:	69bb      	ldr	r3, [r7, #24]
 8000e3e:	2b0c      	cmp	r3, #12
 8000e40:	d10e      	bne.n	8000e60 <HAL_RCC_OscConfig+0x22c>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8000e42:	697b      	ldr	r3, [r7, #20]
 8000e44:	2b03      	cmp	r3, #3
 8000e46:	d10b      	bne.n	8000e60 <HAL_RCC_OscConfig+0x22c>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e48:	4b23      	ldr	r3, [pc, #140]	; (8000ed8 <HAL_RCC_OscConfig+0x2a4>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d064      	beq.n	8000f1e <HAL_RCC_OscConfig+0x2ea>
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	685b      	ldr	r3, [r3, #4]
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d160      	bne.n	8000f1e <HAL_RCC_OscConfig+0x2ea>
      {
        return HAL_ERROR;
 8000e5c:	2301      	movs	r3, #1
 8000e5e:	e290      	b.n	8001382 <HAL_RCC_OscConfig+0x74e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	685b      	ldr	r3, [r3, #4]
 8000e64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e68:	d106      	bne.n	8000e78 <HAL_RCC_OscConfig+0x244>
 8000e6a:	4b1b      	ldr	r3, [pc, #108]	; (8000ed8 <HAL_RCC_OscConfig+0x2a4>)
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	4a1a      	ldr	r2, [pc, #104]	; (8000ed8 <HAL_RCC_OscConfig+0x2a4>)
 8000e70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e74:	6013      	str	r3, [r2, #0]
 8000e76:	e01d      	b.n	8000eb4 <HAL_RCC_OscConfig+0x280>
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	685b      	ldr	r3, [r3, #4]
 8000e7c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000e80:	d10c      	bne.n	8000e9c <HAL_RCC_OscConfig+0x268>
 8000e82:	4b15      	ldr	r3, [pc, #84]	; (8000ed8 <HAL_RCC_OscConfig+0x2a4>)
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	4a14      	ldr	r2, [pc, #80]	; (8000ed8 <HAL_RCC_OscConfig+0x2a4>)
 8000e88:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e8c:	6013      	str	r3, [r2, #0]
 8000e8e:	4b12      	ldr	r3, [pc, #72]	; (8000ed8 <HAL_RCC_OscConfig+0x2a4>)
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	4a11      	ldr	r2, [pc, #68]	; (8000ed8 <HAL_RCC_OscConfig+0x2a4>)
 8000e94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e98:	6013      	str	r3, [r2, #0]
 8000e9a:	e00b      	b.n	8000eb4 <HAL_RCC_OscConfig+0x280>
 8000e9c:	4b0e      	ldr	r3, [pc, #56]	; (8000ed8 <HAL_RCC_OscConfig+0x2a4>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	4a0d      	ldr	r2, [pc, #52]	; (8000ed8 <HAL_RCC_OscConfig+0x2a4>)
 8000ea2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000ea6:	6013      	str	r3, [r2, #0]
 8000ea8:	4b0b      	ldr	r3, [pc, #44]	; (8000ed8 <HAL_RCC_OscConfig+0x2a4>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	4a0a      	ldr	r2, [pc, #40]	; (8000ed8 <HAL_RCC_OscConfig+0x2a4>)
 8000eae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000eb2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	685b      	ldr	r3, [r3, #4]
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d01c      	beq.n	8000ef6 <HAL_RCC_OscConfig+0x2c2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000ebc:	f7ff fb6c 	bl	8000598 <HAL_GetTick>
 8000ec0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000ec2:	e011      	b.n	8000ee8 <HAL_RCC_OscConfig+0x2b4>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000ec4:	f7ff fb68 	bl	8000598 <HAL_GetTick>
 8000ec8:	4602      	mov	r2, r0
 8000eca:	693b      	ldr	r3, [r7, #16]
 8000ecc:	1ad3      	subs	r3, r2, r3
 8000ece:	2b64      	cmp	r3, #100	; 0x64
 8000ed0:	d90a      	bls.n	8000ee8 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8000ed2:	2303      	movs	r3, #3
 8000ed4:	e255      	b.n	8001382 <HAL_RCC_OscConfig+0x74e>
 8000ed6:	bf00      	nop
 8000ed8:	40021000 	.word	0x40021000
 8000edc:	080076dc 	.word	0x080076dc
 8000ee0:	2000000c 	.word	0x2000000c
 8000ee4:	20000000 	.word	0x20000000
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000ee8:	4bae      	ldr	r3, [pc, #696]	; (80011a4 <HAL_RCC_OscConfig+0x570>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d0e7      	beq.n	8000ec4 <HAL_RCC_OscConfig+0x290>
 8000ef4:	e014      	b.n	8000f20 <HAL_RCC_OscConfig+0x2ec>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000ef6:	f7ff fb4f 	bl	8000598 <HAL_GetTick>
 8000efa:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000efc:	e008      	b.n	8000f10 <HAL_RCC_OscConfig+0x2dc>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000efe:	f7ff fb4b 	bl	8000598 <HAL_GetTick>
 8000f02:	4602      	mov	r2, r0
 8000f04:	693b      	ldr	r3, [r7, #16]
 8000f06:	1ad3      	subs	r3, r2, r3
 8000f08:	2b64      	cmp	r3, #100	; 0x64
 8000f0a:	d901      	bls.n	8000f10 <HAL_RCC_OscConfig+0x2dc>
          {
            return HAL_TIMEOUT;
 8000f0c:	2303      	movs	r3, #3
 8000f0e:	e238      	b.n	8001382 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000f10:	4ba4      	ldr	r3, [pc, #656]	; (80011a4 <HAL_RCC_OscConfig+0x570>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d1f0      	bne.n	8000efe <HAL_RCC_OscConfig+0x2ca>
 8000f1c:	e000      	b.n	8000f20 <HAL_RCC_OscConfig+0x2ec>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f1e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	f003 0302 	and.w	r3, r3, #2
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d060      	beq.n	8000fee <HAL_RCC_OscConfig+0x3ba>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8000f2c:	69bb      	ldr	r3, [r7, #24]
 8000f2e:	2b04      	cmp	r3, #4
 8000f30:	d005      	beq.n	8000f3e <HAL_RCC_OscConfig+0x30a>
 8000f32:	69bb      	ldr	r3, [r7, #24]
 8000f34:	2b0c      	cmp	r3, #12
 8000f36:	d119      	bne.n	8000f6c <HAL_RCC_OscConfig+0x338>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8000f38:	697b      	ldr	r3, [r7, #20]
 8000f3a:	2b02      	cmp	r3, #2
 8000f3c:	d116      	bne.n	8000f6c <HAL_RCC_OscConfig+0x338>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000f3e:	4b99      	ldr	r3, [pc, #612]	; (80011a4 <HAL_RCC_OscConfig+0x570>)
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d005      	beq.n	8000f56 <HAL_RCC_OscConfig+0x322>
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	68db      	ldr	r3, [r3, #12]
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d101      	bne.n	8000f56 <HAL_RCC_OscConfig+0x322>
      {
        return HAL_ERROR;
 8000f52:	2301      	movs	r3, #1
 8000f54:	e215      	b.n	8001382 <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f56:	4b93      	ldr	r3, [pc, #588]	; (80011a4 <HAL_RCC_OscConfig+0x570>)
 8000f58:	685b      	ldr	r3, [r3, #4]
 8000f5a:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	691b      	ldr	r3, [r3, #16]
 8000f62:	061b      	lsls	r3, r3, #24
 8000f64:	498f      	ldr	r1, [pc, #572]	; (80011a4 <HAL_RCC_OscConfig+0x570>)
 8000f66:	4313      	orrs	r3, r2
 8000f68:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000f6a:	e040      	b.n	8000fee <HAL_RCC_OscConfig+0x3ba>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	68db      	ldr	r3, [r3, #12]
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d023      	beq.n	8000fbc <HAL_RCC_OscConfig+0x388>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000f74:	4b8b      	ldr	r3, [pc, #556]	; (80011a4 <HAL_RCC_OscConfig+0x570>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	4a8a      	ldr	r2, [pc, #552]	; (80011a4 <HAL_RCC_OscConfig+0x570>)
 8000f7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f7e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f80:	f7ff fb0a 	bl	8000598 <HAL_GetTick>
 8000f84:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000f86:	e008      	b.n	8000f9a <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000f88:	f7ff fb06 	bl	8000598 <HAL_GetTick>
 8000f8c:	4602      	mov	r2, r0
 8000f8e:	693b      	ldr	r3, [r7, #16]
 8000f90:	1ad3      	subs	r3, r2, r3
 8000f92:	2b02      	cmp	r3, #2
 8000f94:	d901      	bls.n	8000f9a <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8000f96:	2303      	movs	r3, #3
 8000f98:	e1f3      	b.n	8001382 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000f9a:	4b82      	ldr	r3, [pc, #520]	; (80011a4 <HAL_RCC_OscConfig+0x570>)
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d0f0      	beq.n	8000f88 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000fa6:	4b7f      	ldr	r3, [pc, #508]	; (80011a4 <HAL_RCC_OscConfig+0x570>)
 8000fa8:	685b      	ldr	r3, [r3, #4]
 8000faa:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	691b      	ldr	r3, [r3, #16]
 8000fb2:	061b      	lsls	r3, r3, #24
 8000fb4:	497b      	ldr	r1, [pc, #492]	; (80011a4 <HAL_RCC_OscConfig+0x570>)
 8000fb6:	4313      	orrs	r3, r2
 8000fb8:	604b      	str	r3, [r1, #4]
 8000fba:	e018      	b.n	8000fee <HAL_RCC_OscConfig+0x3ba>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000fbc:	4b79      	ldr	r3, [pc, #484]	; (80011a4 <HAL_RCC_OscConfig+0x570>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	4a78      	ldr	r2, [pc, #480]	; (80011a4 <HAL_RCC_OscConfig+0x570>)
 8000fc2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000fc6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000fc8:	f7ff fae6 	bl	8000598 <HAL_GetTick>
 8000fcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000fce:	e008      	b.n	8000fe2 <HAL_RCC_OscConfig+0x3ae>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000fd0:	f7ff fae2 	bl	8000598 <HAL_GetTick>
 8000fd4:	4602      	mov	r2, r0
 8000fd6:	693b      	ldr	r3, [r7, #16]
 8000fd8:	1ad3      	subs	r3, r2, r3
 8000fda:	2b02      	cmp	r3, #2
 8000fdc:	d901      	bls.n	8000fe2 <HAL_RCC_OscConfig+0x3ae>
          {
            return HAL_TIMEOUT;
 8000fde:	2303      	movs	r3, #3
 8000fe0:	e1cf      	b.n	8001382 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000fe2:	4b70      	ldr	r3, [pc, #448]	; (80011a4 <HAL_RCC_OscConfig+0x570>)
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d1f0      	bne.n	8000fd0 <HAL_RCC_OscConfig+0x39c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	f003 0308 	and.w	r3, r3, #8
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d03c      	beq.n	8001074 <HAL_RCC_OscConfig+0x440>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	695b      	ldr	r3, [r3, #20]
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d01c      	beq.n	800103c <HAL_RCC_OscConfig+0x408>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001002:	4b68      	ldr	r3, [pc, #416]	; (80011a4 <HAL_RCC_OscConfig+0x570>)
 8001004:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001008:	4a66      	ldr	r2, [pc, #408]	; (80011a4 <HAL_RCC_OscConfig+0x570>)
 800100a:	f043 0301 	orr.w	r3, r3, #1
 800100e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001012:	f7ff fac1 	bl	8000598 <HAL_GetTick>
 8001016:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001018:	e008      	b.n	800102c <HAL_RCC_OscConfig+0x3f8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800101a:	f7ff fabd 	bl	8000598 <HAL_GetTick>
 800101e:	4602      	mov	r2, r0
 8001020:	693b      	ldr	r3, [r7, #16]
 8001022:	1ad3      	subs	r3, r2, r3
 8001024:	2b02      	cmp	r3, #2
 8001026:	d901      	bls.n	800102c <HAL_RCC_OscConfig+0x3f8>
        {
          return HAL_TIMEOUT;
 8001028:	2303      	movs	r3, #3
 800102a:	e1aa      	b.n	8001382 <HAL_RCC_OscConfig+0x74e>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800102c:	4b5d      	ldr	r3, [pc, #372]	; (80011a4 <HAL_RCC_OscConfig+0x570>)
 800102e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001032:	f003 0302 	and.w	r3, r3, #2
 8001036:	2b00      	cmp	r3, #0
 8001038:	d0ef      	beq.n	800101a <HAL_RCC_OscConfig+0x3e6>
 800103a:	e01b      	b.n	8001074 <HAL_RCC_OscConfig+0x440>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800103c:	4b59      	ldr	r3, [pc, #356]	; (80011a4 <HAL_RCC_OscConfig+0x570>)
 800103e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001042:	4a58      	ldr	r2, [pc, #352]	; (80011a4 <HAL_RCC_OscConfig+0x570>)
 8001044:	f023 0301 	bic.w	r3, r3, #1
 8001048:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800104c:	f7ff faa4 	bl	8000598 <HAL_GetTick>
 8001050:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001052:	e008      	b.n	8001066 <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001054:	f7ff faa0 	bl	8000598 <HAL_GetTick>
 8001058:	4602      	mov	r2, r0
 800105a:	693b      	ldr	r3, [r7, #16]
 800105c:	1ad3      	subs	r3, r2, r3
 800105e:	2b02      	cmp	r3, #2
 8001060:	d901      	bls.n	8001066 <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8001062:	2303      	movs	r3, #3
 8001064:	e18d      	b.n	8001382 <HAL_RCC_OscConfig+0x74e>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001066:	4b4f      	ldr	r3, [pc, #316]	; (80011a4 <HAL_RCC_OscConfig+0x570>)
 8001068:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800106c:	f003 0302 	and.w	r3, r3, #2
 8001070:	2b00      	cmp	r3, #0
 8001072:	d1ef      	bne.n	8001054 <HAL_RCC_OscConfig+0x420>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	f003 0304 	and.w	r3, r3, #4
 800107c:	2b00      	cmp	r3, #0
 800107e:	f000 80a5 	beq.w	80011cc <HAL_RCC_OscConfig+0x598>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001082:	2300      	movs	r3, #0
 8001084:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001086:	4b47      	ldr	r3, [pc, #284]	; (80011a4 <HAL_RCC_OscConfig+0x570>)
 8001088:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800108a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800108e:	2b00      	cmp	r3, #0
 8001090:	d10d      	bne.n	80010ae <HAL_RCC_OscConfig+0x47a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001092:	4b44      	ldr	r3, [pc, #272]	; (80011a4 <HAL_RCC_OscConfig+0x570>)
 8001094:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001096:	4a43      	ldr	r2, [pc, #268]	; (80011a4 <HAL_RCC_OscConfig+0x570>)
 8001098:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800109c:	6593      	str	r3, [r2, #88]	; 0x58
 800109e:	4b41      	ldr	r3, [pc, #260]	; (80011a4 <HAL_RCC_OscConfig+0x570>)
 80010a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010a6:	60bb      	str	r3, [r7, #8]
 80010a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80010aa:	2301      	movs	r3, #1
 80010ac:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80010ae:	4b3e      	ldr	r3, [pc, #248]	; (80011a8 <HAL_RCC_OscConfig+0x574>)
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d118      	bne.n	80010ec <HAL_RCC_OscConfig+0x4b8>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80010ba:	4b3b      	ldr	r3, [pc, #236]	; (80011a8 <HAL_RCC_OscConfig+0x574>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	4a3a      	ldr	r2, [pc, #232]	; (80011a8 <HAL_RCC_OscConfig+0x574>)
 80010c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80010c6:	f7ff fa67 	bl	8000598 <HAL_GetTick>
 80010ca:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80010cc:	e008      	b.n	80010e0 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80010ce:	f7ff fa63 	bl	8000598 <HAL_GetTick>
 80010d2:	4602      	mov	r2, r0
 80010d4:	693b      	ldr	r3, [r7, #16]
 80010d6:	1ad3      	subs	r3, r2, r3
 80010d8:	2b02      	cmp	r3, #2
 80010da:	d901      	bls.n	80010e0 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 80010dc:	2303      	movs	r3, #3
 80010de:	e150      	b.n	8001382 <HAL_RCC_OscConfig+0x74e>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80010e0:	4b31      	ldr	r3, [pc, #196]	; (80011a8 <HAL_RCC_OscConfig+0x574>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d0f0      	beq.n	80010ce <HAL_RCC_OscConfig+0x49a>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	689b      	ldr	r3, [r3, #8]
 80010f0:	2b01      	cmp	r3, #1
 80010f2:	d108      	bne.n	8001106 <HAL_RCC_OscConfig+0x4d2>
 80010f4:	4b2b      	ldr	r3, [pc, #172]	; (80011a4 <HAL_RCC_OscConfig+0x570>)
 80010f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80010fa:	4a2a      	ldr	r2, [pc, #168]	; (80011a4 <HAL_RCC_OscConfig+0x570>)
 80010fc:	f043 0301 	orr.w	r3, r3, #1
 8001100:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001104:	e024      	b.n	8001150 <HAL_RCC_OscConfig+0x51c>
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	689b      	ldr	r3, [r3, #8]
 800110a:	2b05      	cmp	r3, #5
 800110c:	d110      	bne.n	8001130 <HAL_RCC_OscConfig+0x4fc>
 800110e:	4b25      	ldr	r3, [pc, #148]	; (80011a4 <HAL_RCC_OscConfig+0x570>)
 8001110:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001114:	4a23      	ldr	r2, [pc, #140]	; (80011a4 <HAL_RCC_OscConfig+0x570>)
 8001116:	f043 0304 	orr.w	r3, r3, #4
 800111a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800111e:	4b21      	ldr	r3, [pc, #132]	; (80011a4 <HAL_RCC_OscConfig+0x570>)
 8001120:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001124:	4a1f      	ldr	r2, [pc, #124]	; (80011a4 <HAL_RCC_OscConfig+0x570>)
 8001126:	f043 0301 	orr.w	r3, r3, #1
 800112a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800112e:	e00f      	b.n	8001150 <HAL_RCC_OscConfig+0x51c>
 8001130:	4b1c      	ldr	r3, [pc, #112]	; (80011a4 <HAL_RCC_OscConfig+0x570>)
 8001132:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001136:	4a1b      	ldr	r2, [pc, #108]	; (80011a4 <HAL_RCC_OscConfig+0x570>)
 8001138:	f023 0301 	bic.w	r3, r3, #1
 800113c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001140:	4b18      	ldr	r3, [pc, #96]	; (80011a4 <HAL_RCC_OscConfig+0x570>)
 8001142:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001146:	4a17      	ldr	r2, [pc, #92]	; (80011a4 <HAL_RCC_OscConfig+0x570>)
 8001148:	f023 0304 	bic.w	r3, r3, #4
 800114c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	689b      	ldr	r3, [r3, #8]
 8001154:	2b00      	cmp	r3, #0
 8001156:	d016      	beq.n	8001186 <HAL_RCC_OscConfig+0x552>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001158:	f7ff fa1e 	bl	8000598 <HAL_GetTick>
 800115c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800115e:	e00a      	b.n	8001176 <HAL_RCC_OscConfig+0x542>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001160:	f7ff fa1a 	bl	8000598 <HAL_GetTick>
 8001164:	4602      	mov	r2, r0
 8001166:	693b      	ldr	r3, [r7, #16]
 8001168:	1ad3      	subs	r3, r2, r3
 800116a:	f241 3288 	movw	r2, #5000	; 0x1388
 800116e:	4293      	cmp	r3, r2
 8001170:	d901      	bls.n	8001176 <HAL_RCC_OscConfig+0x542>
        {
          return HAL_TIMEOUT;
 8001172:	2303      	movs	r3, #3
 8001174:	e105      	b.n	8001382 <HAL_RCC_OscConfig+0x74e>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001176:	4b0b      	ldr	r3, [pc, #44]	; (80011a4 <HAL_RCC_OscConfig+0x570>)
 8001178:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800117c:	f003 0302 	and.w	r3, r3, #2
 8001180:	2b00      	cmp	r3, #0
 8001182:	d0ed      	beq.n	8001160 <HAL_RCC_OscConfig+0x52c>
 8001184:	e019      	b.n	80011ba <HAL_RCC_OscConfig+0x586>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001186:	f7ff fa07 	bl	8000598 <HAL_GetTick>
 800118a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800118c:	e00e      	b.n	80011ac <HAL_RCC_OscConfig+0x578>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800118e:	f7ff fa03 	bl	8000598 <HAL_GetTick>
 8001192:	4602      	mov	r2, r0
 8001194:	693b      	ldr	r3, [r7, #16]
 8001196:	1ad3      	subs	r3, r2, r3
 8001198:	f241 3288 	movw	r2, #5000	; 0x1388
 800119c:	4293      	cmp	r3, r2
 800119e:	d905      	bls.n	80011ac <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 80011a0:	2303      	movs	r3, #3
 80011a2:	e0ee      	b.n	8001382 <HAL_RCC_OscConfig+0x74e>
 80011a4:	40021000 	.word	0x40021000
 80011a8:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80011ac:	4b77      	ldr	r3, [pc, #476]	; (800138c <HAL_RCC_OscConfig+0x758>)
 80011ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80011b2:	f003 0302 	and.w	r3, r3, #2
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d1e9      	bne.n	800118e <HAL_RCC_OscConfig+0x55a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80011ba:	7ffb      	ldrb	r3, [r7, #31]
 80011bc:	2b01      	cmp	r3, #1
 80011be:	d105      	bne.n	80011cc <HAL_RCC_OscConfig+0x598>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80011c0:	4b72      	ldr	r3, [pc, #456]	; (800138c <HAL_RCC_OscConfig+0x758>)
 80011c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011c4:	4a71      	ldr	r2, [pc, #452]	; (800138c <HAL_RCC_OscConfig+0x758>)
 80011c6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80011ca:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	f000 80d5 	beq.w	8001380 <HAL_RCC_OscConfig+0x74c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_CFGR_SWS_PLL)
 80011d6:	69bb      	ldr	r3, [r7, #24]
 80011d8:	2b0c      	cmp	r3, #12
 80011da:	f000 808e 	beq.w	80012fa <HAL_RCC_OscConfig+0x6c6>
    {
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011e2:	2b02      	cmp	r3, #2
 80011e4:	d15b      	bne.n	800129e <HAL_RCC_OscConfig+0x66a>
#endif /* RCC_PLLP_SUPPORT */
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80011e6:	4b69      	ldr	r3, [pc, #420]	; (800138c <HAL_RCC_OscConfig+0x758>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	4a68      	ldr	r2, [pc, #416]	; (800138c <HAL_RCC_OscConfig+0x758>)
 80011ec:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80011f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011f2:	f7ff f9d1 	bl	8000598 <HAL_GetTick>
 80011f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80011f8:	e008      	b.n	800120c <HAL_RCC_OscConfig+0x5d8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80011fa:	f7ff f9cd 	bl	8000598 <HAL_GetTick>
 80011fe:	4602      	mov	r2, r0
 8001200:	693b      	ldr	r3, [r7, #16]
 8001202:	1ad3      	subs	r3, r2, r3
 8001204:	2b02      	cmp	r3, #2
 8001206:	d901      	bls.n	800120c <HAL_RCC_OscConfig+0x5d8>
          {
            return HAL_TIMEOUT;
 8001208:	2303      	movs	r3, #3
 800120a:	e0ba      	b.n	8001382 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800120c:	4b5f      	ldr	r3, [pc, #380]	; (800138c <HAL_RCC_OscConfig+0x758>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001214:	2b00      	cmp	r3, #0
 8001216:	d1f0      	bne.n	80011fa <HAL_RCC_OscConfig+0x5c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001218:	4b5c      	ldr	r3, [pc, #368]	; (800138c <HAL_RCC_OscConfig+0x758>)
 800121a:	68da      	ldr	r2, [r3, #12]
 800121c:	4b5c      	ldr	r3, [pc, #368]	; (8001390 <HAL_RCC_OscConfig+0x75c>)
 800121e:	4013      	ands	r3, r2
 8001220:	687a      	ldr	r2, [r7, #4]
 8001222:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001224:	687a      	ldr	r2, [r7, #4]
 8001226:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001228:	3a01      	subs	r2, #1
 800122a:	0112      	lsls	r2, r2, #4
 800122c:	4311      	orrs	r1, r2
 800122e:	687a      	ldr	r2, [r7, #4]
 8001230:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001232:	0212      	lsls	r2, r2, #8
 8001234:	4311      	orrs	r1, r2
 8001236:	687a      	ldr	r2, [r7, #4]
 8001238:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800123a:	0852      	lsrs	r2, r2, #1
 800123c:	3a01      	subs	r2, #1
 800123e:	0552      	lsls	r2, r2, #21
 8001240:	4311      	orrs	r1, r2
 8001242:	687a      	ldr	r2, [r7, #4]
 8001244:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001246:	0852      	lsrs	r2, r2, #1
 8001248:	3a01      	subs	r2, #1
 800124a:	0652      	lsls	r2, r2, #25
 800124c:	4311      	orrs	r1, r2
 800124e:	687a      	ldr	r2, [r7, #4]
 8001250:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001252:	0912      	lsrs	r2, r2, #4
 8001254:	0452      	lsls	r2, r2, #17
 8001256:	430a      	orrs	r2, r1
 8001258:	494c      	ldr	r1, [pc, #304]	; (800138c <HAL_RCC_OscConfig+0x758>)
 800125a:	4313      	orrs	r3, r2
 800125c:	60cb      	str	r3, [r1, #12]
#endif
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800125e:	4b4b      	ldr	r3, [pc, #300]	; (800138c <HAL_RCC_OscConfig+0x758>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	4a4a      	ldr	r2, [pc, #296]	; (800138c <HAL_RCC_OscConfig+0x758>)
 8001264:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001268:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800126a:	4b48      	ldr	r3, [pc, #288]	; (800138c <HAL_RCC_OscConfig+0x758>)
 800126c:	68db      	ldr	r3, [r3, #12]
 800126e:	4a47      	ldr	r2, [pc, #284]	; (800138c <HAL_RCC_OscConfig+0x758>)
 8001270:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001274:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001276:	f7ff f98f 	bl	8000598 <HAL_GetTick>
 800127a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800127c:	e008      	b.n	8001290 <HAL_RCC_OscConfig+0x65c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800127e:	f7ff f98b 	bl	8000598 <HAL_GetTick>
 8001282:	4602      	mov	r2, r0
 8001284:	693b      	ldr	r3, [r7, #16]
 8001286:	1ad3      	subs	r3, r2, r3
 8001288:	2b02      	cmp	r3, #2
 800128a:	d901      	bls.n	8001290 <HAL_RCC_OscConfig+0x65c>
          {
            return HAL_TIMEOUT;
 800128c:	2303      	movs	r3, #3
 800128e:	e078      	b.n	8001382 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001290:	4b3e      	ldr	r3, [pc, #248]	; (800138c <HAL_RCC_OscConfig+0x758>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001298:	2b00      	cmp	r3, #0
 800129a:	d0f0      	beq.n	800127e <HAL_RCC_OscConfig+0x64a>
 800129c:	e070      	b.n	8001380 <HAL_RCC_OscConfig+0x74c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800129e:	4b3b      	ldr	r3, [pc, #236]	; (800138c <HAL_RCC_OscConfig+0x758>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	4a3a      	ldr	r2, [pc, #232]	; (800138c <HAL_RCC_OscConfig+0x758>)
 80012a4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80012a8:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80012aa:	4b38      	ldr	r3, [pc, #224]	; (800138c <HAL_RCC_OscConfig+0x758>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d105      	bne.n	80012c2 <HAL_RCC_OscConfig+0x68e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80012b6:	4b35      	ldr	r3, [pc, #212]	; (800138c <HAL_RCC_OscConfig+0x758>)
 80012b8:	68db      	ldr	r3, [r3, #12]
 80012ba:	4a34      	ldr	r2, [pc, #208]	; (800138c <HAL_RCC_OscConfig+0x758>)
 80012bc:	f023 0303 	bic.w	r3, r3, #3
 80012c0:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80012c2:	4b32      	ldr	r3, [pc, #200]	; (800138c <HAL_RCC_OscConfig+0x758>)
 80012c4:	68db      	ldr	r3, [r3, #12]
 80012c6:	4a31      	ldr	r2, [pc, #196]	; (800138c <HAL_RCC_OscConfig+0x758>)
 80012c8:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80012cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80012d0:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012d2:	f7ff f961 	bl	8000598 <HAL_GetTick>
 80012d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80012d8:	e008      	b.n	80012ec <HAL_RCC_OscConfig+0x6b8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80012da:	f7ff f95d 	bl	8000598 <HAL_GetTick>
 80012de:	4602      	mov	r2, r0
 80012e0:	693b      	ldr	r3, [r7, #16]
 80012e2:	1ad3      	subs	r3, r2, r3
 80012e4:	2b02      	cmp	r3, #2
 80012e6:	d901      	bls.n	80012ec <HAL_RCC_OscConfig+0x6b8>
          {
            return HAL_TIMEOUT;
 80012e8:	2303      	movs	r3, #3
 80012ea:	e04a      	b.n	8001382 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80012ec:	4b27      	ldr	r3, [pc, #156]	; (800138c <HAL_RCC_OscConfig+0x758>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d1f0      	bne.n	80012da <HAL_RCC_OscConfig+0x6a6>
 80012f8:	e042      	b.n	8001380 <HAL_RCC_OscConfig+0x74c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012fe:	2b01      	cmp	r3, #1
 8001300:	d101      	bne.n	8001306 <HAL_RCC_OscConfig+0x6d2>
      {
        return HAL_ERROR;
 8001302:	2301      	movs	r3, #1
 8001304:	e03d      	b.n	8001382 <HAL_RCC_OscConfig+0x74e>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 8001306:	4b21      	ldr	r3, [pc, #132]	; (800138c <HAL_RCC_OscConfig+0x758>)
 8001308:	68db      	ldr	r3, [r3, #12]
 800130a:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800130c:	697b      	ldr	r3, [r7, #20]
 800130e:	f003 0203 	and.w	r2, r3, #3
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001316:	429a      	cmp	r2, r3
 8001318:	d130      	bne.n	800137c <HAL_RCC_OscConfig+0x748>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800131a:	697b      	ldr	r3, [r7, #20]
 800131c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001324:	3b01      	subs	r3, #1
 8001326:	011b      	lsls	r3, r3, #4
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001328:	429a      	cmp	r2, r3
 800132a:	d127      	bne.n	800137c <HAL_RCC_OscConfig+0x748>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800132c:	697b      	ldr	r3, [r7, #20]
 800132e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001336:	021b      	lsls	r3, r3, #8
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001338:	429a      	cmp	r2, r3
 800133a:	d11f      	bne.n	800137c <HAL_RCC_OscConfig+0x748>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800133c:	697b      	ldr	r3, [r7, #20]
 800133e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001342:	687a      	ldr	r2, [r7, #4]
 8001344:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001346:	2a07      	cmp	r2, #7
 8001348:	bf14      	ite	ne
 800134a:	2201      	movne	r2, #1
 800134c:	2200      	moveq	r2, #0
 800134e:	b2d2      	uxtb	r2, r2
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001350:	4293      	cmp	r3, r2
 8001352:	d113      	bne.n	800137c <HAL_RCC_OscConfig+0x748>
#endif
#endif
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001354:	697b      	ldr	r3, [r7, #20]
 8001356:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800135e:	085b      	lsrs	r3, r3, #1
 8001360:	3b01      	subs	r3, #1
 8001362:	055b      	lsls	r3, r3, #21
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001364:	429a      	cmp	r2, r3
 8001366:	d109      	bne.n	800137c <HAL_RCC_OscConfig+0x748>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001368:	697b      	ldr	r3, [r7, #20]
 800136a:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001372:	085b      	lsrs	r3, r3, #1
 8001374:	3b01      	subs	r3, #1
 8001376:	065b      	lsls	r3, r3, #25
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001378:	429a      	cmp	r2, r3
 800137a:	d001      	beq.n	8001380 <HAL_RCC_OscConfig+0x74c>
        {
          return HAL_ERROR;
 800137c:	2301      	movs	r3, #1
 800137e:	e000      	b.n	8001382 <HAL_RCC_OscConfig+0x74e>
        }
      }
    }
  }
  return HAL_OK;
 8001380:	2300      	movs	r3, #0
}
 8001382:	4618      	mov	r0, r3
 8001384:	3720      	adds	r7, #32
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop
 800138c:	40021000 	.word	0x40021000
 8001390:	f99d808c 	.word	0xf99d808c

08001394 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b084      	sub	sp, #16
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
 800139c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d101      	bne.n	80013a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80013a4:	2301      	movs	r3, #1
 80013a6:	e0c8      	b.n	800153a <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80013a8:	4b66      	ldr	r3, [pc, #408]	; (8001544 <HAL_RCC_ClockConfig+0x1b0>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	f003 0307 	and.w	r3, r3, #7
 80013b0:	683a      	ldr	r2, [r7, #0]
 80013b2:	429a      	cmp	r2, r3
 80013b4:	d910      	bls.n	80013d8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80013b6:	4b63      	ldr	r3, [pc, #396]	; (8001544 <HAL_RCC_ClockConfig+0x1b0>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	f023 0207 	bic.w	r2, r3, #7
 80013be:	4961      	ldr	r1, [pc, #388]	; (8001544 <HAL_RCC_ClockConfig+0x1b0>)
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	4313      	orrs	r3, r2
 80013c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80013c6:	4b5f      	ldr	r3, [pc, #380]	; (8001544 <HAL_RCC_ClockConfig+0x1b0>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	f003 0307 	and.w	r3, r3, #7
 80013ce:	683a      	ldr	r2, [r7, #0]
 80013d0:	429a      	cmp	r2, r3
 80013d2:	d001      	beq.n	80013d8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80013d4:	2301      	movs	r3, #1
 80013d6:	e0b0      	b.n	800153a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	f003 0301 	and.w	r3, r3, #1
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d04c      	beq.n	800147e <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	685b      	ldr	r3, [r3, #4]
 80013e8:	2b03      	cmp	r3, #3
 80013ea:	d107      	bne.n	80013fc <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80013ec:	4b56      	ldr	r3, [pc, #344]	; (8001548 <HAL_RCC_ClockConfig+0x1b4>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d121      	bne.n	800143c <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80013f8:	2301      	movs	r3, #1
 80013fa:	e09e      	b.n	800153a <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	685b      	ldr	r3, [r3, #4]
 8001400:	2b02      	cmp	r3, #2
 8001402:	d107      	bne.n	8001414 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001404:	4b50      	ldr	r3, [pc, #320]	; (8001548 <HAL_RCC_ClockConfig+0x1b4>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800140c:	2b00      	cmp	r3, #0
 800140e:	d115      	bne.n	800143c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001410:	2301      	movs	r3, #1
 8001412:	e092      	b.n	800153a <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	685b      	ldr	r3, [r3, #4]
 8001418:	2b00      	cmp	r3, #0
 800141a:	d107      	bne.n	800142c <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800141c:	4b4a      	ldr	r3, [pc, #296]	; (8001548 <HAL_RCC_ClockConfig+0x1b4>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	f003 0302 	and.w	r3, r3, #2
 8001424:	2b00      	cmp	r3, #0
 8001426:	d109      	bne.n	800143c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001428:	2301      	movs	r3, #1
 800142a:	e086      	b.n	800153a <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800142c:	4b46      	ldr	r3, [pc, #280]	; (8001548 <HAL_RCC_ClockConfig+0x1b4>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001434:	2b00      	cmp	r3, #0
 8001436:	d101      	bne.n	800143c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001438:	2301      	movs	r3, #1
 800143a:	e07e      	b.n	800153a <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800143c:	4b42      	ldr	r3, [pc, #264]	; (8001548 <HAL_RCC_ClockConfig+0x1b4>)
 800143e:	689b      	ldr	r3, [r3, #8]
 8001440:	f023 0203 	bic.w	r2, r3, #3
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	685b      	ldr	r3, [r3, #4]
 8001448:	493f      	ldr	r1, [pc, #252]	; (8001548 <HAL_RCC_ClockConfig+0x1b4>)
 800144a:	4313      	orrs	r3, r2
 800144c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800144e:	f7ff f8a3 	bl	8000598 <HAL_GetTick>
 8001452:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001454:	e00a      	b.n	800146c <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001456:	f7ff f89f 	bl	8000598 <HAL_GetTick>
 800145a:	4602      	mov	r2, r0
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	1ad3      	subs	r3, r2, r3
 8001460:	f241 3288 	movw	r2, #5000	; 0x1388
 8001464:	4293      	cmp	r3, r2
 8001466:	d901      	bls.n	800146c <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8001468:	2303      	movs	r3, #3
 800146a:	e066      	b.n	800153a <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800146c:	4b36      	ldr	r3, [pc, #216]	; (8001548 <HAL_RCC_ClockConfig+0x1b4>)
 800146e:	689b      	ldr	r3, [r3, #8]
 8001470:	f003 020c 	and.w	r2, r3, #12
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	685b      	ldr	r3, [r3, #4]
 8001478:	009b      	lsls	r3, r3, #2
 800147a:	429a      	cmp	r2, r3
 800147c:	d1eb      	bne.n	8001456 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	f003 0302 	and.w	r3, r3, #2
 8001486:	2b00      	cmp	r3, #0
 8001488:	d008      	beq.n	800149c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800148a:	4b2f      	ldr	r3, [pc, #188]	; (8001548 <HAL_RCC_ClockConfig+0x1b4>)
 800148c:	689b      	ldr	r3, [r3, #8]
 800148e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	689b      	ldr	r3, [r3, #8]
 8001496:	492c      	ldr	r1, [pc, #176]	; (8001548 <HAL_RCC_ClockConfig+0x1b4>)
 8001498:	4313      	orrs	r3, r2
 800149a:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800149c:	4b29      	ldr	r3, [pc, #164]	; (8001544 <HAL_RCC_ClockConfig+0x1b0>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	f003 0307 	and.w	r3, r3, #7
 80014a4:	683a      	ldr	r2, [r7, #0]
 80014a6:	429a      	cmp	r2, r3
 80014a8:	d210      	bcs.n	80014cc <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014aa:	4b26      	ldr	r3, [pc, #152]	; (8001544 <HAL_RCC_ClockConfig+0x1b0>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	f023 0207 	bic.w	r2, r3, #7
 80014b2:	4924      	ldr	r1, [pc, #144]	; (8001544 <HAL_RCC_ClockConfig+0x1b0>)
 80014b4:	683b      	ldr	r3, [r7, #0]
 80014b6:	4313      	orrs	r3, r2
 80014b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80014ba:	4b22      	ldr	r3, [pc, #136]	; (8001544 <HAL_RCC_ClockConfig+0x1b0>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f003 0307 	and.w	r3, r3, #7
 80014c2:	683a      	ldr	r2, [r7, #0]
 80014c4:	429a      	cmp	r2, r3
 80014c6:	d001      	beq.n	80014cc <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80014c8:	2301      	movs	r3, #1
 80014ca:	e036      	b.n	800153a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	f003 0304 	and.w	r3, r3, #4
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d008      	beq.n	80014ea <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80014d8:	4b1b      	ldr	r3, [pc, #108]	; (8001548 <HAL_RCC_ClockConfig+0x1b4>)
 80014da:	689b      	ldr	r3, [r3, #8]
 80014dc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	68db      	ldr	r3, [r3, #12]
 80014e4:	4918      	ldr	r1, [pc, #96]	; (8001548 <HAL_RCC_ClockConfig+0x1b4>)
 80014e6:	4313      	orrs	r3, r2
 80014e8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f003 0308 	and.w	r3, r3, #8
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d009      	beq.n	800150a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80014f6:	4b14      	ldr	r3, [pc, #80]	; (8001548 <HAL_RCC_ClockConfig+0x1b4>)
 80014f8:	689b      	ldr	r3, [r3, #8]
 80014fa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	691b      	ldr	r3, [r3, #16]
 8001502:	00db      	lsls	r3, r3, #3
 8001504:	4910      	ldr	r1, [pc, #64]	; (8001548 <HAL_RCC_ClockConfig+0x1b4>)
 8001506:	4313      	orrs	r3, r2
 8001508:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800150a:	f000 f825 	bl	8001558 <HAL_RCC_GetSysClockFreq>
 800150e:	4601      	mov	r1, r0
 8001510:	4b0d      	ldr	r3, [pc, #52]	; (8001548 <HAL_RCC_ClockConfig+0x1b4>)
 8001512:	689b      	ldr	r3, [r3, #8]
 8001514:	091b      	lsrs	r3, r3, #4
 8001516:	f003 030f 	and.w	r3, r3, #15
 800151a:	4a0c      	ldr	r2, [pc, #48]	; (800154c <HAL_RCC_ClockConfig+0x1b8>)
 800151c:	5cd3      	ldrb	r3, [r2, r3]
 800151e:	f003 031f 	and.w	r3, r3, #31
 8001522:	fa21 f303 	lsr.w	r3, r1, r3
 8001526:	4a0a      	ldr	r2, [pc, #40]	; (8001550 <HAL_RCC_ClockConfig+0x1bc>)
 8001528:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800152a:	4b0a      	ldr	r3, [pc, #40]	; (8001554 <HAL_RCC_ClockConfig+0x1c0>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	4618      	mov	r0, r3
 8001530:	f7fe ffe6 	bl	8000500 <HAL_InitTick>
 8001534:	4603      	mov	r3, r0
 8001536:	72fb      	strb	r3, [r7, #11]

  return status;
 8001538:	7afb      	ldrb	r3, [r7, #11]
}
 800153a:	4618      	mov	r0, r3
 800153c:	3710      	adds	r7, #16
 800153e:	46bd      	mov	sp, r7
 8001540:	bd80      	pop	{r7, pc}
 8001542:	bf00      	nop
 8001544:	40022000 	.word	0x40022000
 8001548:	40021000 	.word	0x40021000
 800154c:	080076dc 	.word	0x080076dc
 8001550:	2000000c 	.word	0x2000000c
 8001554:	20000000 	.word	0x20000000

08001558 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001558:	b480      	push	{r7}
 800155a:	b089      	sub	sp, #36	; 0x24
 800155c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800155e:	2300      	movs	r3, #0
 8001560:	61fb      	str	r3, [r7, #28]
 8001562:	2300      	movs	r3, #0
 8001564:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001566:	4b3d      	ldr	r3, [pc, #244]	; (800165c <HAL_RCC_GetSysClockFreq+0x104>)
 8001568:	689b      	ldr	r3, [r3, #8]
 800156a:	f003 030c 	and.w	r3, r3, #12
 800156e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001570:	4b3a      	ldr	r3, [pc, #232]	; (800165c <HAL_RCC_GetSysClockFreq+0x104>)
 8001572:	68db      	ldr	r3, [r3, #12]
 8001574:	f003 0303 	and.w	r3, r3, #3
 8001578:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800157a:	693b      	ldr	r3, [r7, #16]
 800157c:	2b00      	cmp	r3, #0
 800157e:	d005      	beq.n	800158c <HAL_RCC_GetSysClockFreq+0x34>
 8001580:	693b      	ldr	r3, [r7, #16]
 8001582:	2b0c      	cmp	r3, #12
 8001584:	d121      	bne.n	80015ca <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	2b01      	cmp	r3, #1
 800158a:	d11e      	bne.n	80015ca <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800158c:	4b33      	ldr	r3, [pc, #204]	; (800165c <HAL_RCC_GetSysClockFreq+0x104>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f003 0308 	and.w	r3, r3, #8
 8001594:	2b00      	cmp	r3, #0
 8001596:	d107      	bne.n	80015a8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001598:	4b30      	ldr	r3, [pc, #192]	; (800165c <HAL_RCC_GetSysClockFreq+0x104>)
 800159a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800159e:	0a1b      	lsrs	r3, r3, #8
 80015a0:	f003 030f 	and.w	r3, r3, #15
 80015a4:	61fb      	str	r3, [r7, #28]
 80015a6:	e005      	b.n	80015b4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80015a8:	4b2c      	ldr	r3, [pc, #176]	; (800165c <HAL_RCC_GetSysClockFreq+0x104>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	091b      	lsrs	r3, r3, #4
 80015ae:	f003 030f 	and.w	r3, r3, #15
 80015b2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80015b4:	4a2a      	ldr	r2, [pc, #168]	; (8001660 <HAL_RCC_GetSysClockFreq+0x108>)
 80015b6:	69fb      	ldr	r3, [r7, #28]
 80015b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015bc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80015be:	693b      	ldr	r3, [r7, #16]
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d10d      	bne.n	80015e0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80015c4:	69fb      	ldr	r3, [r7, #28]
 80015c6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80015c8:	e00a      	b.n	80015e0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80015ca:	693b      	ldr	r3, [r7, #16]
 80015cc:	2b04      	cmp	r3, #4
 80015ce:	d102      	bne.n	80015d6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80015d0:	4b24      	ldr	r3, [pc, #144]	; (8001664 <HAL_RCC_GetSysClockFreq+0x10c>)
 80015d2:	61bb      	str	r3, [r7, #24]
 80015d4:	e004      	b.n	80015e0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80015d6:	693b      	ldr	r3, [r7, #16]
 80015d8:	2b08      	cmp	r3, #8
 80015da:	d101      	bne.n	80015e0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80015dc:	4b22      	ldr	r3, [pc, #136]	; (8001668 <HAL_RCC_GetSysClockFreq+0x110>)
 80015de:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80015e0:	693b      	ldr	r3, [r7, #16]
 80015e2:	2b0c      	cmp	r3, #12
 80015e4:	d133      	bne.n	800164e <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80015e6:	4b1d      	ldr	r3, [pc, #116]	; (800165c <HAL_RCC_GetSysClockFreq+0x104>)
 80015e8:	68db      	ldr	r3, [r3, #12]
 80015ea:	f003 0303 	and.w	r3, r3, #3
 80015ee:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80015f0:	68bb      	ldr	r3, [r7, #8]
 80015f2:	2b02      	cmp	r3, #2
 80015f4:	d002      	beq.n	80015fc <HAL_RCC_GetSysClockFreq+0xa4>
 80015f6:	2b03      	cmp	r3, #3
 80015f8:	d003      	beq.n	8001602 <HAL_RCC_GetSysClockFreq+0xaa>
 80015fa:	e005      	b.n	8001608 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80015fc:	4b19      	ldr	r3, [pc, #100]	; (8001664 <HAL_RCC_GetSysClockFreq+0x10c>)
 80015fe:	617b      	str	r3, [r7, #20]
      break;
 8001600:	e005      	b.n	800160e <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001602:	4b19      	ldr	r3, [pc, #100]	; (8001668 <HAL_RCC_GetSysClockFreq+0x110>)
 8001604:	617b      	str	r3, [r7, #20]
      break;
 8001606:	e002      	b.n	800160e <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001608:	69fb      	ldr	r3, [r7, #28]
 800160a:	617b      	str	r3, [r7, #20]
      break;
 800160c:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800160e:	4b13      	ldr	r3, [pc, #76]	; (800165c <HAL_RCC_GetSysClockFreq+0x104>)
 8001610:	68db      	ldr	r3, [r3, #12]
 8001612:	091b      	lsrs	r3, r3, #4
 8001614:	f003 0307 	and.w	r3, r3, #7
 8001618:	3301      	adds	r3, #1
 800161a:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800161c:	4b0f      	ldr	r3, [pc, #60]	; (800165c <HAL_RCC_GetSysClockFreq+0x104>)
 800161e:	68db      	ldr	r3, [r3, #12]
 8001620:	0a1b      	lsrs	r3, r3, #8
 8001622:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001626:	697a      	ldr	r2, [r7, #20]
 8001628:	fb02 f203 	mul.w	r2, r2, r3
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001632:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001634:	4b09      	ldr	r3, [pc, #36]	; (800165c <HAL_RCC_GetSysClockFreq+0x104>)
 8001636:	68db      	ldr	r3, [r3, #12]
 8001638:	0e5b      	lsrs	r3, r3, #25
 800163a:	f003 0303 	and.w	r3, r3, #3
 800163e:	3301      	adds	r3, #1
 8001640:	005b      	lsls	r3, r3, #1
 8001642:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001644:	697a      	ldr	r2, [r7, #20]
 8001646:	683b      	ldr	r3, [r7, #0]
 8001648:	fbb2 f3f3 	udiv	r3, r2, r3
 800164c:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800164e:	69bb      	ldr	r3, [r7, #24]
}
 8001650:	4618      	mov	r0, r3
 8001652:	3724      	adds	r7, #36	; 0x24
 8001654:	46bd      	mov	sp, r7
 8001656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165a:	4770      	bx	lr
 800165c:	40021000 	.word	0x40021000
 8001660:	080076f4 	.word	0x080076f4
 8001664:	00f42400 	.word	0x00f42400
 8001668:	007a1200 	.word	0x007a1200

0800166c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800166c:	b480      	push	{r7}
 800166e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001670:	4b03      	ldr	r3, [pc, #12]	; (8001680 <HAL_RCC_GetHCLKFreq+0x14>)
 8001672:	681b      	ldr	r3, [r3, #0]
}
 8001674:	4618      	mov	r0, r3
 8001676:	46bd      	mov	sp, r7
 8001678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167c:	4770      	bx	lr
 800167e:	bf00      	nop
 8001680:	2000000c 	.word	0x2000000c

08001684 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001688:	f7ff fff0 	bl	800166c <HAL_RCC_GetHCLKFreq>
 800168c:	4601      	mov	r1, r0
 800168e:	4b06      	ldr	r3, [pc, #24]	; (80016a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001690:	689b      	ldr	r3, [r3, #8]
 8001692:	0a1b      	lsrs	r3, r3, #8
 8001694:	f003 0307 	and.w	r3, r3, #7
 8001698:	4a04      	ldr	r2, [pc, #16]	; (80016ac <HAL_RCC_GetPCLK1Freq+0x28>)
 800169a:	5cd3      	ldrb	r3, [r2, r3]
 800169c:	f003 031f 	and.w	r3, r3, #31
 80016a0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80016a4:	4618      	mov	r0, r3
 80016a6:	bd80      	pop	{r7, pc}
 80016a8:	40021000 	.word	0x40021000
 80016ac:	080076ec 	.word	0x080076ec

080016b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80016b4:	f7ff ffda 	bl	800166c <HAL_RCC_GetHCLKFreq>
 80016b8:	4601      	mov	r1, r0
 80016ba:	4b06      	ldr	r3, [pc, #24]	; (80016d4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80016bc:	689b      	ldr	r3, [r3, #8]
 80016be:	0adb      	lsrs	r3, r3, #11
 80016c0:	f003 0307 	and.w	r3, r3, #7
 80016c4:	4a04      	ldr	r2, [pc, #16]	; (80016d8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80016c6:	5cd3      	ldrb	r3, [r2, r3]
 80016c8:	f003 031f 	and.w	r3, r3, #31
 80016cc:	fa21 f303 	lsr.w	r3, r1, r3
}
 80016d0:	4618      	mov	r0, r3
 80016d2:	bd80      	pop	{r7, pc}
 80016d4:	40021000 	.word	0x40021000
 80016d8:	080076ec 	.word	0x080076ec

080016dc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b086      	sub	sp, #24
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80016e4:	2300      	movs	r3, #0
 80016e6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80016e8:	4b2a      	ldr	r3, [pc, #168]	; (8001794 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80016ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d003      	beq.n	80016fc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80016f4:	f7ff fa3a 	bl	8000b6c <HAL_PWREx_GetVoltageRange>
 80016f8:	6178      	str	r0, [r7, #20]
 80016fa:	e014      	b.n	8001726 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80016fc:	4b25      	ldr	r3, [pc, #148]	; (8001794 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80016fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001700:	4a24      	ldr	r2, [pc, #144]	; (8001794 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001702:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001706:	6593      	str	r3, [r2, #88]	; 0x58
 8001708:	4b22      	ldr	r3, [pc, #136]	; (8001794 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800170a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800170c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001710:	60fb      	str	r3, [r7, #12]
 8001712:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001714:	f7ff fa2a 	bl	8000b6c <HAL_PWREx_GetVoltageRange>
 8001718:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800171a:	4b1e      	ldr	r3, [pc, #120]	; (8001794 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800171c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800171e:	4a1d      	ldr	r2, [pc, #116]	; (8001794 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001720:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001724:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001726:	697b      	ldr	r3, [r7, #20]
 8001728:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800172c:	d10b      	bne.n	8001746 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	2b80      	cmp	r3, #128	; 0x80
 8001732:	d919      	bls.n	8001768 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	2ba0      	cmp	r3, #160	; 0xa0
 8001738:	d902      	bls.n	8001740 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800173a:	2302      	movs	r3, #2
 800173c:	613b      	str	r3, [r7, #16]
 800173e:	e013      	b.n	8001768 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001740:	2301      	movs	r3, #1
 8001742:	613b      	str	r3, [r7, #16]
 8001744:	e010      	b.n	8001768 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	2b80      	cmp	r3, #128	; 0x80
 800174a:	d902      	bls.n	8001752 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800174c:	2303      	movs	r3, #3
 800174e:	613b      	str	r3, [r7, #16]
 8001750:	e00a      	b.n	8001768 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	2b80      	cmp	r3, #128	; 0x80
 8001756:	d102      	bne.n	800175e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001758:	2302      	movs	r3, #2
 800175a:	613b      	str	r3, [r7, #16]
 800175c:	e004      	b.n	8001768 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	2b70      	cmp	r3, #112	; 0x70
 8001762:	d101      	bne.n	8001768 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001764:	2301      	movs	r3, #1
 8001766:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001768:	4b0b      	ldr	r3, [pc, #44]	; (8001798 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f023 0207 	bic.w	r2, r3, #7
 8001770:	4909      	ldr	r1, [pc, #36]	; (8001798 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001772:	693b      	ldr	r3, [r7, #16]
 8001774:	4313      	orrs	r3, r2
 8001776:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001778:	4b07      	ldr	r3, [pc, #28]	; (8001798 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f003 0307 	and.w	r3, r3, #7
 8001780:	693a      	ldr	r2, [r7, #16]
 8001782:	429a      	cmp	r2, r3
 8001784:	d001      	beq.n	800178a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001786:	2301      	movs	r3, #1
 8001788:	e000      	b.n	800178c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800178a:	2300      	movs	r3, #0
}
 800178c:	4618      	mov	r0, r3
 800178e:	3718      	adds	r7, #24
 8001790:	46bd      	mov	sp, r7
 8001792:	bd80      	pop	{r7, pc}
 8001794:	40021000 	.word	0x40021000
 8001798:	40022000 	.word	0x40022000

0800179c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b086      	sub	sp, #24
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80017a4:	2300      	movs	r3, #0
 80017a6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80017a8:	2300      	movs	r3, #0
 80017aa:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d03f      	beq.n	8001838 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80017bc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80017c0:	d01c      	beq.n	80017fc <HAL_RCCEx_PeriphCLKConfig+0x60>
 80017c2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80017c6:	d802      	bhi.n	80017ce <HAL_RCCEx_PeriphCLKConfig+0x32>
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d00e      	beq.n	80017ea <HAL_RCCEx_PeriphCLKConfig+0x4e>
 80017cc:	e01f      	b.n	800180e <HAL_RCCEx_PeriphCLKConfig+0x72>
 80017ce:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80017d2:	d003      	beq.n	80017dc <HAL_RCCEx_PeriphCLKConfig+0x40>
 80017d4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80017d8:	d01c      	beq.n	8001814 <HAL_RCCEx_PeriphCLKConfig+0x78>
 80017da:	e018      	b.n	800180e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80017dc:	4b85      	ldr	r3, [pc, #532]	; (80019f4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80017de:	68db      	ldr	r3, [r3, #12]
 80017e0:	4a84      	ldr	r2, [pc, #528]	; (80019f4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80017e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017e6:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80017e8:	e015      	b.n	8001816 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	3304      	adds	r3, #4
 80017ee:	2100      	movs	r1, #0
 80017f0:	4618      	mov	r0, r3
 80017f2:	f000 fa89 	bl	8001d08 <RCCEx_PLLSAI1_Config>
 80017f6:	4603      	mov	r3, r0
 80017f8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80017fa:	e00c      	b.n	8001816 <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	3320      	adds	r3, #32
 8001800:	2100      	movs	r1, #0
 8001802:	4618      	mov	r0, r3
 8001804:	f000 fb70 	bl	8001ee8 <RCCEx_PLLSAI2_Config>
 8001808:	4603      	mov	r3, r0
 800180a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800180c:	e003      	b.n	8001816 <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800180e:	2301      	movs	r3, #1
 8001810:	74fb      	strb	r3, [r7, #19]
      break;
 8001812:	e000      	b.n	8001816 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8001814:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001816:	7cfb      	ldrb	r3, [r7, #19]
 8001818:	2b00      	cmp	r3, #0
 800181a:	d10b      	bne.n	8001834 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800181c:	4b75      	ldr	r3, [pc, #468]	; (80019f4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800181e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001822:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800182a:	4972      	ldr	r1, [pc, #456]	; (80019f4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800182c:	4313      	orrs	r3, r2
 800182e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8001832:	e001      	b.n	8001838 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001834:	7cfb      	ldrb	r3, [r7, #19]
 8001836:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001840:	2b00      	cmp	r3, #0
 8001842:	d03f      	beq.n	80018c4 <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001848:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800184c:	d01c      	beq.n	8001888 <HAL_RCCEx_PeriphCLKConfig+0xec>
 800184e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001852:	d802      	bhi.n	800185a <HAL_RCCEx_PeriphCLKConfig+0xbe>
 8001854:	2b00      	cmp	r3, #0
 8001856:	d00e      	beq.n	8001876 <HAL_RCCEx_PeriphCLKConfig+0xda>
 8001858:	e01f      	b.n	800189a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800185a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800185e:	d003      	beq.n	8001868 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 8001860:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8001864:	d01c      	beq.n	80018a0 <HAL_RCCEx_PeriphCLKConfig+0x104>
 8001866:	e018      	b.n	800189a <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001868:	4b62      	ldr	r3, [pc, #392]	; (80019f4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800186a:	68db      	ldr	r3, [r3, #12]
 800186c:	4a61      	ldr	r2, [pc, #388]	; (80019f4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800186e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001872:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001874:	e015      	b.n	80018a2 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	3304      	adds	r3, #4
 800187a:	2100      	movs	r1, #0
 800187c:	4618      	mov	r0, r3
 800187e:	f000 fa43 	bl	8001d08 <RCCEx_PLLSAI1_Config>
 8001882:	4603      	mov	r3, r0
 8001884:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001886:	e00c      	b.n	80018a2 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	3320      	adds	r3, #32
 800188c:	2100      	movs	r1, #0
 800188e:	4618      	mov	r0, r3
 8001890:	f000 fb2a 	bl	8001ee8 <RCCEx_PLLSAI2_Config>
 8001894:	4603      	mov	r3, r0
 8001896:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001898:	e003      	b.n	80018a2 <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800189a:	2301      	movs	r3, #1
 800189c:	74fb      	strb	r3, [r7, #19]
      break;
 800189e:	e000      	b.n	80018a2 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80018a0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80018a2:	7cfb      	ldrb	r3, [r7, #19]
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d10b      	bne.n	80018c0 <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80018a8:	4b52      	ldr	r3, [pc, #328]	; (80019f4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80018aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80018ae:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80018b6:	494f      	ldr	r1, [pc, #316]	; (80019f4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80018b8:	4313      	orrs	r3, r2
 80018ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80018be:	e001      	b.n	80018c4 <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80018c0:	7cfb      	ldrb	r3, [r7, #19]
 80018c2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	f000 80a0 	beq.w	8001a12 <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 80018d2:	2300      	movs	r3, #0
 80018d4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80018d6:	4b47      	ldr	r3, [pc, #284]	; (80019f4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80018d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d101      	bne.n	80018e6 <HAL_RCCEx_PeriphCLKConfig+0x14a>
 80018e2:	2301      	movs	r3, #1
 80018e4:	e000      	b.n	80018e8 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 80018e6:	2300      	movs	r3, #0
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d00d      	beq.n	8001908 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80018ec:	4b41      	ldr	r3, [pc, #260]	; (80019f4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80018ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018f0:	4a40      	ldr	r2, [pc, #256]	; (80019f4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80018f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018f6:	6593      	str	r3, [r2, #88]	; 0x58
 80018f8:	4b3e      	ldr	r3, [pc, #248]	; (80019f4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80018fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001900:	60bb      	str	r3, [r7, #8]
 8001902:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001904:	2301      	movs	r3, #1
 8001906:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001908:	4b3b      	ldr	r3, [pc, #236]	; (80019f8 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	4a3a      	ldr	r2, [pc, #232]	; (80019f8 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800190e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001912:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001914:	f7fe fe40 	bl	8000598 <HAL_GetTick>
 8001918:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800191a:	e009      	b.n	8001930 <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800191c:	f7fe fe3c 	bl	8000598 <HAL_GetTick>
 8001920:	4602      	mov	r2, r0
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	1ad3      	subs	r3, r2, r3
 8001926:	2b02      	cmp	r3, #2
 8001928:	d902      	bls.n	8001930 <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 800192a:	2303      	movs	r3, #3
 800192c:	74fb      	strb	r3, [r7, #19]
        break;
 800192e:	e005      	b.n	800193c <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001930:	4b31      	ldr	r3, [pc, #196]	; (80019f8 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001938:	2b00      	cmp	r3, #0
 800193a:	d0ef      	beq.n	800191c <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 800193c:	7cfb      	ldrb	r3, [r7, #19]
 800193e:	2b00      	cmp	r3, #0
 8001940:	d15c      	bne.n	80019fc <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001942:	4b2c      	ldr	r3, [pc, #176]	; (80019f4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001944:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001948:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800194c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800194e:	697b      	ldr	r3, [r7, #20]
 8001950:	2b00      	cmp	r3, #0
 8001952:	d01f      	beq.n	8001994 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800195a:	697a      	ldr	r2, [r7, #20]
 800195c:	429a      	cmp	r2, r3
 800195e:	d019      	beq.n	8001994 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001960:	4b24      	ldr	r3, [pc, #144]	; (80019f4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001962:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001966:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800196a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800196c:	4b21      	ldr	r3, [pc, #132]	; (80019f4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800196e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001972:	4a20      	ldr	r2, [pc, #128]	; (80019f4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001974:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001978:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800197c:	4b1d      	ldr	r3, [pc, #116]	; (80019f4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800197e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001982:	4a1c      	ldr	r2, [pc, #112]	; (80019f4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001984:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001988:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800198c:	4a19      	ldr	r2, [pc, #100]	; (80019f4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800198e:	697b      	ldr	r3, [r7, #20]
 8001990:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001994:	697b      	ldr	r3, [r7, #20]
 8001996:	f003 0301 	and.w	r3, r3, #1
 800199a:	2b00      	cmp	r3, #0
 800199c:	d016      	beq.n	80019cc <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800199e:	f7fe fdfb 	bl	8000598 <HAL_GetTick>
 80019a2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80019a4:	e00b      	b.n	80019be <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019a6:	f7fe fdf7 	bl	8000598 <HAL_GetTick>
 80019aa:	4602      	mov	r2, r0
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	1ad3      	subs	r3, r2, r3
 80019b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80019b4:	4293      	cmp	r3, r2
 80019b6:	d902      	bls.n	80019be <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 80019b8:	2303      	movs	r3, #3
 80019ba:	74fb      	strb	r3, [r7, #19]
            break;
 80019bc:	e006      	b.n	80019cc <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80019be:	4b0d      	ldr	r3, [pc, #52]	; (80019f4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80019c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019c4:	f003 0302 	and.w	r3, r3, #2
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d0ec      	beq.n	80019a6 <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 80019cc:	7cfb      	ldrb	r3, [r7, #19]
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d10c      	bne.n	80019ec <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80019d2:	4b08      	ldr	r3, [pc, #32]	; (80019f4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80019d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019d8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80019e2:	4904      	ldr	r1, [pc, #16]	; (80019f4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80019e4:	4313      	orrs	r3, r2
 80019e6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80019ea:	e009      	b.n	8001a00 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80019ec:	7cfb      	ldrb	r3, [r7, #19]
 80019ee:	74bb      	strb	r3, [r7, #18]
 80019f0:	e006      	b.n	8001a00 <HAL_RCCEx_PeriphCLKConfig+0x264>
 80019f2:	bf00      	nop
 80019f4:	40021000 	.word	0x40021000
 80019f8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80019fc:	7cfb      	ldrb	r3, [r7, #19]
 80019fe:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001a00:	7c7b      	ldrb	r3, [r7, #17]
 8001a02:	2b01      	cmp	r3, #1
 8001a04:	d105      	bne.n	8001a12 <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a06:	4ba1      	ldr	r3, [pc, #644]	; (8001c8c <HAL_RCCEx_PeriphCLKConfig+0x4f0>)
 8001a08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a0a:	4aa0      	ldr	r2, [pc, #640]	; (8001c8c <HAL_RCCEx_PeriphCLKConfig+0x4f0>)
 8001a0c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a10:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f003 0301 	and.w	r3, r3, #1
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d00a      	beq.n	8001a34 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001a1e:	4b9b      	ldr	r3, [pc, #620]	; (8001c8c <HAL_RCCEx_PeriphCLKConfig+0x4f0>)
 8001a20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a24:	f023 0203 	bic.w	r2, r3, #3
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a2c:	4997      	ldr	r1, [pc, #604]	; (8001c8c <HAL_RCCEx_PeriphCLKConfig+0x4f0>)
 8001a2e:	4313      	orrs	r3, r2
 8001a30:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f003 0302 	and.w	r3, r3, #2
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d00a      	beq.n	8001a56 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001a40:	4b92      	ldr	r3, [pc, #584]	; (8001c8c <HAL_RCCEx_PeriphCLKConfig+0x4f0>)
 8001a42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a46:	f023 020c 	bic.w	r2, r3, #12
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a4e:	498f      	ldr	r1, [pc, #572]	; (8001c8c <HAL_RCCEx_PeriphCLKConfig+0x4f0>)
 8001a50:	4313      	orrs	r3, r2
 8001a52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f003 0304 	and.w	r3, r3, #4
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d00a      	beq.n	8001a78 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001a62:	4b8a      	ldr	r3, [pc, #552]	; (8001c8c <HAL_RCCEx_PeriphCLKConfig+0x4f0>)
 8001a64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a68:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a70:	4986      	ldr	r1, [pc, #536]	; (8001c8c <HAL_RCCEx_PeriphCLKConfig+0x4f0>)
 8001a72:	4313      	orrs	r3, r2
 8001a74:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f003 0308 	and.w	r3, r3, #8
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d00a      	beq.n	8001a9a <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001a84:	4b81      	ldr	r3, [pc, #516]	; (8001c8c <HAL_RCCEx_PeriphCLKConfig+0x4f0>)
 8001a86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a8a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a92:	497e      	ldr	r1, [pc, #504]	; (8001c8c <HAL_RCCEx_PeriphCLKConfig+0x4f0>)
 8001a94:	4313      	orrs	r3, r2
 8001a96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f003 0310 	and.w	r3, r3, #16
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d00a      	beq.n	8001abc <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8001aa6:	4b79      	ldr	r3, [pc, #484]	; (8001c8c <HAL_RCCEx_PeriphCLKConfig+0x4f0>)
 8001aa8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001aac:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ab4:	4975      	ldr	r1, [pc, #468]	; (8001c8c <HAL_RCCEx_PeriphCLKConfig+0x4f0>)
 8001ab6:	4313      	orrs	r3, r2
 8001ab8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f003 0320 	and.w	r3, r3, #32
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d00a      	beq.n	8001ade <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001ac8:	4b70      	ldr	r3, [pc, #448]	; (8001c8c <HAL_RCCEx_PeriphCLKConfig+0x4f0>)
 8001aca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ace:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ad6:	496d      	ldr	r1, [pc, #436]	; (8001c8c <HAL_RCCEx_PeriphCLKConfig+0x4f0>)
 8001ad8:	4313      	orrs	r3, r2
 8001ada:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d00a      	beq.n	8001b00 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001aea:	4b68      	ldr	r3, [pc, #416]	; (8001c8c <HAL_RCCEx_PeriphCLKConfig+0x4f0>)
 8001aec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001af0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001af8:	4964      	ldr	r1, [pc, #400]	; (8001c8c <HAL_RCCEx_PeriphCLKConfig+0x4f0>)
 8001afa:	4313      	orrs	r3, r2
 8001afc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d00a      	beq.n	8001b22 <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8001b0c:	4b5f      	ldr	r3, [pc, #380]	; (8001c8c <HAL_RCCEx_PeriphCLKConfig+0x4f0>)
 8001b0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b12:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b1a:	495c      	ldr	r1, [pc, #368]	; (8001c8c <HAL_RCCEx_PeriphCLKConfig+0x4f0>)
 8001b1c:	4313      	orrs	r3, r2
 8001b1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d00a      	beq.n	8001b44 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001b2e:	4b57      	ldr	r3, [pc, #348]	; (8001c8c <HAL_RCCEx_PeriphCLKConfig+0x4f0>)
 8001b30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b34:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b3c:	4953      	ldr	r1, [pc, #332]	; (8001c8c <HAL_RCCEx_PeriphCLKConfig+0x4f0>)
 8001b3e:	4313      	orrs	r3, r2
 8001b40:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d00a      	beq.n	8001b66 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001b50:	4b4e      	ldr	r3, [pc, #312]	; (8001c8c <HAL_RCCEx_PeriphCLKConfig+0x4f0>)
 8001b52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b56:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b5e:	494b      	ldr	r1, [pc, #300]	; (8001c8c <HAL_RCCEx_PeriphCLKConfig+0x4f0>)
 8001b60:	4313      	orrs	r3, r2
 8001b62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d00a      	beq.n	8001b88 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001b72:	4b46      	ldr	r3, [pc, #280]	; (8001c8c <HAL_RCCEx_PeriphCLKConfig+0x4f0>)
 8001b74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b78:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b80:	4942      	ldr	r1, [pc, #264]	; (8001c8c <HAL_RCCEx_PeriphCLKConfig+0x4f0>)
 8001b82:	4313      	orrs	r3, r2
 8001b84:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d028      	beq.n	8001be6 <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8001b94:	4b3d      	ldr	r3, [pc, #244]	; (8001c8c <HAL_RCCEx_PeriphCLKConfig+0x4f0>)
 8001b96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b9a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001ba2:	493a      	ldr	r1, [pc, #232]	; (8001c8c <HAL_RCCEx_PeriphCLKConfig+0x4f0>)
 8001ba4:	4313      	orrs	r3, r2
 8001ba6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001bae:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001bb2:	d106      	bne.n	8001bc2 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001bb4:	4b35      	ldr	r3, [pc, #212]	; (8001c8c <HAL_RCCEx_PeriphCLKConfig+0x4f0>)
 8001bb6:	68db      	ldr	r3, [r3, #12]
 8001bb8:	4a34      	ldr	r2, [pc, #208]	; (8001c8c <HAL_RCCEx_PeriphCLKConfig+0x4f0>)
 8001bba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001bbe:	60d3      	str	r3, [r2, #12]
 8001bc0:	e011      	b.n	8001be6 <HAL_RCCEx_PeriphCLKConfig+0x44a>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001bc6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001bca:	d10c      	bne.n	8001be6 <HAL_RCCEx_PeriphCLKConfig+0x44a>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	3304      	adds	r3, #4
 8001bd0:	2101      	movs	r1, #1
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	f000 f898 	bl	8001d08 <RCCEx_PLLSAI1_Config>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8001bdc:	7cfb      	ldrb	r3, [r7, #19]
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d001      	beq.n	8001be6 <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* set overall return value */
        status = ret;
 8001be2:	7cfb      	ldrb	r3, [r7, #19]
 8001be4:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d028      	beq.n	8001c44 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8001bf2:	4b26      	ldr	r3, [pc, #152]	; (8001c8c <HAL_RCCEx_PeriphCLKConfig+0x4f0>)
 8001bf4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001bf8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c00:	4922      	ldr	r1, [pc, #136]	; (8001c8c <HAL_RCCEx_PeriphCLKConfig+0x4f0>)
 8001c02:	4313      	orrs	r3, r2
 8001c04:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c0c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001c10:	d106      	bne.n	8001c20 <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001c12:	4b1e      	ldr	r3, [pc, #120]	; (8001c8c <HAL_RCCEx_PeriphCLKConfig+0x4f0>)
 8001c14:	68db      	ldr	r3, [r3, #12]
 8001c16:	4a1d      	ldr	r2, [pc, #116]	; (8001c8c <HAL_RCCEx_PeriphCLKConfig+0x4f0>)
 8001c18:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001c1c:	60d3      	str	r3, [r2, #12]
 8001c1e:	e011      	b.n	8001c44 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c24:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001c28:	d10c      	bne.n	8001c44 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	3304      	adds	r3, #4
 8001c2e:	2101      	movs	r1, #1
 8001c30:	4618      	mov	r0, r3
 8001c32:	f000 f869 	bl	8001d08 <RCCEx_PLLSAI1_Config>
 8001c36:	4603      	mov	r3, r0
 8001c38:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8001c3a:	7cfb      	ldrb	r3, [r7, #19]
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d001      	beq.n	8001c44 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 8001c40:	7cfb      	ldrb	r3, [r7, #19]
 8001c42:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d031      	beq.n	8001cb4 <HAL_RCCEx_PeriphCLKConfig+0x518>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001c50:	4b0e      	ldr	r3, [pc, #56]	; (8001c8c <HAL_RCCEx_PeriphCLKConfig+0x4f0>)
 8001c52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c56:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c5e:	490b      	ldr	r1, [pc, #44]	; (8001c8c <HAL_RCCEx_PeriphCLKConfig+0x4f0>)
 8001c60:	4313      	orrs	r3, r2
 8001c62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c6a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001c6e:	d10f      	bne.n	8001c90 <HAL_RCCEx_PeriphCLKConfig+0x4f4>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	3304      	adds	r3, #4
 8001c74:	2102      	movs	r1, #2
 8001c76:	4618      	mov	r0, r3
 8001c78:	f000 f846 	bl	8001d08 <RCCEx_PLLSAI1_Config>
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8001c80:	7cfb      	ldrb	r3, [r7, #19]
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d016      	beq.n	8001cb4 <HAL_RCCEx_PeriphCLKConfig+0x518>
      {
        /* set overall return value */
        status = ret;
 8001c86:	7cfb      	ldrb	r3, [r7, #19]
 8001c88:	74bb      	strb	r3, [r7, #18]
 8001c8a:	e013      	b.n	8001cb4 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8001c8c:	40021000 	.word	0x40021000
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c94:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001c98:	d10c      	bne.n	8001cb4 <HAL_RCCEx_PeriphCLKConfig+0x518>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	3320      	adds	r3, #32
 8001c9e:	2102      	movs	r1, #2
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	f000 f921 	bl	8001ee8 <RCCEx_PLLSAI2_Config>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8001caa:	7cfb      	ldrb	r3, [r7, #19]
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d001      	beq.n	8001cb4 <HAL_RCCEx_PeriphCLKConfig+0x518>
      {
        /* set overall return value */
        status = ret;
 8001cb0:	7cfb      	ldrb	r3, [r7, #19]
 8001cb2:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d00a      	beq.n	8001cd6 <HAL_RCCEx_PeriphCLKConfig+0x53a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8001cc0:	4b10      	ldr	r3, [pc, #64]	; (8001d04 <HAL_RCCEx_PeriphCLKConfig+0x568>)
 8001cc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001cc6:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001cce:	490d      	ldr	r1, [pc, #52]	; (8001d04 <HAL_RCCEx_PeriphCLKConfig+0x568>)
 8001cd0:	4313      	orrs	r3, r2
 8001cd2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d00a      	beq.n	8001cf8 <HAL_RCCEx_PeriphCLKConfig+0x55c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8001ce2:	4b08      	ldr	r3, [pc, #32]	; (8001d04 <HAL_RCCEx_PeriphCLKConfig+0x568>)
 8001ce4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ce8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001cf0:	4904      	ldr	r1, [pc, #16]	; (8001d04 <HAL_RCCEx_PeriphCLKConfig+0x568>)
 8001cf2:	4313      	orrs	r3, r2
 8001cf4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8001cf8:	7cbb      	ldrb	r3, [r7, #18]
}
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	3718      	adds	r7, #24
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bd80      	pop	{r7, pc}
 8001d02:	bf00      	nop
 8001d04:	40021000 	.word	0x40021000

08001d08 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b084      	sub	sp, #16
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
 8001d10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8001d12:	2300      	movs	r3, #0
 8001d14:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8001d16:	4b73      	ldr	r3, [pc, #460]	; (8001ee4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8001d18:	68db      	ldr	r3, [r3, #12]
 8001d1a:	f003 0303 	and.w	r3, r3, #3
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d018      	beq.n	8001d54 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8001d22:	4b70      	ldr	r3, [pc, #448]	; (8001ee4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8001d24:	68db      	ldr	r3, [r3, #12]
 8001d26:	f003 0203 	and.w	r2, r3, #3
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	429a      	cmp	r2, r3
 8001d30:	d10d      	bne.n	8001d4e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
       ||
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d009      	beq.n	8001d4e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8001d3a:	4b6a      	ldr	r3, [pc, #424]	; (8001ee4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8001d3c:	68db      	ldr	r3, [r3, #12]
 8001d3e:	091b      	lsrs	r3, r3, #4
 8001d40:	f003 0307 	and.w	r3, r3, #7
 8001d44:	1c5a      	adds	r2, r3, #1
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	685b      	ldr	r3, [r3, #4]
       ||
 8001d4a:	429a      	cmp	r2, r3
 8001d4c:	d044      	beq.n	8001dd8 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8001d4e:	2301      	movs	r3, #1
 8001d50:	73fb      	strb	r3, [r7, #15]
 8001d52:	e041      	b.n	8001dd8 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	2b02      	cmp	r3, #2
 8001d5a:	d00c      	beq.n	8001d76 <RCCEx_PLLSAI1_Config+0x6e>
 8001d5c:	2b03      	cmp	r3, #3
 8001d5e:	d013      	beq.n	8001d88 <RCCEx_PLLSAI1_Config+0x80>
 8001d60:	2b01      	cmp	r3, #1
 8001d62:	d120      	bne.n	8001da6 <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8001d64:	4b5f      	ldr	r3, [pc, #380]	; (8001ee4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f003 0302 	and.w	r3, r3, #2
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d11d      	bne.n	8001dac <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8001d70:	2301      	movs	r3, #1
 8001d72:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001d74:	e01a      	b.n	8001dac <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8001d76:	4b5b      	ldr	r3, [pc, #364]	; (8001ee4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d116      	bne.n	8001db0 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 8001d82:	2301      	movs	r3, #1
 8001d84:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001d86:	e013      	b.n	8001db0 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8001d88:	4b56      	ldr	r3, [pc, #344]	; (8001ee4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d10f      	bne.n	8001db4 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8001d94:	4b53      	ldr	r3, [pc, #332]	; (8001ee4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d109      	bne.n	8001db4 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8001da0:	2301      	movs	r3, #1
 8001da2:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8001da4:	e006      	b.n	8001db4 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 8001da6:	2301      	movs	r3, #1
 8001da8:	73fb      	strb	r3, [r7, #15]
      break;
 8001daa:	e004      	b.n	8001db6 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8001dac:	bf00      	nop
 8001dae:	e002      	b.n	8001db6 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8001db0:	bf00      	nop
 8001db2:	e000      	b.n	8001db6 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8001db4:	bf00      	nop
    }

    if(status == HAL_OK)
 8001db6:	7bfb      	ldrb	r3, [r7, #15]
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d10d      	bne.n	8001dd8 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8001dbc:	4b49      	ldr	r3, [pc, #292]	; (8001ee4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8001dbe:	68db      	ldr	r3, [r3, #12]
 8001dc0:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	6819      	ldr	r1, [r3, #0]
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	685b      	ldr	r3, [r3, #4]
 8001dcc:	3b01      	subs	r3, #1
 8001dce:	011b      	lsls	r3, r3, #4
 8001dd0:	430b      	orrs	r3, r1
 8001dd2:	4944      	ldr	r1, [pc, #272]	; (8001ee4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8001dd4:	4313      	orrs	r3, r2
 8001dd6:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8001dd8:	7bfb      	ldrb	r3, [r7, #15]
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d17d      	bne.n	8001eda <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8001dde:	4b41      	ldr	r3, [pc, #260]	; (8001ee4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	4a40      	ldr	r2, [pc, #256]	; (8001ee4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8001de4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8001de8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001dea:	f7fe fbd5 	bl	8000598 <HAL_GetTick>
 8001dee:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8001df0:	e009      	b.n	8001e06 <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8001df2:	f7fe fbd1 	bl	8000598 <HAL_GetTick>
 8001df6:	4602      	mov	r2, r0
 8001df8:	68bb      	ldr	r3, [r7, #8]
 8001dfa:	1ad3      	subs	r3, r2, r3
 8001dfc:	2b02      	cmp	r3, #2
 8001dfe:	d902      	bls.n	8001e06 <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8001e00:	2303      	movs	r3, #3
 8001e02:	73fb      	strb	r3, [r7, #15]
        break;
 8001e04:	e005      	b.n	8001e12 <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8001e06:	4b37      	ldr	r3, [pc, #220]	; (8001ee4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d1ef      	bne.n	8001df2 <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8001e12:	7bfb      	ldrb	r3, [r7, #15]
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d160      	bne.n	8001eda <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d111      	bne.n	8001e42 <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8001e1e:	4b31      	ldr	r3, [pc, #196]	; (8001ee4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8001e20:	691b      	ldr	r3, [r3, #16]
 8001e22:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8001e26:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001e2a:	687a      	ldr	r2, [r7, #4]
 8001e2c:	6892      	ldr	r2, [r2, #8]
 8001e2e:	0211      	lsls	r1, r2, #8
 8001e30:	687a      	ldr	r2, [r7, #4]
 8001e32:	68d2      	ldr	r2, [r2, #12]
 8001e34:	0912      	lsrs	r2, r2, #4
 8001e36:	0452      	lsls	r2, r2, #17
 8001e38:	430a      	orrs	r2, r1
 8001e3a:	492a      	ldr	r1, [pc, #168]	; (8001ee4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8001e3c:	4313      	orrs	r3, r2
 8001e3e:	610b      	str	r3, [r1, #16]
 8001e40:	e027      	b.n	8001e92 <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	2b01      	cmp	r3, #1
 8001e46:	d112      	bne.n	8001e6e <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8001e48:	4b26      	ldr	r3, [pc, #152]	; (8001ee4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8001e4a:	691b      	ldr	r3, [r3, #16]
 8001e4c:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8001e50:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8001e54:	687a      	ldr	r2, [r7, #4]
 8001e56:	6892      	ldr	r2, [r2, #8]
 8001e58:	0211      	lsls	r1, r2, #8
 8001e5a:	687a      	ldr	r2, [r7, #4]
 8001e5c:	6912      	ldr	r2, [r2, #16]
 8001e5e:	0852      	lsrs	r2, r2, #1
 8001e60:	3a01      	subs	r2, #1
 8001e62:	0552      	lsls	r2, r2, #21
 8001e64:	430a      	orrs	r2, r1
 8001e66:	491f      	ldr	r1, [pc, #124]	; (8001ee4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8001e68:	4313      	orrs	r3, r2
 8001e6a:	610b      	str	r3, [r1, #16]
 8001e6c:	e011      	b.n	8001e92 <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8001e6e:	4b1d      	ldr	r3, [pc, #116]	; (8001ee4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8001e70:	691b      	ldr	r3, [r3, #16]
 8001e72:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8001e76:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8001e7a:	687a      	ldr	r2, [r7, #4]
 8001e7c:	6892      	ldr	r2, [r2, #8]
 8001e7e:	0211      	lsls	r1, r2, #8
 8001e80:	687a      	ldr	r2, [r7, #4]
 8001e82:	6952      	ldr	r2, [r2, #20]
 8001e84:	0852      	lsrs	r2, r2, #1
 8001e86:	3a01      	subs	r2, #1
 8001e88:	0652      	lsls	r2, r2, #25
 8001e8a:	430a      	orrs	r2, r1
 8001e8c:	4915      	ldr	r1, [pc, #84]	; (8001ee4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8001e8e:	4313      	orrs	r3, r2
 8001e90:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8001e92:	4b14      	ldr	r3, [pc, #80]	; (8001ee4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	4a13      	ldr	r2, [pc, #76]	; (8001ee4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8001e98:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001e9c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e9e:	f7fe fb7b 	bl	8000598 <HAL_GetTick>
 8001ea2:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8001ea4:	e009      	b.n	8001eba <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8001ea6:	f7fe fb77 	bl	8000598 <HAL_GetTick>
 8001eaa:	4602      	mov	r2, r0
 8001eac:	68bb      	ldr	r3, [r7, #8]
 8001eae:	1ad3      	subs	r3, r2, r3
 8001eb0:	2b02      	cmp	r3, #2
 8001eb2:	d902      	bls.n	8001eba <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 8001eb4:	2303      	movs	r3, #3
 8001eb6:	73fb      	strb	r3, [r7, #15]
          break;
 8001eb8:	e005      	b.n	8001ec6 <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8001eba:	4b0a      	ldr	r3, [pc, #40]	; (8001ee4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d0ef      	beq.n	8001ea6 <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 8001ec6:	7bfb      	ldrb	r3, [r7, #15]
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d106      	bne.n	8001eda <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8001ecc:	4b05      	ldr	r3, [pc, #20]	; (8001ee4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8001ece:	691a      	ldr	r2, [r3, #16]
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	699b      	ldr	r3, [r3, #24]
 8001ed4:	4903      	ldr	r1, [pc, #12]	; (8001ee4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8001ed6:	4313      	orrs	r3, r2
 8001ed8:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8001eda:	7bfb      	ldrb	r3, [r7, #15]
}
 8001edc:	4618      	mov	r0, r3
 8001ede:	3710      	adds	r7, #16
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	bd80      	pop	{r7, pc}
 8001ee4:	40021000 	.word	0x40021000

08001ee8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b084      	sub	sp, #16
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
 8001ef0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8001ef6:	4b68      	ldr	r3, [pc, #416]	; (8002098 <RCCEx_PLLSAI2_Config+0x1b0>)
 8001ef8:	68db      	ldr	r3, [r3, #12]
 8001efa:	f003 0303 	and.w	r3, r3, #3
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d018      	beq.n	8001f34 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8001f02:	4b65      	ldr	r3, [pc, #404]	; (8002098 <RCCEx_PLLSAI2_Config+0x1b0>)
 8001f04:	68db      	ldr	r3, [r3, #12]
 8001f06:	f003 0203 	and.w	r2, r3, #3
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	429a      	cmp	r2, r3
 8001f10:	d10d      	bne.n	8001f2e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
       ||
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d009      	beq.n	8001f2e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8001f1a:	4b5f      	ldr	r3, [pc, #380]	; (8002098 <RCCEx_PLLSAI2_Config+0x1b0>)
 8001f1c:	68db      	ldr	r3, [r3, #12]
 8001f1e:	091b      	lsrs	r3, r3, #4
 8001f20:	f003 0307 	and.w	r3, r3, #7
 8001f24:	1c5a      	adds	r2, r3, #1
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	685b      	ldr	r3, [r3, #4]
       ||
 8001f2a:	429a      	cmp	r2, r3
 8001f2c:	d044      	beq.n	8001fb8 <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8001f2e:	2301      	movs	r3, #1
 8001f30:	73fb      	strb	r3, [r7, #15]
 8001f32:	e041      	b.n	8001fb8 <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	2b02      	cmp	r3, #2
 8001f3a:	d00c      	beq.n	8001f56 <RCCEx_PLLSAI2_Config+0x6e>
 8001f3c:	2b03      	cmp	r3, #3
 8001f3e:	d013      	beq.n	8001f68 <RCCEx_PLLSAI2_Config+0x80>
 8001f40:	2b01      	cmp	r3, #1
 8001f42:	d120      	bne.n	8001f86 <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8001f44:	4b54      	ldr	r3, [pc, #336]	; (8002098 <RCCEx_PLLSAI2_Config+0x1b0>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f003 0302 	and.w	r3, r3, #2
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d11d      	bne.n	8001f8c <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 8001f50:	2301      	movs	r3, #1
 8001f52:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001f54:	e01a      	b.n	8001f8c <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8001f56:	4b50      	ldr	r3, [pc, #320]	; (8002098 <RCCEx_PLLSAI2_Config+0x1b0>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d116      	bne.n	8001f90 <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 8001f62:	2301      	movs	r3, #1
 8001f64:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001f66:	e013      	b.n	8001f90 <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8001f68:	4b4b      	ldr	r3, [pc, #300]	; (8002098 <RCCEx_PLLSAI2_Config+0x1b0>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d10f      	bne.n	8001f94 <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8001f74:	4b48      	ldr	r3, [pc, #288]	; (8002098 <RCCEx_PLLSAI2_Config+0x1b0>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d109      	bne.n	8001f94 <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 8001f80:	2301      	movs	r3, #1
 8001f82:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8001f84:	e006      	b.n	8001f94 <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 8001f86:	2301      	movs	r3, #1
 8001f88:	73fb      	strb	r3, [r7, #15]
      break;
 8001f8a:	e004      	b.n	8001f96 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8001f8c:	bf00      	nop
 8001f8e:	e002      	b.n	8001f96 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8001f90:	bf00      	nop
 8001f92:	e000      	b.n	8001f96 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8001f94:	bf00      	nop
    }

    if(status == HAL_OK)
 8001f96:	7bfb      	ldrb	r3, [r7, #15]
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d10d      	bne.n	8001fb8 <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8001f9c:	4b3e      	ldr	r3, [pc, #248]	; (8002098 <RCCEx_PLLSAI2_Config+0x1b0>)
 8001f9e:	68db      	ldr	r3, [r3, #12]
 8001fa0:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	6819      	ldr	r1, [r3, #0]
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	685b      	ldr	r3, [r3, #4]
 8001fac:	3b01      	subs	r3, #1
 8001fae:	011b      	lsls	r3, r3, #4
 8001fb0:	430b      	orrs	r3, r1
 8001fb2:	4939      	ldr	r1, [pc, #228]	; (8002098 <RCCEx_PLLSAI2_Config+0x1b0>)
 8001fb4:	4313      	orrs	r3, r2
 8001fb6:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8001fb8:	7bfb      	ldrb	r3, [r7, #15]
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d167      	bne.n	800208e <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8001fbe:	4b36      	ldr	r3, [pc, #216]	; (8002098 <RCCEx_PLLSAI2_Config+0x1b0>)
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	4a35      	ldr	r2, [pc, #212]	; (8002098 <RCCEx_PLLSAI2_Config+0x1b0>)
 8001fc4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001fc8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001fca:	f7fe fae5 	bl	8000598 <HAL_GetTick>
 8001fce:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8001fd0:	e009      	b.n	8001fe6 <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8001fd2:	f7fe fae1 	bl	8000598 <HAL_GetTick>
 8001fd6:	4602      	mov	r2, r0
 8001fd8:	68bb      	ldr	r3, [r7, #8]
 8001fda:	1ad3      	subs	r3, r2, r3
 8001fdc:	2b02      	cmp	r3, #2
 8001fde:	d902      	bls.n	8001fe6 <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8001fe0:	2303      	movs	r3, #3
 8001fe2:	73fb      	strb	r3, [r7, #15]
        break;
 8001fe4:	e005      	b.n	8001ff2 <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8001fe6:	4b2c      	ldr	r3, [pc, #176]	; (8002098 <RCCEx_PLLSAI2_Config+0x1b0>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d1ef      	bne.n	8001fd2 <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8001ff2:	7bfb      	ldrb	r3, [r7, #15]
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d14a      	bne.n	800208e <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d111      	bne.n	8002022 <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8001ffe:	4b26      	ldr	r3, [pc, #152]	; (8002098 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002000:	695b      	ldr	r3, [r3, #20]
 8002002:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002006:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800200a:	687a      	ldr	r2, [r7, #4]
 800200c:	6892      	ldr	r2, [r2, #8]
 800200e:	0211      	lsls	r1, r2, #8
 8002010:	687a      	ldr	r2, [r7, #4]
 8002012:	68d2      	ldr	r2, [r2, #12]
 8002014:	0912      	lsrs	r2, r2, #4
 8002016:	0452      	lsls	r2, r2, #17
 8002018:	430a      	orrs	r2, r1
 800201a:	491f      	ldr	r1, [pc, #124]	; (8002098 <RCCEx_PLLSAI2_Config+0x1b0>)
 800201c:	4313      	orrs	r3, r2
 800201e:	614b      	str	r3, [r1, #20]
 8002020:	e011      	b.n	8002046 <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002022:	4b1d      	ldr	r3, [pc, #116]	; (8002098 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002024:	695b      	ldr	r3, [r3, #20]
 8002026:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800202a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800202e:	687a      	ldr	r2, [r7, #4]
 8002030:	6892      	ldr	r2, [r2, #8]
 8002032:	0211      	lsls	r1, r2, #8
 8002034:	687a      	ldr	r2, [r7, #4]
 8002036:	6912      	ldr	r2, [r2, #16]
 8002038:	0852      	lsrs	r2, r2, #1
 800203a:	3a01      	subs	r2, #1
 800203c:	0652      	lsls	r2, r2, #25
 800203e:	430a      	orrs	r2, r1
 8002040:	4915      	ldr	r1, [pc, #84]	; (8002098 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002042:	4313      	orrs	r3, r2
 8002044:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002046:	4b14      	ldr	r3, [pc, #80]	; (8002098 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	4a13      	ldr	r2, [pc, #76]	; (8002098 <RCCEx_PLLSAI2_Config+0x1b0>)
 800204c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002050:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002052:	f7fe faa1 	bl	8000598 <HAL_GetTick>
 8002056:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002058:	e009      	b.n	800206e <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800205a:	f7fe fa9d 	bl	8000598 <HAL_GetTick>
 800205e:	4602      	mov	r2, r0
 8002060:	68bb      	ldr	r3, [r7, #8]
 8002062:	1ad3      	subs	r3, r2, r3
 8002064:	2b02      	cmp	r3, #2
 8002066:	d902      	bls.n	800206e <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 8002068:	2303      	movs	r3, #3
 800206a:	73fb      	strb	r3, [r7, #15]
          break;
 800206c:	e005      	b.n	800207a <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800206e:	4b0a      	ldr	r3, [pc, #40]	; (8002098 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002076:	2b00      	cmp	r3, #0
 8002078:	d0ef      	beq.n	800205a <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 800207a:	7bfb      	ldrb	r3, [r7, #15]
 800207c:	2b00      	cmp	r3, #0
 800207e:	d106      	bne.n	800208e <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002080:	4b05      	ldr	r3, [pc, #20]	; (8002098 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002082:	695a      	ldr	r2, [r3, #20]
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	695b      	ldr	r3, [r3, #20]
 8002088:	4903      	ldr	r1, [pc, #12]	; (8002098 <RCCEx_PLLSAI2_Config+0x1b0>)
 800208a:	4313      	orrs	r3, r2
 800208c:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800208e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002090:	4618      	mov	r0, r3
 8002092:	3710      	adds	r7, #16
 8002094:	46bd      	mov	sp, r7
 8002096:	bd80      	pop	{r7, pc}
 8002098:	40021000 	.word	0x40021000

0800209c <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b084      	sub	sp, #16
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80020a4:	2301      	movs	r3, #1
 80020a6:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d06f      	beq.n	800218e <HAL_RTC_Init+0xf2>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80020b4:	b2db      	uxtb	r3, r3
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d106      	bne.n	80020c8 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	2200      	movs	r2, #0
 80020be:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 80020c2:	6878      	ldr	r0, [r7, #4]
 80020c4:	f004 fab4 	bl	8006630 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	2202      	movs	r2, #2
 80020cc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	22ca      	movs	r2, #202	; 0xca
 80020d6:	625a      	str	r2, [r3, #36]	; 0x24
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	2253      	movs	r2, #83	; 0x53
 80020de:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 80020e0:	6878      	ldr	r0, [r7, #4]
 80020e2:	f000 f87f 	bl	80021e4 <RTC_EnterInitMode>
 80020e6:	4603      	mov	r3, r0
 80020e8:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 80020ea:	7bfb      	ldrb	r3, [r7, #15]
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d14e      	bne.n	800218e <HAL_RTC_Init+0xf2>
#if defined(STM32L412xx) || defined(STM32L422xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	689b      	ldr	r3, [r3, #8]
 80020f6:	687a      	ldr	r2, [r7, #4]
 80020f8:	6812      	ldr	r2, [r2, #0]
 80020fa:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80020fe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002102:	6093      	str	r3, [r2, #8]
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	6899      	ldr	r1, [r3, #8]
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	685a      	ldr	r2, [r3, #4]
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	691b      	ldr	r3, [r3, #16]
 8002112:	431a      	orrs	r2, r3
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	699b      	ldr	r3, [r3, #24]
 8002118:	431a      	orrs	r2, r3
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	430a      	orrs	r2, r1
 8002120:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	687a      	ldr	r2, [r7, #4]
 8002128:	68d2      	ldr	r2, [r2, #12]
 800212a:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	6919      	ldr	r1, [r3, #16]
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	689b      	ldr	r3, [r3, #8]
 8002136:	041a      	lsls	r2, r3, #16
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	430a      	orrs	r2, r1
 800213e:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8002140:	6878      	ldr	r0, [r7, #4]
 8002142:	f000 f883 	bl	800224c <RTC_ExitInitMode>
 8002146:	4603      	mov	r3, r0
 8002148:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 800214a:	7bfb      	ldrb	r3, [r7, #15]
 800214c:	2b00      	cmp	r3, #0
 800214e:	d11e      	bne.n	800218e <HAL_RTC_Init+0xf2>
      {
#if defined(STM32L412xx) || defined(STM32L422xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f022 0203 	bic.w	r2, r2, #3
 800215e:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	69da      	ldr	r2, [r3, #28]
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	695b      	ldr	r3, [r3, #20]
 800216e:	431a      	orrs	r2, r3
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	430a      	orrs	r2, r1
 8002176:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	22ff      	movs	r2, #255	; 0xff
 800217e:	625a      	str	r2, [r3, #36]	; 0x24

        if (status == HAL_OK)
 8002180:	7bfb      	ldrb	r3, [r7, #15]
 8002182:	2b00      	cmp	r3, #0
 8002184:	d103      	bne.n	800218e <HAL_RTC_Init+0xf2>
        {
          hrtc->State = HAL_RTC_STATE_READY;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	2201      	movs	r2, #1
 800218a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        }
      }
    }
  }

  return status;
 800218e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002190:	4618      	mov	r0, r3
 8002192:	3710      	adds	r7, #16
 8002194:	46bd      	mov	sp, r7
 8002196:	bd80      	pop	{r7, pc}

08002198 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b084      	sub	sp, #16
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	68da      	ldr	r2, [r3, #12]
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80021ae:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 80021b0:	f7fe f9f2 	bl	8000598 <HAL_GetTick>
 80021b4:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80021b6:	e009      	b.n	80021cc <HAL_RTC_WaitForSynchro+0x34>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80021b8:	f7fe f9ee 	bl	8000598 <HAL_GetTick>
 80021bc:	4602      	mov	r2, r0
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	1ad3      	subs	r3, r2, r3
 80021c2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80021c6:	d901      	bls.n	80021cc <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 80021c8:	2303      	movs	r3, #3
 80021ca:	e007      	b.n	80021dc <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	68db      	ldr	r3, [r3, #12]
 80021d2:	f003 0320 	and.w	r3, r3, #32
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d0ee      	beq.n	80021b8 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 80021da:	2300      	movs	r3, #0
}
 80021dc:	4618      	mov	r0, r3
 80021de:	3710      	adds	r7, #16
 80021e0:	46bd      	mov	sp, r7
 80021e2:	bd80      	pop	{r7, pc}

080021e4 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b084      	sub	sp, #16
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80021ec:	2300      	movs	r3, #0
 80021ee:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	68db      	ldr	r3, [r3, #12]
 80021f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d120      	bne.n	8002240 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f04f 32ff 	mov.w	r2, #4294967295
 8002206:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8002208:	f7fe f9c6 	bl	8000598 <HAL_GetTick>
 800220c:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800220e:	e00d      	b.n	800222c <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8002210:	f7fe f9c2 	bl	8000598 <HAL_GetTick>
 8002214:	4602      	mov	r2, r0
 8002216:	68bb      	ldr	r3, [r7, #8]
 8002218:	1ad3      	subs	r3, r2, r3
 800221a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800221e:	d905      	bls.n	800222c <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8002220:	2303      	movs	r3, #3
 8002222:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	2203      	movs	r2, #3
 8002228:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	68db      	ldr	r3, [r3, #12]
 8002232:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002236:	2b00      	cmp	r3, #0
 8002238:	d102      	bne.n	8002240 <RTC_EnterInitMode+0x5c>
 800223a:	7bfb      	ldrb	r3, [r7, #15]
 800223c:	2b03      	cmp	r3, #3
 800223e:	d1e7      	bne.n	8002210 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) */

  return status;
 8002240:	7bfb      	ldrb	r3, [r7, #15]
}
 8002242:	4618      	mov	r0, r3
 8002244:	3710      	adds	r7, #16
 8002246:	46bd      	mov	sp, r7
 8002248:	bd80      	pop	{r7, pc}
	...

0800224c <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b084      	sub	sp, #16
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002254:	2300      	movs	r3, #0
 8002256:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8002258:	4b1a      	ldr	r3, [pc, #104]	; (80022c4 <RTC_ExitInitMode+0x78>)
 800225a:	68db      	ldr	r3, [r3, #12]
 800225c:	4a19      	ldr	r2, [pc, #100]	; (80022c4 <RTC_ExitInitMode+0x78>)
 800225e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002262:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8002264:	4b17      	ldr	r3, [pc, #92]	; (80022c4 <RTC_ExitInitMode+0x78>)
 8002266:	689b      	ldr	r3, [r3, #8]
 8002268:	f003 0320 	and.w	r3, r3, #32
 800226c:	2b00      	cmp	r3, #0
 800226e:	d10c      	bne.n	800228a <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002270:	6878      	ldr	r0, [r7, #4]
 8002272:	f7ff ff91 	bl	8002198 <HAL_RTC_WaitForSynchro>
 8002276:	4603      	mov	r3, r0
 8002278:	2b00      	cmp	r3, #0
 800227a:	d01e      	beq.n	80022ba <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	2203      	movs	r2, #3
 8002280:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8002284:	2303      	movs	r3, #3
 8002286:	73fb      	strb	r3, [r7, #15]
 8002288:	e017      	b.n	80022ba <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800228a:	4b0e      	ldr	r3, [pc, #56]	; (80022c4 <RTC_ExitInitMode+0x78>)
 800228c:	689b      	ldr	r3, [r3, #8]
 800228e:	4a0d      	ldr	r2, [pc, #52]	; (80022c4 <RTC_ExitInitMode+0x78>)
 8002290:	f023 0320 	bic.w	r3, r3, #32
 8002294:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002296:	6878      	ldr	r0, [r7, #4]
 8002298:	f7ff ff7e 	bl	8002198 <HAL_RTC_WaitForSynchro>
 800229c:	4603      	mov	r3, r0
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d005      	beq.n	80022ae <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	2203      	movs	r2, #3
 80022a6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 80022aa:	2303      	movs	r3, #3
 80022ac:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80022ae:	4b05      	ldr	r3, [pc, #20]	; (80022c4 <RTC_ExitInitMode+0x78>)
 80022b0:	689b      	ldr	r3, [r3, #8]
 80022b2:	4a04      	ldr	r2, [pc, #16]	; (80022c4 <RTC_ExitInitMode+0x78>)
 80022b4:	f043 0320 	orr.w	r3, r3, #32
 80022b8:	6093      	str	r3, [r2, #8]
  }

  return status;
 80022ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80022bc:	4618      	mov	r0, r3
 80022be:	3710      	adds	r7, #16
 80022c0:	46bd      	mov	sp, r7
 80022c2:	bd80      	pop	{r7, pc}
 80022c4:	40002800 	.word	0x40002800

080022c8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b084      	sub	sp, #16
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d101      	bne.n	80022da <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80022d6:	2301      	movs	r3, #1
 80022d8:	e07c      	b.n	80023d4 <HAL_SPI_Init+0x10c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	2200      	movs	r2, #0
 80022de:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80022e6:	b2db      	uxtb	r3, r3
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d106      	bne.n	80022fa <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	2200      	movs	r2, #0
 80022f0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80022f4:	6878      	ldr	r0, [r7, #4]
 80022f6:	f004 f9b7 	bl	8006668 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	2202      	movs	r2, #2
 80022fe:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	681a      	ldr	r2, [r3, #0]
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002310:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	68db      	ldr	r3, [r3, #12]
 8002316:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800231a:	d902      	bls.n	8002322 <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800231c:	2300      	movs	r3, #0
 800231e:	60fb      	str	r3, [r7, #12]
 8002320:	e002      	b.n	8002328 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002322:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002326:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	68db      	ldr	r3, [r3, #12]
 800232c:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8002330:	d007      	beq.n	8002342 <HAL_SPI_Init+0x7a>
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	68db      	ldr	r3, [r3, #12]
 8002336:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800233a:	d002      	beq.n	8002342 <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	2200      	movs	r2, #0
 8002340:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002346:	2b00      	cmp	r3, #0
 8002348:	d10b      	bne.n	8002362 <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	68db      	ldr	r3, [r3, #12]
 800234e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002352:	d903      	bls.n	800235c <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2202      	movs	r2, #2
 8002358:	631a      	str	r2, [r3, #48]	; 0x30
 800235a:	e002      	b.n	8002362 <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2201      	movs	r2, #1
 8002360:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	685a      	ldr	r2, [r3, #4]
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	689b      	ldr	r3, [r3, #8]
 800236a:	431a      	orrs	r2, r3
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	691b      	ldr	r3, [r3, #16]
 8002370:	431a      	orrs	r2, r3
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	695b      	ldr	r3, [r3, #20]
 8002376:	431a      	orrs	r2, r3
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	699b      	ldr	r3, [r3, #24]
 800237c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002380:	431a      	orrs	r2, r3
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	69db      	ldr	r3, [r3, #28]
 8002386:	431a      	orrs	r2, r3
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6a1b      	ldr	r3, [r3, #32]
 800238c:	ea42 0103 	orr.w	r1, r2, r3
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	430a      	orrs	r2, r1
 800239a:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	699b      	ldr	r3, [r3, #24]
 80023a0:	0c1b      	lsrs	r3, r3, #16
 80023a2:	f003 0204 	and.w	r2, r3, #4
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023aa:	431a      	orrs	r2, r3
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023b0:	431a      	orrs	r2, r3
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	68db      	ldr	r3, [r3, #12]
 80023b6:	ea42 0103 	orr.w	r1, r2, r3
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	68fa      	ldr	r2, [r7, #12]
 80023c0:	430a      	orrs	r2, r1
 80023c2:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2200      	movs	r2, #0
 80023c8:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	2201      	movs	r2, #1
 80023ce:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80023d2:	2300      	movs	r3, #0
}
 80023d4:	4618      	mov	r0, r3
 80023d6:	3710      	adds	r7, #16
 80023d8:	46bd      	mov	sp, r7
 80023da:	bd80      	pop	{r7, pc}

080023dc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b082      	sub	sp, #8
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d101      	bne.n	80023ee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80023ea:	2301      	movs	r3, #1
 80023ec:	e01d      	b.n	800242a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023f4:	b2db      	uxtb	r3, r3
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d106      	bne.n	8002408 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	2200      	movs	r2, #0
 80023fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002402:	6878      	ldr	r0, [r7, #4]
 8002404:	f004 f9e4 	bl	80067d0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	2202      	movs	r2, #2
 800240c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681a      	ldr	r2, [r3, #0]
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	3304      	adds	r3, #4
 8002418:	4619      	mov	r1, r3
 800241a:	4610      	mov	r0, r2
 800241c:	f000 f846 	bl	80024ac <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2201      	movs	r2, #1
 8002424:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002428:	2300      	movs	r3, #0
}
 800242a:	4618      	mov	r0, r3
 800242c:	3708      	adds	r7, #8
 800242e:	46bd      	mov	sp, r7
 8002430:	bd80      	pop	{r7, pc}

08002432 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8002432:	b580      	push	{r7, lr}
 8002434:	b082      	sub	sp, #8
 8002436:	af00      	add	r7, sp, #0
 8002438:	6078      	str	r0, [r7, #4]
 800243a:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	2b00      	cmp	r3, #0
 8002440:	d101      	bne.n	8002446 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8002442:	2301      	movs	r3, #1
 8002444:	e02d      	b.n	80024a2 <HAL_TIM_OnePulse_Init+0x70>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800244c:	b2db      	uxtb	r3, r3
 800244e:	2b00      	cmp	r3, #0
 8002450:	d106      	bne.n	8002460 <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	2200      	movs	r2, #0
 8002456:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 800245a:	6878      	ldr	r0, [r7, #4]
 800245c:	f004 f998 	bl	8006790 <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	2202      	movs	r2, #2
 8002464:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681a      	ldr	r2, [r3, #0]
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	3304      	adds	r3, #4
 8002470:	4619      	mov	r1, r3
 8002472:	4610      	mov	r0, r2
 8002474:	f000 f81a 	bl	80024ac <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	681a      	ldr	r2, [r3, #0]
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f022 0208 	bic.w	r2, r2, #8
 8002486:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	6819      	ldr	r1, [r3, #0]
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	683a      	ldr	r2, [r7, #0]
 8002494:	430a      	orrs	r2, r1
 8002496:	601a      	str	r2, [r3, #0]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2201      	movs	r2, #1
 800249c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80024a0:	2300      	movs	r3, #0
}
 80024a2:	4618      	mov	r0, r3
 80024a4:	3708      	adds	r7, #8
 80024a6:	46bd      	mov	sp, r7
 80024a8:	bd80      	pop	{r7, pc}
	...

080024ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80024ac:	b480      	push	{r7}
 80024ae:	b085      	sub	sp, #20
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
 80024b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	4a40      	ldr	r2, [pc, #256]	; (80025c0 <TIM_Base_SetConfig+0x114>)
 80024c0:	4293      	cmp	r3, r2
 80024c2:	d013      	beq.n	80024ec <TIM_Base_SetConfig+0x40>
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024ca:	d00f      	beq.n	80024ec <TIM_Base_SetConfig+0x40>
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	4a3d      	ldr	r2, [pc, #244]	; (80025c4 <TIM_Base_SetConfig+0x118>)
 80024d0:	4293      	cmp	r3, r2
 80024d2:	d00b      	beq.n	80024ec <TIM_Base_SetConfig+0x40>
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	4a3c      	ldr	r2, [pc, #240]	; (80025c8 <TIM_Base_SetConfig+0x11c>)
 80024d8:	4293      	cmp	r3, r2
 80024da:	d007      	beq.n	80024ec <TIM_Base_SetConfig+0x40>
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	4a3b      	ldr	r2, [pc, #236]	; (80025cc <TIM_Base_SetConfig+0x120>)
 80024e0:	4293      	cmp	r3, r2
 80024e2:	d003      	beq.n	80024ec <TIM_Base_SetConfig+0x40>
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	4a3a      	ldr	r2, [pc, #232]	; (80025d0 <TIM_Base_SetConfig+0x124>)
 80024e8:	4293      	cmp	r3, r2
 80024ea:	d108      	bne.n	80024fe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80024f2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	685b      	ldr	r3, [r3, #4]
 80024f8:	68fa      	ldr	r2, [r7, #12]
 80024fa:	4313      	orrs	r3, r2
 80024fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	4a2f      	ldr	r2, [pc, #188]	; (80025c0 <TIM_Base_SetConfig+0x114>)
 8002502:	4293      	cmp	r3, r2
 8002504:	d01f      	beq.n	8002546 <TIM_Base_SetConfig+0x9a>
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800250c:	d01b      	beq.n	8002546 <TIM_Base_SetConfig+0x9a>
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	4a2c      	ldr	r2, [pc, #176]	; (80025c4 <TIM_Base_SetConfig+0x118>)
 8002512:	4293      	cmp	r3, r2
 8002514:	d017      	beq.n	8002546 <TIM_Base_SetConfig+0x9a>
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	4a2b      	ldr	r2, [pc, #172]	; (80025c8 <TIM_Base_SetConfig+0x11c>)
 800251a:	4293      	cmp	r3, r2
 800251c:	d013      	beq.n	8002546 <TIM_Base_SetConfig+0x9a>
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	4a2a      	ldr	r2, [pc, #168]	; (80025cc <TIM_Base_SetConfig+0x120>)
 8002522:	4293      	cmp	r3, r2
 8002524:	d00f      	beq.n	8002546 <TIM_Base_SetConfig+0x9a>
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	4a29      	ldr	r2, [pc, #164]	; (80025d0 <TIM_Base_SetConfig+0x124>)
 800252a:	4293      	cmp	r3, r2
 800252c:	d00b      	beq.n	8002546 <TIM_Base_SetConfig+0x9a>
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	4a28      	ldr	r2, [pc, #160]	; (80025d4 <TIM_Base_SetConfig+0x128>)
 8002532:	4293      	cmp	r3, r2
 8002534:	d007      	beq.n	8002546 <TIM_Base_SetConfig+0x9a>
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	4a27      	ldr	r2, [pc, #156]	; (80025d8 <TIM_Base_SetConfig+0x12c>)
 800253a:	4293      	cmp	r3, r2
 800253c:	d003      	beq.n	8002546 <TIM_Base_SetConfig+0x9a>
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	4a26      	ldr	r2, [pc, #152]	; (80025dc <TIM_Base_SetConfig+0x130>)
 8002542:	4293      	cmp	r3, r2
 8002544:	d108      	bne.n	8002558 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800254c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	68db      	ldr	r3, [r3, #12]
 8002552:	68fa      	ldr	r2, [r7, #12]
 8002554:	4313      	orrs	r3, r2
 8002556:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	695b      	ldr	r3, [r3, #20]
 8002562:	4313      	orrs	r3, r2
 8002564:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	68fa      	ldr	r2, [r7, #12]
 800256a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	689a      	ldr	r2, [r3, #8]
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	681a      	ldr	r2, [r3, #0]
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	4a10      	ldr	r2, [pc, #64]	; (80025c0 <TIM_Base_SetConfig+0x114>)
 8002580:	4293      	cmp	r3, r2
 8002582:	d00f      	beq.n	80025a4 <TIM_Base_SetConfig+0xf8>
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	4a12      	ldr	r2, [pc, #72]	; (80025d0 <TIM_Base_SetConfig+0x124>)
 8002588:	4293      	cmp	r3, r2
 800258a:	d00b      	beq.n	80025a4 <TIM_Base_SetConfig+0xf8>
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	4a11      	ldr	r2, [pc, #68]	; (80025d4 <TIM_Base_SetConfig+0x128>)
 8002590:	4293      	cmp	r3, r2
 8002592:	d007      	beq.n	80025a4 <TIM_Base_SetConfig+0xf8>
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	4a10      	ldr	r2, [pc, #64]	; (80025d8 <TIM_Base_SetConfig+0x12c>)
 8002598:	4293      	cmp	r3, r2
 800259a:	d003      	beq.n	80025a4 <TIM_Base_SetConfig+0xf8>
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	4a0f      	ldr	r2, [pc, #60]	; (80025dc <TIM_Base_SetConfig+0x130>)
 80025a0:	4293      	cmp	r3, r2
 80025a2:	d103      	bne.n	80025ac <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	691a      	ldr	r2, [r3, #16]
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2201      	movs	r2, #1
 80025b0:	615a      	str	r2, [r3, #20]
}
 80025b2:	bf00      	nop
 80025b4:	3714      	adds	r7, #20
 80025b6:	46bd      	mov	sp, r7
 80025b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025bc:	4770      	bx	lr
 80025be:	bf00      	nop
 80025c0:	40012c00 	.word	0x40012c00
 80025c4:	40000400 	.word	0x40000400
 80025c8:	40000800 	.word	0x40000800
 80025cc:	40000c00 	.word	0x40000c00
 80025d0:	40013400 	.word	0x40013400
 80025d4:	40014000 	.word	0x40014000
 80025d8:	40014400 	.word	0x40014400
 80025dc:	40014800 	.word	0x40014800

080025e0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80025e0:	b480      	push	{r7}
 80025e2:	b085      	sub	sp, #20
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
 80025e8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80025f0:	2b01      	cmp	r3, #1
 80025f2:	d101      	bne.n	80025f8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80025f4:	2302      	movs	r3, #2
 80025f6:	e045      	b.n	8002684 <HAL_TIMEx_MasterConfigSynchronization+0xa4>
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2201      	movs	r2, #1
 80025fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2202      	movs	r2, #2
 8002604:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	685b      	ldr	r3, [r3, #4]
 800260e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	689b      	ldr	r3, [r3, #8]
 8002616:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	4a1c      	ldr	r2, [pc, #112]	; (8002690 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800261e:	4293      	cmp	r3, r2
 8002620:	d004      	beq.n	800262c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	4a1b      	ldr	r2, [pc, #108]	; (8002694 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002628:	4293      	cmp	r3, r2
 800262a:	d108      	bne.n	800263e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8002632:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	685b      	ldr	r3, [r3, #4]
 8002638:	68fa      	ldr	r2, [r7, #12]
 800263a:	4313      	orrs	r3, r2
 800263c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002644:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	68fa      	ldr	r2, [r7, #12]
 800264c:	4313      	orrs	r3, r2
 800264e:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8002650:	68bb      	ldr	r3, [r7, #8]
 8002652:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002656:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	689b      	ldr	r3, [r3, #8]
 800265c:	68ba      	ldr	r2, [r7, #8]
 800265e:	4313      	orrs	r3, r2
 8002660:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	68fa      	ldr	r2, [r7, #12]
 8002668:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	68ba      	ldr	r2, [r7, #8]
 8002670:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	2201      	movs	r2, #1
 8002676:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	2200      	movs	r2, #0
 800267e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002682:	2300      	movs	r3, #0
}
 8002684:	4618      	mov	r0, r3
 8002686:	3714      	adds	r7, #20
 8002688:	46bd      	mov	sp, r7
 800268a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268e:	4770      	bx	lr
 8002690:	40012c00 	.word	0x40012c00
 8002694:	40013400 	.word	0x40013400

08002698 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b082      	sub	sp, #8
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d101      	bne.n	80026aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80026a6:	2301      	movs	r3, #1
 80026a8:	e04e      	b.n	8002748 <HAL_UART_Init+0xb0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d114      	bne.n	80026dc <HAL_UART_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	2200      	movs	r2, #0
 80026b6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 80026ba:	6878      	ldr	r0, [r7, #4]
 80026bc:	f000 f9d2 	bl	8002a64 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d103      	bne.n	80026d2 <HAL_UART_Init+0x3a>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	4a20      	ldr	r2, [pc, #128]	; (8002750 <HAL_UART_Init+0xb8>)
 80026ce:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80026d8:	6878      	ldr	r0, [r7, #4]
 80026da:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2224      	movs	r2, #36	; 0x24
 80026e0:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	681a      	ldr	r2, [r3, #0]
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f022 0201 	bic.w	r2, r2, #1
 80026f0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80026f2:	6878      	ldr	r0, [r7, #4]
 80026f4:	f000 f9f6 	bl	8002ae4 <UART_SetConfig>
 80026f8:	4603      	mov	r3, r0
 80026fa:	2b01      	cmp	r3, #1
 80026fc:	d101      	bne.n	8002702 <HAL_UART_Init+0x6a>
  {
    return HAL_ERROR;
 80026fe:	2301      	movs	r3, #1
 8002700:	e022      	b.n	8002748 <HAL_UART_Init+0xb0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002706:	2b00      	cmp	r3, #0
 8002708:	d002      	beq.n	8002710 <HAL_UART_Init+0x78>
  {
    UART_AdvFeatureConfig(huart);
 800270a:	6878      	ldr	r0, [r7, #4]
 800270c:	f000 fd32 	bl	8003174 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	685a      	ldr	r2, [r3, #4]
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800271e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	689a      	ldr	r2, [r3, #8]
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800272e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	681a      	ldr	r2, [r3, #0]
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f042 0201 	orr.w	r2, r2, #1
 800273e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002740:	6878      	ldr	r0, [r7, #4]
 8002742:	f000 fdb9 	bl	80032b8 <UART_CheckIdleState>
 8002746:	4603      	mov	r3, r0
}
 8002748:	4618      	mov	r0, r3
 800274a:	3708      	adds	r7, #8
 800274c:	46bd      	mov	sp, r7
 800274e:	bd80      	pop	{r7, pc}
 8002750:	08006811 	.word	0x08006811

08002754 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b088      	sub	sp, #32
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	69db      	ldr	r3, [r3, #28]
 8002762:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	689b      	ldr	r3, [r3, #8]
 8002772:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE));
 8002774:	69fb      	ldr	r3, [r7, #28]
 8002776:	f003 030f 	and.w	r3, r3, #15
 800277a:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800277c:	693b      	ldr	r3, [r7, #16]
 800277e:	2b00      	cmp	r3, #0
 8002780:	d113      	bne.n	80027aa <HAL_UART_IRQHandler+0x56>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002782:	69fb      	ldr	r3, [r7, #28]
 8002784:	f003 0320 	and.w	r3, r3, #32
 8002788:	2b00      	cmp	r3, #0
 800278a:	d00e      	beq.n	80027aa <HAL_UART_IRQHandler+0x56>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800278c:	69bb      	ldr	r3, [r7, #24]
 800278e:	f003 0320 	and.w	r3, r3, #32
 8002792:	2b00      	cmp	r3, #0
 8002794:	d009      	beq.n	80027aa <HAL_UART_IRQHandler+0x56>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800279a:	2b00      	cmp	r3, #0
 800279c:	f000 8107 	beq.w	80029ae <HAL_UART_IRQHandler+0x25a>
      {
        huart->RxISR(huart);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027a4:	6878      	ldr	r0, [r7, #4]
 80027a6:	4798      	blx	r3
      }
      return;
 80027a8:	e101      	b.n	80029ae <HAL_UART_IRQHandler+0x25a>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE)) != 0U))))
#else
  if ((errorflags != 0U)
 80027aa:	693b      	ldr	r3, [r7, #16]
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	f000 80c7 	beq.w	8002940 <HAL_UART_IRQHandler+0x1ec>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80027b2:	697b      	ldr	r3, [r7, #20]
 80027b4:	f003 0301 	and.w	r3, r3, #1
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d105      	bne.n	80027c8 <HAL_UART_IRQHandler+0x74>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 80027bc:	69bb      	ldr	r3, [r7, #24]
 80027be:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	f000 80bc 	beq.w	8002940 <HAL_UART_IRQHandler+0x1ec>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80027c8:	69fb      	ldr	r3, [r7, #28]
 80027ca:	f003 0301 	and.w	r3, r3, #1
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d00e      	beq.n	80027f0 <HAL_UART_IRQHandler+0x9c>
 80027d2:	69bb      	ldr	r3, [r7, #24]
 80027d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d009      	beq.n	80027f0 <HAL_UART_IRQHandler+0x9c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	2201      	movs	r2, #1
 80027e2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80027e8:	f043 0201 	orr.w	r2, r3, #1
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80027f0:	69fb      	ldr	r3, [r7, #28]
 80027f2:	f003 0302 	and.w	r3, r3, #2
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d00e      	beq.n	8002818 <HAL_UART_IRQHandler+0xc4>
 80027fa:	697b      	ldr	r3, [r7, #20]
 80027fc:	f003 0301 	and.w	r3, r3, #1
 8002800:	2b00      	cmp	r3, #0
 8002802:	d009      	beq.n	8002818 <HAL_UART_IRQHandler+0xc4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	2202      	movs	r2, #2
 800280a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002810:	f043 0204 	orr.w	r2, r3, #4
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002818:	69fb      	ldr	r3, [r7, #28]
 800281a:	f003 0304 	and.w	r3, r3, #4
 800281e:	2b00      	cmp	r3, #0
 8002820:	d00e      	beq.n	8002840 <HAL_UART_IRQHandler+0xec>
 8002822:	697b      	ldr	r3, [r7, #20]
 8002824:	f003 0301 	and.w	r3, r3, #1
 8002828:	2b00      	cmp	r3, #0
 800282a:	d009      	beq.n	8002840 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	2204      	movs	r2, #4
 8002832:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002838:	f043 0202 	orr.w	r2, r3, #2
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	67da      	str	r2, [r3, #124]	; 0x7c
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002840:	69fb      	ldr	r3, [r7, #28]
 8002842:	f003 0308 	and.w	r3, r3, #8
 8002846:	2b00      	cmp	r3, #0
 8002848:	d013      	beq.n	8002872 <HAL_UART_IRQHandler+0x11e>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800284a:	69bb      	ldr	r3, [r7, #24]
 800284c:	f003 0320 	and.w	r3, r3, #32
 8002850:	2b00      	cmp	r3, #0
 8002852:	d104      	bne.n	800285e <HAL_UART_IRQHandler+0x10a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8002854:	697b      	ldr	r3, [r7, #20]
 8002856:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800285a:	2b00      	cmp	r3, #0
 800285c:	d009      	beq.n	8002872 <HAL_UART_IRQHandler+0x11e>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	2208      	movs	r2, #8
 8002864:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800286a:	f043 0208 	orr.w	r2, r3, #8
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002876:	2b00      	cmp	r3, #0
 8002878:	f000 809b 	beq.w	80029b2 <HAL_UART_IRQHandler+0x25e>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800287c:	69fb      	ldr	r3, [r7, #28]
 800287e:	f003 0320 	and.w	r3, r3, #32
 8002882:	2b00      	cmp	r3, #0
 8002884:	d00c      	beq.n	80028a0 <HAL_UART_IRQHandler+0x14c>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002886:	69bb      	ldr	r3, [r7, #24]
 8002888:	f003 0320 	and.w	r3, r3, #32
 800288c:	2b00      	cmp	r3, #0
 800288e:	d007      	beq.n	80028a0 <HAL_UART_IRQHandler+0x14c>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002894:	2b00      	cmp	r3, #0
 8002896:	d003      	beq.n	80028a0 <HAL_UART_IRQHandler+0x14c>
        {
          huart->RxISR(huart);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800289c:	6878      	ldr	r0, [r7, #4]
 800289e:	4798      	blx	r3
        }
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      errorcode = huart->ErrorCode;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80028a4:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	689b      	ldr	r3, [r3, #8]
 80028ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028b0:	2b40      	cmp	r3, #64	; 0x40
 80028b2:	d004      	beq.n	80028be <HAL_UART_IRQHandler+0x16a>
          ((errorcode & HAL_UART_ERROR_ORE) != 0U))
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	f003 0308 	and.w	r3, r3, #8
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d035      	beq.n	800292a <HAL_UART_IRQHandler+0x1d6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80028be:	6878      	ldr	r0, [r7, #4]
 80028c0:	f000 fd87 	bl	80033d2 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	689b      	ldr	r3, [r3, #8]
 80028ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028ce:	2b40      	cmp	r3, #64	; 0x40
 80028d0:	d125      	bne.n	800291e <HAL_UART_IRQHandler+0x1ca>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	689a      	ldr	r2, [r3, #8]
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80028e0:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d013      	beq.n	8002912 <HAL_UART_IRQHandler+0x1be>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80028ee:	4a34      	ldr	r2, [pc, #208]	; (80029c0 <HAL_UART_IRQHandler+0x26c>)
 80028f0:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80028f6:	4618      	mov	r0, r3
 80028f8:	f7fd ff3f 	bl	800077a <HAL_DMA_Abort_IT>
 80028fc:	4603      	mov	r3, r0
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d01c      	beq.n	800293c <HAL_UART_IRQHandler+0x1e8>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002906:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002908:	687a      	ldr	r2, [r7, #4]
 800290a:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800290c:	4610      	mov	r0, r2
 800290e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002910:	e014      	b.n	800293c <HAL_UART_IRQHandler+0x1e8>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002918:	6878      	ldr	r0, [r7, #4]
 800291a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800291c:	e00e      	b.n	800293c <HAL_UART_IRQHandler+0x1e8>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002924:	6878      	ldr	r0, [r7, #4]
 8002926:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002928:	e008      	b.n	800293c <HAL_UART_IRQHandler+0x1e8>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002930:	6878      	ldr	r0, [r7, #4]
 8002932:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2200      	movs	r2, #0
 8002938:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 800293a:	e03a      	b.n	80029b2 <HAL_UART_IRQHandler+0x25e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800293c:	bf00      	nop
    return;
 800293e:	e038      	b.n	80029b2 <HAL_UART_IRQHandler+0x25e>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002940:	69fb      	ldr	r3, [r7, #28]
 8002942:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002946:	2b00      	cmp	r3, #0
 8002948:	d00f      	beq.n	800296a <HAL_UART_IRQHandler+0x216>
 800294a:	697b      	ldr	r3, [r7, #20]
 800294c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002950:	2b00      	cmp	r3, #0
 8002952:	d00a      	beq.n	800296a <HAL_UART_IRQHandler+0x216>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800295c:	621a      	str	r2, [r3, #32]
    /* UART Rx state is not reset as a reception process might be ongoing.
       If UART handle state fields need to be reset to READY, this could be done in Wakeup callback */

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8002964:	6878      	ldr	r0, [r7, #4]
 8002966:	4798      	blx	r3
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002968:	e026      	b.n	80029b8 <HAL_UART_IRQHandler+0x264>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 800296a:	69fb      	ldr	r3, [r7, #28]
 800296c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002970:	2b00      	cmp	r3, #0
 8002972:	d00d      	beq.n	8002990 <HAL_UART_IRQHandler+0x23c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8002974:	69bb      	ldr	r3, [r7, #24]
 8002976:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800297a:	2b00      	cmp	r3, #0
 800297c:	d008      	beq.n	8002990 <HAL_UART_IRQHandler+0x23c>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002982:	2b00      	cmp	r3, #0
 8002984:	d017      	beq.n	80029b6 <HAL_UART_IRQHandler+0x262>
    {
      huart->TxISR(huart);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800298a:	6878      	ldr	r0, [r7, #4]
 800298c:	4798      	blx	r3
    }
    return;
 800298e:	e012      	b.n	80029b6 <HAL_UART_IRQHandler+0x262>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002990:	69fb      	ldr	r3, [r7, #28]
 8002992:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002996:	2b00      	cmp	r3, #0
 8002998:	d00e      	beq.n	80029b8 <HAL_UART_IRQHandler+0x264>
 800299a:	69bb      	ldr	r3, [r7, #24]
 800299c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d009      	beq.n	80029b8 <HAL_UART_IRQHandler+0x264>
  {
    UART_EndTransmit_IT(huart);
 80029a4:	6878      	ldr	r0, [r7, #4]
 80029a6:	f000 fd4c 	bl	8003442 <UART_EndTransmit_IT>
    return;
 80029aa:	bf00      	nop
 80029ac:	e004      	b.n	80029b8 <HAL_UART_IRQHandler+0x264>
      return;
 80029ae:	bf00      	nop
 80029b0:	e002      	b.n	80029b8 <HAL_UART_IRQHandler+0x264>
    return;
 80029b2:	bf00      	nop
 80029b4:	e000      	b.n	80029b8 <HAL_UART_IRQHandler+0x264>
    return;
 80029b6:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 80029b8:	3720      	adds	r7, #32
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bd80      	pop	{r7, pc}
 80029be:	bf00      	nop
 80029c0:	08003413 	.word	0x08003413

080029c4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80029c4:	b480      	push	{r7}
 80029c6:	b083      	sub	sp, #12
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80029cc:	bf00      	nop
 80029ce:	370c      	adds	r7, #12
 80029d0:	46bd      	mov	sp, r7
 80029d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d6:	4770      	bx	lr

080029d8 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80029d8:	b480      	push	{r7}
 80029da:	b083      	sub	sp, #12
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 80029e0:	bf00      	nop
 80029e2:	370c      	adds	r7, #12
 80029e4:	46bd      	mov	sp, r7
 80029e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ea:	4770      	bx	lr

080029ec <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80029ec:	b480      	push	{r7}
 80029ee:	b083      	sub	sp, #12
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 80029f4:	bf00      	nop
 80029f6:	370c      	adds	r7, #12
 80029f8:	46bd      	mov	sp, r7
 80029fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fe:	4770      	bx	lr

08002a00 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8002a00:	b480      	push	{r7}
 8002a02:	b083      	sub	sp, #12
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8002a08:	bf00      	nop
 8002a0a:	370c      	adds	r7, #12
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a12:	4770      	bx	lr

08002a14 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002a14:	b480      	push	{r7}
 8002a16:	b083      	sub	sp, #12
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002a1c:	bf00      	nop
 8002a1e:	370c      	adds	r7, #12
 8002a20:	46bd      	mov	sp, r7
 8002a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a26:	4770      	bx	lr

08002a28 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 8002a28:	b480      	push	{r7}
 8002a2a:	b083      	sub	sp, #12
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 8002a30:	bf00      	nop
 8002a32:	370c      	adds	r7, #12
 8002a34:	46bd      	mov	sp, r7
 8002a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3a:	4770      	bx	lr

08002a3c <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	b083      	sub	sp, #12
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 8002a44:	bf00      	nop
 8002a46:	370c      	adds	r7, #12
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4e:	4770      	bx	lr

08002a50 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 8002a50:	b480      	push	{r7}
 8002a52:	b083      	sub	sp, #12
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 8002a58:	bf00      	nop
 8002a5a:	370c      	adds	r7, #12
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a62:	4770      	bx	lr

08002a64 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 8002a64:	b480      	push	{r7}
 8002a66:	b083      	sub	sp, #12
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	4a14      	ldr	r2, [pc, #80]	; (8002ac0 <UART_InitCallbacksToDefault+0x5c>)
 8002a70:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	4a13      	ldr	r2, [pc, #76]	; (8002ac4 <UART_InitCallbacksToDefault+0x60>)
 8002a78:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	4a12      	ldr	r2, [pc, #72]	; (8002ac8 <UART_InitCallbacksToDefault+0x64>)
 8002a80:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	4a11      	ldr	r2, [pc, #68]	; (8002acc <UART_InitCallbacksToDefault+0x68>)
 8002a88:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	4a10      	ldr	r2, [pc, #64]	; (8002ad0 <UART_InitCallbacksToDefault+0x6c>)
 8002a90:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	4a0f      	ldr	r2, [pc, #60]	; (8002ad4 <UART_InitCallbacksToDefault+0x70>)
 8002a98:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	4a0e      	ldr	r2, [pc, #56]	; (8002ad8 <UART_InitCallbacksToDefault+0x74>)
 8002aa0:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	4a0d      	ldr	r2, [pc, #52]	; (8002adc <UART_InitCallbacksToDefault+0x78>)
 8002aa8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	4a0c      	ldr	r2, [pc, #48]	; (8002ae0 <UART_InitCallbacksToDefault+0x7c>)
 8002ab0:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
#if defined(USART_CR1_FIFOEN)
  huart->RxFifoFullCallback        = HAL_UARTEx_RxFifoFullCallback;      /* Legacy weak RxFifoFullCallback        */
  huart->TxFifoEmptyCallback       = HAL_UARTEx_TxFifoEmptyCallback;     /* Legacy weak TxFifoEmptyCallback       */
#endif /* USART_CR1_FIFOEN */

}
 8002ab4:	bf00      	nop
 8002ab6:	370c      	adds	r7, #12
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002abe:	4770      	bx	lr
 8002ac0:	080029d9 	.word	0x080029d9
 8002ac4:	080029c5 	.word	0x080029c5
 8002ac8:	08002a01 	.word	0x08002a01
 8002acc:	080029ed 	.word	0x080029ed
 8002ad0:	08002a15 	.word	0x08002a15
 8002ad4:	08002a29 	.word	0x08002a29
 8002ad8:	08002a3d 	.word	0x08002a3d
 8002adc:	08002a51 	.word	0x08002a51
 8002ae0:	08003479 	.word	0x08003479

08002ae4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002ae4:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8002ae8:	b088      	sub	sp, #32
 8002aea:	af00      	add	r7, sp, #0
 8002aec:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8002aee:	2300      	movs	r3, #0
 8002af0:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef ret               = HAL_OK;
 8002af2:	2300      	movs	r3, #0
 8002af4:	74fb      	strb	r3, [r7, #19]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8002af6:	2300      	movs	r3, #0
 8002af8:	60fb      	str	r3, [r7, #12]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	689a      	ldr	r2, [r3, #8]
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	691b      	ldr	r3, [r3, #16]
 8002b02:	431a      	orrs	r2, r3
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	695b      	ldr	r3, [r3, #20]
 8002b08:	431a      	orrs	r2, r3
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	69db      	ldr	r3, [r3, #28]
 8002b0e:	4313      	orrs	r3, r2
 8002b10:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	681a      	ldr	r2, [r3, #0]
 8002b18:	4bac      	ldr	r3, [pc, #688]	; (8002dcc <UART_SetConfig+0x2e8>)
 8002b1a:	4013      	ands	r3, r2
 8002b1c:	687a      	ldr	r2, [r7, #4]
 8002b1e:	6812      	ldr	r2, [r2, #0]
 8002b20:	69f9      	ldr	r1, [r7, #28]
 8002b22:	430b      	orrs	r3, r1
 8002b24:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	685b      	ldr	r3, [r3, #4]
 8002b2c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	68da      	ldr	r2, [r3, #12]
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	430a      	orrs	r2, r1
 8002b3a:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	699b      	ldr	r3, [r3, #24]
 8002b40:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	4aa2      	ldr	r2, [pc, #648]	; (8002dd0 <UART_SetConfig+0x2ec>)
 8002b48:	4293      	cmp	r3, r2
 8002b4a:	d004      	beq.n	8002b56 <UART_SetConfig+0x72>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6a1b      	ldr	r3, [r3, #32]
 8002b50:	69fa      	ldr	r2, [r7, #28]
 8002b52:	4313      	orrs	r3, r2
 8002b54:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	689b      	ldr	r3, [r3, #8]
 8002b5c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	69fa      	ldr	r2, [r7, #28]
 8002b66:	430a      	orrs	r2, r1
 8002b68:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	4a99      	ldr	r2, [pc, #612]	; (8002dd4 <UART_SetConfig+0x2f0>)
 8002b70:	4293      	cmp	r3, r2
 8002b72:	d121      	bne.n	8002bb8 <UART_SetConfig+0xd4>
 8002b74:	4b98      	ldr	r3, [pc, #608]	; (8002dd8 <UART_SetConfig+0x2f4>)
 8002b76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b7a:	f003 0303 	and.w	r3, r3, #3
 8002b7e:	2b03      	cmp	r3, #3
 8002b80:	d816      	bhi.n	8002bb0 <UART_SetConfig+0xcc>
 8002b82:	a201      	add	r2, pc, #4	; (adr r2, 8002b88 <UART_SetConfig+0xa4>)
 8002b84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b88:	08002b99 	.word	0x08002b99
 8002b8c:	08002ba5 	.word	0x08002ba5
 8002b90:	08002b9f 	.word	0x08002b9f
 8002b94:	08002bab 	.word	0x08002bab
 8002b98:	2301      	movs	r3, #1
 8002b9a:	76fb      	strb	r3, [r7, #27]
 8002b9c:	e0e8      	b.n	8002d70 <UART_SetConfig+0x28c>
 8002b9e:	2302      	movs	r3, #2
 8002ba0:	76fb      	strb	r3, [r7, #27]
 8002ba2:	e0e5      	b.n	8002d70 <UART_SetConfig+0x28c>
 8002ba4:	2304      	movs	r3, #4
 8002ba6:	76fb      	strb	r3, [r7, #27]
 8002ba8:	e0e2      	b.n	8002d70 <UART_SetConfig+0x28c>
 8002baa:	2308      	movs	r3, #8
 8002bac:	76fb      	strb	r3, [r7, #27]
 8002bae:	e0df      	b.n	8002d70 <UART_SetConfig+0x28c>
 8002bb0:	2310      	movs	r3, #16
 8002bb2:	76fb      	strb	r3, [r7, #27]
 8002bb4:	bf00      	nop
 8002bb6:	e0db      	b.n	8002d70 <UART_SetConfig+0x28c>
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	4a87      	ldr	r2, [pc, #540]	; (8002ddc <UART_SetConfig+0x2f8>)
 8002bbe:	4293      	cmp	r3, r2
 8002bc0:	d134      	bne.n	8002c2c <UART_SetConfig+0x148>
 8002bc2:	4b85      	ldr	r3, [pc, #532]	; (8002dd8 <UART_SetConfig+0x2f4>)
 8002bc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bc8:	f003 030c 	and.w	r3, r3, #12
 8002bcc:	2b0c      	cmp	r3, #12
 8002bce:	d829      	bhi.n	8002c24 <UART_SetConfig+0x140>
 8002bd0:	a201      	add	r2, pc, #4	; (adr r2, 8002bd8 <UART_SetConfig+0xf4>)
 8002bd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bd6:	bf00      	nop
 8002bd8:	08002c0d 	.word	0x08002c0d
 8002bdc:	08002c25 	.word	0x08002c25
 8002be0:	08002c25 	.word	0x08002c25
 8002be4:	08002c25 	.word	0x08002c25
 8002be8:	08002c19 	.word	0x08002c19
 8002bec:	08002c25 	.word	0x08002c25
 8002bf0:	08002c25 	.word	0x08002c25
 8002bf4:	08002c25 	.word	0x08002c25
 8002bf8:	08002c13 	.word	0x08002c13
 8002bfc:	08002c25 	.word	0x08002c25
 8002c00:	08002c25 	.word	0x08002c25
 8002c04:	08002c25 	.word	0x08002c25
 8002c08:	08002c1f 	.word	0x08002c1f
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	76fb      	strb	r3, [r7, #27]
 8002c10:	e0ae      	b.n	8002d70 <UART_SetConfig+0x28c>
 8002c12:	2302      	movs	r3, #2
 8002c14:	76fb      	strb	r3, [r7, #27]
 8002c16:	e0ab      	b.n	8002d70 <UART_SetConfig+0x28c>
 8002c18:	2304      	movs	r3, #4
 8002c1a:	76fb      	strb	r3, [r7, #27]
 8002c1c:	e0a8      	b.n	8002d70 <UART_SetConfig+0x28c>
 8002c1e:	2308      	movs	r3, #8
 8002c20:	76fb      	strb	r3, [r7, #27]
 8002c22:	e0a5      	b.n	8002d70 <UART_SetConfig+0x28c>
 8002c24:	2310      	movs	r3, #16
 8002c26:	76fb      	strb	r3, [r7, #27]
 8002c28:	bf00      	nop
 8002c2a:	e0a1      	b.n	8002d70 <UART_SetConfig+0x28c>
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	4a6b      	ldr	r2, [pc, #428]	; (8002de0 <UART_SetConfig+0x2fc>)
 8002c32:	4293      	cmp	r3, r2
 8002c34:	d120      	bne.n	8002c78 <UART_SetConfig+0x194>
 8002c36:	4b68      	ldr	r3, [pc, #416]	; (8002dd8 <UART_SetConfig+0x2f4>)
 8002c38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c3c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002c40:	2b10      	cmp	r3, #16
 8002c42:	d00f      	beq.n	8002c64 <UART_SetConfig+0x180>
 8002c44:	2b10      	cmp	r3, #16
 8002c46:	d802      	bhi.n	8002c4e <UART_SetConfig+0x16a>
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d005      	beq.n	8002c58 <UART_SetConfig+0x174>
 8002c4c:	e010      	b.n	8002c70 <UART_SetConfig+0x18c>
 8002c4e:	2b20      	cmp	r3, #32
 8002c50:	d005      	beq.n	8002c5e <UART_SetConfig+0x17a>
 8002c52:	2b30      	cmp	r3, #48	; 0x30
 8002c54:	d009      	beq.n	8002c6a <UART_SetConfig+0x186>
 8002c56:	e00b      	b.n	8002c70 <UART_SetConfig+0x18c>
 8002c58:	2300      	movs	r3, #0
 8002c5a:	76fb      	strb	r3, [r7, #27]
 8002c5c:	e088      	b.n	8002d70 <UART_SetConfig+0x28c>
 8002c5e:	2302      	movs	r3, #2
 8002c60:	76fb      	strb	r3, [r7, #27]
 8002c62:	e085      	b.n	8002d70 <UART_SetConfig+0x28c>
 8002c64:	2304      	movs	r3, #4
 8002c66:	76fb      	strb	r3, [r7, #27]
 8002c68:	e082      	b.n	8002d70 <UART_SetConfig+0x28c>
 8002c6a:	2308      	movs	r3, #8
 8002c6c:	76fb      	strb	r3, [r7, #27]
 8002c6e:	e07f      	b.n	8002d70 <UART_SetConfig+0x28c>
 8002c70:	2310      	movs	r3, #16
 8002c72:	76fb      	strb	r3, [r7, #27]
 8002c74:	bf00      	nop
 8002c76:	e07b      	b.n	8002d70 <UART_SetConfig+0x28c>
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	4a59      	ldr	r2, [pc, #356]	; (8002de4 <UART_SetConfig+0x300>)
 8002c7e:	4293      	cmp	r3, r2
 8002c80:	d120      	bne.n	8002cc4 <UART_SetConfig+0x1e0>
 8002c82:	4b55      	ldr	r3, [pc, #340]	; (8002dd8 <UART_SetConfig+0x2f4>)
 8002c84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c88:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002c8c:	2b40      	cmp	r3, #64	; 0x40
 8002c8e:	d00f      	beq.n	8002cb0 <UART_SetConfig+0x1cc>
 8002c90:	2b40      	cmp	r3, #64	; 0x40
 8002c92:	d802      	bhi.n	8002c9a <UART_SetConfig+0x1b6>
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d005      	beq.n	8002ca4 <UART_SetConfig+0x1c0>
 8002c98:	e010      	b.n	8002cbc <UART_SetConfig+0x1d8>
 8002c9a:	2b80      	cmp	r3, #128	; 0x80
 8002c9c:	d005      	beq.n	8002caa <UART_SetConfig+0x1c6>
 8002c9e:	2bc0      	cmp	r3, #192	; 0xc0
 8002ca0:	d009      	beq.n	8002cb6 <UART_SetConfig+0x1d2>
 8002ca2:	e00b      	b.n	8002cbc <UART_SetConfig+0x1d8>
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	76fb      	strb	r3, [r7, #27]
 8002ca8:	e062      	b.n	8002d70 <UART_SetConfig+0x28c>
 8002caa:	2302      	movs	r3, #2
 8002cac:	76fb      	strb	r3, [r7, #27]
 8002cae:	e05f      	b.n	8002d70 <UART_SetConfig+0x28c>
 8002cb0:	2304      	movs	r3, #4
 8002cb2:	76fb      	strb	r3, [r7, #27]
 8002cb4:	e05c      	b.n	8002d70 <UART_SetConfig+0x28c>
 8002cb6:	2308      	movs	r3, #8
 8002cb8:	76fb      	strb	r3, [r7, #27]
 8002cba:	e059      	b.n	8002d70 <UART_SetConfig+0x28c>
 8002cbc:	2310      	movs	r3, #16
 8002cbe:	76fb      	strb	r3, [r7, #27]
 8002cc0:	bf00      	nop
 8002cc2:	e055      	b.n	8002d70 <UART_SetConfig+0x28c>
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	4a47      	ldr	r2, [pc, #284]	; (8002de8 <UART_SetConfig+0x304>)
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d124      	bne.n	8002d18 <UART_SetConfig+0x234>
 8002cce:	4b42      	ldr	r3, [pc, #264]	; (8002dd8 <UART_SetConfig+0x2f4>)
 8002cd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cd4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002cd8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002cdc:	d012      	beq.n	8002d04 <UART_SetConfig+0x220>
 8002cde:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ce2:	d802      	bhi.n	8002cea <UART_SetConfig+0x206>
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d007      	beq.n	8002cf8 <UART_SetConfig+0x214>
 8002ce8:	e012      	b.n	8002d10 <UART_SetConfig+0x22c>
 8002cea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002cee:	d006      	beq.n	8002cfe <UART_SetConfig+0x21a>
 8002cf0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002cf4:	d009      	beq.n	8002d0a <UART_SetConfig+0x226>
 8002cf6:	e00b      	b.n	8002d10 <UART_SetConfig+0x22c>
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	76fb      	strb	r3, [r7, #27]
 8002cfc:	e038      	b.n	8002d70 <UART_SetConfig+0x28c>
 8002cfe:	2302      	movs	r3, #2
 8002d00:	76fb      	strb	r3, [r7, #27]
 8002d02:	e035      	b.n	8002d70 <UART_SetConfig+0x28c>
 8002d04:	2304      	movs	r3, #4
 8002d06:	76fb      	strb	r3, [r7, #27]
 8002d08:	e032      	b.n	8002d70 <UART_SetConfig+0x28c>
 8002d0a:	2308      	movs	r3, #8
 8002d0c:	76fb      	strb	r3, [r7, #27]
 8002d0e:	e02f      	b.n	8002d70 <UART_SetConfig+0x28c>
 8002d10:	2310      	movs	r3, #16
 8002d12:	76fb      	strb	r3, [r7, #27]
 8002d14:	bf00      	nop
 8002d16:	e02b      	b.n	8002d70 <UART_SetConfig+0x28c>
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	4a2c      	ldr	r2, [pc, #176]	; (8002dd0 <UART_SetConfig+0x2ec>)
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d124      	bne.n	8002d6c <UART_SetConfig+0x288>
 8002d22:	4b2d      	ldr	r3, [pc, #180]	; (8002dd8 <UART_SetConfig+0x2f4>)
 8002d24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d28:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002d2c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d30:	d012      	beq.n	8002d58 <UART_SetConfig+0x274>
 8002d32:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d36:	d802      	bhi.n	8002d3e <UART_SetConfig+0x25a>
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d007      	beq.n	8002d4c <UART_SetConfig+0x268>
 8002d3c:	e012      	b.n	8002d64 <UART_SetConfig+0x280>
 8002d3e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002d42:	d006      	beq.n	8002d52 <UART_SetConfig+0x26e>
 8002d44:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002d48:	d009      	beq.n	8002d5e <UART_SetConfig+0x27a>
 8002d4a:	e00b      	b.n	8002d64 <UART_SetConfig+0x280>
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	76fb      	strb	r3, [r7, #27]
 8002d50:	e00e      	b.n	8002d70 <UART_SetConfig+0x28c>
 8002d52:	2302      	movs	r3, #2
 8002d54:	76fb      	strb	r3, [r7, #27]
 8002d56:	e00b      	b.n	8002d70 <UART_SetConfig+0x28c>
 8002d58:	2304      	movs	r3, #4
 8002d5a:	76fb      	strb	r3, [r7, #27]
 8002d5c:	e008      	b.n	8002d70 <UART_SetConfig+0x28c>
 8002d5e:	2308      	movs	r3, #8
 8002d60:	76fb      	strb	r3, [r7, #27]
 8002d62:	e005      	b.n	8002d70 <UART_SetConfig+0x28c>
 8002d64:	2310      	movs	r3, #16
 8002d66:	76fb      	strb	r3, [r7, #27]
 8002d68:	bf00      	nop
 8002d6a:	e001      	b.n	8002d70 <UART_SetConfig+0x28c>
 8002d6c:	2310      	movs	r3, #16
 8002d6e:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	4a16      	ldr	r2, [pc, #88]	; (8002dd0 <UART_SetConfig+0x2ec>)
 8002d76:	4293      	cmp	r3, r2
 8002d78:	f040 80fa 	bne.w	8002f70 <UART_SetConfig+0x48c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002d7c:	7efb      	ldrb	r3, [r7, #27]
 8002d7e:	2b08      	cmp	r3, #8
 8002d80:	d836      	bhi.n	8002df0 <UART_SetConfig+0x30c>
 8002d82:	a201      	add	r2, pc, #4	; (adr r2, 8002d88 <UART_SetConfig+0x2a4>)
 8002d84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d88:	08002dad 	.word	0x08002dad
 8002d8c:	08002df1 	.word	0x08002df1
 8002d90:	08002db5 	.word	0x08002db5
 8002d94:	08002df1 	.word	0x08002df1
 8002d98:	08002dbb 	.word	0x08002dbb
 8002d9c:	08002df1 	.word	0x08002df1
 8002da0:	08002df1 	.word	0x08002df1
 8002da4:	08002df1 	.word	0x08002df1
 8002da8:	08002dc3 	.word	0x08002dc3
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 8002dac:	f7fe fc6a 	bl	8001684 <HAL_RCC_GetPCLK1Freq>
 8002db0:	60f8      	str	r0, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 8002db2:	e020      	b.n	8002df6 <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8002db4:	4b0d      	ldr	r3, [pc, #52]	; (8002dec <UART_SetConfig+0x308>)
 8002db6:	60fb      	str	r3, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 8002db8:	e01d      	b.n	8002df6 <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 8002dba:	f7fe fbcd 	bl	8001558 <HAL_RCC_GetSysClockFreq>
 8002dbe:	60f8      	str	r0, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 8002dc0:	e019      	b.n	8002df6 <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 8002dc2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002dc6:	60fb      	str	r3, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 8002dc8:	e015      	b.n	8002df6 <UART_SetConfig+0x312>
 8002dca:	bf00      	nop
 8002dcc:	efff69f3 	.word	0xefff69f3
 8002dd0:	40008000 	.word	0x40008000
 8002dd4:	40013800 	.word	0x40013800
 8002dd8:	40021000 	.word	0x40021000
 8002ddc:	40004400 	.word	0x40004400
 8002de0:	40004800 	.word	0x40004800
 8002de4:	40004c00 	.word	0x40004c00
 8002de8:	40005000 	.word	0x40005000
 8002dec:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8002df0:	2301      	movs	r3, #1
 8002df2:	74fb      	strb	r3, [r7, #19]
        break;
 8002df4:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	f000 81ac 	beq.w	8003156 <UART_SetConfig+0x672>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	685a      	ldr	r2, [r3, #4]
 8002e02:	4613      	mov	r3, r2
 8002e04:	005b      	lsls	r3, r3, #1
 8002e06:	4413      	add	r3, r2
 8002e08:	68fa      	ldr	r2, [r7, #12]
 8002e0a:	429a      	cmp	r2, r3
 8002e0c:	d305      	bcc.n	8002e1a <UART_SetConfig+0x336>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	685b      	ldr	r3, [r3, #4]
 8002e12:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002e14:	68fa      	ldr	r2, [r7, #12]
 8002e16:	429a      	cmp	r2, r3
 8002e18:	d902      	bls.n	8002e20 <UART_SetConfig+0x33c>
      {
        ret = HAL_ERROR;
 8002e1a:	2301      	movs	r3, #1
 8002e1c:	74fb      	strb	r3, [r7, #19]
 8002e1e:	e19a      	b.n	8003156 <UART_SetConfig+0x672>
      }
      else
      {
        switch (clocksource)
 8002e20:	7efb      	ldrb	r3, [r7, #27]
 8002e22:	2b08      	cmp	r3, #8
 8002e24:	f200 8091 	bhi.w	8002f4a <UART_SetConfig+0x466>
 8002e28:	a201      	add	r2, pc, #4	; (adr r2, 8002e30 <UART_SetConfig+0x34c>)
 8002e2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e2e:	bf00      	nop
 8002e30:	08002e55 	.word	0x08002e55
 8002e34:	08002f4b 	.word	0x08002f4b
 8002e38:	08002ea1 	.word	0x08002ea1
 8002e3c:	08002f4b 	.word	0x08002f4b
 8002e40:	08002ed5 	.word	0x08002ed5
 8002e44:	08002f4b 	.word	0x08002f4b
 8002e48:	08002f4b 	.word	0x08002f4b
 8002e4c:	08002f4b 	.word	0x08002f4b
 8002e50:	08002f21 	.word	0x08002f21
        {
          case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8002e54:	f7fe fc16 	bl	8001684 <HAL_RCC_GetPCLK1Freq>
 8002e58:	4603      	mov	r3, r0
 8002e5a:	4619      	mov	r1, r3
 8002e5c:	f04f 0200 	mov.w	r2, #0
 8002e60:	f04f 0300 	mov.w	r3, #0
 8002e64:	f04f 0400 	mov.w	r4, #0
 8002e68:	0214      	lsls	r4, r2, #8
 8002e6a:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8002e6e:	020b      	lsls	r3, r1, #8
 8002e70:	687a      	ldr	r2, [r7, #4]
 8002e72:	6852      	ldr	r2, [r2, #4]
 8002e74:	0852      	lsrs	r2, r2, #1
 8002e76:	4611      	mov	r1, r2
 8002e78:	f04f 0200 	mov.w	r2, #0
 8002e7c:	eb13 0b01 	adds.w	fp, r3, r1
 8002e80:	eb44 0c02 	adc.w	ip, r4, r2
 8002e84:	4658      	mov	r0, fp
 8002e86:	4661      	mov	r1, ip
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	685b      	ldr	r3, [r3, #4]
 8002e8c:	f04f 0400 	mov.w	r4, #0
 8002e90:	461a      	mov	r2, r3
 8002e92:	4623      	mov	r3, r4
 8002e94:	f7fd f99c 	bl	80001d0 <__aeabi_uldivmod>
 8002e98:	4603      	mov	r3, r0
 8002e9a:	460c      	mov	r4, r1
 8002e9c:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 8002e9e:	e057      	b.n	8002f50 <UART_SetConfig+0x46c>
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	685b      	ldr	r3, [r3, #4]
 8002ea4:	085b      	lsrs	r3, r3, #1
 8002ea6:	f04f 0400 	mov.w	r4, #0
 8002eaa:	49b1      	ldr	r1, [pc, #708]	; (8003170 <UART_SetConfig+0x68c>)
 8002eac:	f04f 0200 	mov.w	r2, #0
 8002eb0:	eb13 0b01 	adds.w	fp, r3, r1
 8002eb4:	eb44 0c02 	adc.w	ip, r4, r2
 8002eb8:	4658      	mov	r0, fp
 8002eba:	4661      	mov	r1, ip
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	685b      	ldr	r3, [r3, #4]
 8002ec0:	f04f 0400 	mov.w	r4, #0
 8002ec4:	461a      	mov	r2, r3
 8002ec6:	4623      	mov	r3, r4
 8002ec8:	f7fd f982 	bl	80001d0 <__aeabi_uldivmod>
 8002ecc:	4603      	mov	r3, r0
 8002ece:	460c      	mov	r4, r1
 8002ed0:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 8002ed2:	e03d      	b.n	8002f50 <UART_SetConfig+0x46c>
          case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002ed4:	f7fe fb40 	bl	8001558 <HAL_RCC_GetSysClockFreq>
 8002ed8:	4603      	mov	r3, r0
 8002eda:	4619      	mov	r1, r3
 8002edc:	f04f 0200 	mov.w	r2, #0
 8002ee0:	f04f 0300 	mov.w	r3, #0
 8002ee4:	f04f 0400 	mov.w	r4, #0
 8002ee8:	0214      	lsls	r4, r2, #8
 8002eea:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8002eee:	020b      	lsls	r3, r1, #8
 8002ef0:	687a      	ldr	r2, [r7, #4]
 8002ef2:	6852      	ldr	r2, [r2, #4]
 8002ef4:	0852      	lsrs	r2, r2, #1
 8002ef6:	4611      	mov	r1, r2
 8002ef8:	f04f 0200 	mov.w	r2, #0
 8002efc:	eb13 0b01 	adds.w	fp, r3, r1
 8002f00:	eb44 0c02 	adc.w	ip, r4, r2
 8002f04:	4658      	mov	r0, fp
 8002f06:	4661      	mov	r1, ip
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	685b      	ldr	r3, [r3, #4]
 8002f0c:	f04f 0400 	mov.w	r4, #0
 8002f10:	461a      	mov	r2, r3
 8002f12:	4623      	mov	r3, r4
 8002f14:	f7fd f95c 	bl	80001d0 <__aeabi_uldivmod>
 8002f18:	4603      	mov	r3, r0
 8002f1a:	460c      	mov	r4, r1
 8002f1c:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 8002f1e:	e017      	b.n	8002f50 <UART_SetConfig+0x46c>
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	685b      	ldr	r3, [r3, #4]
 8002f24:	085b      	lsrs	r3, r3, #1
 8002f26:	f04f 0400 	mov.w	r4, #0
 8002f2a:	f513 0000 	adds.w	r0, r3, #8388608	; 0x800000
 8002f2e:	f144 0100 	adc.w	r1, r4, #0
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	685b      	ldr	r3, [r3, #4]
 8002f36:	f04f 0400 	mov.w	r4, #0
 8002f3a:	461a      	mov	r2, r3
 8002f3c:	4623      	mov	r3, r4
 8002f3e:	f7fd f947 	bl	80001d0 <__aeabi_uldivmod>
 8002f42:	4603      	mov	r3, r0
 8002f44:	460c      	mov	r4, r1
 8002f46:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 8002f48:	e002      	b.n	8002f50 <UART_SetConfig+0x46c>
          case UART_CLOCKSOURCE_UNDEFINED:
          default:
            ret = HAL_ERROR;
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	74fb      	strb	r3, [r7, #19]
            break;
 8002f4e:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002f50:	697b      	ldr	r3, [r7, #20]
 8002f52:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002f56:	d308      	bcc.n	8002f6a <UART_SetConfig+0x486>
 8002f58:	697b      	ldr	r3, [r7, #20]
 8002f5a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002f5e:	d204      	bcs.n	8002f6a <UART_SetConfig+0x486>
        {
          huart->Instance->BRR = usartdiv;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	697a      	ldr	r2, [r7, #20]
 8002f66:	60da      	str	r2, [r3, #12]
 8002f68:	e0f5      	b.n	8003156 <UART_SetConfig+0x672>
        }
        else
        {
          ret = HAL_ERROR;
 8002f6a:	2301      	movs	r3, #1
 8002f6c:	74fb      	strb	r3, [r7, #19]
 8002f6e:	e0f2      	b.n	8003156 <UART_SetConfig+0x672>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	69db      	ldr	r3, [r3, #28]
 8002f74:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002f78:	d17f      	bne.n	800307a <UART_SetConfig+0x596>
  {
    switch (clocksource)
 8002f7a:	7efb      	ldrb	r3, [r7, #27]
 8002f7c:	2b08      	cmp	r3, #8
 8002f7e:	d85c      	bhi.n	800303a <UART_SetConfig+0x556>
 8002f80:	a201      	add	r2, pc, #4	; (adr r2, 8002f88 <UART_SetConfig+0x4a4>)
 8002f82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f86:	bf00      	nop
 8002f88:	08002fad 	.word	0x08002fad
 8002f8c:	08002fcb 	.word	0x08002fcb
 8002f90:	08002fe9 	.word	0x08002fe9
 8002f94:	0800303b 	.word	0x0800303b
 8002f98:	08003005 	.word	0x08003005
 8002f9c:	0800303b 	.word	0x0800303b
 8002fa0:	0800303b 	.word	0x0800303b
 8002fa4:	0800303b 	.word	0x0800303b
 8002fa8:	08003023 	.word	0x08003023
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8002fac:	f7fe fb6a 	bl	8001684 <HAL_RCC_GetPCLK1Freq>
 8002fb0:	4603      	mov	r3, r0
 8002fb2:	005a      	lsls	r2, r3, #1
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	685b      	ldr	r3, [r3, #4]
 8002fb8:	085b      	lsrs	r3, r3, #1
 8002fba:	441a      	add	r2, r3
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	685b      	ldr	r3, [r3, #4]
 8002fc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fc4:	b29b      	uxth	r3, r3
 8002fc6:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8002fc8:	e03a      	b.n	8003040 <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_PCLK2:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8002fca:	f7fe fb71 	bl	80016b0 <HAL_RCC_GetPCLK2Freq>
 8002fce:	4603      	mov	r3, r0
 8002fd0:	005a      	lsls	r2, r3, #1
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	685b      	ldr	r3, [r3, #4]
 8002fd6:	085b      	lsrs	r3, r3, #1
 8002fd8:	441a      	add	r2, r3
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	685b      	ldr	r3, [r3, #4]
 8002fde:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fe2:	b29b      	uxth	r3, r3
 8002fe4:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8002fe6:	e02b      	b.n	8003040 <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	685b      	ldr	r3, [r3, #4]
 8002fec:	085b      	lsrs	r3, r3, #1
 8002fee:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 8002ff2:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 8002ff6:	687a      	ldr	r2, [r7, #4]
 8002ff8:	6852      	ldr	r2, [r2, #4]
 8002ffa:	fbb3 f3f2 	udiv	r3, r3, r2
 8002ffe:	b29b      	uxth	r3, r3
 8003000:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003002:	e01d      	b.n	8003040 <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8003004:	f7fe faa8 	bl	8001558 <HAL_RCC_GetSysClockFreq>
 8003008:	4603      	mov	r3, r0
 800300a:	005a      	lsls	r2, r3, #1
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	685b      	ldr	r3, [r3, #4]
 8003010:	085b      	lsrs	r3, r3, #1
 8003012:	441a      	add	r2, r3
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	685b      	ldr	r3, [r3, #4]
 8003018:	fbb2 f3f3 	udiv	r3, r2, r3
 800301c:	b29b      	uxth	r3, r3
 800301e:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003020:	e00e      	b.n	8003040 <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	685b      	ldr	r3, [r3, #4]
 8003026:	085b      	lsrs	r3, r3, #1
 8003028:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	685b      	ldr	r3, [r3, #4]
 8003030:	fbb2 f3f3 	udiv	r3, r2, r3
 8003034:	b29b      	uxth	r3, r3
 8003036:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003038:	e002      	b.n	8003040 <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 800303a:	2301      	movs	r3, #1
 800303c:	74fb      	strb	r3, [r7, #19]
        break;
 800303e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003040:	697b      	ldr	r3, [r7, #20]
 8003042:	2b0f      	cmp	r3, #15
 8003044:	d916      	bls.n	8003074 <UART_SetConfig+0x590>
 8003046:	697b      	ldr	r3, [r7, #20]
 8003048:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800304c:	d212      	bcs.n	8003074 <UART_SetConfig+0x590>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800304e:	697b      	ldr	r3, [r7, #20]
 8003050:	b29b      	uxth	r3, r3
 8003052:	f023 030f 	bic.w	r3, r3, #15
 8003056:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003058:	697b      	ldr	r3, [r7, #20]
 800305a:	085b      	lsrs	r3, r3, #1
 800305c:	b29b      	uxth	r3, r3
 800305e:	f003 0307 	and.w	r3, r3, #7
 8003062:	b29a      	uxth	r2, r3
 8003064:	897b      	ldrh	r3, [r7, #10]
 8003066:	4313      	orrs	r3, r2
 8003068:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	897a      	ldrh	r2, [r7, #10]
 8003070:	60da      	str	r2, [r3, #12]
 8003072:	e070      	b.n	8003156 <UART_SetConfig+0x672>
    }
    else
    {
      ret = HAL_ERROR;
 8003074:	2301      	movs	r3, #1
 8003076:	74fb      	strb	r3, [r7, #19]
 8003078:	e06d      	b.n	8003156 <UART_SetConfig+0x672>
    }
  }
  else
  {
    switch (clocksource)
 800307a:	7efb      	ldrb	r3, [r7, #27]
 800307c:	2b08      	cmp	r3, #8
 800307e:	d859      	bhi.n	8003134 <UART_SetConfig+0x650>
 8003080:	a201      	add	r2, pc, #4	; (adr r2, 8003088 <UART_SetConfig+0x5a4>)
 8003082:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003086:	bf00      	nop
 8003088:	080030ad 	.word	0x080030ad
 800308c:	080030c9 	.word	0x080030c9
 8003090:	080030e5 	.word	0x080030e5
 8003094:	08003135 	.word	0x08003135
 8003098:	08003101 	.word	0x08003101
 800309c:	08003135 	.word	0x08003135
 80030a0:	08003135 	.word	0x08003135
 80030a4:	08003135 	.word	0x08003135
 80030a8:	0800311d 	.word	0x0800311d
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80030ac:	f7fe faea 	bl	8001684 <HAL_RCC_GetPCLK1Freq>
 80030b0:	4602      	mov	r2, r0
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	685b      	ldr	r3, [r3, #4]
 80030b6:	085b      	lsrs	r3, r3, #1
 80030b8:	441a      	add	r2, r3
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	685b      	ldr	r3, [r3, #4]
 80030be:	fbb2 f3f3 	udiv	r3, r2, r3
 80030c2:	b29b      	uxth	r3, r3
 80030c4:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80030c6:	e038      	b.n	800313a <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_PCLK2:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80030c8:	f7fe faf2 	bl	80016b0 <HAL_RCC_GetPCLK2Freq>
 80030cc:	4602      	mov	r2, r0
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	685b      	ldr	r3, [r3, #4]
 80030d2:	085b      	lsrs	r3, r3, #1
 80030d4:	441a      	add	r2, r3
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	685b      	ldr	r3, [r3, #4]
 80030da:	fbb2 f3f3 	udiv	r3, r2, r3
 80030de:	b29b      	uxth	r3, r3
 80030e0:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80030e2:	e02a      	b.n	800313a <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	685b      	ldr	r3, [r3, #4]
 80030e8:	085b      	lsrs	r3, r3, #1
 80030ea:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 80030ee:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 80030f2:	687a      	ldr	r2, [r7, #4]
 80030f4:	6852      	ldr	r2, [r2, #4]
 80030f6:	fbb3 f3f2 	udiv	r3, r3, r2
 80030fa:	b29b      	uxth	r3, r3
 80030fc:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80030fe:	e01c      	b.n	800313a <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8003100:	f7fe fa2a 	bl	8001558 <HAL_RCC_GetSysClockFreq>
 8003104:	4602      	mov	r2, r0
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	685b      	ldr	r3, [r3, #4]
 800310a:	085b      	lsrs	r3, r3, #1
 800310c:	441a      	add	r2, r3
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	685b      	ldr	r3, [r3, #4]
 8003112:	fbb2 f3f3 	udiv	r3, r2, r3
 8003116:	b29b      	uxth	r3, r3
 8003118:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800311a:	e00e      	b.n	800313a <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	685b      	ldr	r3, [r3, #4]
 8003120:	085b      	lsrs	r3, r3, #1
 8003122:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	685b      	ldr	r3, [r3, #4]
 800312a:	fbb2 f3f3 	udiv	r3, r2, r3
 800312e:	b29b      	uxth	r3, r3
 8003130:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003132:	e002      	b.n	800313a <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8003134:	2301      	movs	r3, #1
 8003136:	74fb      	strb	r3, [r7, #19]
        break;
 8003138:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800313a:	697b      	ldr	r3, [r7, #20]
 800313c:	2b0f      	cmp	r3, #15
 800313e:	d908      	bls.n	8003152 <UART_SetConfig+0x66e>
 8003140:	697b      	ldr	r3, [r7, #20]
 8003142:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003146:	d204      	bcs.n	8003152 <UART_SetConfig+0x66e>
    {
      huart->Instance->BRR = usartdiv;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	697a      	ldr	r2, [r7, #20]
 800314e:	60da      	str	r2, [r3, #12]
 8003150:	e001      	b.n	8003156 <UART_SetConfig+0x672>
    }
    else
    {
      ret = HAL_ERROR;
 8003152:	2301      	movs	r3, #1
 8003154:	74fb      	strb	r3, [r7, #19]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	2200      	movs	r2, #0
 800315a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2200      	movs	r2, #0
 8003160:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8003162:	7cfb      	ldrb	r3, [r7, #19]
}
 8003164:	4618      	mov	r0, r3
 8003166:	3720      	adds	r7, #32
 8003168:	46bd      	mov	sp, r7
 800316a:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 800316e:	bf00      	nop
 8003170:	f4240000 	.word	0xf4240000

08003174 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003174:	b480      	push	{r7}
 8003176:	b083      	sub	sp, #12
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003180:	f003 0301 	and.w	r3, r3, #1
 8003184:	2b00      	cmp	r3, #0
 8003186:	d00a      	beq.n	800319e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	685b      	ldr	r3, [r3, #4]
 800318e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	430a      	orrs	r2, r1
 800319c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031a2:	f003 0302 	and.w	r3, r3, #2
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d00a      	beq.n	80031c0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	685b      	ldr	r3, [r3, #4]
 80031b0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	430a      	orrs	r2, r1
 80031be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031c4:	f003 0304 	and.w	r3, r3, #4
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d00a      	beq.n	80031e2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	685b      	ldr	r3, [r3, #4]
 80031d2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	430a      	orrs	r2, r1
 80031e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031e6:	f003 0308 	and.w	r3, r3, #8
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d00a      	beq.n	8003204 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	685b      	ldr	r3, [r3, #4]
 80031f4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	430a      	orrs	r2, r1
 8003202:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003208:	f003 0310 	and.w	r3, r3, #16
 800320c:	2b00      	cmp	r3, #0
 800320e:	d00a      	beq.n	8003226 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	689b      	ldr	r3, [r3, #8]
 8003216:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	430a      	orrs	r2, r1
 8003224:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800322a:	f003 0320 	and.w	r3, r3, #32
 800322e:	2b00      	cmp	r3, #0
 8003230:	d00a      	beq.n	8003248 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	689b      	ldr	r3, [r3, #8]
 8003238:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	430a      	orrs	r2, r1
 8003246:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800324c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003250:	2b00      	cmp	r3, #0
 8003252:	d01a      	beq.n	800328a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	685b      	ldr	r3, [r3, #4]
 800325a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	430a      	orrs	r2, r1
 8003268:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800326e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003272:	d10a      	bne.n	800328a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	685b      	ldr	r3, [r3, #4]
 800327a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	430a      	orrs	r2, r1
 8003288:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800328e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003292:	2b00      	cmp	r3, #0
 8003294:	d00a      	beq.n	80032ac <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	685b      	ldr	r3, [r3, #4]
 800329c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	430a      	orrs	r2, r1
 80032aa:	605a      	str	r2, [r3, #4]
  }
}
 80032ac:	bf00      	nop
 80032ae:	370c      	adds	r7, #12
 80032b0:	46bd      	mov	sp, r7
 80032b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b6:	4770      	bx	lr

080032b8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b086      	sub	sp, #24
 80032bc:	af02      	add	r7, sp, #8
 80032be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2200      	movs	r2, #0
 80032c4:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80032c6:	f7fd f967 	bl	8000598 <HAL_GetTick>
 80032ca:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f003 0308 	and.w	r3, r3, #8
 80032d6:	2b08      	cmp	r3, #8
 80032d8:	d10e      	bne.n	80032f8 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80032da:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80032de:	9300      	str	r3, [sp, #0]
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	2200      	movs	r2, #0
 80032e4:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80032e8:	6878      	ldr	r0, [r7, #4]
 80032ea:	f000 f82a 	bl	8003342 <UART_WaitOnFlagUntilTimeout>
 80032ee:	4603      	mov	r3, r0
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d001      	beq.n	80032f8 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80032f4:	2303      	movs	r3, #3
 80032f6:	e020      	b.n	800333a <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f003 0304 	and.w	r3, r3, #4
 8003302:	2b04      	cmp	r3, #4
 8003304:	d10e      	bne.n	8003324 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003306:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800330a:	9300      	str	r3, [sp, #0]
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	2200      	movs	r2, #0
 8003310:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003314:	6878      	ldr	r0, [r7, #4]
 8003316:	f000 f814 	bl	8003342 <UART_WaitOnFlagUntilTimeout>
 800331a:	4603      	mov	r3, r0
 800331c:	2b00      	cmp	r3, #0
 800331e:	d001      	beq.n	8003324 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003320:	2303      	movs	r3, #3
 8003322:	e00a      	b.n	800333a <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2220      	movs	r2, #32
 8003328:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	2220      	movs	r2, #32
 800332e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2200      	movs	r2, #0
 8003334:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8003338:	2300      	movs	r3, #0
}
 800333a:	4618      	mov	r0, r3
 800333c:	3710      	adds	r7, #16
 800333e:	46bd      	mov	sp, r7
 8003340:	bd80      	pop	{r7, pc}

08003342 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003342:	b580      	push	{r7, lr}
 8003344:	b084      	sub	sp, #16
 8003346:	af00      	add	r7, sp, #0
 8003348:	60f8      	str	r0, [r7, #12]
 800334a:	60b9      	str	r1, [r7, #8]
 800334c:	603b      	str	r3, [r7, #0]
 800334e:	4613      	mov	r3, r2
 8003350:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003352:	e02a      	b.n	80033aa <UART_WaitOnFlagUntilTimeout+0x68>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003354:	69bb      	ldr	r3, [r7, #24]
 8003356:	f1b3 3fff 	cmp.w	r3, #4294967295
 800335a:	d026      	beq.n	80033aa <UART_WaitOnFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800335c:	f7fd f91c 	bl	8000598 <HAL_GetTick>
 8003360:	4602      	mov	r2, r0
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	1ad3      	subs	r3, r2, r3
 8003366:	69ba      	ldr	r2, [r7, #24]
 8003368:	429a      	cmp	r2, r3
 800336a:	d302      	bcc.n	8003372 <UART_WaitOnFlagUntilTimeout+0x30>
 800336c:	69bb      	ldr	r3, [r7, #24]
 800336e:	2b00      	cmp	r3, #0
 8003370:	d11b      	bne.n	80033aa <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	681a      	ldr	r2, [r3, #0]
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003380:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	689a      	ldr	r2, [r3, #8]
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f022 0201 	bic.w	r2, r2, #1
 8003390:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	2220      	movs	r2, #32
 8003396:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	2220      	movs	r2, #32
 800339c:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	2200      	movs	r2, #0
 80033a2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 80033a6:	2303      	movs	r3, #3
 80033a8:	e00f      	b.n	80033ca <UART_WaitOnFlagUntilTimeout+0x88>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	69da      	ldr	r2, [r3, #28]
 80033b0:	68bb      	ldr	r3, [r7, #8]
 80033b2:	4013      	ands	r3, r2
 80033b4:	68ba      	ldr	r2, [r7, #8]
 80033b6:	429a      	cmp	r2, r3
 80033b8:	bf0c      	ite	eq
 80033ba:	2301      	moveq	r3, #1
 80033bc:	2300      	movne	r3, #0
 80033be:	b2db      	uxtb	r3, r3
 80033c0:	461a      	mov	r2, r3
 80033c2:	79fb      	ldrb	r3, [r7, #7]
 80033c4:	429a      	cmp	r2, r3
 80033c6:	d0c5      	beq.n	8003354 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80033c8:	2300      	movs	r3, #0
}
 80033ca:	4618      	mov	r0, r3
 80033cc:	3710      	adds	r7, #16
 80033ce:	46bd      	mov	sp, r7
 80033d0:	bd80      	pop	{r7, pc}

080033d2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80033d2:	b480      	push	{r7}
 80033d4:	b083      	sub	sp, #12
 80033d6:	af00      	add	r7, sp, #0
 80033d8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	681a      	ldr	r2, [r3, #0]
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80033e8:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	689a      	ldr	r2, [r3, #8]
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f022 0201 	bic.w	r2, r2, #1
 80033f8:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	2220      	movs	r2, #32
 80033fe:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2200      	movs	r2, #0
 8003404:	661a      	str	r2, [r3, #96]	; 0x60
}
 8003406:	bf00      	nop
 8003408:	370c      	adds	r7, #12
 800340a:	46bd      	mov	sp, r7
 800340c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003410:	4770      	bx	lr

08003412 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003412:	b580      	push	{r7, lr}
 8003414:	b084      	sub	sp, #16
 8003416:	af00      	add	r7, sp, #0
 8003418:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800341e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	2200      	movs	r2, #0
 8003424:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	2200      	movs	r2, #0
 800342c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003436:	68f8      	ldr	r0, [r7, #12]
 8003438:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800343a:	bf00      	nop
 800343c:	3710      	adds	r7, #16
 800343e:	46bd      	mov	sp, r7
 8003440:	bd80      	pop	{r7, pc}

08003442 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003442:	b580      	push	{r7, lr}
 8003444:	b082      	sub	sp, #8
 8003446:	af00      	add	r7, sp, #0
 8003448:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	681a      	ldr	r2, [r3, #0]
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003458:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	2220      	movs	r2, #32
 800345e:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2200      	movs	r2, #0
 8003464:	665a      	str	r2, [r3, #100]	; 0x64

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800346c:	6878      	ldr	r0, [r7, #4]
 800346e:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003470:	bf00      	nop
 8003472:	3708      	adds	r7, #8
 8003474:	46bd      	mov	sp, r7
 8003476:	bd80      	pop	{r7, pc}

08003478 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003478:	b480      	push	{r7}
 800347a:	b083      	sub	sp, #12
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003480:	bf00      	nop
 8003482:	370c      	adds	r7, #12
 8003484:	46bd      	mov	sp, r7
 8003486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348a:	4770      	bx	lr

0800348c <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800348c:	b480      	push	{r7}
 800348e:	b085      	sub	sp, #20
 8003490:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003492:	f3ef 8305 	mrs	r3, IPSR
 8003496:	60bb      	str	r3, [r7, #8]
  return(result);
 8003498:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800349a:	2b00      	cmp	r3, #0
 800349c:	d10f      	bne.n	80034be <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800349e:	f3ef 8310 	mrs	r3, PRIMASK
 80034a2:	607b      	str	r3, [r7, #4]
  return(result);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d109      	bne.n	80034be <osKernelInitialize+0x32>
 80034aa:	4b11      	ldr	r3, [pc, #68]	; (80034f0 <osKernelInitialize+0x64>)
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	2b02      	cmp	r3, #2
 80034b0:	d109      	bne.n	80034c6 <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80034b2:	f3ef 8311 	mrs	r3, BASEPRI
 80034b6:	603b      	str	r3, [r7, #0]
  return(result);
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d003      	beq.n	80034c6 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 80034be:	f06f 0305 	mvn.w	r3, #5
 80034c2:	60fb      	str	r3, [r7, #12]
 80034c4:	e00c      	b.n	80034e0 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80034c6:	4b0a      	ldr	r3, [pc, #40]	; (80034f0 <osKernelInitialize+0x64>)
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d105      	bne.n	80034da <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 80034ce:	4b08      	ldr	r3, [pc, #32]	; (80034f0 <osKernelInitialize+0x64>)
 80034d0:	2201      	movs	r2, #1
 80034d2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80034d4:	2300      	movs	r3, #0
 80034d6:	60fb      	str	r3, [r7, #12]
 80034d8:	e002      	b.n	80034e0 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 80034da:	f04f 33ff 	mov.w	r3, #4294967295
 80034de:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80034e0:	68fb      	ldr	r3, [r7, #12]
}
 80034e2:	4618      	mov	r0, r3
 80034e4:	3714      	adds	r7, #20
 80034e6:	46bd      	mov	sp, r7
 80034e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ec:	4770      	bx	lr
 80034ee:	bf00      	nop
 80034f0:	20000090 	.word	0x20000090

080034f4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b084      	sub	sp, #16
 80034f8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80034fa:	f3ef 8305 	mrs	r3, IPSR
 80034fe:	60bb      	str	r3, [r7, #8]
  return(result);
 8003500:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003502:	2b00      	cmp	r3, #0
 8003504:	d10f      	bne.n	8003526 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003506:	f3ef 8310 	mrs	r3, PRIMASK
 800350a:	607b      	str	r3, [r7, #4]
  return(result);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2b00      	cmp	r3, #0
 8003510:	d109      	bne.n	8003526 <osKernelStart+0x32>
 8003512:	4b11      	ldr	r3, [pc, #68]	; (8003558 <osKernelStart+0x64>)
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	2b02      	cmp	r3, #2
 8003518:	d109      	bne.n	800352e <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800351a:	f3ef 8311 	mrs	r3, BASEPRI
 800351e:	603b      	str	r3, [r7, #0]
  return(result);
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	2b00      	cmp	r3, #0
 8003524:	d003      	beq.n	800352e <osKernelStart+0x3a>
    stat = osErrorISR;
 8003526:	f06f 0305 	mvn.w	r3, #5
 800352a:	60fb      	str	r3, [r7, #12]
 800352c:	e00e      	b.n	800354c <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 800352e:	4b0a      	ldr	r3, [pc, #40]	; (8003558 <osKernelStart+0x64>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	2b01      	cmp	r3, #1
 8003534:	d107      	bne.n	8003546 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8003536:	4b08      	ldr	r3, [pc, #32]	; (8003558 <osKernelStart+0x64>)
 8003538:	2202      	movs	r2, #2
 800353a:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 800353c:	f001 f8f4 	bl	8004728 <vTaskStartScheduler>
      stat = osOK;
 8003540:	2300      	movs	r3, #0
 8003542:	60fb      	str	r3, [r7, #12]
 8003544:	e002      	b.n	800354c <osKernelStart+0x58>
    } else {
      stat = osError;
 8003546:	f04f 33ff 	mov.w	r3, #4294967295
 800354a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800354c:	68fb      	ldr	r3, [r7, #12]
}
 800354e:	4618      	mov	r0, r3
 8003550:	3710      	adds	r7, #16
 8003552:	46bd      	mov	sp, r7
 8003554:	bd80      	pop	{r7, pc}
 8003556:	bf00      	nop
 8003558:	20000090 	.word	0x20000090

0800355c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800355c:	b580      	push	{r7, lr}
 800355e:	b092      	sub	sp, #72	; 0x48
 8003560:	af04      	add	r7, sp, #16
 8003562:	60f8      	str	r0, [r7, #12]
 8003564:	60b9      	str	r1, [r7, #8]
 8003566:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003568:	2300      	movs	r3, #0
 800356a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800356c:	f3ef 8305 	mrs	r3, IPSR
 8003570:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8003572:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8003574:	2b00      	cmp	r3, #0
 8003576:	f040 8094 	bne.w	80036a2 <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800357a:	f3ef 8310 	mrs	r3, PRIMASK
 800357e:	623b      	str	r3, [r7, #32]
  return(result);
 8003580:	6a3b      	ldr	r3, [r7, #32]
 8003582:	2b00      	cmp	r3, #0
 8003584:	f040 808d 	bne.w	80036a2 <osThreadNew+0x146>
 8003588:	4b48      	ldr	r3, [pc, #288]	; (80036ac <osThreadNew+0x150>)
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	2b02      	cmp	r3, #2
 800358e:	d106      	bne.n	800359e <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003590:	f3ef 8311 	mrs	r3, BASEPRI
 8003594:	61fb      	str	r3, [r7, #28]
  return(result);
 8003596:	69fb      	ldr	r3, [r7, #28]
 8003598:	2b00      	cmp	r3, #0
 800359a:	f040 8082 	bne.w	80036a2 <osThreadNew+0x146>
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d07e      	beq.n	80036a2 <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 80035a4:	2380      	movs	r3, #128	; 0x80
 80035a6:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 80035a8:	2318      	movs	r3, #24
 80035aa:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 80035ac:	2300      	movs	r3, #0
 80035ae:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 80035b0:	f107 031b 	add.w	r3, r7, #27
 80035b4:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 80035b6:	f04f 33ff 	mov.w	r3, #4294967295
 80035ba:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d045      	beq.n	800364e <osThreadNew+0xf2>
      if (attr->name != NULL) {
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d002      	beq.n	80035d0 <osThreadNew+0x74>
        name = attr->name;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	699b      	ldr	r3, [r3, #24]
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d002      	beq.n	80035de <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	699b      	ldr	r3, [r3, #24]
 80035dc:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80035de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d008      	beq.n	80035f6 <osThreadNew+0x9a>
 80035e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035e6:	2b38      	cmp	r3, #56	; 0x38
 80035e8:	d805      	bhi.n	80035f6 <osThreadNew+0x9a>
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	685b      	ldr	r3, [r3, #4]
 80035ee:	f003 0301 	and.w	r3, r3, #1
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d001      	beq.n	80035fa <osThreadNew+0x9e>
        return (NULL);
 80035f6:	2300      	movs	r3, #0
 80035f8:	e054      	b.n	80036a4 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	695b      	ldr	r3, [r3, #20]
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d003      	beq.n	800360a <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	695b      	ldr	r3, [r3, #20]
 8003606:	089b      	lsrs	r3, r3, #2
 8003608:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	689b      	ldr	r3, [r3, #8]
 800360e:	2b00      	cmp	r3, #0
 8003610:	d00e      	beq.n	8003630 <osThreadNew+0xd4>
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	68db      	ldr	r3, [r3, #12]
 8003616:	2b5b      	cmp	r3, #91	; 0x5b
 8003618:	d90a      	bls.n	8003630 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800361e:	2b00      	cmp	r3, #0
 8003620:	d006      	beq.n	8003630 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	695b      	ldr	r3, [r3, #20]
 8003626:	2b00      	cmp	r3, #0
 8003628:	d002      	beq.n	8003630 <osThreadNew+0xd4>
        mem = 1;
 800362a:	2301      	movs	r3, #1
 800362c:	62bb      	str	r3, [r7, #40]	; 0x28
 800362e:	e010      	b.n	8003652 <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	689b      	ldr	r3, [r3, #8]
 8003634:	2b00      	cmp	r3, #0
 8003636:	d10c      	bne.n	8003652 <osThreadNew+0xf6>
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	68db      	ldr	r3, [r3, #12]
 800363c:	2b00      	cmp	r3, #0
 800363e:	d108      	bne.n	8003652 <osThreadNew+0xf6>
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	691b      	ldr	r3, [r3, #16]
 8003644:	2b00      	cmp	r3, #0
 8003646:	d104      	bne.n	8003652 <osThreadNew+0xf6>
          mem = 0;
 8003648:	2300      	movs	r3, #0
 800364a:	62bb      	str	r3, [r7, #40]	; 0x28
 800364c:	e001      	b.n	8003652 <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 800364e:	2300      	movs	r3, #0
 8003650:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 8003652:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003654:	2b01      	cmp	r3, #1
 8003656:	d110      	bne.n	800367a <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800365c:	687a      	ldr	r2, [r7, #4]
 800365e:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003660:	9202      	str	r2, [sp, #8]
 8003662:	9301      	str	r3, [sp, #4]
 8003664:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003666:	9300      	str	r3, [sp, #0]
 8003668:	68bb      	ldr	r3, [r7, #8]
 800366a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800366c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800366e:	68f8      	ldr	r0, [r7, #12]
 8003670:	f000 fe92 	bl	8004398 <xTaskCreateStatic>
 8003674:	4603      	mov	r3, r0
 8003676:	617b      	str	r3, [r7, #20]
 8003678:	e013      	b.n	80036a2 <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 800367a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800367c:	2b00      	cmp	r3, #0
 800367e:	d110      	bne.n	80036a2 <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003680:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003682:	b29a      	uxth	r2, r3
 8003684:	f107 0314 	add.w	r3, r7, #20
 8003688:	9301      	str	r3, [sp, #4]
 800368a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800368c:	9300      	str	r3, [sp, #0]
 800368e:	68bb      	ldr	r3, [r7, #8]
 8003690:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003692:	68f8      	ldr	r0, [r7, #12]
 8003694:	f000 fed9 	bl	800444a <xTaskCreate>
 8003698:	4603      	mov	r3, r0
 800369a:	2b01      	cmp	r3, #1
 800369c:	d001      	beq.n	80036a2 <osThreadNew+0x146>
          hTask = NULL;
 800369e:	2300      	movs	r3, #0
 80036a0:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80036a2:	697b      	ldr	r3, [r7, #20]
}
 80036a4:	4618      	mov	r0, r3
 80036a6:	3738      	adds	r7, #56	; 0x38
 80036a8:	46bd      	mov	sp, r7
 80036aa:	bd80      	pop	{r7, pc}
 80036ac:	20000090 	.word	0x20000090

080036b0 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b086      	sub	sp, #24
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80036b8:	f3ef 8305 	mrs	r3, IPSR
 80036bc:	613b      	str	r3, [r7, #16]
  return(result);
 80036be:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d10f      	bne.n	80036e4 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80036c4:	f3ef 8310 	mrs	r3, PRIMASK
 80036c8:	60fb      	str	r3, [r7, #12]
  return(result);
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d109      	bne.n	80036e4 <osDelay+0x34>
 80036d0:	4b0d      	ldr	r3, [pc, #52]	; (8003708 <osDelay+0x58>)
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	2b02      	cmp	r3, #2
 80036d6:	d109      	bne.n	80036ec <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80036d8:	f3ef 8311 	mrs	r3, BASEPRI
 80036dc:	60bb      	str	r3, [r7, #8]
  return(result);
 80036de:	68bb      	ldr	r3, [r7, #8]
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d003      	beq.n	80036ec <osDelay+0x3c>
    stat = osErrorISR;
 80036e4:	f06f 0305 	mvn.w	r3, #5
 80036e8:	617b      	str	r3, [r7, #20]
 80036ea:	e007      	b.n	80036fc <osDelay+0x4c>
  }
  else {
    stat = osOK;
 80036ec:	2300      	movs	r3, #0
 80036ee:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d002      	beq.n	80036fc <osDelay+0x4c>
      vTaskDelay(ticks);
 80036f6:	6878      	ldr	r0, [r7, #4]
 80036f8:	f000 ffe2 	bl	80046c0 <vTaskDelay>
    }
  }

  return (stat);
 80036fc:	697b      	ldr	r3, [r7, #20]
}
 80036fe:	4618      	mov	r0, r3
 8003700:	3718      	adds	r7, #24
 8003702:	46bd      	mov	sp, r7
 8003704:	bd80      	pop	{r7, pc}
 8003706:	bf00      	nop
 8003708:	20000090 	.word	0x20000090

0800370c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800370c:	b480      	push	{r7}
 800370e:	b085      	sub	sp, #20
 8003710:	af00      	add	r7, sp, #0
 8003712:	60f8      	str	r0, [r7, #12]
 8003714:	60b9      	str	r1, [r7, #8]
 8003716:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	4a07      	ldr	r2, [pc, #28]	; (8003738 <vApplicationGetIdleTaskMemory+0x2c>)
 800371c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800371e:	68bb      	ldr	r3, [r7, #8]
 8003720:	4a06      	ldr	r2, [pc, #24]	; (800373c <vApplicationGetIdleTaskMemory+0x30>)
 8003722:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2280      	movs	r2, #128	; 0x80
 8003728:	601a      	str	r2, [r3, #0]
}
 800372a:	bf00      	nop
 800372c:	3714      	adds	r7, #20
 800372e:	46bd      	mov	sp, r7
 8003730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003734:	4770      	bx	lr
 8003736:	bf00      	nop
 8003738:	20000094 	.word	0x20000094
 800373c:	200000f0 	.word	0x200000f0

08003740 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003740:	b480      	push	{r7}
 8003742:	b085      	sub	sp, #20
 8003744:	af00      	add	r7, sp, #0
 8003746:	60f8      	str	r0, [r7, #12]
 8003748:	60b9      	str	r1, [r7, #8]
 800374a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	4a07      	ldr	r2, [pc, #28]	; (800376c <vApplicationGetTimerTaskMemory+0x2c>)
 8003750:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003752:	68bb      	ldr	r3, [r7, #8]
 8003754:	4a06      	ldr	r2, [pc, #24]	; (8003770 <vApplicationGetTimerTaskMemory+0x30>)
 8003756:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800375e:	601a      	str	r2, [r3, #0]
}
 8003760:	bf00      	nop
 8003762:	3714      	adds	r7, #20
 8003764:	46bd      	mov	sp, r7
 8003766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376a:	4770      	bx	lr
 800376c:	200002f0 	.word	0x200002f0
 8003770:	2000034c 	.word	0x2000034c

08003774 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003774:	b480      	push	{r7}
 8003776:	b083      	sub	sp, #12
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	f103 0208 	add.w	r2, r3, #8
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	f04f 32ff 	mov.w	r2, #4294967295
 800378c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	f103 0208 	add.w	r2, r3, #8
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	f103 0208 	add.w	r2, r3, #8
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	2200      	movs	r2, #0
 80037a6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80037a8:	bf00      	nop
 80037aa:	370c      	adds	r7, #12
 80037ac:	46bd      	mov	sp, r7
 80037ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b2:	4770      	bx	lr

080037b4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80037b4:	b480      	push	{r7}
 80037b6:	b083      	sub	sp, #12
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2200      	movs	r2, #0
 80037c0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80037c2:	bf00      	nop
 80037c4:	370c      	adds	r7, #12
 80037c6:	46bd      	mov	sp, r7
 80037c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037cc:	4770      	bx	lr

080037ce <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80037ce:	b480      	push	{r7}
 80037d0:	b085      	sub	sp, #20
 80037d2:	af00      	add	r7, sp, #0
 80037d4:	6078      	str	r0, [r7, #4]
 80037d6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	685b      	ldr	r3, [r3, #4]
 80037dc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	68fa      	ldr	r2, [r7, #12]
 80037e2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	689a      	ldr	r2, [r3, #8]
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	689b      	ldr	r3, [r3, #8]
 80037f0:	683a      	ldr	r2, [r7, #0]
 80037f2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	683a      	ldr	r2, [r7, #0]
 80037f8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80037fa:	683b      	ldr	r3, [r7, #0]
 80037fc:	687a      	ldr	r2, [r7, #4]
 80037fe:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	1c5a      	adds	r2, r3, #1
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	601a      	str	r2, [r3, #0]
}
 800380a:	bf00      	nop
 800380c:	3714      	adds	r7, #20
 800380e:	46bd      	mov	sp, r7
 8003810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003814:	4770      	bx	lr

08003816 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003816:	b480      	push	{r7}
 8003818:	b085      	sub	sp, #20
 800381a:	af00      	add	r7, sp, #0
 800381c:	6078      	str	r0, [r7, #4]
 800381e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003826:	68bb      	ldr	r3, [r7, #8]
 8003828:	f1b3 3fff 	cmp.w	r3, #4294967295
 800382c:	d103      	bne.n	8003836 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	691b      	ldr	r3, [r3, #16]
 8003832:	60fb      	str	r3, [r7, #12]
 8003834:	e00c      	b.n	8003850 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	3308      	adds	r3, #8
 800383a:	60fb      	str	r3, [r7, #12]
 800383c:	e002      	b.n	8003844 <vListInsert+0x2e>
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	685b      	ldr	r3, [r3, #4]
 8003842:	60fb      	str	r3, [r7, #12]
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	685b      	ldr	r3, [r3, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	68ba      	ldr	r2, [r7, #8]
 800384c:	429a      	cmp	r2, r3
 800384e:	d2f6      	bcs.n	800383e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	685a      	ldr	r2, [r3, #4]
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	685b      	ldr	r3, [r3, #4]
 800385c:	683a      	ldr	r2, [r7, #0]
 800385e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	68fa      	ldr	r2, [r7, #12]
 8003864:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	683a      	ldr	r2, [r7, #0]
 800386a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800386c:	683b      	ldr	r3, [r7, #0]
 800386e:	687a      	ldr	r2, [r7, #4]
 8003870:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	1c5a      	adds	r2, r3, #1
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	601a      	str	r2, [r3, #0]
}
 800387c:	bf00      	nop
 800387e:	3714      	adds	r7, #20
 8003880:	46bd      	mov	sp, r7
 8003882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003886:	4770      	bx	lr

08003888 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003888:	b480      	push	{r7}
 800388a:	b085      	sub	sp, #20
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	691b      	ldr	r3, [r3, #16]
 8003894:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	685b      	ldr	r3, [r3, #4]
 800389a:	687a      	ldr	r2, [r7, #4]
 800389c:	6892      	ldr	r2, [r2, #8]
 800389e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	689b      	ldr	r3, [r3, #8]
 80038a4:	687a      	ldr	r2, [r7, #4]
 80038a6:	6852      	ldr	r2, [r2, #4]
 80038a8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	685b      	ldr	r3, [r3, #4]
 80038ae:	687a      	ldr	r2, [r7, #4]
 80038b0:	429a      	cmp	r2, r3
 80038b2:	d103      	bne.n	80038bc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	689a      	ldr	r2, [r3, #8]
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2200      	movs	r2, #0
 80038c0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	1e5a      	subs	r2, r3, #1
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	681b      	ldr	r3, [r3, #0]
}
 80038d0:	4618      	mov	r0, r3
 80038d2:	3714      	adds	r7, #20
 80038d4:	46bd      	mov	sp, r7
 80038d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038da:	4770      	bx	lr

080038dc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	b084      	sub	sp, #16
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
 80038e4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d109      	bne.n	8003904 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80038f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038f4:	f383 8811 	msr	BASEPRI, r3
 80038f8:	f3bf 8f6f 	isb	sy
 80038fc:	f3bf 8f4f 	dsb	sy
 8003900:	60bb      	str	r3, [r7, #8]
 8003902:	e7fe      	b.n	8003902 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8003904:	f002 f862 	bl	80059cc <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	681a      	ldr	r2, [r3, #0]
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003910:	68f9      	ldr	r1, [r7, #12]
 8003912:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003914:	fb01 f303 	mul.w	r3, r1, r3
 8003918:	441a      	add	r2, r3
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	2200      	movs	r2, #0
 8003922:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	681a      	ldr	r2, [r3, #0]
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	681a      	ldr	r2, [r3, #0]
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003934:	3b01      	subs	r3, #1
 8003936:	68f9      	ldr	r1, [r7, #12]
 8003938:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800393a:	fb01 f303 	mul.w	r3, r1, r3
 800393e:	441a      	add	r2, r3
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	22ff      	movs	r2, #255	; 0xff
 8003948:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	22ff      	movs	r2, #255	; 0xff
 8003950:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8003954:	683b      	ldr	r3, [r7, #0]
 8003956:	2b00      	cmp	r3, #0
 8003958:	d114      	bne.n	8003984 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	691b      	ldr	r3, [r3, #16]
 800395e:	2b00      	cmp	r3, #0
 8003960:	d01a      	beq.n	8003998 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	3310      	adds	r3, #16
 8003966:	4618      	mov	r0, r3
 8003968:	f001 f964 	bl	8004c34 <xTaskRemoveFromEventList>
 800396c:	4603      	mov	r3, r0
 800396e:	2b00      	cmp	r3, #0
 8003970:	d012      	beq.n	8003998 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003972:	4b0d      	ldr	r3, [pc, #52]	; (80039a8 <xQueueGenericReset+0xcc>)
 8003974:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003978:	601a      	str	r2, [r3, #0]
 800397a:	f3bf 8f4f 	dsb	sy
 800397e:	f3bf 8f6f 	isb	sy
 8003982:	e009      	b.n	8003998 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	3310      	adds	r3, #16
 8003988:	4618      	mov	r0, r3
 800398a:	f7ff fef3 	bl	8003774 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	3324      	adds	r3, #36	; 0x24
 8003992:	4618      	mov	r0, r3
 8003994:	f7ff feee 	bl	8003774 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003998:	f002 f846 	bl	8005a28 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800399c:	2301      	movs	r3, #1
}
 800399e:	4618      	mov	r0, r3
 80039a0:	3710      	adds	r7, #16
 80039a2:	46bd      	mov	sp, r7
 80039a4:	bd80      	pop	{r7, pc}
 80039a6:	bf00      	nop
 80039a8:	e000ed04 	.word	0xe000ed04

080039ac <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	b08e      	sub	sp, #56	; 0x38
 80039b0:	af02      	add	r7, sp, #8
 80039b2:	60f8      	str	r0, [r7, #12]
 80039b4:	60b9      	str	r1, [r7, #8]
 80039b6:	607a      	str	r2, [r7, #4]
 80039b8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d109      	bne.n	80039d4 <xQueueGenericCreateStatic+0x28>
 80039c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039c4:	f383 8811 	msr	BASEPRI, r3
 80039c8:	f3bf 8f6f 	isb	sy
 80039cc:	f3bf 8f4f 	dsb	sy
 80039d0:	62bb      	str	r3, [r7, #40]	; 0x28
 80039d2:	e7fe      	b.n	80039d2 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80039d4:	683b      	ldr	r3, [r7, #0]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d109      	bne.n	80039ee <xQueueGenericCreateStatic+0x42>
 80039da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039de:	f383 8811 	msr	BASEPRI, r3
 80039e2:	f3bf 8f6f 	isb	sy
 80039e6:	f3bf 8f4f 	dsb	sy
 80039ea:	627b      	str	r3, [r7, #36]	; 0x24
 80039ec:	e7fe      	b.n	80039ec <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d002      	beq.n	80039fa <xQueueGenericCreateStatic+0x4e>
 80039f4:	68bb      	ldr	r3, [r7, #8]
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d001      	beq.n	80039fe <xQueueGenericCreateStatic+0x52>
 80039fa:	2301      	movs	r3, #1
 80039fc:	e000      	b.n	8003a00 <xQueueGenericCreateStatic+0x54>
 80039fe:	2300      	movs	r3, #0
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d109      	bne.n	8003a18 <xQueueGenericCreateStatic+0x6c>
 8003a04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a08:	f383 8811 	msr	BASEPRI, r3
 8003a0c:	f3bf 8f6f 	isb	sy
 8003a10:	f3bf 8f4f 	dsb	sy
 8003a14:	623b      	str	r3, [r7, #32]
 8003a16:	e7fe      	b.n	8003a16 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d102      	bne.n	8003a24 <xQueueGenericCreateStatic+0x78>
 8003a1e:	68bb      	ldr	r3, [r7, #8]
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d101      	bne.n	8003a28 <xQueueGenericCreateStatic+0x7c>
 8003a24:	2301      	movs	r3, #1
 8003a26:	e000      	b.n	8003a2a <xQueueGenericCreateStatic+0x7e>
 8003a28:	2300      	movs	r3, #0
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d109      	bne.n	8003a42 <xQueueGenericCreateStatic+0x96>
 8003a2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a32:	f383 8811 	msr	BASEPRI, r3
 8003a36:	f3bf 8f6f 	isb	sy
 8003a3a:	f3bf 8f4f 	dsb	sy
 8003a3e:	61fb      	str	r3, [r7, #28]
 8003a40:	e7fe      	b.n	8003a40 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003a42:	2350      	movs	r3, #80	; 0x50
 8003a44:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003a46:	697b      	ldr	r3, [r7, #20]
 8003a48:	2b50      	cmp	r3, #80	; 0x50
 8003a4a:	d009      	beq.n	8003a60 <xQueueGenericCreateStatic+0xb4>
 8003a4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a50:	f383 8811 	msr	BASEPRI, r3
 8003a54:	f3bf 8f6f 	isb	sy
 8003a58:	f3bf 8f4f 	dsb	sy
 8003a5c:	61bb      	str	r3, [r7, #24]
 8003a5e:	e7fe      	b.n	8003a5e <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8003a64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d00d      	beq.n	8003a86 <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003a6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a6c:	2201      	movs	r2, #1
 8003a6e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003a72:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8003a76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a78:	9300      	str	r3, [sp, #0]
 8003a7a:	4613      	mov	r3, r2
 8003a7c:	687a      	ldr	r2, [r7, #4]
 8003a7e:	68b9      	ldr	r1, [r7, #8]
 8003a80:	68f8      	ldr	r0, [r7, #12]
 8003a82:	f000 f805 	bl	8003a90 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8003a86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8003a88:	4618      	mov	r0, r3
 8003a8a:	3730      	adds	r7, #48	; 0x30
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	bd80      	pop	{r7, pc}

08003a90 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b084      	sub	sp, #16
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	60f8      	str	r0, [r7, #12]
 8003a98:	60b9      	str	r1, [r7, #8]
 8003a9a:	607a      	str	r2, [r7, #4]
 8003a9c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003a9e:	68bb      	ldr	r3, [r7, #8]
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d103      	bne.n	8003aac <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003aa4:	69bb      	ldr	r3, [r7, #24]
 8003aa6:	69ba      	ldr	r2, [r7, #24]
 8003aa8:	601a      	str	r2, [r3, #0]
 8003aaa:	e002      	b.n	8003ab2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003aac:	69bb      	ldr	r3, [r7, #24]
 8003aae:	687a      	ldr	r2, [r7, #4]
 8003ab0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003ab2:	69bb      	ldr	r3, [r7, #24]
 8003ab4:	68fa      	ldr	r2, [r7, #12]
 8003ab6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003ab8:	69bb      	ldr	r3, [r7, #24]
 8003aba:	68ba      	ldr	r2, [r7, #8]
 8003abc:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003abe:	2101      	movs	r1, #1
 8003ac0:	69b8      	ldr	r0, [r7, #24]
 8003ac2:	f7ff ff0b 	bl	80038dc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8003ac6:	69bb      	ldr	r3, [r7, #24]
 8003ac8:	78fa      	ldrb	r2, [r7, #3]
 8003aca:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003ace:	bf00      	nop
 8003ad0:	3710      	adds	r7, #16
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	bd80      	pop	{r7, pc}
	...

08003ad8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b08e      	sub	sp, #56	; 0x38
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	60f8      	str	r0, [r7, #12]
 8003ae0:	60b9      	str	r1, [r7, #8]
 8003ae2:	607a      	str	r2, [r7, #4]
 8003ae4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003aee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d109      	bne.n	8003b08 <xQueueGenericSend+0x30>
 8003af4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003af8:	f383 8811 	msr	BASEPRI, r3
 8003afc:	f3bf 8f6f 	isb	sy
 8003b00:	f3bf 8f4f 	dsb	sy
 8003b04:	62bb      	str	r3, [r7, #40]	; 0x28
 8003b06:	e7fe      	b.n	8003b06 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003b08:	68bb      	ldr	r3, [r7, #8]
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d103      	bne.n	8003b16 <xQueueGenericSend+0x3e>
 8003b0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d101      	bne.n	8003b1a <xQueueGenericSend+0x42>
 8003b16:	2301      	movs	r3, #1
 8003b18:	e000      	b.n	8003b1c <xQueueGenericSend+0x44>
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d109      	bne.n	8003b34 <xQueueGenericSend+0x5c>
 8003b20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b24:	f383 8811 	msr	BASEPRI, r3
 8003b28:	f3bf 8f6f 	isb	sy
 8003b2c:	f3bf 8f4f 	dsb	sy
 8003b30:	627b      	str	r3, [r7, #36]	; 0x24
 8003b32:	e7fe      	b.n	8003b32 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003b34:	683b      	ldr	r3, [r7, #0]
 8003b36:	2b02      	cmp	r3, #2
 8003b38:	d103      	bne.n	8003b42 <xQueueGenericSend+0x6a>
 8003b3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b3e:	2b01      	cmp	r3, #1
 8003b40:	d101      	bne.n	8003b46 <xQueueGenericSend+0x6e>
 8003b42:	2301      	movs	r3, #1
 8003b44:	e000      	b.n	8003b48 <xQueueGenericSend+0x70>
 8003b46:	2300      	movs	r3, #0
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d109      	bne.n	8003b60 <xQueueGenericSend+0x88>
 8003b4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b50:	f383 8811 	msr	BASEPRI, r3
 8003b54:	f3bf 8f6f 	isb	sy
 8003b58:	f3bf 8f4f 	dsb	sy
 8003b5c:	623b      	str	r3, [r7, #32]
 8003b5e:	e7fe      	b.n	8003b5e <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003b60:	f001 fa24 	bl	8004fac <xTaskGetSchedulerState>
 8003b64:	4603      	mov	r3, r0
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d102      	bne.n	8003b70 <xQueueGenericSend+0x98>
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d101      	bne.n	8003b74 <xQueueGenericSend+0x9c>
 8003b70:	2301      	movs	r3, #1
 8003b72:	e000      	b.n	8003b76 <xQueueGenericSend+0x9e>
 8003b74:	2300      	movs	r3, #0
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d109      	bne.n	8003b8e <xQueueGenericSend+0xb6>
 8003b7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b7e:	f383 8811 	msr	BASEPRI, r3
 8003b82:	f3bf 8f6f 	isb	sy
 8003b86:	f3bf 8f4f 	dsb	sy
 8003b8a:	61fb      	str	r3, [r7, #28]
 8003b8c:	e7fe      	b.n	8003b8c <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003b8e:	f001 ff1d 	bl	80059cc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003b92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b94:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b9a:	429a      	cmp	r2, r3
 8003b9c:	d302      	bcc.n	8003ba4 <xQueueGenericSend+0xcc>
 8003b9e:	683b      	ldr	r3, [r7, #0]
 8003ba0:	2b02      	cmp	r3, #2
 8003ba2:	d129      	bne.n	8003bf8 <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003ba4:	683a      	ldr	r2, [r7, #0]
 8003ba6:	68b9      	ldr	r1, [r7, #8]
 8003ba8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003baa:	f000 fa89 	bl	80040c0 <prvCopyDataToQueue>
 8003bae:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003bb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d010      	beq.n	8003bda <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003bb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bba:	3324      	adds	r3, #36	; 0x24
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	f001 f839 	bl	8004c34 <xTaskRemoveFromEventList>
 8003bc2:	4603      	mov	r3, r0
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d013      	beq.n	8003bf0 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003bc8:	4b3f      	ldr	r3, [pc, #252]	; (8003cc8 <xQueueGenericSend+0x1f0>)
 8003bca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003bce:	601a      	str	r2, [r3, #0]
 8003bd0:	f3bf 8f4f 	dsb	sy
 8003bd4:	f3bf 8f6f 	isb	sy
 8003bd8:	e00a      	b.n	8003bf0 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003bda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d007      	beq.n	8003bf0 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003be0:	4b39      	ldr	r3, [pc, #228]	; (8003cc8 <xQueueGenericSend+0x1f0>)
 8003be2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003be6:	601a      	str	r2, [r3, #0]
 8003be8:	f3bf 8f4f 	dsb	sy
 8003bec:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003bf0:	f001 ff1a 	bl	8005a28 <vPortExitCritical>
				return pdPASS;
 8003bf4:	2301      	movs	r3, #1
 8003bf6:	e063      	b.n	8003cc0 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d103      	bne.n	8003c06 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003bfe:	f001 ff13 	bl	8005a28 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003c02:	2300      	movs	r3, #0
 8003c04:	e05c      	b.n	8003cc0 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003c06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d106      	bne.n	8003c1a <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003c0c:	f107 0314 	add.w	r3, r7, #20
 8003c10:	4618      	mov	r0, r3
 8003c12:	f001 f871 	bl	8004cf8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003c16:	2301      	movs	r3, #1
 8003c18:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003c1a:	f001 ff05 	bl	8005a28 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003c1e:	f000 fde7 	bl	80047f0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003c22:	f001 fed3 	bl	80059cc <vPortEnterCritical>
 8003c26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c28:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003c2c:	b25b      	sxtb	r3, r3
 8003c2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c32:	d103      	bne.n	8003c3c <xQueueGenericSend+0x164>
 8003c34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c36:	2200      	movs	r2, #0
 8003c38:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003c3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c3e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003c42:	b25b      	sxtb	r3, r3
 8003c44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c48:	d103      	bne.n	8003c52 <xQueueGenericSend+0x17a>
 8003c4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003c52:	f001 fee9 	bl	8005a28 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003c56:	1d3a      	adds	r2, r7, #4
 8003c58:	f107 0314 	add.w	r3, r7, #20
 8003c5c:	4611      	mov	r1, r2
 8003c5e:	4618      	mov	r0, r3
 8003c60:	f001 f860 	bl	8004d24 <xTaskCheckForTimeOut>
 8003c64:	4603      	mov	r3, r0
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d124      	bne.n	8003cb4 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003c6a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003c6c:	f000 fb20 	bl	80042b0 <prvIsQueueFull>
 8003c70:	4603      	mov	r3, r0
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d018      	beq.n	8003ca8 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003c76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c78:	3310      	adds	r3, #16
 8003c7a:	687a      	ldr	r2, [r7, #4]
 8003c7c:	4611      	mov	r1, r2
 8003c7e:	4618      	mov	r0, r3
 8003c80:	f000 ff8a 	bl	8004b98 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003c84:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003c86:	f000 faab 	bl	80041e0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003c8a:	f000 fdbf 	bl	800480c <xTaskResumeAll>
 8003c8e:	4603      	mov	r3, r0
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	f47f af7c 	bne.w	8003b8e <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8003c96:	4b0c      	ldr	r3, [pc, #48]	; (8003cc8 <xQueueGenericSend+0x1f0>)
 8003c98:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c9c:	601a      	str	r2, [r3, #0]
 8003c9e:	f3bf 8f4f 	dsb	sy
 8003ca2:	f3bf 8f6f 	isb	sy
 8003ca6:	e772      	b.n	8003b8e <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003ca8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003caa:	f000 fa99 	bl	80041e0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003cae:	f000 fdad 	bl	800480c <xTaskResumeAll>
 8003cb2:	e76c      	b.n	8003b8e <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003cb4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003cb6:	f000 fa93 	bl	80041e0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003cba:	f000 fda7 	bl	800480c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003cbe:	2300      	movs	r3, #0
		}
	}
}
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	3738      	adds	r7, #56	; 0x38
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	bd80      	pop	{r7, pc}
 8003cc8:	e000ed04 	.word	0xe000ed04

08003ccc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	b08e      	sub	sp, #56	; 0x38
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	60f8      	str	r0, [r7, #12]
 8003cd4:	60b9      	str	r1, [r7, #8]
 8003cd6:	607a      	str	r2, [r7, #4]
 8003cd8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003cde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d109      	bne.n	8003cf8 <xQueueGenericSendFromISR+0x2c>
 8003ce4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ce8:	f383 8811 	msr	BASEPRI, r3
 8003cec:	f3bf 8f6f 	isb	sy
 8003cf0:	f3bf 8f4f 	dsb	sy
 8003cf4:	627b      	str	r3, [r7, #36]	; 0x24
 8003cf6:	e7fe      	b.n	8003cf6 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003cf8:	68bb      	ldr	r3, [r7, #8]
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d103      	bne.n	8003d06 <xQueueGenericSendFromISR+0x3a>
 8003cfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d101      	bne.n	8003d0a <xQueueGenericSendFromISR+0x3e>
 8003d06:	2301      	movs	r3, #1
 8003d08:	e000      	b.n	8003d0c <xQueueGenericSendFromISR+0x40>
 8003d0a:	2300      	movs	r3, #0
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d109      	bne.n	8003d24 <xQueueGenericSendFromISR+0x58>
 8003d10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d14:	f383 8811 	msr	BASEPRI, r3
 8003d18:	f3bf 8f6f 	isb	sy
 8003d1c:	f3bf 8f4f 	dsb	sy
 8003d20:	623b      	str	r3, [r7, #32]
 8003d22:	e7fe      	b.n	8003d22 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003d24:	683b      	ldr	r3, [r7, #0]
 8003d26:	2b02      	cmp	r3, #2
 8003d28:	d103      	bne.n	8003d32 <xQueueGenericSendFromISR+0x66>
 8003d2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d2e:	2b01      	cmp	r3, #1
 8003d30:	d101      	bne.n	8003d36 <xQueueGenericSendFromISR+0x6a>
 8003d32:	2301      	movs	r3, #1
 8003d34:	e000      	b.n	8003d38 <xQueueGenericSendFromISR+0x6c>
 8003d36:	2300      	movs	r3, #0
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d109      	bne.n	8003d50 <xQueueGenericSendFromISR+0x84>
 8003d3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d40:	f383 8811 	msr	BASEPRI, r3
 8003d44:	f3bf 8f6f 	isb	sy
 8003d48:	f3bf 8f4f 	dsb	sy
 8003d4c:	61fb      	str	r3, [r7, #28]
 8003d4e:	e7fe      	b.n	8003d4e <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003d50:	f001 ff18 	bl	8005b84 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003d54:	f3ef 8211 	mrs	r2, BASEPRI
 8003d58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d5c:	f383 8811 	msr	BASEPRI, r3
 8003d60:	f3bf 8f6f 	isb	sy
 8003d64:	f3bf 8f4f 	dsb	sy
 8003d68:	61ba      	str	r2, [r7, #24]
 8003d6a:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003d6c:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003d6e:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003d70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d72:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003d74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d78:	429a      	cmp	r2, r3
 8003d7a:	d302      	bcc.n	8003d82 <xQueueGenericSendFromISR+0xb6>
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	2b02      	cmp	r3, #2
 8003d80:	d12c      	bne.n	8003ddc <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003d82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d84:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003d88:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003d8c:	683a      	ldr	r2, [r7, #0]
 8003d8e:	68b9      	ldr	r1, [r7, #8]
 8003d90:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003d92:	f000 f995 	bl	80040c0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003d96:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8003d9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d9e:	d112      	bne.n	8003dc6 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003da0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003da2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d016      	beq.n	8003dd6 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003da8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003daa:	3324      	adds	r3, #36	; 0x24
 8003dac:	4618      	mov	r0, r3
 8003dae:	f000 ff41 	bl	8004c34 <xTaskRemoveFromEventList>
 8003db2:	4603      	mov	r3, r0
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d00e      	beq.n	8003dd6 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d00b      	beq.n	8003dd6 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	2201      	movs	r2, #1
 8003dc2:	601a      	str	r2, [r3, #0]
 8003dc4:	e007      	b.n	8003dd6 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003dc6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003dca:	3301      	adds	r3, #1
 8003dcc:	b2db      	uxtb	r3, r3
 8003dce:	b25a      	sxtb	r2, r3
 8003dd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dd2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003dd6:	2301      	movs	r3, #1
 8003dd8:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8003dda:	e001      	b.n	8003de0 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003ddc:	2300      	movs	r3, #0
 8003dde:	637b      	str	r3, [r7, #52]	; 0x34
 8003de0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003de2:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003de4:	693b      	ldr	r3, [r7, #16]
 8003de6:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003dea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8003dec:	4618      	mov	r0, r3
 8003dee:	3738      	adds	r7, #56	; 0x38
 8003df0:	46bd      	mov	sp, r7
 8003df2:	bd80      	pop	{r7, pc}

08003df4 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b08e      	sub	sp, #56	; 0x38
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
 8003dfc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8003e02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d109      	bne.n	8003e1c <xQueueGiveFromISR+0x28>
	__asm volatile
 8003e08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e0c:	f383 8811 	msr	BASEPRI, r3
 8003e10:	f3bf 8f6f 	isb	sy
 8003e14:	f3bf 8f4f 	dsb	sy
 8003e18:	623b      	str	r3, [r7, #32]
 8003e1a:	e7fe      	b.n	8003e1a <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8003e1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d009      	beq.n	8003e38 <xQueueGiveFromISR+0x44>
 8003e24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e28:	f383 8811 	msr	BASEPRI, r3
 8003e2c:	f3bf 8f6f 	isb	sy
 8003e30:	f3bf 8f4f 	dsb	sy
 8003e34:	61fb      	str	r3, [r7, #28]
 8003e36:	e7fe      	b.n	8003e36 <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 8003e38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d103      	bne.n	8003e48 <xQueueGiveFromISR+0x54>
 8003e40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e42:	685b      	ldr	r3, [r3, #4]
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d101      	bne.n	8003e4c <xQueueGiveFromISR+0x58>
 8003e48:	2301      	movs	r3, #1
 8003e4a:	e000      	b.n	8003e4e <xQueueGiveFromISR+0x5a>
 8003e4c:	2300      	movs	r3, #0
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d109      	bne.n	8003e66 <xQueueGiveFromISR+0x72>
 8003e52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e56:	f383 8811 	msr	BASEPRI, r3
 8003e5a:	f3bf 8f6f 	isb	sy
 8003e5e:	f3bf 8f4f 	dsb	sy
 8003e62:	61bb      	str	r3, [r7, #24]
 8003e64:	e7fe      	b.n	8003e64 <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003e66:	f001 fe8d 	bl	8005b84 <vPortValidateInterruptPriority>
	__asm volatile
 8003e6a:	f3ef 8211 	mrs	r2, BASEPRI
 8003e6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e72:	f383 8811 	msr	BASEPRI, r3
 8003e76:	f3bf 8f6f 	isb	sy
 8003e7a:	f3bf 8f4f 	dsb	sy
 8003e7e:	617a      	str	r2, [r7, #20]
 8003e80:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8003e82:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003e84:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003e86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e8a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8003e8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e90:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003e92:	429a      	cmp	r2, r3
 8003e94:	d22b      	bcs.n	8003eee <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003e96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e98:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003e9c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003ea0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ea2:	1c5a      	adds	r2, r3, #1
 8003ea4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ea6:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003ea8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8003eac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003eb0:	d112      	bne.n	8003ed8 <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003eb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003eb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d016      	beq.n	8003ee8 <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003eba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ebc:	3324      	adds	r3, #36	; 0x24
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	f000 feb8 	bl	8004c34 <xTaskRemoveFromEventList>
 8003ec4:	4603      	mov	r3, r0
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d00e      	beq.n	8003ee8 <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003eca:	683b      	ldr	r3, [r7, #0]
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d00b      	beq.n	8003ee8 <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003ed0:	683b      	ldr	r3, [r7, #0]
 8003ed2:	2201      	movs	r2, #1
 8003ed4:	601a      	str	r2, [r3, #0]
 8003ed6:	e007      	b.n	8003ee8 <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003ed8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003edc:	3301      	adds	r3, #1
 8003ede:	b2db      	uxtb	r3, r3
 8003ee0:	b25a      	sxtb	r2, r3
 8003ee2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ee4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003ee8:	2301      	movs	r3, #1
 8003eea:	637b      	str	r3, [r7, #52]	; 0x34
 8003eec:	e001      	b.n	8003ef2 <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003eee:	2300      	movs	r3, #0
 8003ef0:	637b      	str	r3, [r7, #52]	; 0x34
 8003ef2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ef4:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003efc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8003efe:	4618      	mov	r0, r3
 8003f00:	3738      	adds	r7, #56	; 0x38
 8003f02:	46bd      	mov	sp, r7
 8003f04:	bd80      	pop	{r7, pc}
	...

08003f08 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	b08c      	sub	sp, #48	; 0x30
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	60f8      	str	r0, [r7, #12]
 8003f10:	60b9      	str	r1, [r7, #8]
 8003f12:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003f14:	2300      	movs	r3, #0
 8003f16:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003f1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d109      	bne.n	8003f36 <xQueueReceive+0x2e>
	__asm volatile
 8003f22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f26:	f383 8811 	msr	BASEPRI, r3
 8003f2a:	f3bf 8f6f 	isb	sy
 8003f2e:	f3bf 8f4f 	dsb	sy
 8003f32:	623b      	str	r3, [r7, #32]
 8003f34:	e7fe      	b.n	8003f34 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003f36:	68bb      	ldr	r3, [r7, #8]
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d103      	bne.n	8003f44 <xQueueReceive+0x3c>
 8003f3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d101      	bne.n	8003f48 <xQueueReceive+0x40>
 8003f44:	2301      	movs	r3, #1
 8003f46:	e000      	b.n	8003f4a <xQueueReceive+0x42>
 8003f48:	2300      	movs	r3, #0
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d109      	bne.n	8003f62 <xQueueReceive+0x5a>
 8003f4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f52:	f383 8811 	msr	BASEPRI, r3
 8003f56:	f3bf 8f6f 	isb	sy
 8003f5a:	f3bf 8f4f 	dsb	sy
 8003f5e:	61fb      	str	r3, [r7, #28]
 8003f60:	e7fe      	b.n	8003f60 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003f62:	f001 f823 	bl	8004fac <xTaskGetSchedulerState>
 8003f66:	4603      	mov	r3, r0
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d102      	bne.n	8003f72 <xQueueReceive+0x6a>
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d101      	bne.n	8003f76 <xQueueReceive+0x6e>
 8003f72:	2301      	movs	r3, #1
 8003f74:	e000      	b.n	8003f78 <xQueueReceive+0x70>
 8003f76:	2300      	movs	r3, #0
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d109      	bne.n	8003f90 <xQueueReceive+0x88>
 8003f7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f80:	f383 8811 	msr	BASEPRI, r3
 8003f84:	f3bf 8f6f 	isb	sy
 8003f88:	f3bf 8f4f 	dsb	sy
 8003f8c:	61bb      	str	r3, [r7, #24]
 8003f8e:	e7fe      	b.n	8003f8e <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8003f90:	f001 fd1c 	bl	80059cc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003f94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f98:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d01f      	beq.n	8003fe0 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003fa0:	68b9      	ldr	r1, [r7, #8]
 8003fa2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003fa4:	f000 f8f6 	bl	8004194 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003faa:	1e5a      	subs	r2, r3, #1
 8003fac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fae:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003fb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fb2:	691b      	ldr	r3, [r3, #16]
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d00f      	beq.n	8003fd8 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003fb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fba:	3310      	adds	r3, #16
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	f000 fe39 	bl	8004c34 <xTaskRemoveFromEventList>
 8003fc2:	4603      	mov	r3, r0
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d007      	beq.n	8003fd8 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003fc8:	4b3c      	ldr	r3, [pc, #240]	; (80040bc <xQueueReceive+0x1b4>)
 8003fca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003fce:	601a      	str	r2, [r3, #0]
 8003fd0:	f3bf 8f4f 	dsb	sy
 8003fd4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003fd8:	f001 fd26 	bl	8005a28 <vPortExitCritical>
				return pdPASS;
 8003fdc:	2301      	movs	r3, #1
 8003fde:	e069      	b.n	80040b4 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d103      	bne.n	8003fee <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003fe6:	f001 fd1f 	bl	8005a28 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003fea:	2300      	movs	r3, #0
 8003fec:	e062      	b.n	80040b4 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003fee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d106      	bne.n	8004002 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003ff4:	f107 0310 	add.w	r3, r7, #16
 8003ff8:	4618      	mov	r0, r3
 8003ffa:	f000 fe7d 	bl	8004cf8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003ffe:	2301      	movs	r3, #1
 8004000:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004002:	f001 fd11 	bl	8005a28 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004006:	f000 fbf3 	bl	80047f0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800400a:	f001 fcdf 	bl	80059cc <vPortEnterCritical>
 800400e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004010:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004014:	b25b      	sxtb	r3, r3
 8004016:	f1b3 3fff 	cmp.w	r3, #4294967295
 800401a:	d103      	bne.n	8004024 <xQueueReceive+0x11c>
 800401c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800401e:	2200      	movs	r2, #0
 8004020:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004024:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004026:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800402a:	b25b      	sxtb	r3, r3
 800402c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004030:	d103      	bne.n	800403a <xQueueReceive+0x132>
 8004032:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004034:	2200      	movs	r2, #0
 8004036:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800403a:	f001 fcf5 	bl	8005a28 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800403e:	1d3a      	adds	r2, r7, #4
 8004040:	f107 0310 	add.w	r3, r7, #16
 8004044:	4611      	mov	r1, r2
 8004046:	4618      	mov	r0, r3
 8004048:	f000 fe6c 	bl	8004d24 <xTaskCheckForTimeOut>
 800404c:	4603      	mov	r3, r0
 800404e:	2b00      	cmp	r3, #0
 8004050:	d123      	bne.n	800409a <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004052:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004054:	f000 f916 	bl	8004284 <prvIsQueueEmpty>
 8004058:	4603      	mov	r3, r0
 800405a:	2b00      	cmp	r3, #0
 800405c:	d017      	beq.n	800408e <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800405e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004060:	3324      	adds	r3, #36	; 0x24
 8004062:	687a      	ldr	r2, [r7, #4]
 8004064:	4611      	mov	r1, r2
 8004066:	4618      	mov	r0, r3
 8004068:	f000 fd96 	bl	8004b98 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800406c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800406e:	f000 f8b7 	bl	80041e0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004072:	f000 fbcb 	bl	800480c <xTaskResumeAll>
 8004076:	4603      	mov	r3, r0
 8004078:	2b00      	cmp	r3, #0
 800407a:	d189      	bne.n	8003f90 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 800407c:	4b0f      	ldr	r3, [pc, #60]	; (80040bc <xQueueReceive+0x1b4>)
 800407e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004082:	601a      	str	r2, [r3, #0]
 8004084:	f3bf 8f4f 	dsb	sy
 8004088:	f3bf 8f6f 	isb	sy
 800408c:	e780      	b.n	8003f90 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800408e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004090:	f000 f8a6 	bl	80041e0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004094:	f000 fbba 	bl	800480c <xTaskResumeAll>
 8004098:	e77a      	b.n	8003f90 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800409a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800409c:	f000 f8a0 	bl	80041e0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80040a0:	f000 fbb4 	bl	800480c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80040a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80040a6:	f000 f8ed 	bl	8004284 <prvIsQueueEmpty>
 80040aa:	4603      	mov	r3, r0
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	f43f af6f 	beq.w	8003f90 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80040b2:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80040b4:	4618      	mov	r0, r3
 80040b6:	3730      	adds	r7, #48	; 0x30
 80040b8:	46bd      	mov	sp, r7
 80040ba:	bd80      	pop	{r7, pc}
 80040bc:	e000ed04 	.word	0xe000ed04

080040c0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80040c0:	b580      	push	{r7, lr}
 80040c2:	b086      	sub	sp, #24
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	60f8      	str	r0, [r7, #12]
 80040c8:	60b9      	str	r1, [r7, #8]
 80040ca:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80040cc:	2300      	movs	r3, #0
 80040ce:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040d4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d10d      	bne.n	80040fa <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d14d      	bne.n	8004182 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	685b      	ldr	r3, [r3, #4]
 80040ea:	4618      	mov	r0, r3
 80040ec:	f000 ff7c 	bl	8004fe8 <xTaskPriorityDisinherit>
 80040f0:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	2200      	movs	r2, #0
 80040f6:	605a      	str	r2, [r3, #4]
 80040f8:	e043      	b.n	8004182 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d119      	bne.n	8004134 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	6898      	ldr	r0, [r3, #8]
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004108:	461a      	mov	r2, r3
 800410a:	68b9      	ldr	r1, [r7, #8]
 800410c:	f002 fe66 	bl	8006ddc <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	689a      	ldr	r2, [r3, #8]
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004118:	441a      	add	r2, r3
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	689a      	ldr	r2, [r3, #8]
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	685b      	ldr	r3, [r3, #4]
 8004126:	429a      	cmp	r2, r3
 8004128:	d32b      	bcc.n	8004182 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	681a      	ldr	r2, [r3, #0]
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	609a      	str	r2, [r3, #8]
 8004132:	e026      	b.n	8004182 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	68d8      	ldr	r0, [r3, #12]
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800413c:	461a      	mov	r2, r3
 800413e:	68b9      	ldr	r1, [r7, #8]
 8004140:	f002 fe4c 	bl	8006ddc <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	68da      	ldr	r2, [r3, #12]
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800414c:	425b      	negs	r3, r3
 800414e:	441a      	add	r2, r3
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	68da      	ldr	r2, [r3, #12]
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	429a      	cmp	r2, r3
 800415e:	d207      	bcs.n	8004170 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	685a      	ldr	r2, [r3, #4]
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004168:	425b      	negs	r3, r3
 800416a:	441a      	add	r2, r3
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2b02      	cmp	r3, #2
 8004174:	d105      	bne.n	8004182 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004176:	693b      	ldr	r3, [r7, #16]
 8004178:	2b00      	cmp	r3, #0
 800417a:	d002      	beq.n	8004182 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800417c:	693b      	ldr	r3, [r7, #16]
 800417e:	3b01      	subs	r3, #1
 8004180:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004182:	693b      	ldr	r3, [r7, #16]
 8004184:	1c5a      	adds	r2, r3, #1
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800418a:	697b      	ldr	r3, [r7, #20]
}
 800418c:	4618      	mov	r0, r3
 800418e:	3718      	adds	r7, #24
 8004190:	46bd      	mov	sp, r7
 8004192:	bd80      	pop	{r7, pc}

08004194 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004194:	b580      	push	{r7, lr}
 8004196:	b082      	sub	sp, #8
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
 800419c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d018      	beq.n	80041d8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	68da      	ldr	r2, [r3, #12]
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ae:	441a      	add	r2, r3
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	68da      	ldr	r2, [r3, #12]
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	685b      	ldr	r3, [r3, #4]
 80041bc:	429a      	cmp	r2, r3
 80041be:	d303      	bcc.n	80041c8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681a      	ldr	r2, [r3, #0]
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	68d9      	ldr	r1, [r3, #12]
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041d0:	461a      	mov	r2, r3
 80041d2:	6838      	ldr	r0, [r7, #0]
 80041d4:	f002 fe02 	bl	8006ddc <memcpy>
	}
}
 80041d8:	bf00      	nop
 80041da:	3708      	adds	r7, #8
 80041dc:	46bd      	mov	sp, r7
 80041de:	bd80      	pop	{r7, pc}

080041e0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80041e0:	b580      	push	{r7, lr}
 80041e2:	b084      	sub	sp, #16
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80041e8:	f001 fbf0 	bl	80059cc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80041f2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80041f4:	e011      	b.n	800421a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d012      	beq.n	8004224 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	3324      	adds	r3, #36	; 0x24
 8004202:	4618      	mov	r0, r3
 8004204:	f000 fd16 	bl	8004c34 <xTaskRemoveFromEventList>
 8004208:	4603      	mov	r3, r0
 800420a:	2b00      	cmp	r3, #0
 800420c:	d001      	beq.n	8004212 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800420e:	f000 fde9 	bl	8004de4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004212:	7bfb      	ldrb	r3, [r7, #15]
 8004214:	3b01      	subs	r3, #1
 8004216:	b2db      	uxtb	r3, r3
 8004218:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800421a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800421e:	2b00      	cmp	r3, #0
 8004220:	dce9      	bgt.n	80041f6 <prvUnlockQueue+0x16>
 8004222:	e000      	b.n	8004226 <prvUnlockQueue+0x46>
					break;
 8004224:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	22ff      	movs	r2, #255	; 0xff
 800422a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800422e:	f001 fbfb 	bl	8005a28 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004232:	f001 fbcb 	bl	80059cc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800423c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800423e:	e011      	b.n	8004264 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	691b      	ldr	r3, [r3, #16]
 8004244:	2b00      	cmp	r3, #0
 8004246:	d012      	beq.n	800426e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	3310      	adds	r3, #16
 800424c:	4618      	mov	r0, r3
 800424e:	f000 fcf1 	bl	8004c34 <xTaskRemoveFromEventList>
 8004252:	4603      	mov	r3, r0
 8004254:	2b00      	cmp	r3, #0
 8004256:	d001      	beq.n	800425c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004258:	f000 fdc4 	bl	8004de4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800425c:	7bbb      	ldrb	r3, [r7, #14]
 800425e:	3b01      	subs	r3, #1
 8004260:	b2db      	uxtb	r3, r3
 8004262:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004264:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004268:	2b00      	cmp	r3, #0
 800426a:	dce9      	bgt.n	8004240 <prvUnlockQueue+0x60>
 800426c:	e000      	b.n	8004270 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800426e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	22ff      	movs	r2, #255	; 0xff
 8004274:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004278:	f001 fbd6 	bl	8005a28 <vPortExitCritical>
}
 800427c:	bf00      	nop
 800427e:	3710      	adds	r7, #16
 8004280:	46bd      	mov	sp, r7
 8004282:	bd80      	pop	{r7, pc}

08004284 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004284:	b580      	push	{r7, lr}
 8004286:	b084      	sub	sp, #16
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800428c:	f001 fb9e 	bl	80059cc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004294:	2b00      	cmp	r3, #0
 8004296:	d102      	bne.n	800429e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004298:	2301      	movs	r3, #1
 800429a:	60fb      	str	r3, [r7, #12]
 800429c:	e001      	b.n	80042a2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800429e:	2300      	movs	r3, #0
 80042a0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80042a2:	f001 fbc1 	bl	8005a28 <vPortExitCritical>

	return xReturn;
 80042a6:	68fb      	ldr	r3, [r7, #12]
}
 80042a8:	4618      	mov	r0, r3
 80042aa:	3710      	adds	r7, #16
 80042ac:	46bd      	mov	sp, r7
 80042ae:	bd80      	pop	{r7, pc}

080042b0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80042b0:	b580      	push	{r7, lr}
 80042b2:	b084      	sub	sp, #16
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80042b8:	f001 fb88 	bl	80059cc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042c4:	429a      	cmp	r2, r3
 80042c6:	d102      	bne.n	80042ce <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80042c8:	2301      	movs	r3, #1
 80042ca:	60fb      	str	r3, [r7, #12]
 80042cc:	e001      	b.n	80042d2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80042ce:	2300      	movs	r3, #0
 80042d0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80042d2:	f001 fba9 	bl	8005a28 <vPortExitCritical>

	return xReturn;
 80042d6:	68fb      	ldr	r3, [r7, #12]
}
 80042d8:	4618      	mov	r0, r3
 80042da:	3710      	adds	r7, #16
 80042dc:	46bd      	mov	sp, r7
 80042de:	bd80      	pop	{r7, pc}

080042e0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80042e0:	b480      	push	{r7}
 80042e2:	b085      	sub	sp, #20
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6078      	str	r0, [r7, #4]
 80042e8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80042ea:	2300      	movs	r3, #0
 80042ec:	60fb      	str	r3, [r7, #12]
 80042ee:	e014      	b.n	800431a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80042f0:	4a0e      	ldr	r2, [pc, #56]	; (800432c <vQueueAddToRegistry+0x4c>)
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d10b      	bne.n	8004314 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80042fc:	490b      	ldr	r1, [pc, #44]	; (800432c <vQueueAddToRegistry+0x4c>)
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	683a      	ldr	r2, [r7, #0]
 8004302:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004306:	4a09      	ldr	r2, [pc, #36]	; (800432c <vQueueAddToRegistry+0x4c>)
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	00db      	lsls	r3, r3, #3
 800430c:	4413      	add	r3, r2
 800430e:	687a      	ldr	r2, [r7, #4]
 8004310:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004312:	e005      	b.n	8004320 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	3301      	adds	r3, #1
 8004318:	60fb      	str	r3, [r7, #12]
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	2b07      	cmp	r3, #7
 800431e:	d9e7      	bls.n	80042f0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004320:	bf00      	nop
 8004322:	3714      	adds	r7, #20
 8004324:	46bd      	mov	sp, r7
 8004326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432a:	4770      	bx	lr
 800432c:	20001968 	.word	0x20001968

08004330 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004330:	b580      	push	{r7, lr}
 8004332:	b086      	sub	sp, #24
 8004334:	af00      	add	r7, sp, #0
 8004336:	60f8      	str	r0, [r7, #12]
 8004338:	60b9      	str	r1, [r7, #8]
 800433a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004340:	f001 fb44 	bl	80059cc <vPortEnterCritical>
 8004344:	697b      	ldr	r3, [r7, #20]
 8004346:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800434a:	b25b      	sxtb	r3, r3
 800434c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004350:	d103      	bne.n	800435a <vQueueWaitForMessageRestricted+0x2a>
 8004352:	697b      	ldr	r3, [r7, #20]
 8004354:	2200      	movs	r2, #0
 8004356:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800435a:	697b      	ldr	r3, [r7, #20]
 800435c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004360:	b25b      	sxtb	r3, r3
 8004362:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004366:	d103      	bne.n	8004370 <vQueueWaitForMessageRestricted+0x40>
 8004368:	697b      	ldr	r3, [r7, #20]
 800436a:	2200      	movs	r2, #0
 800436c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004370:	f001 fb5a 	bl	8005a28 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004374:	697b      	ldr	r3, [r7, #20]
 8004376:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004378:	2b00      	cmp	r3, #0
 800437a:	d106      	bne.n	800438a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800437c:	697b      	ldr	r3, [r7, #20]
 800437e:	3324      	adds	r3, #36	; 0x24
 8004380:	687a      	ldr	r2, [r7, #4]
 8004382:	68b9      	ldr	r1, [r7, #8]
 8004384:	4618      	mov	r0, r3
 8004386:	f000 fc2b 	bl	8004be0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800438a:	6978      	ldr	r0, [r7, #20]
 800438c:	f7ff ff28 	bl	80041e0 <prvUnlockQueue>
	}
 8004390:	bf00      	nop
 8004392:	3718      	adds	r7, #24
 8004394:	46bd      	mov	sp, r7
 8004396:	bd80      	pop	{r7, pc}

08004398 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004398:	b580      	push	{r7, lr}
 800439a:	b08e      	sub	sp, #56	; 0x38
 800439c:	af04      	add	r7, sp, #16
 800439e:	60f8      	str	r0, [r7, #12]
 80043a0:	60b9      	str	r1, [r7, #8]
 80043a2:	607a      	str	r2, [r7, #4]
 80043a4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80043a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d109      	bne.n	80043c0 <xTaskCreateStatic+0x28>
 80043ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043b0:	f383 8811 	msr	BASEPRI, r3
 80043b4:	f3bf 8f6f 	isb	sy
 80043b8:	f3bf 8f4f 	dsb	sy
 80043bc:	623b      	str	r3, [r7, #32]
 80043be:	e7fe      	b.n	80043be <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 80043c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d109      	bne.n	80043da <xTaskCreateStatic+0x42>
 80043c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043ca:	f383 8811 	msr	BASEPRI, r3
 80043ce:	f3bf 8f6f 	isb	sy
 80043d2:	f3bf 8f4f 	dsb	sy
 80043d6:	61fb      	str	r3, [r7, #28]
 80043d8:	e7fe      	b.n	80043d8 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80043da:	235c      	movs	r3, #92	; 0x5c
 80043dc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80043de:	693b      	ldr	r3, [r7, #16]
 80043e0:	2b5c      	cmp	r3, #92	; 0x5c
 80043e2:	d009      	beq.n	80043f8 <xTaskCreateStatic+0x60>
 80043e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043e8:	f383 8811 	msr	BASEPRI, r3
 80043ec:	f3bf 8f6f 	isb	sy
 80043f0:	f3bf 8f4f 	dsb	sy
 80043f4:	61bb      	str	r3, [r7, #24]
 80043f6:	e7fe      	b.n	80043f6 <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80043f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d01e      	beq.n	800443c <xTaskCreateStatic+0xa4>
 80043fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004400:	2b00      	cmp	r3, #0
 8004402:	d01b      	beq.n	800443c <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004404:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004406:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800440a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800440c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800440e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004410:	2202      	movs	r2, #2
 8004412:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004416:	2300      	movs	r3, #0
 8004418:	9303      	str	r3, [sp, #12]
 800441a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800441c:	9302      	str	r3, [sp, #8]
 800441e:	f107 0314 	add.w	r3, r7, #20
 8004422:	9301      	str	r3, [sp, #4]
 8004424:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004426:	9300      	str	r3, [sp, #0]
 8004428:	683b      	ldr	r3, [r7, #0]
 800442a:	687a      	ldr	r2, [r7, #4]
 800442c:	68b9      	ldr	r1, [r7, #8]
 800442e:	68f8      	ldr	r0, [r7, #12]
 8004430:	f000 f850 	bl	80044d4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004434:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004436:	f000 f8d3 	bl	80045e0 <prvAddNewTaskToReadyList>
 800443a:	e001      	b.n	8004440 <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 800443c:	2300      	movs	r3, #0
 800443e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004440:	697b      	ldr	r3, [r7, #20]
	}
 8004442:	4618      	mov	r0, r3
 8004444:	3728      	adds	r7, #40	; 0x28
 8004446:	46bd      	mov	sp, r7
 8004448:	bd80      	pop	{r7, pc}

0800444a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800444a:	b580      	push	{r7, lr}
 800444c:	b08c      	sub	sp, #48	; 0x30
 800444e:	af04      	add	r7, sp, #16
 8004450:	60f8      	str	r0, [r7, #12]
 8004452:	60b9      	str	r1, [r7, #8]
 8004454:	603b      	str	r3, [r7, #0]
 8004456:	4613      	mov	r3, r2
 8004458:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800445a:	88fb      	ldrh	r3, [r7, #6]
 800445c:	009b      	lsls	r3, r3, #2
 800445e:	4618      	mov	r0, r3
 8004460:	f001 fbce 	bl	8005c00 <pvPortMalloc>
 8004464:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004466:	697b      	ldr	r3, [r7, #20]
 8004468:	2b00      	cmp	r3, #0
 800446a:	d00e      	beq.n	800448a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800446c:	205c      	movs	r0, #92	; 0x5c
 800446e:	f001 fbc7 	bl	8005c00 <pvPortMalloc>
 8004472:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004474:	69fb      	ldr	r3, [r7, #28]
 8004476:	2b00      	cmp	r3, #0
 8004478:	d003      	beq.n	8004482 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800447a:	69fb      	ldr	r3, [r7, #28]
 800447c:	697a      	ldr	r2, [r7, #20]
 800447e:	631a      	str	r2, [r3, #48]	; 0x30
 8004480:	e005      	b.n	800448e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004482:	6978      	ldr	r0, [r7, #20]
 8004484:	f001 fc7e 	bl	8005d84 <vPortFree>
 8004488:	e001      	b.n	800448e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800448a:	2300      	movs	r3, #0
 800448c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800448e:	69fb      	ldr	r3, [r7, #28]
 8004490:	2b00      	cmp	r3, #0
 8004492:	d017      	beq.n	80044c4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004494:	69fb      	ldr	r3, [r7, #28]
 8004496:	2200      	movs	r2, #0
 8004498:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800449c:	88fa      	ldrh	r2, [r7, #6]
 800449e:	2300      	movs	r3, #0
 80044a0:	9303      	str	r3, [sp, #12]
 80044a2:	69fb      	ldr	r3, [r7, #28]
 80044a4:	9302      	str	r3, [sp, #8]
 80044a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044a8:	9301      	str	r3, [sp, #4]
 80044aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044ac:	9300      	str	r3, [sp, #0]
 80044ae:	683b      	ldr	r3, [r7, #0]
 80044b0:	68b9      	ldr	r1, [r7, #8]
 80044b2:	68f8      	ldr	r0, [r7, #12]
 80044b4:	f000 f80e 	bl	80044d4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80044b8:	69f8      	ldr	r0, [r7, #28]
 80044ba:	f000 f891 	bl	80045e0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80044be:	2301      	movs	r3, #1
 80044c0:	61bb      	str	r3, [r7, #24]
 80044c2:	e002      	b.n	80044ca <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80044c4:	f04f 33ff 	mov.w	r3, #4294967295
 80044c8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80044ca:	69bb      	ldr	r3, [r7, #24]
	}
 80044cc:	4618      	mov	r0, r3
 80044ce:	3720      	adds	r7, #32
 80044d0:	46bd      	mov	sp, r7
 80044d2:	bd80      	pop	{r7, pc}

080044d4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80044d4:	b580      	push	{r7, lr}
 80044d6:	b088      	sub	sp, #32
 80044d8:	af00      	add	r7, sp, #0
 80044da:	60f8      	str	r0, [r7, #12]
 80044dc:	60b9      	str	r1, [r7, #8]
 80044de:	607a      	str	r2, [r7, #4]
 80044e0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80044e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044e4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	009b      	lsls	r3, r3, #2
 80044ea:	461a      	mov	r2, r3
 80044ec:	21a5      	movs	r1, #165	; 0xa5
 80044ee:	f002 fc80 	bl	8006df2 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80044f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80044fc:	3b01      	subs	r3, #1
 80044fe:	009b      	lsls	r3, r3, #2
 8004500:	4413      	add	r3, r2
 8004502:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8004504:	69bb      	ldr	r3, [r7, #24]
 8004506:	f023 0307 	bic.w	r3, r3, #7
 800450a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800450c:	69bb      	ldr	r3, [r7, #24]
 800450e:	f003 0307 	and.w	r3, r3, #7
 8004512:	2b00      	cmp	r3, #0
 8004514:	d009      	beq.n	800452a <prvInitialiseNewTask+0x56>
 8004516:	f04f 0350 	mov.w	r3, #80	; 0x50
 800451a:	f383 8811 	msr	BASEPRI, r3
 800451e:	f3bf 8f6f 	isb	sy
 8004522:	f3bf 8f4f 	dsb	sy
 8004526:	617b      	str	r3, [r7, #20]
 8004528:	e7fe      	b.n	8004528 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800452a:	2300      	movs	r3, #0
 800452c:	61fb      	str	r3, [r7, #28]
 800452e:	e012      	b.n	8004556 <prvInitialiseNewTask+0x82>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004530:	68ba      	ldr	r2, [r7, #8]
 8004532:	69fb      	ldr	r3, [r7, #28]
 8004534:	4413      	add	r3, r2
 8004536:	7819      	ldrb	r1, [r3, #0]
 8004538:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800453a:	69fb      	ldr	r3, [r7, #28]
 800453c:	4413      	add	r3, r2
 800453e:	3334      	adds	r3, #52	; 0x34
 8004540:	460a      	mov	r2, r1
 8004542:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8004544:	68ba      	ldr	r2, [r7, #8]
 8004546:	69fb      	ldr	r3, [r7, #28]
 8004548:	4413      	add	r3, r2
 800454a:	781b      	ldrb	r3, [r3, #0]
 800454c:	2b00      	cmp	r3, #0
 800454e:	d006      	beq.n	800455e <prvInitialiseNewTask+0x8a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004550:	69fb      	ldr	r3, [r7, #28]
 8004552:	3301      	adds	r3, #1
 8004554:	61fb      	str	r3, [r7, #28]
 8004556:	69fb      	ldr	r3, [r7, #28]
 8004558:	2b0f      	cmp	r3, #15
 800455a:	d9e9      	bls.n	8004530 <prvInitialiseNewTask+0x5c>
 800455c:	e000      	b.n	8004560 <prvInitialiseNewTask+0x8c>
		{
			break;
 800455e:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004560:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004562:	2200      	movs	r2, #0
 8004564:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004568:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800456a:	2b37      	cmp	r3, #55	; 0x37
 800456c:	d901      	bls.n	8004572 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800456e:	2337      	movs	r3, #55	; 0x37
 8004570:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004572:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004574:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004576:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004578:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800457a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800457c:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800457e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004580:	2200      	movs	r2, #0
 8004582:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004584:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004586:	3304      	adds	r3, #4
 8004588:	4618      	mov	r0, r3
 800458a:	f7ff f913 	bl	80037b4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800458e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004590:	3318      	adds	r3, #24
 8004592:	4618      	mov	r0, r3
 8004594:	f7ff f90e 	bl	80037b4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004598:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800459a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800459c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800459e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045a0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80045a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045a6:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80045a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80045ac:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80045ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045b0:	2200      	movs	r2, #0
 80045b2:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80045b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045b6:	2200      	movs	r2, #0
 80045b8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80045bc:	683a      	ldr	r2, [r7, #0]
 80045be:	68f9      	ldr	r1, [r7, #12]
 80045c0:	69b8      	ldr	r0, [r7, #24]
 80045c2:	f001 f8db 	bl	800577c <pxPortInitialiseStack>
 80045c6:	4602      	mov	r2, r0
 80045c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045ca:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80045cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d002      	beq.n	80045d8 <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80045d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80045d6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80045d8:	bf00      	nop
 80045da:	3720      	adds	r7, #32
 80045dc:	46bd      	mov	sp, r7
 80045de:	bd80      	pop	{r7, pc}

080045e0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80045e0:	b580      	push	{r7, lr}
 80045e2:	b082      	sub	sp, #8
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80045e8:	f001 f9f0 	bl	80059cc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80045ec:	4b2d      	ldr	r3, [pc, #180]	; (80046a4 <prvAddNewTaskToReadyList+0xc4>)
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	3301      	adds	r3, #1
 80045f2:	4a2c      	ldr	r2, [pc, #176]	; (80046a4 <prvAddNewTaskToReadyList+0xc4>)
 80045f4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80045f6:	4b2c      	ldr	r3, [pc, #176]	; (80046a8 <prvAddNewTaskToReadyList+0xc8>)
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d109      	bne.n	8004612 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80045fe:	4a2a      	ldr	r2, [pc, #168]	; (80046a8 <prvAddNewTaskToReadyList+0xc8>)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004604:	4b27      	ldr	r3, [pc, #156]	; (80046a4 <prvAddNewTaskToReadyList+0xc4>)
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	2b01      	cmp	r3, #1
 800460a:	d110      	bne.n	800462e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800460c:	f000 fc0e 	bl	8004e2c <prvInitialiseTaskLists>
 8004610:	e00d      	b.n	800462e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004612:	4b26      	ldr	r3, [pc, #152]	; (80046ac <prvAddNewTaskToReadyList+0xcc>)
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	2b00      	cmp	r3, #0
 8004618:	d109      	bne.n	800462e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800461a:	4b23      	ldr	r3, [pc, #140]	; (80046a8 <prvAddNewTaskToReadyList+0xc8>)
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004624:	429a      	cmp	r2, r3
 8004626:	d802      	bhi.n	800462e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004628:	4a1f      	ldr	r2, [pc, #124]	; (80046a8 <prvAddNewTaskToReadyList+0xc8>)
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800462e:	4b20      	ldr	r3, [pc, #128]	; (80046b0 <prvAddNewTaskToReadyList+0xd0>)
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	3301      	adds	r3, #1
 8004634:	4a1e      	ldr	r2, [pc, #120]	; (80046b0 <prvAddNewTaskToReadyList+0xd0>)
 8004636:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004638:	4b1d      	ldr	r3, [pc, #116]	; (80046b0 <prvAddNewTaskToReadyList+0xd0>)
 800463a:	681a      	ldr	r2, [r3, #0]
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004644:	4b1b      	ldr	r3, [pc, #108]	; (80046b4 <prvAddNewTaskToReadyList+0xd4>)
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	429a      	cmp	r2, r3
 800464a:	d903      	bls.n	8004654 <prvAddNewTaskToReadyList+0x74>
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004650:	4a18      	ldr	r2, [pc, #96]	; (80046b4 <prvAddNewTaskToReadyList+0xd4>)
 8004652:	6013      	str	r3, [r2, #0]
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004658:	4613      	mov	r3, r2
 800465a:	009b      	lsls	r3, r3, #2
 800465c:	4413      	add	r3, r2
 800465e:	009b      	lsls	r3, r3, #2
 8004660:	4a15      	ldr	r2, [pc, #84]	; (80046b8 <prvAddNewTaskToReadyList+0xd8>)
 8004662:	441a      	add	r2, r3
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	3304      	adds	r3, #4
 8004668:	4619      	mov	r1, r3
 800466a:	4610      	mov	r0, r2
 800466c:	f7ff f8af 	bl	80037ce <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004670:	f001 f9da 	bl	8005a28 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004674:	4b0d      	ldr	r3, [pc, #52]	; (80046ac <prvAddNewTaskToReadyList+0xcc>)
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	2b00      	cmp	r3, #0
 800467a:	d00e      	beq.n	800469a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800467c:	4b0a      	ldr	r3, [pc, #40]	; (80046a8 <prvAddNewTaskToReadyList+0xc8>)
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004686:	429a      	cmp	r2, r3
 8004688:	d207      	bcs.n	800469a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800468a:	4b0c      	ldr	r3, [pc, #48]	; (80046bc <prvAddNewTaskToReadyList+0xdc>)
 800468c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004690:	601a      	str	r2, [r3, #0]
 8004692:	f3bf 8f4f 	dsb	sy
 8004696:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800469a:	bf00      	nop
 800469c:	3708      	adds	r7, #8
 800469e:	46bd      	mov	sp, r7
 80046a0:	bd80      	pop	{r7, pc}
 80046a2:	bf00      	nop
 80046a4:	20000c20 	.word	0x20000c20
 80046a8:	2000074c 	.word	0x2000074c
 80046ac:	20000c2c 	.word	0x20000c2c
 80046b0:	20000c3c 	.word	0x20000c3c
 80046b4:	20000c28 	.word	0x20000c28
 80046b8:	20000750 	.word	0x20000750
 80046bc:	e000ed04 	.word	0xe000ed04

080046c0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80046c0:	b580      	push	{r7, lr}
 80046c2:	b084      	sub	sp, #16
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80046c8:	2300      	movs	r3, #0
 80046ca:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d016      	beq.n	8004700 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80046d2:	4b13      	ldr	r3, [pc, #76]	; (8004720 <vTaskDelay+0x60>)
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d009      	beq.n	80046ee <vTaskDelay+0x2e>
 80046da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046de:	f383 8811 	msr	BASEPRI, r3
 80046e2:	f3bf 8f6f 	isb	sy
 80046e6:	f3bf 8f4f 	dsb	sy
 80046ea:	60bb      	str	r3, [r7, #8]
 80046ec:	e7fe      	b.n	80046ec <vTaskDelay+0x2c>
			vTaskSuspendAll();
 80046ee:	f000 f87f 	bl	80047f0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80046f2:	2100      	movs	r1, #0
 80046f4:	6878      	ldr	r0, [r7, #4]
 80046f6:	f000 fce3 	bl	80050c0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80046fa:	f000 f887 	bl	800480c <xTaskResumeAll>
 80046fe:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	2b00      	cmp	r3, #0
 8004704:	d107      	bne.n	8004716 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8004706:	4b07      	ldr	r3, [pc, #28]	; (8004724 <vTaskDelay+0x64>)
 8004708:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800470c:	601a      	str	r2, [r3, #0]
 800470e:	f3bf 8f4f 	dsb	sy
 8004712:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004716:	bf00      	nop
 8004718:	3710      	adds	r7, #16
 800471a:	46bd      	mov	sp, r7
 800471c:	bd80      	pop	{r7, pc}
 800471e:	bf00      	nop
 8004720:	20000c48 	.word	0x20000c48
 8004724:	e000ed04 	.word	0xe000ed04

08004728 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004728:	b580      	push	{r7, lr}
 800472a:	b08a      	sub	sp, #40	; 0x28
 800472c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800472e:	2300      	movs	r3, #0
 8004730:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004732:	2300      	movs	r3, #0
 8004734:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004736:	463a      	mov	r2, r7
 8004738:	1d39      	adds	r1, r7, #4
 800473a:	f107 0308 	add.w	r3, r7, #8
 800473e:	4618      	mov	r0, r3
 8004740:	f7fe ffe4 	bl	800370c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004744:	6839      	ldr	r1, [r7, #0]
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	68ba      	ldr	r2, [r7, #8]
 800474a:	9202      	str	r2, [sp, #8]
 800474c:	9301      	str	r3, [sp, #4]
 800474e:	2300      	movs	r3, #0
 8004750:	9300      	str	r3, [sp, #0]
 8004752:	2300      	movs	r3, #0
 8004754:	460a      	mov	r2, r1
 8004756:	4920      	ldr	r1, [pc, #128]	; (80047d8 <vTaskStartScheduler+0xb0>)
 8004758:	4820      	ldr	r0, [pc, #128]	; (80047dc <vTaskStartScheduler+0xb4>)
 800475a:	f7ff fe1d 	bl	8004398 <xTaskCreateStatic>
 800475e:	4602      	mov	r2, r0
 8004760:	4b1f      	ldr	r3, [pc, #124]	; (80047e0 <vTaskStartScheduler+0xb8>)
 8004762:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004764:	4b1e      	ldr	r3, [pc, #120]	; (80047e0 <vTaskStartScheduler+0xb8>)
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	2b00      	cmp	r3, #0
 800476a:	d002      	beq.n	8004772 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800476c:	2301      	movs	r3, #1
 800476e:	617b      	str	r3, [r7, #20]
 8004770:	e001      	b.n	8004776 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004772:	2300      	movs	r3, #0
 8004774:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004776:	697b      	ldr	r3, [r7, #20]
 8004778:	2b01      	cmp	r3, #1
 800477a:	d102      	bne.n	8004782 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800477c:	f000 fcf4 	bl	8005168 <xTimerCreateTimerTask>
 8004780:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004782:	697b      	ldr	r3, [r7, #20]
 8004784:	2b01      	cmp	r3, #1
 8004786:	d115      	bne.n	80047b4 <vTaskStartScheduler+0x8c>
 8004788:	f04f 0350 	mov.w	r3, #80	; 0x50
 800478c:	f383 8811 	msr	BASEPRI, r3
 8004790:	f3bf 8f6f 	isb	sy
 8004794:	f3bf 8f4f 	dsb	sy
 8004798:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800479a:	4b12      	ldr	r3, [pc, #72]	; (80047e4 <vTaskStartScheduler+0xbc>)
 800479c:	f04f 32ff 	mov.w	r2, #4294967295
 80047a0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80047a2:	4b11      	ldr	r3, [pc, #68]	; (80047e8 <vTaskStartScheduler+0xc0>)
 80047a4:	2201      	movs	r2, #1
 80047a6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80047a8:	4b10      	ldr	r3, [pc, #64]	; (80047ec <vTaskStartScheduler+0xc4>)
 80047aa:	2200      	movs	r2, #0
 80047ac:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80047ae:	f001 f86f 	bl	8005890 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80047b2:	e00d      	b.n	80047d0 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80047b4:	697b      	ldr	r3, [r7, #20]
 80047b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047ba:	d109      	bne.n	80047d0 <vTaskStartScheduler+0xa8>
 80047bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047c0:	f383 8811 	msr	BASEPRI, r3
 80047c4:	f3bf 8f6f 	isb	sy
 80047c8:	f3bf 8f4f 	dsb	sy
 80047cc:	60fb      	str	r3, [r7, #12]
 80047ce:	e7fe      	b.n	80047ce <vTaskStartScheduler+0xa6>
}
 80047d0:	bf00      	nop
 80047d2:	3718      	adds	r7, #24
 80047d4:	46bd      	mov	sp, r7
 80047d6:	bd80      	pop	{r7, pc}
 80047d8:	080076b8 	.word	0x080076b8
 80047dc:	08004dfd 	.word	0x08004dfd
 80047e0:	20000c44 	.word	0x20000c44
 80047e4:	20000c40 	.word	0x20000c40
 80047e8:	20000c2c 	.word	0x20000c2c
 80047ec:	20000c24 	.word	0x20000c24

080047f0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80047f0:	b480      	push	{r7}
 80047f2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80047f4:	4b04      	ldr	r3, [pc, #16]	; (8004808 <vTaskSuspendAll+0x18>)
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	3301      	adds	r3, #1
 80047fa:	4a03      	ldr	r2, [pc, #12]	; (8004808 <vTaskSuspendAll+0x18>)
 80047fc:	6013      	str	r3, [r2, #0]
}
 80047fe:	bf00      	nop
 8004800:	46bd      	mov	sp, r7
 8004802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004806:	4770      	bx	lr
 8004808:	20000c48 	.word	0x20000c48

0800480c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800480c:	b580      	push	{r7, lr}
 800480e:	b084      	sub	sp, #16
 8004810:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004812:	2300      	movs	r3, #0
 8004814:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004816:	2300      	movs	r3, #0
 8004818:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800481a:	4b41      	ldr	r3, [pc, #260]	; (8004920 <xTaskResumeAll+0x114>)
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	2b00      	cmp	r3, #0
 8004820:	d109      	bne.n	8004836 <xTaskResumeAll+0x2a>
 8004822:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004826:	f383 8811 	msr	BASEPRI, r3
 800482a:	f3bf 8f6f 	isb	sy
 800482e:	f3bf 8f4f 	dsb	sy
 8004832:	603b      	str	r3, [r7, #0]
 8004834:	e7fe      	b.n	8004834 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004836:	f001 f8c9 	bl	80059cc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800483a:	4b39      	ldr	r3, [pc, #228]	; (8004920 <xTaskResumeAll+0x114>)
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	3b01      	subs	r3, #1
 8004840:	4a37      	ldr	r2, [pc, #220]	; (8004920 <xTaskResumeAll+0x114>)
 8004842:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004844:	4b36      	ldr	r3, [pc, #216]	; (8004920 <xTaskResumeAll+0x114>)
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	2b00      	cmp	r3, #0
 800484a:	d162      	bne.n	8004912 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800484c:	4b35      	ldr	r3, [pc, #212]	; (8004924 <xTaskResumeAll+0x118>)
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	2b00      	cmp	r3, #0
 8004852:	d05e      	beq.n	8004912 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004854:	e02f      	b.n	80048b6 <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8004856:	4b34      	ldr	r3, [pc, #208]	; (8004928 <xTaskResumeAll+0x11c>)
 8004858:	68db      	ldr	r3, [r3, #12]
 800485a:	68db      	ldr	r3, [r3, #12]
 800485c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	3318      	adds	r3, #24
 8004862:	4618      	mov	r0, r3
 8004864:	f7ff f810 	bl	8003888 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	3304      	adds	r3, #4
 800486c:	4618      	mov	r0, r3
 800486e:	f7ff f80b 	bl	8003888 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004876:	4b2d      	ldr	r3, [pc, #180]	; (800492c <xTaskResumeAll+0x120>)
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	429a      	cmp	r2, r3
 800487c:	d903      	bls.n	8004886 <xTaskResumeAll+0x7a>
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004882:	4a2a      	ldr	r2, [pc, #168]	; (800492c <xTaskResumeAll+0x120>)
 8004884:	6013      	str	r3, [r2, #0]
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800488a:	4613      	mov	r3, r2
 800488c:	009b      	lsls	r3, r3, #2
 800488e:	4413      	add	r3, r2
 8004890:	009b      	lsls	r3, r3, #2
 8004892:	4a27      	ldr	r2, [pc, #156]	; (8004930 <xTaskResumeAll+0x124>)
 8004894:	441a      	add	r2, r3
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	3304      	adds	r3, #4
 800489a:	4619      	mov	r1, r3
 800489c:	4610      	mov	r0, r2
 800489e:	f7fe ff96 	bl	80037ce <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048a6:	4b23      	ldr	r3, [pc, #140]	; (8004934 <xTaskResumeAll+0x128>)
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048ac:	429a      	cmp	r2, r3
 80048ae:	d302      	bcc.n	80048b6 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80048b0:	4b21      	ldr	r3, [pc, #132]	; (8004938 <xTaskResumeAll+0x12c>)
 80048b2:	2201      	movs	r2, #1
 80048b4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80048b6:	4b1c      	ldr	r3, [pc, #112]	; (8004928 <xTaskResumeAll+0x11c>)
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d1cb      	bne.n	8004856 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d001      	beq.n	80048c8 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80048c4:	f000 fb4c 	bl	8004f60 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80048c8:	4b1c      	ldr	r3, [pc, #112]	; (800493c <xTaskResumeAll+0x130>)
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d010      	beq.n	80048f6 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80048d4:	f000 f846 	bl	8004964 <xTaskIncrementTick>
 80048d8:	4603      	mov	r3, r0
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d002      	beq.n	80048e4 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80048de:	4b16      	ldr	r3, [pc, #88]	; (8004938 <xTaskResumeAll+0x12c>)
 80048e0:	2201      	movs	r2, #1
 80048e2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	3b01      	subs	r3, #1
 80048e8:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d1f1      	bne.n	80048d4 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 80048f0:	4b12      	ldr	r3, [pc, #72]	; (800493c <xTaskResumeAll+0x130>)
 80048f2:	2200      	movs	r2, #0
 80048f4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80048f6:	4b10      	ldr	r3, [pc, #64]	; (8004938 <xTaskResumeAll+0x12c>)
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d009      	beq.n	8004912 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80048fe:	2301      	movs	r3, #1
 8004900:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004902:	4b0f      	ldr	r3, [pc, #60]	; (8004940 <xTaskResumeAll+0x134>)
 8004904:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004908:	601a      	str	r2, [r3, #0]
 800490a:	f3bf 8f4f 	dsb	sy
 800490e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004912:	f001 f889 	bl	8005a28 <vPortExitCritical>

	return xAlreadyYielded;
 8004916:	68bb      	ldr	r3, [r7, #8]
}
 8004918:	4618      	mov	r0, r3
 800491a:	3710      	adds	r7, #16
 800491c:	46bd      	mov	sp, r7
 800491e:	bd80      	pop	{r7, pc}
 8004920:	20000c48 	.word	0x20000c48
 8004924:	20000c20 	.word	0x20000c20
 8004928:	20000be0 	.word	0x20000be0
 800492c:	20000c28 	.word	0x20000c28
 8004930:	20000750 	.word	0x20000750
 8004934:	2000074c 	.word	0x2000074c
 8004938:	20000c34 	.word	0x20000c34
 800493c:	20000c30 	.word	0x20000c30
 8004940:	e000ed04 	.word	0xe000ed04

08004944 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004944:	b480      	push	{r7}
 8004946:	b083      	sub	sp, #12
 8004948:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800494a:	4b05      	ldr	r3, [pc, #20]	; (8004960 <xTaskGetTickCount+0x1c>)
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004950:	687b      	ldr	r3, [r7, #4]
}
 8004952:	4618      	mov	r0, r3
 8004954:	370c      	adds	r7, #12
 8004956:	46bd      	mov	sp, r7
 8004958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495c:	4770      	bx	lr
 800495e:	bf00      	nop
 8004960:	20000c24 	.word	0x20000c24

08004964 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004964:	b580      	push	{r7, lr}
 8004966:	b086      	sub	sp, #24
 8004968:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800496a:	2300      	movs	r3, #0
 800496c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800496e:	4b51      	ldr	r3, [pc, #324]	; (8004ab4 <xTaskIncrementTick+0x150>)
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	2b00      	cmp	r3, #0
 8004974:	f040 808d 	bne.w	8004a92 <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004978:	4b4f      	ldr	r3, [pc, #316]	; (8004ab8 <xTaskIncrementTick+0x154>)
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	3301      	adds	r3, #1
 800497e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004980:	4a4d      	ldr	r2, [pc, #308]	; (8004ab8 <xTaskIncrementTick+0x154>)
 8004982:	693b      	ldr	r3, [r7, #16]
 8004984:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004986:	693b      	ldr	r3, [r7, #16]
 8004988:	2b00      	cmp	r3, #0
 800498a:	d11f      	bne.n	80049cc <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 800498c:	4b4b      	ldr	r3, [pc, #300]	; (8004abc <xTaskIncrementTick+0x158>)
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	2b00      	cmp	r3, #0
 8004994:	d009      	beq.n	80049aa <xTaskIncrementTick+0x46>
 8004996:	f04f 0350 	mov.w	r3, #80	; 0x50
 800499a:	f383 8811 	msr	BASEPRI, r3
 800499e:	f3bf 8f6f 	isb	sy
 80049a2:	f3bf 8f4f 	dsb	sy
 80049a6:	603b      	str	r3, [r7, #0]
 80049a8:	e7fe      	b.n	80049a8 <xTaskIncrementTick+0x44>
 80049aa:	4b44      	ldr	r3, [pc, #272]	; (8004abc <xTaskIncrementTick+0x158>)
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	60fb      	str	r3, [r7, #12]
 80049b0:	4b43      	ldr	r3, [pc, #268]	; (8004ac0 <xTaskIncrementTick+0x15c>)
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	4a41      	ldr	r2, [pc, #260]	; (8004abc <xTaskIncrementTick+0x158>)
 80049b6:	6013      	str	r3, [r2, #0]
 80049b8:	4a41      	ldr	r2, [pc, #260]	; (8004ac0 <xTaskIncrementTick+0x15c>)
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	6013      	str	r3, [r2, #0]
 80049be:	4b41      	ldr	r3, [pc, #260]	; (8004ac4 <xTaskIncrementTick+0x160>)
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	3301      	adds	r3, #1
 80049c4:	4a3f      	ldr	r2, [pc, #252]	; (8004ac4 <xTaskIncrementTick+0x160>)
 80049c6:	6013      	str	r3, [r2, #0]
 80049c8:	f000 faca 	bl	8004f60 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80049cc:	4b3e      	ldr	r3, [pc, #248]	; (8004ac8 <xTaskIncrementTick+0x164>)
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	693a      	ldr	r2, [r7, #16]
 80049d2:	429a      	cmp	r2, r3
 80049d4:	d34e      	bcc.n	8004a74 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80049d6:	4b39      	ldr	r3, [pc, #228]	; (8004abc <xTaskIncrementTick+0x158>)
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d101      	bne.n	80049e4 <xTaskIncrementTick+0x80>
 80049e0:	2301      	movs	r3, #1
 80049e2:	e000      	b.n	80049e6 <xTaskIncrementTick+0x82>
 80049e4:	2300      	movs	r3, #0
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d004      	beq.n	80049f4 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80049ea:	4b37      	ldr	r3, [pc, #220]	; (8004ac8 <xTaskIncrementTick+0x164>)
 80049ec:	f04f 32ff 	mov.w	r2, #4294967295
 80049f0:	601a      	str	r2, [r3, #0]
					break;
 80049f2:	e03f      	b.n	8004a74 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80049f4:	4b31      	ldr	r3, [pc, #196]	; (8004abc <xTaskIncrementTick+0x158>)
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	68db      	ldr	r3, [r3, #12]
 80049fa:	68db      	ldr	r3, [r3, #12]
 80049fc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80049fe:	68bb      	ldr	r3, [r7, #8]
 8004a00:	685b      	ldr	r3, [r3, #4]
 8004a02:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004a04:	693a      	ldr	r2, [r7, #16]
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	429a      	cmp	r2, r3
 8004a0a:	d203      	bcs.n	8004a14 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004a0c:	4a2e      	ldr	r2, [pc, #184]	; (8004ac8 <xTaskIncrementTick+0x164>)
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	6013      	str	r3, [r2, #0]
						break;
 8004a12:	e02f      	b.n	8004a74 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004a14:	68bb      	ldr	r3, [r7, #8]
 8004a16:	3304      	adds	r3, #4
 8004a18:	4618      	mov	r0, r3
 8004a1a:	f7fe ff35 	bl	8003888 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004a1e:	68bb      	ldr	r3, [r7, #8]
 8004a20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d004      	beq.n	8004a30 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004a26:	68bb      	ldr	r3, [r7, #8]
 8004a28:	3318      	adds	r3, #24
 8004a2a:	4618      	mov	r0, r3
 8004a2c:	f7fe ff2c 	bl	8003888 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004a30:	68bb      	ldr	r3, [r7, #8]
 8004a32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a34:	4b25      	ldr	r3, [pc, #148]	; (8004acc <xTaskIncrementTick+0x168>)
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	429a      	cmp	r2, r3
 8004a3a:	d903      	bls.n	8004a44 <xTaskIncrementTick+0xe0>
 8004a3c:	68bb      	ldr	r3, [r7, #8]
 8004a3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a40:	4a22      	ldr	r2, [pc, #136]	; (8004acc <xTaskIncrementTick+0x168>)
 8004a42:	6013      	str	r3, [r2, #0]
 8004a44:	68bb      	ldr	r3, [r7, #8]
 8004a46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a48:	4613      	mov	r3, r2
 8004a4a:	009b      	lsls	r3, r3, #2
 8004a4c:	4413      	add	r3, r2
 8004a4e:	009b      	lsls	r3, r3, #2
 8004a50:	4a1f      	ldr	r2, [pc, #124]	; (8004ad0 <xTaskIncrementTick+0x16c>)
 8004a52:	441a      	add	r2, r3
 8004a54:	68bb      	ldr	r3, [r7, #8]
 8004a56:	3304      	adds	r3, #4
 8004a58:	4619      	mov	r1, r3
 8004a5a:	4610      	mov	r0, r2
 8004a5c:	f7fe feb7 	bl	80037ce <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004a60:	68bb      	ldr	r3, [r7, #8]
 8004a62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a64:	4b1b      	ldr	r3, [pc, #108]	; (8004ad4 <xTaskIncrementTick+0x170>)
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a6a:	429a      	cmp	r2, r3
 8004a6c:	d3b3      	bcc.n	80049d6 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8004a6e:	2301      	movs	r3, #1
 8004a70:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004a72:	e7b0      	b.n	80049d6 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004a74:	4b17      	ldr	r3, [pc, #92]	; (8004ad4 <xTaskIncrementTick+0x170>)
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a7a:	4915      	ldr	r1, [pc, #84]	; (8004ad0 <xTaskIncrementTick+0x16c>)
 8004a7c:	4613      	mov	r3, r2
 8004a7e:	009b      	lsls	r3, r3, #2
 8004a80:	4413      	add	r3, r2
 8004a82:	009b      	lsls	r3, r3, #2
 8004a84:	440b      	add	r3, r1
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	2b01      	cmp	r3, #1
 8004a8a:	d907      	bls.n	8004a9c <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8004a8c:	2301      	movs	r3, #1
 8004a8e:	617b      	str	r3, [r7, #20]
 8004a90:	e004      	b.n	8004a9c <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8004a92:	4b11      	ldr	r3, [pc, #68]	; (8004ad8 <xTaskIncrementTick+0x174>)
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	3301      	adds	r3, #1
 8004a98:	4a0f      	ldr	r2, [pc, #60]	; (8004ad8 <xTaskIncrementTick+0x174>)
 8004a9a:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8004a9c:	4b0f      	ldr	r3, [pc, #60]	; (8004adc <xTaskIncrementTick+0x178>)
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d001      	beq.n	8004aa8 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8004aa4:	2301      	movs	r3, #1
 8004aa6:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8004aa8:	697b      	ldr	r3, [r7, #20]
}
 8004aaa:	4618      	mov	r0, r3
 8004aac:	3718      	adds	r7, #24
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	bd80      	pop	{r7, pc}
 8004ab2:	bf00      	nop
 8004ab4:	20000c48 	.word	0x20000c48
 8004ab8:	20000c24 	.word	0x20000c24
 8004abc:	20000bd8 	.word	0x20000bd8
 8004ac0:	20000bdc 	.word	0x20000bdc
 8004ac4:	20000c38 	.word	0x20000c38
 8004ac8:	20000c40 	.word	0x20000c40
 8004acc:	20000c28 	.word	0x20000c28
 8004ad0:	20000750 	.word	0x20000750
 8004ad4:	2000074c 	.word	0x2000074c
 8004ad8:	20000c30 	.word	0x20000c30
 8004adc:	20000c34 	.word	0x20000c34

08004ae0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004ae0:	b480      	push	{r7}
 8004ae2:	b085      	sub	sp, #20
 8004ae4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004ae6:	4b27      	ldr	r3, [pc, #156]	; (8004b84 <vTaskSwitchContext+0xa4>)
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d003      	beq.n	8004af6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004aee:	4b26      	ldr	r3, [pc, #152]	; (8004b88 <vTaskSwitchContext+0xa8>)
 8004af0:	2201      	movs	r2, #1
 8004af2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004af4:	e040      	b.n	8004b78 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8004af6:	4b24      	ldr	r3, [pc, #144]	; (8004b88 <vTaskSwitchContext+0xa8>)
 8004af8:	2200      	movs	r2, #0
 8004afa:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8004afc:	4b23      	ldr	r3, [pc, #140]	; (8004b8c <vTaskSwitchContext+0xac>)
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	60fb      	str	r3, [r7, #12]
 8004b02:	e00f      	b.n	8004b24 <vTaskSwitchContext+0x44>
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d109      	bne.n	8004b1e <vTaskSwitchContext+0x3e>
 8004b0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b0e:	f383 8811 	msr	BASEPRI, r3
 8004b12:	f3bf 8f6f 	isb	sy
 8004b16:	f3bf 8f4f 	dsb	sy
 8004b1a:	607b      	str	r3, [r7, #4]
 8004b1c:	e7fe      	b.n	8004b1c <vTaskSwitchContext+0x3c>
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	3b01      	subs	r3, #1
 8004b22:	60fb      	str	r3, [r7, #12]
 8004b24:	491a      	ldr	r1, [pc, #104]	; (8004b90 <vTaskSwitchContext+0xb0>)
 8004b26:	68fa      	ldr	r2, [r7, #12]
 8004b28:	4613      	mov	r3, r2
 8004b2a:	009b      	lsls	r3, r3, #2
 8004b2c:	4413      	add	r3, r2
 8004b2e:	009b      	lsls	r3, r3, #2
 8004b30:	440b      	add	r3, r1
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d0e5      	beq.n	8004b04 <vTaskSwitchContext+0x24>
 8004b38:	68fa      	ldr	r2, [r7, #12]
 8004b3a:	4613      	mov	r3, r2
 8004b3c:	009b      	lsls	r3, r3, #2
 8004b3e:	4413      	add	r3, r2
 8004b40:	009b      	lsls	r3, r3, #2
 8004b42:	4a13      	ldr	r2, [pc, #76]	; (8004b90 <vTaskSwitchContext+0xb0>)
 8004b44:	4413      	add	r3, r2
 8004b46:	60bb      	str	r3, [r7, #8]
 8004b48:	68bb      	ldr	r3, [r7, #8]
 8004b4a:	685b      	ldr	r3, [r3, #4]
 8004b4c:	685a      	ldr	r2, [r3, #4]
 8004b4e:	68bb      	ldr	r3, [r7, #8]
 8004b50:	605a      	str	r2, [r3, #4]
 8004b52:	68bb      	ldr	r3, [r7, #8]
 8004b54:	685a      	ldr	r2, [r3, #4]
 8004b56:	68bb      	ldr	r3, [r7, #8]
 8004b58:	3308      	adds	r3, #8
 8004b5a:	429a      	cmp	r2, r3
 8004b5c:	d104      	bne.n	8004b68 <vTaskSwitchContext+0x88>
 8004b5e:	68bb      	ldr	r3, [r7, #8]
 8004b60:	685b      	ldr	r3, [r3, #4]
 8004b62:	685a      	ldr	r2, [r3, #4]
 8004b64:	68bb      	ldr	r3, [r7, #8]
 8004b66:	605a      	str	r2, [r3, #4]
 8004b68:	68bb      	ldr	r3, [r7, #8]
 8004b6a:	685b      	ldr	r3, [r3, #4]
 8004b6c:	68db      	ldr	r3, [r3, #12]
 8004b6e:	4a09      	ldr	r2, [pc, #36]	; (8004b94 <vTaskSwitchContext+0xb4>)
 8004b70:	6013      	str	r3, [r2, #0]
 8004b72:	4a06      	ldr	r2, [pc, #24]	; (8004b8c <vTaskSwitchContext+0xac>)
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	6013      	str	r3, [r2, #0]
}
 8004b78:	bf00      	nop
 8004b7a:	3714      	adds	r7, #20
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b82:	4770      	bx	lr
 8004b84:	20000c48 	.word	0x20000c48
 8004b88:	20000c34 	.word	0x20000c34
 8004b8c:	20000c28 	.word	0x20000c28
 8004b90:	20000750 	.word	0x20000750
 8004b94:	2000074c 	.word	0x2000074c

08004b98 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004b98:	b580      	push	{r7, lr}
 8004b9a:	b084      	sub	sp, #16
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	6078      	str	r0, [r7, #4]
 8004ba0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d109      	bne.n	8004bbc <vTaskPlaceOnEventList+0x24>
 8004ba8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bac:	f383 8811 	msr	BASEPRI, r3
 8004bb0:	f3bf 8f6f 	isb	sy
 8004bb4:	f3bf 8f4f 	dsb	sy
 8004bb8:	60fb      	str	r3, [r7, #12]
 8004bba:	e7fe      	b.n	8004bba <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004bbc:	4b07      	ldr	r3, [pc, #28]	; (8004bdc <vTaskPlaceOnEventList+0x44>)
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	3318      	adds	r3, #24
 8004bc2:	4619      	mov	r1, r3
 8004bc4:	6878      	ldr	r0, [r7, #4]
 8004bc6:	f7fe fe26 	bl	8003816 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004bca:	2101      	movs	r1, #1
 8004bcc:	6838      	ldr	r0, [r7, #0]
 8004bce:	f000 fa77 	bl	80050c0 <prvAddCurrentTaskToDelayedList>
}
 8004bd2:	bf00      	nop
 8004bd4:	3710      	adds	r7, #16
 8004bd6:	46bd      	mov	sp, r7
 8004bd8:	bd80      	pop	{r7, pc}
 8004bda:	bf00      	nop
 8004bdc:	2000074c 	.word	0x2000074c

08004be0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004be0:	b580      	push	{r7, lr}
 8004be2:	b086      	sub	sp, #24
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	60f8      	str	r0, [r7, #12]
 8004be8:	60b9      	str	r1, [r7, #8]
 8004bea:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d109      	bne.n	8004c06 <vTaskPlaceOnEventListRestricted+0x26>
 8004bf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bf6:	f383 8811 	msr	BASEPRI, r3
 8004bfa:	f3bf 8f6f 	isb	sy
 8004bfe:	f3bf 8f4f 	dsb	sy
 8004c02:	617b      	str	r3, [r7, #20]
 8004c04:	e7fe      	b.n	8004c04 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004c06:	4b0a      	ldr	r3, [pc, #40]	; (8004c30 <vTaskPlaceOnEventListRestricted+0x50>)
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	3318      	adds	r3, #24
 8004c0c:	4619      	mov	r1, r3
 8004c0e:	68f8      	ldr	r0, [r7, #12]
 8004c10:	f7fe fddd 	bl	80037ce <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d002      	beq.n	8004c20 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 8004c1a:	f04f 33ff 	mov.w	r3, #4294967295
 8004c1e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004c20:	6879      	ldr	r1, [r7, #4]
 8004c22:	68b8      	ldr	r0, [r7, #8]
 8004c24:	f000 fa4c 	bl	80050c0 <prvAddCurrentTaskToDelayedList>
	}
 8004c28:	bf00      	nop
 8004c2a:	3718      	adds	r7, #24
 8004c2c:	46bd      	mov	sp, r7
 8004c2e:	bd80      	pop	{r7, pc}
 8004c30:	2000074c 	.word	0x2000074c

08004c34 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004c34:	b580      	push	{r7, lr}
 8004c36:	b086      	sub	sp, #24
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	68db      	ldr	r3, [r3, #12]
 8004c40:	68db      	ldr	r3, [r3, #12]
 8004c42:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004c44:	693b      	ldr	r3, [r7, #16]
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d109      	bne.n	8004c5e <xTaskRemoveFromEventList+0x2a>
 8004c4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c4e:	f383 8811 	msr	BASEPRI, r3
 8004c52:	f3bf 8f6f 	isb	sy
 8004c56:	f3bf 8f4f 	dsb	sy
 8004c5a:	60fb      	str	r3, [r7, #12]
 8004c5c:	e7fe      	b.n	8004c5c <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004c5e:	693b      	ldr	r3, [r7, #16]
 8004c60:	3318      	adds	r3, #24
 8004c62:	4618      	mov	r0, r3
 8004c64:	f7fe fe10 	bl	8003888 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004c68:	4b1d      	ldr	r3, [pc, #116]	; (8004ce0 <xTaskRemoveFromEventList+0xac>)
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d11d      	bne.n	8004cac <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004c70:	693b      	ldr	r3, [r7, #16]
 8004c72:	3304      	adds	r3, #4
 8004c74:	4618      	mov	r0, r3
 8004c76:	f7fe fe07 	bl	8003888 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004c7a:	693b      	ldr	r3, [r7, #16]
 8004c7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c7e:	4b19      	ldr	r3, [pc, #100]	; (8004ce4 <xTaskRemoveFromEventList+0xb0>)
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	429a      	cmp	r2, r3
 8004c84:	d903      	bls.n	8004c8e <xTaskRemoveFromEventList+0x5a>
 8004c86:	693b      	ldr	r3, [r7, #16]
 8004c88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c8a:	4a16      	ldr	r2, [pc, #88]	; (8004ce4 <xTaskRemoveFromEventList+0xb0>)
 8004c8c:	6013      	str	r3, [r2, #0]
 8004c8e:	693b      	ldr	r3, [r7, #16]
 8004c90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c92:	4613      	mov	r3, r2
 8004c94:	009b      	lsls	r3, r3, #2
 8004c96:	4413      	add	r3, r2
 8004c98:	009b      	lsls	r3, r3, #2
 8004c9a:	4a13      	ldr	r2, [pc, #76]	; (8004ce8 <xTaskRemoveFromEventList+0xb4>)
 8004c9c:	441a      	add	r2, r3
 8004c9e:	693b      	ldr	r3, [r7, #16]
 8004ca0:	3304      	adds	r3, #4
 8004ca2:	4619      	mov	r1, r3
 8004ca4:	4610      	mov	r0, r2
 8004ca6:	f7fe fd92 	bl	80037ce <vListInsertEnd>
 8004caa:	e005      	b.n	8004cb8 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004cac:	693b      	ldr	r3, [r7, #16]
 8004cae:	3318      	adds	r3, #24
 8004cb0:	4619      	mov	r1, r3
 8004cb2:	480e      	ldr	r0, [pc, #56]	; (8004cec <xTaskRemoveFromEventList+0xb8>)
 8004cb4:	f7fe fd8b 	bl	80037ce <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004cb8:	693b      	ldr	r3, [r7, #16]
 8004cba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004cbc:	4b0c      	ldr	r3, [pc, #48]	; (8004cf0 <xTaskRemoveFromEventList+0xbc>)
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cc2:	429a      	cmp	r2, r3
 8004cc4:	d905      	bls.n	8004cd2 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004cc6:	2301      	movs	r3, #1
 8004cc8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004cca:	4b0a      	ldr	r3, [pc, #40]	; (8004cf4 <xTaskRemoveFromEventList+0xc0>)
 8004ccc:	2201      	movs	r2, #1
 8004cce:	601a      	str	r2, [r3, #0]
 8004cd0:	e001      	b.n	8004cd6 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8004cd2:	2300      	movs	r3, #0
 8004cd4:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8004cd6:	697b      	ldr	r3, [r7, #20]
}
 8004cd8:	4618      	mov	r0, r3
 8004cda:	3718      	adds	r7, #24
 8004cdc:	46bd      	mov	sp, r7
 8004cde:	bd80      	pop	{r7, pc}
 8004ce0:	20000c48 	.word	0x20000c48
 8004ce4:	20000c28 	.word	0x20000c28
 8004ce8:	20000750 	.word	0x20000750
 8004cec:	20000be0 	.word	0x20000be0
 8004cf0:	2000074c 	.word	0x2000074c
 8004cf4:	20000c34 	.word	0x20000c34

08004cf8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004cf8:	b480      	push	{r7}
 8004cfa:	b083      	sub	sp, #12
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004d00:	4b06      	ldr	r3, [pc, #24]	; (8004d1c <vTaskInternalSetTimeOutState+0x24>)
 8004d02:	681a      	ldr	r2, [r3, #0]
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004d08:	4b05      	ldr	r3, [pc, #20]	; (8004d20 <vTaskInternalSetTimeOutState+0x28>)
 8004d0a:	681a      	ldr	r2, [r3, #0]
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	605a      	str	r2, [r3, #4]
}
 8004d10:	bf00      	nop
 8004d12:	370c      	adds	r7, #12
 8004d14:	46bd      	mov	sp, r7
 8004d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1a:	4770      	bx	lr
 8004d1c:	20000c38 	.word	0x20000c38
 8004d20:	20000c24 	.word	0x20000c24

08004d24 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004d24:	b580      	push	{r7, lr}
 8004d26:	b088      	sub	sp, #32
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	6078      	str	r0, [r7, #4]
 8004d2c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d109      	bne.n	8004d48 <xTaskCheckForTimeOut+0x24>
 8004d34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d38:	f383 8811 	msr	BASEPRI, r3
 8004d3c:	f3bf 8f6f 	isb	sy
 8004d40:	f3bf 8f4f 	dsb	sy
 8004d44:	613b      	str	r3, [r7, #16]
 8004d46:	e7fe      	b.n	8004d46 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8004d48:	683b      	ldr	r3, [r7, #0]
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d109      	bne.n	8004d62 <xTaskCheckForTimeOut+0x3e>
 8004d4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d52:	f383 8811 	msr	BASEPRI, r3
 8004d56:	f3bf 8f6f 	isb	sy
 8004d5a:	f3bf 8f4f 	dsb	sy
 8004d5e:	60fb      	str	r3, [r7, #12]
 8004d60:	e7fe      	b.n	8004d60 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8004d62:	f000 fe33 	bl	80059cc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004d66:	4b1d      	ldr	r3, [pc, #116]	; (8004ddc <xTaskCheckForTimeOut+0xb8>)
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	685b      	ldr	r3, [r3, #4]
 8004d70:	69ba      	ldr	r2, [r7, #24]
 8004d72:	1ad3      	subs	r3, r2, r3
 8004d74:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004d76:	683b      	ldr	r3, [r7, #0]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d7e:	d102      	bne.n	8004d86 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004d80:	2300      	movs	r3, #0
 8004d82:	61fb      	str	r3, [r7, #28]
 8004d84:	e023      	b.n	8004dce <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681a      	ldr	r2, [r3, #0]
 8004d8a:	4b15      	ldr	r3, [pc, #84]	; (8004de0 <xTaskCheckForTimeOut+0xbc>)
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	429a      	cmp	r2, r3
 8004d90:	d007      	beq.n	8004da2 <xTaskCheckForTimeOut+0x7e>
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	685b      	ldr	r3, [r3, #4]
 8004d96:	69ba      	ldr	r2, [r7, #24]
 8004d98:	429a      	cmp	r2, r3
 8004d9a:	d302      	bcc.n	8004da2 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004d9c:	2301      	movs	r3, #1
 8004d9e:	61fb      	str	r3, [r7, #28]
 8004da0:	e015      	b.n	8004dce <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004da2:	683b      	ldr	r3, [r7, #0]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	697a      	ldr	r2, [r7, #20]
 8004da8:	429a      	cmp	r2, r3
 8004daa:	d20b      	bcs.n	8004dc4 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004dac:	683b      	ldr	r3, [r7, #0]
 8004dae:	681a      	ldr	r2, [r3, #0]
 8004db0:	697b      	ldr	r3, [r7, #20]
 8004db2:	1ad2      	subs	r2, r2, r3
 8004db4:	683b      	ldr	r3, [r7, #0]
 8004db6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004db8:	6878      	ldr	r0, [r7, #4]
 8004dba:	f7ff ff9d 	bl	8004cf8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004dbe:	2300      	movs	r3, #0
 8004dc0:	61fb      	str	r3, [r7, #28]
 8004dc2:	e004      	b.n	8004dce <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8004dc4:	683b      	ldr	r3, [r7, #0]
 8004dc6:	2200      	movs	r2, #0
 8004dc8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004dca:	2301      	movs	r3, #1
 8004dcc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004dce:	f000 fe2b 	bl	8005a28 <vPortExitCritical>

	return xReturn;
 8004dd2:	69fb      	ldr	r3, [r7, #28]
}
 8004dd4:	4618      	mov	r0, r3
 8004dd6:	3720      	adds	r7, #32
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	bd80      	pop	{r7, pc}
 8004ddc:	20000c24 	.word	0x20000c24
 8004de0:	20000c38 	.word	0x20000c38

08004de4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004de4:	b480      	push	{r7}
 8004de6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004de8:	4b03      	ldr	r3, [pc, #12]	; (8004df8 <vTaskMissedYield+0x14>)
 8004dea:	2201      	movs	r2, #1
 8004dec:	601a      	str	r2, [r3, #0]
}
 8004dee:	bf00      	nop
 8004df0:	46bd      	mov	sp, r7
 8004df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df6:	4770      	bx	lr
 8004df8:	20000c34 	.word	0x20000c34

08004dfc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004dfc:	b580      	push	{r7, lr}
 8004dfe:	b082      	sub	sp, #8
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004e04:	f000 f852 	bl	8004eac <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004e08:	4b06      	ldr	r3, [pc, #24]	; (8004e24 <prvIdleTask+0x28>)
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	2b01      	cmp	r3, #1
 8004e0e:	d9f9      	bls.n	8004e04 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004e10:	4b05      	ldr	r3, [pc, #20]	; (8004e28 <prvIdleTask+0x2c>)
 8004e12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e16:	601a      	str	r2, [r3, #0]
 8004e18:	f3bf 8f4f 	dsb	sy
 8004e1c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004e20:	e7f0      	b.n	8004e04 <prvIdleTask+0x8>
 8004e22:	bf00      	nop
 8004e24:	20000750 	.word	0x20000750
 8004e28:	e000ed04 	.word	0xe000ed04

08004e2c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004e2c:	b580      	push	{r7, lr}
 8004e2e:	b082      	sub	sp, #8
 8004e30:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004e32:	2300      	movs	r3, #0
 8004e34:	607b      	str	r3, [r7, #4]
 8004e36:	e00c      	b.n	8004e52 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004e38:	687a      	ldr	r2, [r7, #4]
 8004e3a:	4613      	mov	r3, r2
 8004e3c:	009b      	lsls	r3, r3, #2
 8004e3e:	4413      	add	r3, r2
 8004e40:	009b      	lsls	r3, r3, #2
 8004e42:	4a12      	ldr	r2, [pc, #72]	; (8004e8c <prvInitialiseTaskLists+0x60>)
 8004e44:	4413      	add	r3, r2
 8004e46:	4618      	mov	r0, r3
 8004e48:	f7fe fc94 	bl	8003774 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	3301      	adds	r3, #1
 8004e50:	607b      	str	r3, [r7, #4]
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	2b37      	cmp	r3, #55	; 0x37
 8004e56:	d9ef      	bls.n	8004e38 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004e58:	480d      	ldr	r0, [pc, #52]	; (8004e90 <prvInitialiseTaskLists+0x64>)
 8004e5a:	f7fe fc8b 	bl	8003774 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004e5e:	480d      	ldr	r0, [pc, #52]	; (8004e94 <prvInitialiseTaskLists+0x68>)
 8004e60:	f7fe fc88 	bl	8003774 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004e64:	480c      	ldr	r0, [pc, #48]	; (8004e98 <prvInitialiseTaskLists+0x6c>)
 8004e66:	f7fe fc85 	bl	8003774 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004e6a:	480c      	ldr	r0, [pc, #48]	; (8004e9c <prvInitialiseTaskLists+0x70>)
 8004e6c:	f7fe fc82 	bl	8003774 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004e70:	480b      	ldr	r0, [pc, #44]	; (8004ea0 <prvInitialiseTaskLists+0x74>)
 8004e72:	f7fe fc7f 	bl	8003774 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004e76:	4b0b      	ldr	r3, [pc, #44]	; (8004ea4 <prvInitialiseTaskLists+0x78>)
 8004e78:	4a05      	ldr	r2, [pc, #20]	; (8004e90 <prvInitialiseTaskLists+0x64>)
 8004e7a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004e7c:	4b0a      	ldr	r3, [pc, #40]	; (8004ea8 <prvInitialiseTaskLists+0x7c>)
 8004e7e:	4a05      	ldr	r2, [pc, #20]	; (8004e94 <prvInitialiseTaskLists+0x68>)
 8004e80:	601a      	str	r2, [r3, #0]
}
 8004e82:	bf00      	nop
 8004e84:	3708      	adds	r7, #8
 8004e86:	46bd      	mov	sp, r7
 8004e88:	bd80      	pop	{r7, pc}
 8004e8a:	bf00      	nop
 8004e8c:	20000750 	.word	0x20000750
 8004e90:	20000bb0 	.word	0x20000bb0
 8004e94:	20000bc4 	.word	0x20000bc4
 8004e98:	20000be0 	.word	0x20000be0
 8004e9c:	20000bf4 	.word	0x20000bf4
 8004ea0:	20000c0c 	.word	0x20000c0c
 8004ea4:	20000bd8 	.word	0x20000bd8
 8004ea8:	20000bdc 	.word	0x20000bdc

08004eac <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004eac:	b580      	push	{r7, lr}
 8004eae:	b082      	sub	sp, #8
 8004eb0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004eb2:	e019      	b.n	8004ee8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004eb4:	f000 fd8a 	bl	80059cc <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8004eb8:	4b0f      	ldr	r3, [pc, #60]	; (8004ef8 <prvCheckTasksWaitingTermination+0x4c>)
 8004eba:	68db      	ldr	r3, [r3, #12]
 8004ebc:	68db      	ldr	r3, [r3, #12]
 8004ebe:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	3304      	adds	r3, #4
 8004ec4:	4618      	mov	r0, r3
 8004ec6:	f7fe fcdf 	bl	8003888 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004eca:	4b0c      	ldr	r3, [pc, #48]	; (8004efc <prvCheckTasksWaitingTermination+0x50>)
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	3b01      	subs	r3, #1
 8004ed0:	4a0a      	ldr	r2, [pc, #40]	; (8004efc <prvCheckTasksWaitingTermination+0x50>)
 8004ed2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004ed4:	4b0a      	ldr	r3, [pc, #40]	; (8004f00 <prvCheckTasksWaitingTermination+0x54>)
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	3b01      	subs	r3, #1
 8004eda:	4a09      	ldr	r2, [pc, #36]	; (8004f00 <prvCheckTasksWaitingTermination+0x54>)
 8004edc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004ede:	f000 fda3 	bl	8005a28 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004ee2:	6878      	ldr	r0, [r7, #4]
 8004ee4:	f000 f80e 	bl	8004f04 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004ee8:	4b05      	ldr	r3, [pc, #20]	; (8004f00 <prvCheckTasksWaitingTermination+0x54>)
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d1e1      	bne.n	8004eb4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004ef0:	bf00      	nop
 8004ef2:	3708      	adds	r7, #8
 8004ef4:	46bd      	mov	sp, r7
 8004ef6:	bd80      	pop	{r7, pc}
 8004ef8:	20000bf4 	.word	0x20000bf4
 8004efc:	20000c20 	.word	0x20000c20
 8004f00:	20000c08 	.word	0x20000c08

08004f04 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004f04:	b580      	push	{r7, lr}
 8004f06:	b084      	sub	sp, #16
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d108      	bne.n	8004f28 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	f000 ff32 	bl	8005d84 <vPortFree>
				vPortFree( pxTCB );
 8004f20:	6878      	ldr	r0, [r7, #4]
 8004f22:	f000 ff2f 	bl	8005d84 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004f26:	e017      	b.n	8004f58 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004f2e:	2b01      	cmp	r3, #1
 8004f30:	d103      	bne.n	8004f3a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8004f32:	6878      	ldr	r0, [r7, #4]
 8004f34:	f000 ff26 	bl	8005d84 <vPortFree>
	}
 8004f38:	e00e      	b.n	8004f58 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004f40:	2b02      	cmp	r3, #2
 8004f42:	d009      	beq.n	8004f58 <prvDeleteTCB+0x54>
 8004f44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f48:	f383 8811 	msr	BASEPRI, r3
 8004f4c:	f3bf 8f6f 	isb	sy
 8004f50:	f3bf 8f4f 	dsb	sy
 8004f54:	60fb      	str	r3, [r7, #12]
 8004f56:	e7fe      	b.n	8004f56 <prvDeleteTCB+0x52>
	}
 8004f58:	bf00      	nop
 8004f5a:	3710      	adds	r7, #16
 8004f5c:	46bd      	mov	sp, r7
 8004f5e:	bd80      	pop	{r7, pc}

08004f60 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004f60:	b480      	push	{r7}
 8004f62:	b083      	sub	sp, #12
 8004f64:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004f66:	4b0f      	ldr	r3, [pc, #60]	; (8004fa4 <prvResetNextTaskUnblockTime+0x44>)
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d101      	bne.n	8004f74 <prvResetNextTaskUnblockTime+0x14>
 8004f70:	2301      	movs	r3, #1
 8004f72:	e000      	b.n	8004f76 <prvResetNextTaskUnblockTime+0x16>
 8004f74:	2300      	movs	r3, #0
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d004      	beq.n	8004f84 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004f7a:	4b0b      	ldr	r3, [pc, #44]	; (8004fa8 <prvResetNextTaskUnblockTime+0x48>)
 8004f7c:	f04f 32ff 	mov.w	r2, #4294967295
 8004f80:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004f82:	e008      	b.n	8004f96 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004f84:	4b07      	ldr	r3, [pc, #28]	; (8004fa4 <prvResetNextTaskUnblockTime+0x44>)
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	68db      	ldr	r3, [r3, #12]
 8004f8a:	68db      	ldr	r3, [r3, #12]
 8004f8c:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	685b      	ldr	r3, [r3, #4]
 8004f92:	4a05      	ldr	r2, [pc, #20]	; (8004fa8 <prvResetNextTaskUnblockTime+0x48>)
 8004f94:	6013      	str	r3, [r2, #0]
}
 8004f96:	bf00      	nop
 8004f98:	370c      	adds	r7, #12
 8004f9a:	46bd      	mov	sp, r7
 8004f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa0:	4770      	bx	lr
 8004fa2:	bf00      	nop
 8004fa4:	20000bd8 	.word	0x20000bd8
 8004fa8:	20000c40 	.word	0x20000c40

08004fac <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004fac:	b480      	push	{r7}
 8004fae:	b083      	sub	sp, #12
 8004fb0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004fb2:	4b0b      	ldr	r3, [pc, #44]	; (8004fe0 <xTaskGetSchedulerState+0x34>)
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d102      	bne.n	8004fc0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004fba:	2301      	movs	r3, #1
 8004fbc:	607b      	str	r3, [r7, #4]
 8004fbe:	e008      	b.n	8004fd2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004fc0:	4b08      	ldr	r3, [pc, #32]	; (8004fe4 <xTaskGetSchedulerState+0x38>)
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d102      	bne.n	8004fce <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004fc8:	2302      	movs	r3, #2
 8004fca:	607b      	str	r3, [r7, #4]
 8004fcc:	e001      	b.n	8004fd2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004fce:	2300      	movs	r3, #0
 8004fd0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004fd2:	687b      	ldr	r3, [r7, #4]
	}
 8004fd4:	4618      	mov	r0, r3
 8004fd6:	370c      	adds	r7, #12
 8004fd8:	46bd      	mov	sp, r7
 8004fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fde:	4770      	bx	lr
 8004fe0:	20000c2c 	.word	0x20000c2c
 8004fe4:	20000c48 	.word	0x20000c48

08004fe8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004fe8:	b580      	push	{r7, lr}
 8004fea:	b086      	sub	sp, #24
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004ff4:	2300      	movs	r3, #0
 8004ff6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d054      	beq.n	80050a8 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004ffe:	4b2d      	ldr	r3, [pc, #180]	; (80050b4 <xTaskPriorityDisinherit+0xcc>)
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	693a      	ldr	r2, [r7, #16]
 8005004:	429a      	cmp	r2, r3
 8005006:	d009      	beq.n	800501c <xTaskPriorityDisinherit+0x34>
 8005008:	f04f 0350 	mov.w	r3, #80	; 0x50
 800500c:	f383 8811 	msr	BASEPRI, r3
 8005010:	f3bf 8f6f 	isb	sy
 8005014:	f3bf 8f4f 	dsb	sy
 8005018:	60fb      	str	r3, [r7, #12]
 800501a:	e7fe      	b.n	800501a <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 800501c:	693b      	ldr	r3, [r7, #16]
 800501e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005020:	2b00      	cmp	r3, #0
 8005022:	d109      	bne.n	8005038 <xTaskPriorityDisinherit+0x50>
 8005024:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005028:	f383 8811 	msr	BASEPRI, r3
 800502c:	f3bf 8f6f 	isb	sy
 8005030:	f3bf 8f4f 	dsb	sy
 8005034:	60bb      	str	r3, [r7, #8]
 8005036:	e7fe      	b.n	8005036 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8005038:	693b      	ldr	r3, [r7, #16]
 800503a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800503c:	1e5a      	subs	r2, r3, #1
 800503e:	693b      	ldr	r3, [r7, #16]
 8005040:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005042:	693b      	ldr	r3, [r7, #16]
 8005044:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005046:	693b      	ldr	r3, [r7, #16]
 8005048:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800504a:	429a      	cmp	r2, r3
 800504c:	d02c      	beq.n	80050a8 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800504e:	693b      	ldr	r3, [r7, #16]
 8005050:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005052:	2b00      	cmp	r3, #0
 8005054:	d128      	bne.n	80050a8 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005056:	693b      	ldr	r3, [r7, #16]
 8005058:	3304      	adds	r3, #4
 800505a:	4618      	mov	r0, r3
 800505c:	f7fe fc14 	bl	8003888 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005060:	693b      	ldr	r3, [r7, #16]
 8005062:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005064:	693b      	ldr	r3, [r7, #16]
 8005066:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005068:	693b      	ldr	r3, [r7, #16]
 800506a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800506c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005070:	693b      	ldr	r3, [r7, #16]
 8005072:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005074:	693b      	ldr	r3, [r7, #16]
 8005076:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005078:	4b0f      	ldr	r3, [pc, #60]	; (80050b8 <xTaskPriorityDisinherit+0xd0>)
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	429a      	cmp	r2, r3
 800507e:	d903      	bls.n	8005088 <xTaskPriorityDisinherit+0xa0>
 8005080:	693b      	ldr	r3, [r7, #16]
 8005082:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005084:	4a0c      	ldr	r2, [pc, #48]	; (80050b8 <xTaskPriorityDisinherit+0xd0>)
 8005086:	6013      	str	r3, [r2, #0]
 8005088:	693b      	ldr	r3, [r7, #16]
 800508a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800508c:	4613      	mov	r3, r2
 800508e:	009b      	lsls	r3, r3, #2
 8005090:	4413      	add	r3, r2
 8005092:	009b      	lsls	r3, r3, #2
 8005094:	4a09      	ldr	r2, [pc, #36]	; (80050bc <xTaskPriorityDisinherit+0xd4>)
 8005096:	441a      	add	r2, r3
 8005098:	693b      	ldr	r3, [r7, #16]
 800509a:	3304      	adds	r3, #4
 800509c:	4619      	mov	r1, r3
 800509e:	4610      	mov	r0, r2
 80050a0:	f7fe fb95 	bl	80037ce <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80050a4:	2301      	movs	r3, #1
 80050a6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80050a8:	697b      	ldr	r3, [r7, #20]
	}
 80050aa:	4618      	mov	r0, r3
 80050ac:	3718      	adds	r7, #24
 80050ae:	46bd      	mov	sp, r7
 80050b0:	bd80      	pop	{r7, pc}
 80050b2:	bf00      	nop
 80050b4:	2000074c 	.word	0x2000074c
 80050b8:	20000c28 	.word	0x20000c28
 80050bc:	20000750 	.word	0x20000750

080050c0 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80050c0:	b580      	push	{r7, lr}
 80050c2:	b084      	sub	sp, #16
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	6078      	str	r0, [r7, #4]
 80050c8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80050ca:	4b21      	ldr	r3, [pc, #132]	; (8005150 <prvAddCurrentTaskToDelayedList+0x90>)
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80050d0:	4b20      	ldr	r3, [pc, #128]	; (8005154 <prvAddCurrentTaskToDelayedList+0x94>)
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	3304      	adds	r3, #4
 80050d6:	4618      	mov	r0, r3
 80050d8:	f7fe fbd6 	bl	8003888 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050e2:	d10a      	bne.n	80050fa <prvAddCurrentTaskToDelayedList+0x3a>
 80050e4:	683b      	ldr	r3, [r7, #0]
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d007      	beq.n	80050fa <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80050ea:	4b1a      	ldr	r3, [pc, #104]	; (8005154 <prvAddCurrentTaskToDelayedList+0x94>)
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	3304      	adds	r3, #4
 80050f0:	4619      	mov	r1, r3
 80050f2:	4819      	ldr	r0, [pc, #100]	; (8005158 <prvAddCurrentTaskToDelayedList+0x98>)
 80050f4:	f7fe fb6b 	bl	80037ce <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80050f8:	e026      	b.n	8005148 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80050fa:	68fa      	ldr	r2, [r7, #12]
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	4413      	add	r3, r2
 8005100:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005102:	4b14      	ldr	r3, [pc, #80]	; (8005154 <prvAddCurrentTaskToDelayedList+0x94>)
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	68ba      	ldr	r2, [r7, #8]
 8005108:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800510a:	68ba      	ldr	r2, [r7, #8]
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	429a      	cmp	r2, r3
 8005110:	d209      	bcs.n	8005126 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005112:	4b12      	ldr	r3, [pc, #72]	; (800515c <prvAddCurrentTaskToDelayedList+0x9c>)
 8005114:	681a      	ldr	r2, [r3, #0]
 8005116:	4b0f      	ldr	r3, [pc, #60]	; (8005154 <prvAddCurrentTaskToDelayedList+0x94>)
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	3304      	adds	r3, #4
 800511c:	4619      	mov	r1, r3
 800511e:	4610      	mov	r0, r2
 8005120:	f7fe fb79 	bl	8003816 <vListInsert>
}
 8005124:	e010      	b.n	8005148 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005126:	4b0e      	ldr	r3, [pc, #56]	; (8005160 <prvAddCurrentTaskToDelayedList+0xa0>)
 8005128:	681a      	ldr	r2, [r3, #0]
 800512a:	4b0a      	ldr	r3, [pc, #40]	; (8005154 <prvAddCurrentTaskToDelayedList+0x94>)
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	3304      	adds	r3, #4
 8005130:	4619      	mov	r1, r3
 8005132:	4610      	mov	r0, r2
 8005134:	f7fe fb6f 	bl	8003816 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005138:	4b0a      	ldr	r3, [pc, #40]	; (8005164 <prvAddCurrentTaskToDelayedList+0xa4>)
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	68ba      	ldr	r2, [r7, #8]
 800513e:	429a      	cmp	r2, r3
 8005140:	d202      	bcs.n	8005148 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005142:	4a08      	ldr	r2, [pc, #32]	; (8005164 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005144:	68bb      	ldr	r3, [r7, #8]
 8005146:	6013      	str	r3, [r2, #0]
}
 8005148:	bf00      	nop
 800514a:	3710      	adds	r7, #16
 800514c:	46bd      	mov	sp, r7
 800514e:	bd80      	pop	{r7, pc}
 8005150:	20000c24 	.word	0x20000c24
 8005154:	2000074c 	.word	0x2000074c
 8005158:	20000c0c 	.word	0x20000c0c
 800515c:	20000bdc 	.word	0x20000bdc
 8005160:	20000bd8 	.word	0x20000bd8
 8005164:	20000c40 	.word	0x20000c40

08005168 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005168:	b580      	push	{r7, lr}
 800516a:	b08a      	sub	sp, #40	; 0x28
 800516c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800516e:	2300      	movs	r3, #0
 8005170:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005172:	f000 fac3 	bl	80056fc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005176:	4b1c      	ldr	r3, [pc, #112]	; (80051e8 <xTimerCreateTimerTask+0x80>)
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	2b00      	cmp	r3, #0
 800517c:	d021      	beq.n	80051c2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800517e:	2300      	movs	r3, #0
 8005180:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005182:	2300      	movs	r3, #0
 8005184:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005186:	1d3a      	adds	r2, r7, #4
 8005188:	f107 0108 	add.w	r1, r7, #8
 800518c:	f107 030c 	add.w	r3, r7, #12
 8005190:	4618      	mov	r0, r3
 8005192:	f7fe fad5 	bl	8003740 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005196:	6879      	ldr	r1, [r7, #4]
 8005198:	68bb      	ldr	r3, [r7, #8]
 800519a:	68fa      	ldr	r2, [r7, #12]
 800519c:	9202      	str	r2, [sp, #8]
 800519e:	9301      	str	r3, [sp, #4]
 80051a0:	2302      	movs	r3, #2
 80051a2:	9300      	str	r3, [sp, #0]
 80051a4:	2300      	movs	r3, #0
 80051a6:	460a      	mov	r2, r1
 80051a8:	4910      	ldr	r1, [pc, #64]	; (80051ec <xTimerCreateTimerTask+0x84>)
 80051aa:	4811      	ldr	r0, [pc, #68]	; (80051f0 <xTimerCreateTimerTask+0x88>)
 80051ac:	f7ff f8f4 	bl	8004398 <xTaskCreateStatic>
 80051b0:	4602      	mov	r2, r0
 80051b2:	4b10      	ldr	r3, [pc, #64]	; (80051f4 <xTimerCreateTimerTask+0x8c>)
 80051b4:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80051b6:	4b0f      	ldr	r3, [pc, #60]	; (80051f4 <xTimerCreateTimerTask+0x8c>)
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d001      	beq.n	80051c2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80051be:	2301      	movs	r3, #1
 80051c0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80051c2:	697b      	ldr	r3, [r7, #20]
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d109      	bne.n	80051dc <xTimerCreateTimerTask+0x74>
 80051c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051cc:	f383 8811 	msr	BASEPRI, r3
 80051d0:	f3bf 8f6f 	isb	sy
 80051d4:	f3bf 8f4f 	dsb	sy
 80051d8:	613b      	str	r3, [r7, #16]
 80051da:	e7fe      	b.n	80051da <xTimerCreateTimerTask+0x72>
	return xReturn;
 80051dc:	697b      	ldr	r3, [r7, #20]
}
 80051de:	4618      	mov	r0, r3
 80051e0:	3718      	adds	r7, #24
 80051e2:	46bd      	mov	sp, r7
 80051e4:	bd80      	pop	{r7, pc}
 80051e6:	bf00      	nop
 80051e8:	20000c7c 	.word	0x20000c7c
 80051ec:	080076c0 	.word	0x080076c0
 80051f0:	08005311 	.word	0x08005311
 80051f4:	20000c80 	.word	0x20000c80

080051f8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80051f8:	b580      	push	{r7, lr}
 80051fa:	b08a      	sub	sp, #40	; 0x28
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	60f8      	str	r0, [r7, #12]
 8005200:	60b9      	str	r1, [r7, #8]
 8005202:	607a      	str	r2, [r7, #4]
 8005204:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005206:	2300      	movs	r3, #0
 8005208:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	2b00      	cmp	r3, #0
 800520e:	d109      	bne.n	8005224 <xTimerGenericCommand+0x2c>
 8005210:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005214:	f383 8811 	msr	BASEPRI, r3
 8005218:	f3bf 8f6f 	isb	sy
 800521c:	f3bf 8f4f 	dsb	sy
 8005220:	623b      	str	r3, [r7, #32]
 8005222:	e7fe      	b.n	8005222 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005224:	4b19      	ldr	r3, [pc, #100]	; (800528c <xTimerGenericCommand+0x94>)
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	2b00      	cmp	r3, #0
 800522a:	d02a      	beq.n	8005282 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800522c:	68bb      	ldr	r3, [r7, #8]
 800522e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005238:	68bb      	ldr	r3, [r7, #8]
 800523a:	2b05      	cmp	r3, #5
 800523c:	dc18      	bgt.n	8005270 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800523e:	f7ff feb5 	bl	8004fac <xTaskGetSchedulerState>
 8005242:	4603      	mov	r3, r0
 8005244:	2b02      	cmp	r3, #2
 8005246:	d109      	bne.n	800525c <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005248:	4b10      	ldr	r3, [pc, #64]	; (800528c <xTimerGenericCommand+0x94>)
 800524a:	6818      	ldr	r0, [r3, #0]
 800524c:	f107 0110 	add.w	r1, r7, #16
 8005250:	2300      	movs	r3, #0
 8005252:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005254:	f7fe fc40 	bl	8003ad8 <xQueueGenericSend>
 8005258:	6278      	str	r0, [r7, #36]	; 0x24
 800525a:	e012      	b.n	8005282 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800525c:	4b0b      	ldr	r3, [pc, #44]	; (800528c <xTimerGenericCommand+0x94>)
 800525e:	6818      	ldr	r0, [r3, #0]
 8005260:	f107 0110 	add.w	r1, r7, #16
 8005264:	2300      	movs	r3, #0
 8005266:	2200      	movs	r2, #0
 8005268:	f7fe fc36 	bl	8003ad8 <xQueueGenericSend>
 800526c:	6278      	str	r0, [r7, #36]	; 0x24
 800526e:	e008      	b.n	8005282 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005270:	4b06      	ldr	r3, [pc, #24]	; (800528c <xTimerGenericCommand+0x94>)
 8005272:	6818      	ldr	r0, [r3, #0]
 8005274:	f107 0110 	add.w	r1, r7, #16
 8005278:	2300      	movs	r3, #0
 800527a:	683a      	ldr	r2, [r7, #0]
 800527c:	f7fe fd26 	bl	8003ccc <xQueueGenericSendFromISR>
 8005280:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005284:	4618      	mov	r0, r3
 8005286:	3728      	adds	r7, #40	; 0x28
 8005288:	46bd      	mov	sp, r7
 800528a:	bd80      	pop	{r7, pc}
 800528c:	20000c7c 	.word	0x20000c7c

08005290 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005290:	b580      	push	{r7, lr}
 8005292:	b088      	sub	sp, #32
 8005294:	af02      	add	r7, sp, #8
 8005296:	6078      	str	r0, [r7, #4]
 8005298:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800529a:	4b1c      	ldr	r3, [pc, #112]	; (800530c <prvProcessExpiredTimer+0x7c>)
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	68db      	ldr	r3, [r3, #12]
 80052a0:	68db      	ldr	r3, [r3, #12]
 80052a2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80052a4:	697b      	ldr	r3, [r7, #20]
 80052a6:	3304      	adds	r3, #4
 80052a8:	4618      	mov	r0, r3
 80052aa:	f7fe faed 	bl	8003888 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80052ae:	697b      	ldr	r3, [r7, #20]
 80052b0:	69db      	ldr	r3, [r3, #28]
 80052b2:	2b01      	cmp	r3, #1
 80052b4:	d121      	bne.n	80052fa <prvProcessExpiredTimer+0x6a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80052b6:	697b      	ldr	r3, [r7, #20]
 80052b8:	699a      	ldr	r2, [r3, #24]
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	18d1      	adds	r1, r2, r3
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	683a      	ldr	r2, [r7, #0]
 80052c2:	6978      	ldr	r0, [r7, #20]
 80052c4:	f000 f8c8 	bl	8005458 <prvInsertTimerInActiveList>
 80052c8:	4603      	mov	r3, r0
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d015      	beq.n	80052fa <prvProcessExpiredTimer+0x6a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80052ce:	2300      	movs	r3, #0
 80052d0:	9300      	str	r3, [sp, #0]
 80052d2:	2300      	movs	r3, #0
 80052d4:	687a      	ldr	r2, [r7, #4]
 80052d6:	2100      	movs	r1, #0
 80052d8:	6978      	ldr	r0, [r7, #20]
 80052da:	f7ff ff8d 	bl	80051f8 <xTimerGenericCommand>
 80052de:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80052e0:	693b      	ldr	r3, [r7, #16]
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d109      	bne.n	80052fa <prvProcessExpiredTimer+0x6a>
 80052e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052ea:	f383 8811 	msr	BASEPRI, r3
 80052ee:	f3bf 8f6f 	isb	sy
 80052f2:	f3bf 8f4f 	dsb	sy
 80052f6:	60fb      	str	r3, [r7, #12]
 80052f8:	e7fe      	b.n	80052f8 <prvProcessExpiredTimer+0x68>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80052fa:	697b      	ldr	r3, [r7, #20]
 80052fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052fe:	6978      	ldr	r0, [r7, #20]
 8005300:	4798      	blx	r3
}
 8005302:	bf00      	nop
 8005304:	3718      	adds	r7, #24
 8005306:	46bd      	mov	sp, r7
 8005308:	bd80      	pop	{r7, pc}
 800530a:	bf00      	nop
 800530c:	20000c74 	.word	0x20000c74

08005310 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8005310:	b580      	push	{r7, lr}
 8005312:	b084      	sub	sp, #16
 8005314:	af00      	add	r7, sp, #0
 8005316:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005318:	f107 0308 	add.w	r3, r7, #8
 800531c:	4618      	mov	r0, r3
 800531e:	f000 f857 	bl	80053d0 <prvGetNextExpireTime>
 8005322:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005324:	68bb      	ldr	r3, [r7, #8]
 8005326:	4619      	mov	r1, r3
 8005328:	68f8      	ldr	r0, [r7, #12]
 800532a:	f000 f803 	bl	8005334 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800532e:	f000 f8d5 	bl	80054dc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005332:	e7f1      	b.n	8005318 <prvTimerTask+0x8>

08005334 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005334:	b580      	push	{r7, lr}
 8005336:	b084      	sub	sp, #16
 8005338:	af00      	add	r7, sp, #0
 800533a:	6078      	str	r0, [r7, #4]
 800533c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800533e:	f7ff fa57 	bl	80047f0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005342:	f107 0308 	add.w	r3, r7, #8
 8005346:	4618      	mov	r0, r3
 8005348:	f000 f866 	bl	8005418 <prvSampleTimeNow>
 800534c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800534e:	68bb      	ldr	r3, [r7, #8]
 8005350:	2b00      	cmp	r3, #0
 8005352:	d130      	bne.n	80053b6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005354:	683b      	ldr	r3, [r7, #0]
 8005356:	2b00      	cmp	r3, #0
 8005358:	d10a      	bne.n	8005370 <prvProcessTimerOrBlockTask+0x3c>
 800535a:	687a      	ldr	r2, [r7, #4]
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	429a      	cmp	r2, r3
 8005360:	d806      	bhi.n	8005370 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8005362:	f7ff fa53 	bl	800480c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005366:	68f9      	ldr	r1, [r7, #12]
 8005368:	6878      	ldr	r0, [r7, #4]
 800536a:	f7ff ff91 	bl	8005290 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800536e:	e024      	b.n	80053ba <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005370:	683b      	ldr	r3, [r7, #0]
 8005372:	2b00      	cmp	r3, #0
 8005374:	d008      	beq.n	8005388 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005376:	4b13      	ldr	r3, [pc, #76]	; (80053c4 <prvProcessTimerOrBlockTask+0x90>)
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	2b00      	cmp	r3, #0
 800537e:	bf0c      	ite	eq
 8005380:	2301      	moveq	r3, #1
 8005382:	2300      	movne	r3, #0
 8005384:	b2db      	uxtb	r3, r3
 8005386:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005388:	4b0f      	ldr	r3, [pc, #60]	; (80053c8 <prvProcessTimerOrBlockTask+0x94>)
 800538a:	6818      	ldr	r0, [r3, #0]
 800538c:	687a      	ldr	r2, [r7, #4]
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	1ad3      	subs	r3, r2, r3
 8005392:	683a      	ldr	r2, [r7, #0]
 8005394:	4619      	mov	r1, r3
 8005396:	f7fe ffcb 	bl	8004330 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800539a:	f7ff fa37 	bl	800480c <xTaskResumeAll>
 800539e:	4603      	mov	r3, r0
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d10a      	bne.n	80053ba <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80053a4:	4b09      	ldr	r3, [pc, #36]	; (80053cc <prvProcessTimerOrBlockTask+0x98>)
 80053a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80053aa:	601a      	str	r2, [r3, #0]
 80053ac:	f3bf 8f4f 	dsb	sy
 80053b0:	f3bf 8f6f 	isb	sy
}
 80053b4:	e001      	b.n	80053ba <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80053b6:	f7ff fa29 	bl	800480c <xTaskResumeAll>
}
 80053ba:	bf00      	nop
 80053bc:	3710      	adds	r7, #16
 80053be:	46bd      	mov	sp, r7
 80053c0:	bd80      	pop	{r7, pc}
 80053c2:	bf00      	nop
 80053c4:	20000c78 	.word	0x20000c78
 80053c8:	20000c7c 	.word	0x20000c7c
 80053cc:	e000ed04 	.word	0xe000ed04

080053d0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80053d0:	b480      	push	{r7}
 80053d2:	b085      	sub	sp, #20
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80053d8:	4b0e      	ldr	r3, [pc, #56]	; (8005414 <prvGetNextExpireTime+0x44>)
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	2b00      	cmp	r3, #0
 80053e0:	bf0c      	ite	eq
 80053e2:	2301      	moveq	r3, #1
 80053e4:	2300      	movne	r3, #0
 80053e6:	b2db      	uxtb	r3, r3
 80053e8:	461a      	mov	r2, r3
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d105      	bne.n	8005402 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80053f6:	4b07      	ldr	r3, [pc, #28]	; (8005414 <prvGetNextExpireTime+0x44>)
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	68db      	ldr	r3, [r3, #12]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	60fb      	str	r3, [r7, #12]
 8005400:	e001      	b.n	8005406 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005402:	2300      	movs	r3, #0
 8005404:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005406:	68fb      	ldr	r3, [r7, #12]
}
 8005408:	4618      	mov	r0, r3
 800540a:	3714      	adds	r7, #20
 800540c:	46bd      	mov	sp, r7
 800540e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005412:	4770      	bx	lr
 8005414:	20000c74 	.word	0x20000c74

08005418 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005418:	b580      	push	{r7, lr}
 800541a:	b084      	sub	sp, #16
 800541c:	af00      	add	r7, sp, #0
 800541e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005420:	f7ff fa90 	bl	8004944 <xTaskGetTickCount>
 8005424:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8005426:	4b0b      	ldr	r3, [pc, #44]	; (8005454 <prvSampleTimeNow+0x3c>)
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	68fa      	ldr	r2, [r7, #12]
 800542c:	429a      	cmp	r2, r3
 800542e:	d205      	bcs.n	800543c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005430:	f000 f904 	bl	800563c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	2201      	movs	r2, #1
 8005438:	601a      	str	r2, [r3, #0]
 800543a:	e002      	b.n	8005442 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	2200      	movs	r2, #0
 8005440:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005442:	4a04      	ldr	r2, [pc, #16]	; (8005454 <prvSampleTimeNow+0x3c>)
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005448:	68fb      	ldr	r3, [r7, #12]
}
 800544a:	4618      	mov	r0, r3
 800544c:	3710      	adds	r7, #16
 800544e:	46bd      	mov	sp, r7
 8005450:	bd80      	pop	{r7, pc}
 8005452:	bf00      	nop
 8005454:	20000c84 	.word	0x20000c84

08005458 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005458:	b580      	push	{r7, lr}
 800545a:	b086      	sub	sp, #24
 800545c:	af00      	add	r7, sp, #0
 800545e:	60f8      	str	r0, [r7, #12]
 8005460:	60b9      	str	r1, [r7, #8]
 8005462:	607a      	str	r2, [r7, #4]
 8005464:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8005466:	2300      	movs	r3, #0
 8005468:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	68ba      	ldr	r2, [r7, #8]
 800546e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	68fa      	ldr	r2, [r7, #12]
 8005474:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8005476:	68ba      	ldr	r2, [r7, #8]
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	429a      	cmp	r2, r3
 800547c:	d812      	bhi.n	80054a4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800547e:	687a      	ldr	r2, [r7, #4]
 8005480:	683b      	ldr	r3, [r7, #0]
 8005482:	1ad2      	subs	r2, r2, r3
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	699b      	ldr	r3, [r3, #24]
 8005488:	429a      	cmp	r2, r3
 800548a:	d302      	bcc.n	8005492 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800548c:	2301      	movs	r3, #1
 800548e:	617b      	str	r3, [r7, #20]
 8005490:	e01b      	b.n	80054ca <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005492:	4b10      	ldr	r3, [pc, #64]	; (80054d4 <prvInsertTimerInActiveList+0x7c>)
 8005494:	681a      	ldr	r2, [r3, #0]
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	3304      	adds	r3, #4
 800549a:	4619      	mov	r1, r3
 800549c:	4610      	mov	r0, r2
 800549e:	f7fe f9ba 	bl	8003816 <vListInsert>
 80054a2:	e012      	b.n	80054ca <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80054a4:	687a      	ldr	r2, [r7, #4]
 80054a6:	683b      	ldr	r3, [r7, #0]
 80054a8:	429a      	cmp	r2, r3
 80054aa:	d206      	bcs.n	80054ba <prvInsertTimerInActiveList+0x62>
 80054ac:	68ba      	ldr	r2, [r7, #8]
 80054ae:	683b      	ldr	r3, [r7, #0]
 80054b0:	429a      	cmp	r2, r3
 80054b2:	d302      	bcc.n	80054ba <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80054b4:	2301      	movs	r3, #1
 80054b6:	617b      	str	r3, [r7, #20]
 80054b8:	e007      	b.n	80054ca <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80054ba:	4b07      	ldr	r3, [pc, #28]	; (80054d8 <prvInsertTimerInActiveList+0x80>)
 80054bc:	681a      	ldr	r2, [r3, #0]
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	3304      	adds	r3, #4
 80054c2:	4619      	mov	r1, r3
 80054c4:	4610      	mov	r0, r2
 80054c6:	f7fe f9a6 	bl	8003816 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80054ca:	697b      	ldr	r3, [r7, #20]
}
 80054cc:	4618      	mov	r0, r3
 80054ce:	3718      	adds	r7, #24
 80054d0:	46bd      	mov	sp, r7
 80054d2:	bd80      	pop	{r7, pc}
 80054d4:	20000c78 	.word	0x20000c78
 80054d8:	20000c74 	.word	0x20000c74

080054dc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80054dc:	b580      	push	{r7, lr}
 80054de:	b08e      	sub	sp, #56	; 0x38
 80054e0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80054e2:	e099      	b.n	8005618 <prvProcessReceivedCommands+0x13c>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	da17      	bge.n	800551a <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80054ea:	1d3b      	adds	r3, r7, #4
 80054ec:	3304      	adds	r3, #4
 80054ee:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80054f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d109      	bne.n	800550a <prvProcessReceivedCommands+0x2e>
 80054f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054fa:	f383 8811 	msr	BASEPRI, r3
 80054fe:	f3bf 8f6f 	isb	sy
 8005502:	f3bf 8f4f 	dsb	sy
 8005506:	61fb      	str	r3, [r7, #28]
 8005508:	e7fe      	b.n	8005508 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800550a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005510:	6850      	ldr	r0, [r2, #4]
 8005512:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005514:	6892      	ldr	r2, [r2, #8]
 8005516:	4611      	mov	r1, r2
 8005518:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	2b00      	cmp	r3, #0
 800551e:	db7a      	blt.n	8005616 <prvProcessReceivedCommands+0x13a>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005524:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005526:	695b      	ldr	r3, [r3, #20]
 8005528:	2b00      	cmp	r3, #0
 800552a:	d004      	beq.n	8005536 <prvProcessReceivedCommands+0x5a>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800552c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800552e:	3304      	adds	r3, #4
 8005530:	4618      	mov	r0, r3
 8005532:	f7fe f9a9 	bl	8003888 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005536:	463b      	mov	r3, r7
 8005538:	4618      	mov	r0, r3
 800553a:	f7ff ff6d 	bl	8005418 <prvSampleTimeNow>
 800553e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	2b09      	cmp	r3, #9
 8005544:	d868      	bhi.n	8005618 <prvProcessReceivedCommands+0x13c>
 8005546:	a201      	add	r2, pc, #4	; (adr r2, 800554c <prvProcessReceivedCommands+0x70>)
 8005548:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800554c:	08005575 	.word	0x08005575
 8005550:	08005575 	.word	0x08005575
 8005554:	08005575 	.word	0x08005575
 8005558:	08005619 	.word	0x08005619
 800555c:	080055cf 	.word	0x080055cf
 8005560:	08005605 	.word	0x08005605
 8005564:	08005575 	.word	0x08005575
 8005568:	08005575 	.word	0x08005575
 800556c:	08005619 	.word	0x08005619
 8005570:	080055cf 	.word	0x080055cf
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005574:	68ba      	ldr	r2, [r7, #8]
 8005576:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005578:	699b      	ldr	r3, [r3, #24]
 800557a:	18d1      	adds	r1, r2, r3
 800557c:	68bb      	ldr	r3, [r7, #8]
 800557e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005580:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005582:	f7ff ff69 	bl	8005458 <prvInsertTimerInActiveList>
 8005586:	4603      	mov	r3, r0
 8005588:	2b00      	cmp	r3, #0
 800558a:	d045      	beq.n	8005618 <prvProcessReceivedCommands+0x13c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800558c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800558e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005590:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005592:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8005594:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005596:	69db      	ldr	r3, [r3, #28]
 8005598:	2b01      	cmp	r3, #1
 800559a:	d13d      	bne.n	8005618 <prvProcessReceivedCommands+0x13c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800559c:	68ba      	ldr	r2, [r7, #8]
 800559e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055a0:	699b      	ldr	r3, [r3, #24]
 80055a2:	441a      	add	r2, r3
 80055a4:	2300      	movs	r3, #0
 80055a6:	9300      	str	r3, [sp, #0]
 80055a8:	2300      	movs	r3, #0
 80055aa:	2100      	movs	r1, #0
 80055ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80055ae:	f7ff fe23 	bl	80051f8 <xTimerGenericCommand>
 80055b2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80055b4:	6a3b      	ldr	r3, [r7, #32]
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d12e      	bne.n	8005618 <prvProcessReceivedCommands+0x13c>
 80055ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055be:	f383 8811 	msr	BASEPRI, r3
 80055c2:	f3bf 8f6f 	isb	sy
 80055c6:	f3bf 8f4f 	dsb	sy
 80055ca:	61bb      	str	r3, [r7, #24]
 80055cc:	e7fe      	b.n	80055cc <prvProcessReceivedCommands+0xf0>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80055ce:	68ba      	ldr	r2, [r7, #8]
 80055d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055d2:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80055d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055d6:	699b      	ldr	r3, [r3, #24]
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d109      	bne.n	80055f0 <prvProcessReceivedCommands+0x114>
 80055dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055e0:	f383 8811 	msr	BASEPRI, r3
 80055e4:	f3bf 8f6f 	isb	sy
 80055e8:	f3bf 8f4f 	dsb	sy
 80055ec:	617b      	str	r3, [r7, #20]
 80055ee:	e7fe      	b.n	80055ee <prvProcessReceivedCommands+0x112>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80055f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055f2:	699a      	ldr	r2, [r3, #24]
 80055f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055f6:	18d1      	adds	r1, r2, r3
 80055f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80055fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80055fe:	f7ff ff2b 	bl	8005458 <prvInsertTimerInActiveList>
					break;
 8005602:	e009      	b.n	8005618 <prvProcessReceivedCommands+0x13c>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8005604:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005606:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800560a:	2b00      	cmp	r3, #0
 800560c:	d104      	bne.n	8005618 <prvProcessReceivedCommands+0x13c>
						{
							vPortFree( pxTimer );
 800560e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005610:	f000 fbb8 	bl	8005d84 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8005614:	e000      	b.n	8005618 <prvProcessReceivedCommands+0x13c>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8005616:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005618:	4b07      	ldr	r3, [pc, #28]	; (8005638 <prvProcessReceivedCommands+0x15c>)
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	1d39      	adds	r1, r7, #4
 800561e:	2200      	movs	r2, #0
 8005620:	4618      	mov	r0, r3
 8005622:	f7fe fc71 	bl	8003f08 <xQueueReceive>
 8005626:	4603      	mov	r3, r0
 8005628:	2b00      	cmp	r3, #0
 800562a:	f47f af5b 	bne.w	80054e4 <prvProcessReceivedCommands+0x8>
	}
}
 800562e:	bf00      	nop
 8005630:	3730      	adds	r7, #48	; 0x30
 8005632:	46bd      	mov	sp, r7
 8005634:	bd80      	pop	{r7, pc}
 8005636:	bf00      	nop
 8005638:	20000c7c 	.word	0x20000c7c

0800563c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800563c:	b580      	push	{r7, lr}
 800563e:	b088      	sub	sp, #32
 8005640:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005642:	e044      	b.n	80056ce <prvSwitchTimerLists+0x92>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005644:	4b2b      	ldr	r3, [pc, #172]	; (80056f4 <prvSwitchTimerLists+0xb8>)
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	68db      	ldr	r3, [r3, #12]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800564e:	4b29      	ldr	r3, [pc, #164]	; (80056f4 <prvSwitchTimerLists+0xb8>)
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	68db      	ldr	r3, [r3, #12]
 8005654:	68db      	ldr	r3, [r3, #12]
 8005656:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	3304      	adds	r3, #4
 800565c:	4618      	mov	r0, r3
 800565e:	f7fe f913 	bl	8003888 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005666:	68f8      	ldr	r0, [r7, #12]
 8005668:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	69db      	ldr	r3, [r3, #28]
 800566e:	2b01      	cmp	r3, #1
 8005670:	d12d      	bne.n	80056ce <prvSwitchTimerLists+0x92>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	699b      	ldr	r3, [r3, #24]
 8005676:	693a      	ldr	r2, [r7, #16]
 8005678:	4413      	add	r3, r2
 800567a:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800567c:	68ba      	ldr	r2, [r7, #8]
 800567e:	693b      	ldr	r3, [r7, #16]
 8005680:	429a      	cmp	r2, r3
 8005682:	d90e      	bls.n	80056a2 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	68ba      	ldr	r2, [r7, #8]
 8005688:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	68fa      	ldr	r2, [r7, #12]
 800568e:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005690:	4b18      	ldr	r3, [pc, #96]	; (80056f4 <prvSwitchTimerLists+0xb8>)
 8005692:	681a      	ldr	r2, [r3, #0]
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	3304      	adds	r3, #4
 8005698:	4619      	mov	r1, r3
 800569a:	4610      	mov	r0, r2
 800569c:	f7fe f8bb 	bl	8003816 <vListInsert>
 80056a0:	e015      	b.n	80056ce <prvSwitchTimerLists+0x92>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80056a2:	2300      	movs	r3, #0
 80056a4:	9300      	str	r3, [sp, #0]
 80056a6:	2300      	movs	r3, #0
 80056a8:	693a      	ldr	r2, [r7, #16]
 80056aa:	2100      	movs	r1, #0
 80056ac:	68f8      	ldr	r0, [r7, #12]
 80056ae:	f7ff fda3 	bl	80051f8 <xTimerGenericCommand>
 80056b2:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d109      	bne.n	80056ce <prvSwitchTimerLists+0x92>
 80056ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056be:	f383 8811 	msr	BASEPRI, r3
 80056c2:	f3bf 8f6f 	isb	sy
 80056c6:	f3bf 8f4f 	dsb	sy
 80056ca:	603b      	str	r3, [r7, #0]
 80056cc:	e7fe      	b.n	80056cc <prvSwitchTimerLists+0x90>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80056ce:	4b09      	ldr	r3, [pc, #36]	; (80056f4 <prvSwitchTimerLists+0xb8>)
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d1b5      	bne.n	8005644 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80056d8:	4b06      	ldr	r3, [pc, #24]	; (80056f4 <prvSwitchTimerLists+0xb8>)
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80056de:	4b06      	ldr	r3, [pc, #24]	; (80056f8 <prvSwitchTimerLists+0xbc>)
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	4a04      	ldr	r2, [pc, #16]	; (80056f4 <prvSwitchTimerLists+0xb8>)
 80056e4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80056e6:	4a04      	ldr	r2, [pc, #16]	; (80056f8 <prvSwitchTimerLists+0xbc>)
 80056e8:	697b      	ldr	r3, [r7, #20]
 80056ea:	6013      	str	r3, [r2, #0]
}
 80056ec:	bf00      	nop
 80056ee:	3718      	adds	r7, #24
 80056f0:	46bd      	mov	sp, r7
 80056f2:	bd80      	pop	{r7, pc}
 80056f4:	20000c74 	.word	0x20000c74
 80056f8:	20000c78 	.word	0x20000c78

080056fc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80056fc:	b580      	push	{r7, lr}
 80056fe:	b082      	sub	sp, #8
 8005700:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005702:	f000 f963 	bl	80059cc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8005706:	4b15      	ldr	r3, [pc, #84]	; (800575c <prvCheckForValidListAndQueue+0x60>)
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	2b00      	cmp	r3, #0
 800570c:	d120      	bne.n	8005750 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800570e:	4814      	ldr	r0, [pc, #80]	; (8005760 <prvCheckForValidListAndQueue+0x64>)
 8005710:	f7fe f830 	bl	8003774 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005714:	4813      	ldr	r0, [pc, #76]	; (8005764 <prvCheckForValidListAndQueue+0x68>)
 8005716:	f7fe f82d 	bl	8003774 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800571a:	4b13      	ldr	r3, [pc, #76]	; (8005768 <prvCheckForValidListAndQueue+0x6c>)
 800571c:	4a10      	ldr	r2, [pc, #64]	; (8005760 <prvCheckForValidListAndQueue+0x64>)
 800571e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005720:	4b12      	ldr	r3, [pc, #72]	; (800576c <prvCheckForValidListAndQueue+0x70>)
 8005722:	4a10      	ldr	r2, [pc, #64]	; (8005764 <prvCheckForValidListAndQueue+0x68>)
 8005724:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005726:	2300      	movs	r3, #0
 8005728:	9300      	str	r3, [sp, #0]
 800572a:	4b11      	ldr	r3, [pc, #68]	; (8005770 <prvCheckForValidListAndQueue+0x74>)
 800572c:	4a11      	ldr	r2, [pc, #68]	; (8005774 <prvCheckForValidListAndQueue+0x78>)
 800572e:	2110      	movs	r1, #16
 8005730:	200a      	movs	r0, #10
 8005732:	f7fe f93b 	bl	80039ac <xQueueGenericCreateStatic>
 8005736:	4602      	mov	r2, r0
 8005738:	4b08      	ldr	r3, [pc, #32]	; (800575c <prvCheckForValidListAndQueue+0x60>)
 800573a:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800573c:	4b07      	ldr	r3, [pc, #28]	; (800575c <prvCheckForValidListAndQueue+0x60>)
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	2b00      	cmp	r3, #0
 8005742:	d005      	beq.n	8005750 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005744:	4b05      	ldr	r3, [pc, #20]	; (800575c <prvCheckForValidListAndQueue+0x60>)
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	490b      	ldr	r1, [pc, #44]	; (8005778 <prvCheckForValidListAndQueue+0x7c>)
 800574a:	4618      	mov	r0, r3
 800574c:	f7fe fdc8 	bl	80042e0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005750:	f000 f96a 	bl	8005a28 <vPortExitCritical>
}
 8005754:	bf00      	nop
 8005756:	46bd      	mov	sp, r7
 8005758:	bd80      	pop	{r7, pc}
 800575a:	bf00      	nop
 800575c:	20000c7c 	.word	0x20000c7c
 8005760:	20000c4c 	.word	0x20000c4c
 8005764:	20000c60 	.word	0x20000c60
 8005768:	20000c74 	.word	0x20000c74
 800576c:	20000c78 	.word	0x20000c78
 8005770:	20000d28 	.word	0x20000d28
 8005774:	20000c88 	.word	0x20000c88
 8005778:	080076c8 	.word	0x080076c8

0800577c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800577c:	b480      	push	{r7}
 800577e:	b085      	sub	sp, #20
 8005780:	af00      	add	r7, sp, #0
 8005782:	60f8      	str	r0, [r7, #12]
 8005784:	60b9      	str	r1, [r7, #8]
 8005786:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	3b04      	subs	r3, #4
 800578c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005794:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	3b04      	subs	r3, #4
 800579a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800579c:	68bb      	ldr	r3, [r7, #8]
 800579e:	f023 0201 	bic.w	r2, r3, #1
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	3b04      	subs	r3, #4
 80057aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80057ac:	4a0c      	ldr	r2, [pc, #48]	; (80057e0 <pxPortInitialiseStack+0x64>)
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	3b14      	subs	r3, #20
 80057b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80057b8:	687a      	ldr	r2, [r7, #4]
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	3b04      	subs	r3, #4
 80057c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	f06f 0202 	mvn.w	r2, #2
 80057ca:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	3b20      	subs	r3, #32
 80057d0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80057d2:	68fb      	ldr	r3, [r7, #12]
}
 80057d4:	4618      	mov	r0, r3
 80057d6:	3714      	adds	r7, #20
 80057d8:	46bd      	mov	sp, r7
 80057da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057de:	4770      	bx	lr
 80057e0:	080057e5 	.word	0x080057e5

080057e4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80057e4:	b480      	push	{r7}
 80057e6:	b085      	sub	sp, #20
 80057e8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80057ea:	2300      	movs	r3, #0
 80057ec:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80057ee:	4b11      	ldr	r3, [pc, #68]	; (8005834 <prvTaskExitError+0x50>)
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057f6:	d009      	beq.n	800580c <prvTaskExitError+0x28>
 80057f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057fc:	f383 8811 	msr	BASEPRI, r3
 8005800:	f3bf 8f6f 	isb	sy
 8005804:	f3bf 8f4f 	dsb	sy
 8005808:	60fb      	str	r3, [r7, #12]
 800580a:	e7fe      	b.n	800580a <prvTaskExitError+0x26>
 800580c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005810:	f383 8811 	msr	BASEPRI, r3
 8005814:	f3bf 8f6f 	isb	sy
 8005818:	f3bf 8f4f 	dsb	sy
 800581c:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800581e:	bf00      	nop
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	2b00      	cmp	r3, #0
 8005824:	d0fc      	beq.n	8005820 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005826:	bf00      	nop
 8005828:	3714      	adds	r7, #20
 800582a:	46bd      	mov	sp, r7
 800582c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005830:	4770      	bx	lr
 8005832:	bf00      	nop
 8005834:	20000008 	.word	0x20000008
	...

08005840 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005840:	4b07      	ldr	r3, [pc, #28]	; (8005860 <pxCurrentTCBConst2>)
 8005842:	6819      	ldr	r1, [r3, #0]
 8005844:	6808      	ldr	r0, [r1, #0]
 8005846:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800584a:	f380 8809 	msr	PSP, r0
 800584e:	f3bf 8f6f 	isb	sy
 8005852:	f04f 0000 	mov.w	r0, #0
 8005856:	f380 8811 	msr	BASEPRI, r0
 800585a:	4770      	bx	lr
 800585c:	f3af 8000 	nop.w

08005860 <pxCurrentTCBConst2>:
 8005860:	2000074c 	.word	0x2000074c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005864:	bf00      	nop
 8005866:	bf00      	nop

08005868 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005868:	4808      	ldr	r0, [pc, #32]	; (800588c <prvPortStartFirstTask+0x24>)
 800586a:	6800      	ldr	r0, [r0, #0]
 800586c:	6800      	ldr	r0, [r0, #0]
 800586e:	f380 8808 	msr	MSP, r0
 8005872:	f04f 0000 	mov.w	r0, #0
 8005876:	f380 8814 	msr	CONTROL, r0
 800587a:	b662      	cpsie	i
 800587c:	b661      	cpsie	f
 800587e:	f3bf 8f4f 	dsb	sy
 8005882:	f3bf 8f6f 	isb	sy
 8005886:	df00      	svc	0
 8005888:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800588a:	bf00      	nop
 800588c:	e000ed08 	.word	0xe000ed08

08005890 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005890:	b580      	push	{r7, lr}
 8005892:	b086      	sub	sp, #24
 8005894:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005896:	4b44      	ldr	r3, [pc, #272]	; (80059a8 <xPortStartScheduler+0x118>)
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	4a44      	ldr	r2, [pc, #272]	; (80059ac <xPortStartScheduler+0x11c>)
 800589c:	4293      	cmp	r3, r2
 800589e:	d109      	bne.n	80058b4 <xPortStartScheduler+0x24>
 80058a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058a4:	f383 8811 	msr	BASEPRI, r3
 80058a8:	f3bf 8f6f 	isb	sy
 80058ac:	f3bf 8f4f 	dsb	sy
 80058b0:	613b      	str	r3, [r7, #16]
 80058b2:	e7fe      	b.n	80058b2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80058b4:	4b3c      	ldr	r3, [pc, #240]	; (80059a8 <xPortStartScheduler+0x118>)
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	4a3d      	ldr	r2, [pc, #244]	; (80059b0 <xPortStartScheduler+0x120>)
 80058ba:	4293      	cmp	r3, r2
 80058bc:	d109      	bne.n	80058d2 <xPortStartScheduler+0x42>
 80058be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058c2:	f383 8811 	msr	BASEPRI, r3
 80058c6:	f3bf 8f6f 	isb	sy
 80058ca:	f3bf 8f4f 	dsb	sy
 80058ce:	60fb      	str	r3, [r7, #12]
 80058d0:	e7fe      	b.n	80058d0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80058d2:	4b38      	ldr	r3, [pc, #224]	; (80059b4 <xPortStartScheduler+0x124>)
 80058d4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80058d6:	697b      	ldr	r3, [r7, #20]
 80058d8:	781b      	ldrb	r3, [r3, #0]
 80058da:	b2db      	uxtb	r3, r3
 80058dc:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80058de:	697b      	ldr	r3, [r7, #20]
 80058e0:	22ff      	movs	r2, #255	; 0xff
 80058e2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80058e4:	697b      	ldr	r3, [r7, #20]
 80058e6:	781b      	ldrb	r3, [r3, #0]
 80058e8:	b2db      	uxtb	r3, r3
 80058ea:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80058ec:	78fb      	ldrb	r3, [r7, #3]
 80058ee:	b2db      	uxtb	r3, r3
 80058f0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80058f4:	b2da      	uxtb	r2, r3
 80058f6:	4b30      	ldr	r3, [pc, #192]	; (80059b8 <xPortStartScheduler+0x128>)
 80058f8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80058fa:	4b30      	ldr	r3, [pc, #192]	; (80059bc <xPortStartScheduler+0x12c>)
 80058fc:	2207      	movs	r2, #7
 80058fe:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005900:	e009      	b.n	8005916 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8005902:	4b2e      	ldr	r3, [pc, #184]	; (80059bc <xPortStartScheduler+0x12c>)
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	3b01      	subs	r3, #1
 8005908:	4a2c      	ldr	r2, [pc, #176]	; (80059bc <xPortStartScheduler+0x12c>)
 800590a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800590c:	78fb      	ldrb	r3, [r7, #3]
 800590e:	b2db      	uxtb	r3, r3
 8005910:	005b      	lsls	r3, r3, #1
 8005912:	b2db      	uxtb	r3, r3
 8005914:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005916:	78fb      	ldrb	r3, [r7, #3]
 8005918:	b2db      	uxtb	r3, r3
 800591a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800591e:	2b80      	cmp	r3, #128	; 0x80
 8005920:	d0ef      	beq.n	8005902 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005922:	4b26      	ldr	r3, [pc, #152]	; (80059bc <xPortStartScheduler+0x12c>)
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	f1c3 0307 	rsb	r3, r3, #7
 800592a:	2b04      	cmp	r3, #4
 800592c:	d009      	beq.n	8005942 <xPortStartScheduler+0xb2>
 800592e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005932:	f383 8811 	msr	BASEPRI, r3
 8005936:	f3bf 8f6f 	isb	sy
 800593a:	f3bf 8f4f 	dsb	sy
 800593e:	60bb      	str	r3, [r7, #8]
 8005940:	e7fe      	b.n	8005940 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005942:	4b1e      	ldr	r3, [pc, #120]	; (80059bc <xPortStartScheduler+0x12c>)
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	021b      	lsls	r3, r3, #8
 8005948:	4a1c      	ldr	r2, [pc, #112]	; (80059bc <xPortStartScheduler+0x12c>)
 800594a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800594c:	4b1b      	ldr	r3, [pc, #108]	; (80059bc <xPortStartScheduler+0x12c>)
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005954:	4a19      	ldr	r2, [pc, #100]	; (80059bc <xPortStartScheduler+0x12c>)
 8005956:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	b2da      	uxtb	r2, r3
 800595c:	697b      	ldr	r3, [r7, #20]
 800595e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005960:	4b17      	ldr	r3, [pc, #92]	; (80059c0 <xPortStartScheduler+0x130>)
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	4a16      	ldr	r2, [pc, #88]	; (80059c0 <xPortStartScheduler+0x130>)
 8005966:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800596a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800596c:	4b14      	ldr	r3, [pc, #80]	; (80059c0 <xPortStartScheduler+0x130>)
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	4a13      	ldr	r2, [pc, #76]	; (80059c0 <xPortStartScheduler+0x130>)
 8005972:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005976:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005978:	f000 f8d6 	bl	8005b28 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800597c:	4b11      	ldr	r3, [pc, #68]	; (80059c4 <xPortStartScheduler+0x134>)
 800597e:	2200      	movs	r2, #0
 8005980:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005982:	f000 f8f5 	bl	8005b70 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005986:	4b10      	ldr	r3, [pc, #64]	; (80059c8 <xPortStartScheduler+0x138>)
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	4a0f      	ldr	r2, [pc, #60]	; (80059c8 <xPortStartScheduler+0x138>)
 800598c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005990:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005992:	f7ff ff69 	bl	8005868 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005996:	f7ff f8a3 	bl	8004ae0 <vTaskSwitchContext>
	prvTaskExitError();
 800599a:	f7ff ff23 	bl	80057e4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800599e:	2300      	movs	r3, #0
}
 80059a0:	4618      	mov	r0, r3
 80059a2:	3718      	adds	r7, #24
 80059a4:	46bd      	mov	sp, r7
 80059a6:	bd80      	pop	{r7, pc}
 80059a8:	e000ed00 	.word	0xe000ed00
 80059ac:	410fc271 	.word	0x410fc271
 80059b0:	410fc270 	.word	0x410fc270
 80059b4:	e000e400 	.word	0xe000e400
 80059b8:	20000d78 	.word	0x20000d78
 80059bc:	20000d7c 	.word	0x20000d7c
 80059c0:	e000ed20 	.word	0xe000ed20
 80059c4:	20000008 	.word	0x20000008
 80059c8:	e000ef34 	.word	0xe000ef34

080059cc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80059cc:	b480      	push	{r7}
 80059ce:	b083      	sub	sp, #12
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059d6:	f383 8811 	msr	BASEPRI, r3
 80059da:	f3bf 8f6f 	isb	sy
 80059de:	f3bf 8f4f 	dsb	sy
 80059e2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80059e4:	4b0e      	ldr	r3, [pc, #56]	; (8005a20 <vPortEnterCritical+0x54>)
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	3301      	adds	r3, #1
 80059ea:	4a0d      	ldr	r2, [pc, #52]	; (8005a20 <vPortEnterCritical+0x54>)
 80059ec:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80059ee:	4b0c      	ldr	r3, [pc, #48]	; (8005a20 <vPortEnterCritical+0x54>)
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	2b01      	cmp	r3, #1
 80059f4:	d10e      	bne.n	8005a14 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80059f6:	4b0b      	ldr	r3, [pc, #44]	; (8005a24 <vPortEnterCritical+0x58>)
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	b2db      	uxtb	r3, r3
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d009      	beq.n	8005a14 <vPortEnterCritical+0x48>
 8005a00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a04:	f383 8811 	msr	BASEPRI, r3
 8005a08:	f3bf 8f6f 	isb	sy
 8005a0c:	f3bf 8f4f 	dsb	sy
 8005a10:	603b      	str	r3, [r7, #0]
 8005a12:	e7fe      	b.n	8005a12 <vPortEnterCritical+0x46>
	}
}
 8005a14:	bf00      	nop
 8005a16:	370c      	adds	r7, #12
 8005a18:	46bd      	mov	sp, r7
 8005a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a1e:	4770      	bx	lr
 8005a20:	20000008 	.word	0x20000008
 8005a24:	e000ed04 	.word	0xe000ed04

08005a28 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005a28:	b480      	push	{r7}
 8005a2a:	b083      	sub	sp, #12
 8005a2c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005a2e:	4b11      	ldr	r3, [pc, #68]	; (8005a74 <vPortExitCritical+0x4c>)
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d109      	bne.n	8005a4a <vPortExitCritical+0x22>
 8005a36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a3a:	f383 8811 	msr	BASEPRI, r3
 8005a3e:	f3bf 8f6f 	isb	sy
 8005a42:	f3bf 8f4f 	dsb	sy
 8005a46:	607b      	str	r3, [r7, #4]
 8005a48:	e7fe      	b.n	8005a48 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8005a4a:	4b0a      	ldr	r3, [pc, #40]	; (8005a74 <vPortExitCritical+0x4c>)
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	3b01      	subs	r3, #1
 8005a50:	4a08      	ldr	r2, [pc, #32]	; (8005a74 <vPortExitCritical+0x4c>)
 8005a52:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005a54:	4b07      	ldr	r3, [pc, #28]	; (8005a74 <vPortExitCritical+0x4c>)
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d104      	bne.n	8005a66 <vPortExitCritical+0x3e>
 8005a5c:	2300      	movs	r3, #0
 8005a5e:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005a60:	683b      	ldr	r3, [r7, #0]
 8005a62:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8005a66:	bf00      	nop
 8005a68:	370c      	adds	r7, #12
 8005a6a:	46bd      	mov	sp, r7
 8005a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a70:	4770      	bx	lr
 8005a72:	bf00      	nop
 8005a74:	20000008 	.word	0x20000008
	...

08005a80 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005a80:	f3ef 8009 	mrs	r0, PSP
 8005a84:	f3bf 8f6f 	isb	sy
 8005a88:	4b15      	ldr	r3, [pc, #84]	; (8005ae0 <pxCurrentTCBConst>)
 8005a8a:	681a      	ldr	r2, [r3, #0]
 8005a8c:	f01e 0f10 	tst.w	lr, #16
 8005a90:	bf08      	it	eq
 8005a92:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005a96:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a9a:	6010      	str	r0, [r2, #0]
 8005a9c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005aa0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005aa4:	f380 8811 	msr	BASEPRI, r0
 8005aa8:	f3bf 8f4f 	dsb	sy
 8005aac:	f3bf 8f6f 	isb	sy
 8005ab0:	f7ff f816 	bl	8004ae0 <vTaskSwitchContext>
 8005ab4:	f04f 0000 	mov.w	r0, #0
 8005ab8:	f380 8811 	msr	BASEPRI, r0
 8005abc:	bc09      	pop	{r0, r3}
 8005abe:	6819      	ldr	r1, [r3, #0]
 8005ac0:	6808      	ldr	r0, [r1, #0]
 8005ac2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ac6:	f01e 0f10 	tst.w	lr, #16
 8005aca:	bf08      	it	eq
 8005acc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005ad0:	f380 8809 	msr	PSP, r0
 8005ad4:	f3bf 8f6f 	isb	sy
 8005ad8:	4770      	bx	lr
 8005ada:	bf00      	nop
 8005adc:	f3af 8000 	nop.w

08005ae0 <pxCurrentTCBConst>:
 8005ae0:	2000074c 	.word	0x2000074c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005ae4:	bf00      	nop
 8005ae6:	bf00      	nop

08005ae8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005ae8:	b580      	push	{r7, lr}
 8005aea:	b082      	sub	sp, #8
 8005aec:	af00      	add	r7, sp, #0
	__asm volatile
 8005aee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005af2:	f383 8811 	msr	BASEPRI, r3
 8005af6:	f3bf 8f6f 	isb	sy
 8005afa:	f3bf 8f4f 	dsb	sy
 8005afe:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005b00:	f7fe ff30 	bl	8004964 <xTaskIncrementTick>
 8005b04:	4603      	mov	r3, r0
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d003      	beq.n	8005b12 <xPortSysTickHandler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005b0a:	4b06      	ldr	r3, [pc, #24]	; (8005b24 <xPortSysTickHandler+0x3c>)
 8005b0c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b10:	601a      	str	r2, [r3, #0]
 8005b12:	2300      	movs	r3, #0
 8005b14:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005b16:	683b      	ldr	r3, [r7, #0]
 8005b18:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8005b1c:	bf00      	nop
 8005b1e:	3708      	adds	r7, #8
 8005b20:	46bd      	mov	sp, r7
 8005b22:	bd80      	pop	{r7, pc}
 8005b24:	e000ed04 	.word	0xe000ed04

08005b28 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005b28:	b480      	push	{r7}
 8005b2a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005b2c:	4b0b      	ldr	r3, [pc, #44]	; (8005b5c <vPortSetupTimerInterrupt+0x34>)
 8005b2e:	2200      	movs	r2, #0
 8005b30:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005b32:	4b0b      	ldr	r3, [pc, #44]	; (8005b60 <vPortSetupTimerInterrupt+0x38>)
 8005b34:	2200      	movs	r2, #0
 8005b36:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005b38:	4b0a      	ldr	r3, [pc, #40]	; (8005b64 <vPortSetupTimerInterrupt+0x3c>)
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	4a0a      	ldr	r2, [pc, #40]	; (8005b68 <vPortSetupTimerInterrupt+0x40>)
 8005b3e:	fba2 2303 	umull	r2, r3, r2, r3
 8005b42:	099b      	lsrs	r3, r3, #6
 8005b44:	4a09      	ldr	r2, [pc, #36]	; (8005b6c <vPortSetupTimerInterrupt+0x44>)
 8005b46:	3b01      	subs	r3, #1
 8005b48:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005b4a:	4b04      	ldr	r3, [pc, #16]	; (8005b5c <vPortSetupTimerInterrupt+0x34>)
 8005b4c:	2207      	movs	r2, #7
 8005b4e:	601a      	str	r2, [r3, #0]
}
 8005b50:	bf00      	nop
 8005b52:	46bd      	mov	sp, r7
 8005b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b58:	4770      	bx	lr
 8005b5a:	bf00      	nop
 8005b5c:	e000e010 	.word	0xe000e010
 8005b60:	e000e018 	.word	0xe000e018
 8005b64:	2000000c 	.word	0x2000000c
 8005b68:	10624dd3 	.word	0x10624dd3
 8005b6c:	e000e014 	.word	0xe000e014

08005b70 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005b70:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005b80 <vPortEnableVFP+0x10>
 8005b74:	6801      	ldr	r1, [r0, #0]
 8005b76:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8005b7a:	6001      	str	r1, [r0, #0]
 8005b7c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005b7e:	bf00      	nop
 8005b80:	e000ed88 	.word	0xe000ed88

08005b84 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005b84:	b480      	push	{r7}
 8005b86:	b085      	sub	sp, #20
 8005b88:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005b8a:	f3ef 8305 	mrs	r3, IPSR
 8005b8e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	2b0f      	cmp	r3, #15
 8005b94:	d913      	bls.n	8005bbe <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005b96:	4a16      	ldr	r2, [pc, #88]	; (8005bf0 <vPortValidateInterruptPriority+0x6c>)
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	4413      	add	r3, r2
 8005b9c:	781b      	ldrb	r3, [r3, #0]
 8005b9e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005ba0:	4b14      	ldr	r3, [pc, #80]	; (8005bf4 <vPortValidateInterruptPriority+0x70>)
 8005ba2:	781b      	ldrb	r3, [r3, #0]
 8005ba4:	7afa      	ldrb	r2, [r7, #11]
 8005ba6:	429a      	cmp	r2, r3
 8005ba8:	d209      	bcs.n	8005bbe <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8005baa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bae:	f383 8811 	msr	BASEPRI, r3
 8005bb2:	f3bf 8f6f 	isb	sy
 8005bb6:	f3bf 8f4f 	dsb	sy
 8005bba:	607b      	str	r3, [r7, #4]
 8005bbc:	e7fe      	b.n	8005bbc <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005bbe:	4b0e      	ldr	r3, [pc, #56]	; (8005bf8 <vPortValidateInterruptPriority+0x74>)
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005bc6:	4b0d      	ldr	r3, [pc, #52]	; (8005bfc <vPortValidateInterruptPriority+0x78>)
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	429a      	cmp	r2, r3
 8005bcc:	d909      	bls.n	8005be2 <vPortValidateInterruptPriority+0x5e>
 8005bce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bd2:	f383 8811 	msr	BASEPRI, r3
 8005bd6:	f3bf 8f6f 	isb	sy
 8005bda:	f3bf 8f4f 	dsb	sy
 8005bde:	603b      	str	r3, [r7, #0]
 8005be0:	e7fe      	b.n	8005be0 <vPortValidateInterruptPriority+0x5c>
	}
 8005be2:	bf00      	nop
 8005be4:	3714      	adds	r7, #20
 8005be6:	46bd      	mov	sp, r7
 8005be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bec:	4770      	bx	lr
 8005bee:	bf00      	nop
 8005bf0:	e000e3f0 	.word	0xe000e3f0
 8005bf4:	20000d78 	.word	0x20000d78
 8005bf8:	e000ed0c 	.word	0xe000ed0c
 8005bfc:	20000d7c 	.word	0x20000d7c

08005c00 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005c00:	b580      	push	{r7, lr}
 8005c02:	b08a      	sub	sp, #40	; 0x28
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005c08:	2300      	movs	r3, #0
 8005c0a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005c0c:	f7fe fdf0 	bl	80047f0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005c10:	4b57      	ldr	r3, [pc, #348]	; (8005d70 <pvPortMalloc+0x170>)
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d101      	bne.n	8005c1c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005c18:	f000 f90c 	bl	8005e34 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005c1c:	4b55      	ldr	r3, [pc, #340]	; (8005d74 <pvPortMalloc+0x174>)
 8005c1e:	681a      	ldr	r2, [r3, #0]
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	4013      	ands	r3, r2
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	f040 808c 	bne.w	8005d42 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d01c      	beq.n	8005c6a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8005c30:	2208      	movs	r2, #8
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	4413      	add	r3, r2
 8005c36:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	f003 0307 	and.w	r3, r3, #7
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d013      	beq.n	8005c6a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	f023 0307 	bic.w	r3, r3, #7
 8005c48:	3308      	adds	r3, #8
 8005c4a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	f003 0307 	and.w	r3, r3, #7
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d009      	beq.n	8005c6a <pvPortMalloc+0x6a>
 8005c56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c5a:	f383 8811 	msr	BASEPRI, r3
 8005c5e:	f3bf 8f6f 	isb	sy
 8005c62:	f3bf 8f4f 	dsb	sy
 8005c66:	617b      	str	r3, [r7, #20]
 8005c68:	e7fe      	b.n	8005c68 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d068      	beq.n	8005d42 <pvPortMalloc+0x142>
 8005c70:	4b41      	ldr	r3, [pc, #260]	; (8005d78 <pvPortMalloc+0x178>)
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	687a      	ldr	r2, [r7, #4]
 8005c76:	429a      	cmp	r2, r3
 8005c78:	d863      	bhi.n	8005d42 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005c7a:	4b40      	ldr	r3, [pc, #256]	; (8005d7c <pvPortMalloc+0x17c>)
 8005c7c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005c7e:	4b3f      	ldr	r3, [pc, #252]	; (8005d7c <pvPortMalloc+0x17c>)
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005c84:	e004      	b.n	8005c90 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8005c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c88:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c92:	685b      	ldr	r3, [r3, #4]
 8005c94:	687a      	ldr	r2, [r7, #4]
 8005c96:	429a      	cmp	r2, r3
 8005c98:	d903      	bls.n	8005ca2 <pvPortMalloc+0xa2>
 8005c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d1f1      	bne.n	8005c86 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005ca2:	4b33      	ldr	r3, [pc, #204]	; (8005d70 <pvPortMalloc+0x170>)
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ca8:	429a      	cmp	r2, r3
 8005caa:	d04a      	beq.n	8005d42 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005cac:	6a3b      	ldr	r3, [r7, #32]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	2208      	movs	r2, #8
 8005cb2:	4413      	add	r3, r2
 8005cb4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cb8:	681a      	ldr	r2, [r3, #0]
 8005cba:	6a3b      	ldr	r3, [r7, #32]
 8005cbc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cc0:	685a      	ldr	r2, [r3, #4]
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	1ad2      	subs	r2, r2, r3
 8005cc6:	2308      	movs	r3, #8
 8005cc8:	005b      	lsls	r3, r3, #1
 8005cca:	429a      	cmp	r2, r3
 8005ccc:	d91e      	bls.n	8005d0c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005cce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	4413      	add	r3, r2
 8005cd4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005cd6:	69bb      	ldr	r3, [r7, #24]
 8005cd8:	f003 0307 	and.w	r3, r3, #7
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d009      	beq.n	8005cf4 <pvPortMalloc+0xf4>
 8005ce0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ce4:	f383 8811 	msr	BASEPRI, r3
 8005ce8:	f3bf 8f6f 	isb	sy
 8005cec:	f3bf 8f4f 	dsb	sy
 8005cf0:	613b      	str	r3, [r7, #16]
 8005cf2:	e7fe      	b.n	8005cf2 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cf6:	685a      	ldr	r2, [r3, #4]
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	1ad2      	subs	r2, r2, r3
 8005cfc:	69bb      	ldr	r3, [r7, #24]
 8005cfe:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d02:	687a      	ldr	r2, [r7, #4]
 8005d04:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005d06:	69b8      	ldr	r0, [r7, #24]
 8005d08:	f000 f8f6 	bl	8005ef8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005d0c:	4b1a      	ldr	r3, [pc, #104]	; (8005d78 <pvPortMalloc+0x178>)
 8005d0e:	681a      	ldr	r2, [r3, #0]
 8005d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d12:	685b      	ldr	r3, [r3, #4]
 8005d14:	1ad3      	subs	r3, r2, r3
 8005d16:	4a18      	ldr	r2, [pc, #96]	; (8005d78 <pvPortMalloc+0x178>)
 8005d18:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005d1a:	4b17      	ldr	r3, [pc, #92]	; (8005d78 <pvPortMalloc+0x178>)
 8005d1c:	681a      	ldr	r2, [r3, #0]
 8005d1e:	4b18      	ldr	r3, [pc, #96]	; (8005d80 <pvPortMalloc+0x180>)
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	429a      	cmp	r2, r3
 8005d24:	d203      	bcs.n	8005d2e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005d26:	4b14      	ldr	r3, [pc, #80]	; (8005d78 <pvPortMalloc+0x178>)
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	4a15      	ldr	r2, [pc, #84]	; (8005d80 <pvPortMalloc+0x180>)
 8005d2c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d30:	685a      	ldr	r2, [r3, #4]
 8005d32:	4b10      	ldr	r3, [pc, #64]	; (8005d74 <pvPortMalloc+0x174>)
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	431a      	orrs	r2, r3
 8005d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d3a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d3e:	2200      	movs	r2, #0
 8005d40:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005d42:	f7fe fd63 	bl	800480c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005d46:	69fb      	ldr	r3, [r7, #28]
 8005d48:	f003 0307 	and.w	r3, r3, #7
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d009      	beq.n	8005d64 <pvPortMalloc+0x164>
 8005d50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d54:	f383 8811 	msr	BASEPRI, r3
 8005d58:	f3bf 8f6f 	isb	sy
 8005d5c:	f3bf 8f4f 	dsb	sy
 8005d60:	60fb      	str	r3, [r7, #12]
 8005d62:	e7fe      	b.n	8005d62 <pvPortMalloc+0x162>
	return pvReturn;
 8005d64:	69fb      	ldr	r3, [r7, #28]
}
 8005d66:	4618      	mov	r0, r3
 8005d68:	3728      	adds	r7, #40	; 0x28
 8005d6a:	46bd      	mov	sp, r7
 8005d6c:	bd80      	pop	{r7, pc}
 8005d6e:	bf00      	nop
 8005d70:	20001940 	.word	0x20001940
 8005d74:	2000194c 	.word	0x2000194c
 8005d78:	20001944 	.word	0x20001944
 8005d7c:	20001938 	.word	0x20001938
 8005d80:	20001948 	.word	0x20001948

08005d84 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005d84:	b580      	push	{r7, lr}
 8005d86:	b086      	sub	sp, #24
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d046      	beq.n	8005e24 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005d96:	2308      	movs	r3, #8
 8005d98:	425b      	negs	r3, r3
 8005d9a:	697a      	ldr	r2, [r7, #20]
 8005d9c:	4413      	add	r3, r2
 8005d9e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005da0:	697b      	ldr	r3, [r7, #20]
 8005da2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005da4:	693b      	ldr	r3, [r7, #16]
 8005da6:	685a      	ldr	r2, [r3, #4]
 8005da8:	4b20      	ldr	r3, [pc, #128]	; (8005e2c <vPortFree+0xa8>)
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	4013      	ands	r3, r2
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d109      	bne.n	8005dc6 <vPortFree+0x42>
 8005db2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005db6:	f383 8811 	msr	BASEPRI, r3
 8005dba:	f3bf 8f6f 	isb	sy
 8005dbe:	f3bf 8f4f 	dsb	sy
 8005dc2:	60fb      	str	r3, [r7, #12]
 8005dc4:	e7fe      	b.n	8005dc4 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005dc6:	693b      	ldr	r3, [r7, #16]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d009      	beq.n	8005de2 <vPortFree+0x5e>
 8005dce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dd2:	f383 8811 	msr	BASEPRI, r3
 8005dd6:	f3bf 8f6f 	isb	sy
 8005dda:	f3bf 8f4f 	dsb	sy
 8005dde:	60bb      	str	r3, [r7, #8]
 8005de0:	e7fe      	b.n	8005de0 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005de2:	693b      	ldr	r3, [r7, #16]
 8005de4:	685a      	ldr	r2, [r3, #4]
 8005de6:	4b11      	ldr	r3, [pc, #68]	; (8005e2c <vPortFree+0xa8>)
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	4013      	ands	r3, r2
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d019      	beq.n	8005e24 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005df0:	693b      	ldr	r3, [r7, #16]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d115      	bne.n	8005e24 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005df8:	693b      	ldr	r3, [r7, #16]
 8005dfa:	685a      	ldr	r2, [r3, #4]
 8005dfc:	4b0b      	ldr	r3, [pc, #44]	; (8005e2c <vPortFree+0xa8>)
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	43db      	mvns	r3, r3
 8005e02:	401a      	ands	r2, r3
 8005e04:	693b      	ldr	r3, [r7, #16]
 8005e06:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005e08:	f7fe fcf2 	bl	80047f0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005e0c:	693b      	ldr	r3, [r7, #16]
 8005e0e:	685a      	ldr	r2, [r3, #4]
 8005e10:	4b07      	ldr	r3, [pc, #28]	; (8005e30 <vPortFree+0xac>)
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	4413      	add	r3, r2
 8005e16:	4a06      	ldr	r2, [pc, #24]	; (8005e30 <vPortFree+0xac>)
 8005e18:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005e1a:	6938      	ldr	r0, [r7, #16]
 8005e1c:	f000 f86c 	bl	8005ef8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8005e20:	f7fe fcf4 	bl	800480c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005e24:	bf00      	nop
 8005e26:	3718      	adds	r7, #24
 8005e28:	46bd      	mov	sp, r7
 8005e2a:	bd80      	pop	{r7, pc}
 8005e2c:	2000194c 	.word	0x2000194c
 8005e30:	20001944 	.word	0x20001944

08005e34 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005e34:	b480      	push	{r7}
 8005e36:	b085      	sub	sp, #20
 8005e38:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005e3a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8005e3e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005e40:	4b27      	ldr	r3, [pc, #156]	; (8005ee0 <prvHeapInit+0xac>)
 8005e42:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	f003 0307 	and.w	r3, r3, #7
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d00c      	beq.n	8005e68 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	3307      	adds	r3, #7
 8005e52:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	f023 0307 	bic.w	r3, r3, #7
 8005e5a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005e5c:	68ba      	ldr	r2, [r7, #8]
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	1ad3      	subs	r3, r2, r3
 8005e62:	4a1f      	ldr	r2, [pc, #124]	; (8005ee0 <prvHeapInit+0xac>)
 8005e64:	4413      	add	r3, r2
 8005e66:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005e6c:	4a1d      	ldr	r2, [pc, #116]	; (8005ee4 <prvHeapInit+0xb0>)
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005e72:	4b1c      	ldr	r3, [pc, #112]	; (8005ee4 <prvHeapInit+0xb0>)
 8005e74:	2200      	movs	r2, #0
 8005e76:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	68ba      	ldr	r2, [r7, #8]
 8005e7c:	4413      	add	r3, r2
 8005e7e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005e80:	2208      	movs	r2, #8
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	1a9b      	subs	r3, r3, r2
 8005e86:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	f023 0307 	bic.w	r3, r3, #7
 8005e8e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	4a15      	ldr	r2, [pc, #84]	; (8005ee8 <prvHeapInit+0xb4>)
 8005e94:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005e96:	4b14      	ldr	r3, [pc, #80]	; (8005ee8 <prvHeapInit+0xb4>)
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	2200      	movs	r2, #0
 8005e9c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005e9e:	4b12      	ldr	r3, [pc, #72]	; (8005ee8 <prvHeapInit+0xb4>)
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	2200      	movs	r2, #0
 8005ea4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005eaa:	683b      	ldr	r3, [r7, #0]
 8005eac:	68fa      	ldr	r2, [r7, #12]
 8005eae:	1ad2      	subs	r2, r2, r3
 8005eb0:	683b      	ldr	r3, [r7, #0]
 8005eb2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005eb4:	4b0c      	ldr	r3, [pc, #48]	; (8005ee8 <prvHeapInit+0xb4>)
 8005eb6:	681a      	ldr	r2, [r3, #0]
 8005eb8:	683b      	ldr	r3, [r7, #0]
 8005eba:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005ebc:	683b      	ldr	r3, [r7, #0]
 8005ebe:	685b      	ldr	r3, [r3, #4]
 8005ec0:	4a0a      	ldr	r2, [pc, #40]	; (8005eec <prvHeapInit+0xb8>)
 8005ec2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005ec4:	683b      	ldr	r3, [r7, #0]
 8005ec6:	685b      	ldr	r3, [r3, #4]
 8005ec8:	4a09      	ldr	r2, [pc, #36]	; (8005ef0 <prvHeapInit+0xbc>)
 8005eca:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005ecc:	4b09      	ldr	r3, [pc, #36]	; (8005ef4 <prvHeapInit+0xc0>)
 8005ece:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005ed2:	601a      	str	r2, [r3, #0]
}
 8005ed4:	bf00      	nop
 8005ed6:	3714      	adds	r7, #20
 8005ed8:	46bd      	mov	sp, r7
 8005eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ede:	4770      	bx	lr
 8005ee0:	20000d80 	.word	0x20000d80
 8005ee4:	20001938 	.word	0x20001938
 8005ee8:	20001940 	.word	0x20001940
 8005eec:	20001948 	.word	0x20001948
 8005ef0:	20001944 	.word	0x20001944
 8005ef4:	2000194c 	.word	0x2000194c

08005ef8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005ef8:	b480      	push	{r7}
 8005efa:	b085      	sub	sp, #20
 8005efc:	af00      	add	r7, sp, #0
 8005efe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005f00:	4b28      	ldr	r3, [pc, #160]	; (8005fa4 <prvInsertBlockIntoFreeList+0xac>)
 8005f02:	60fb      	str	r3, [r7, #12]
 8005f04:	e002      	b.n	8005f0c <prvInsertBlockIntoFreeList+0x14>
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	60fb      	str	r3, [r7, #12]
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	687a      	ldr	r2, [r7, #4]
 8005f12:	429a      	cmp	r2, r3
 8005f14:	d8f7      	bhi.n	8005f06 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	685b      	ldr	r3, [r3, #4]
 8005f1e:	68ba      	ldr	r2, [r7, #8]
 8005f20:	4413      	add	r3, r2
 8005f22:	687a      	ldr	r2, [r7, #4]
 8005f24:	429a      	cmp	r2, r3
 8005f26:	d108      	bne.n	8005f3a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	685a      	ldr	r2, [r3, #4]
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	685b      	ldr	r3, [r3, #4]
 8005f30:	441a      	add	r2, r3
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	685b      	ldr	r3, [r3, #4]
 8005f42:	68ba      	ldr	r2, [r7, #8]
 8005f44:	441a      	add	r2, r3
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	429a      	cmp	r2, r3
 8005f4c:	d118      	bne.n	8005f80 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	681a      	ldr	r2, [r3, #0]
 8005f52:	4b15      	ldr	r3, [pc, #84]	; (8005fa8 <prvInsertBlockIntoFreeList+0xb0>)
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	429a      	cmp	r2, r3
 8005f58:	d00d      	beq.n	8005f76 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	685a      	ldr	r2, [r3, #4]
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	685b      	ldr	r3, [r3, #4]
 8005f64:	441a      	add	r2, r3
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	681a      	ldr	r2, [r3, #0]
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	601a      	str	r2, [r3, #0]
 8005f74:	e008      	b.n	8005f88 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005f76:	4b0c      	ldr	r3, [pc, #48]	; (8005fa8 <prvInsertBlockIntoFreeList+0xb0>)
 8005f78:	681a      	ldr	r2, [r3, #0]
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	601a      	str	r2, [r3, #0]
 8005f7e:	e003      	b.n	8005f88 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	681a      	ldr	r2, [r3, #0]
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005f88:	68fa      	ldr	r2, [r7, #12]
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	429a      	cmp	r2, r3
 8005f8e:	d002      	beq.n	8005f96 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	687a      	ldr	r2, [r7, #4]
 8005f94:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005f96:	bf00      	nop
 8005f98:	3714      	adds	r7, #20
 8005f9a:	46bd      	mov	sp, r7
 8005f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa0:	4770      	bx	lr
 8005fa2:	bf00      	nop
 8005fa4:	20001938 	.word	0x20001938
 8005fa8:	20001940 	.word	0x20001940

08005fac <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8005fac:	b580      	push	{r7, lr}
 8005fae:	b08a      	sub	sp, #40	; 0x28
 8005fb0:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8005fb2:	f7fa fa8d 	bl	80004d0 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8005fb6:	f000 f837 	bl	8006028 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */
	//HAL_Debug_init();
	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8005fba:	f000 fab5 	bl	8006528 <MX_GPIO_Init>
	MX_RTC_Init();
 8005fbe:	f000 f8c3 	bl	8006148 <MX_RTC_Init>
	MX_SPI1_Init();
 8005fc2:	f000 f8e9 	bl	8006198 <MX_SPI1_Init>
	MX_SPI2_Init();
 8005fc6:	f000 f925 	bl	8006214 <MX_SPI2_Init>
	MX_TIM1_Init();
 8005fca:	f000 f961 	bl	8006290 <MX_TIM1_Init>
	MX_TIM7_Init();
 8005fce:	f000 f985 	bl	80062dc <MX_TIM7_Init>
	MX_UART4_Init();
 8005fd2:	f000 f9b9 	bl	8006348 <MX_UART4_Init>
	MX_UART5_Init();
 8005fd6:	f000 f9e7 	bl	80063a8 <MX_UART5_Init>
	MX_USART1_UART_Init();
 8005fda:	f000 fa15 	bl	8006408 <MX_USART1_UART_Init>
	MX_USART2_UART_Init();
 8005fde:	f000 fa43 	bl	8006468 <MX_USART2_UART_Init>
	MX_USART3_UART_Init();
 8005fe2:	f000 fa71 	bl	80064c8 <MX_USART3_UART_Init>
	//CYT_LOGW(TAG, "start up task\n");
	//CYT_LOGI(TAG, "start up task\n");
	//CYT_LOGD(TAG, "start up task\n");
	/* USER CODE END 2 */

	osKernelInitialize();
 8005fe6:	f7fd fa51 	bl	800348c <osKernelInitialize>
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* definition and creation of defaultTask */
	const osThreadAttr_t defaultTask_attributes =
 8005fea:	1d3b      	adds	r3, r7, #4
 8005fec:	2224      	movs	r2, #36	; 0x24
 8005fee:	2100      	movs	r1, #0
 8005ff0:	4618      	mov	r0, r3
 8005ff2:	f000 fefe 	bl	8006df2 <memset>
 8005ff6:	4b09      	ldr	r3, [pc, #36]	; (800601c <main+0x70>)
 8005ff8:	607b      	str	r3, [r7, #4]
 8005ffa:	2380      	movs	r3, #128	; 0x80
 8005ffc:	61bb      	str	r3, [r7, #24]
 8005ffe:	2318      	movs	r3, #24
 8006000:	61fb      	str	r3, [r7, #28]
	{ .name = "defaultTask", .priority = (osPriority_t) osPriorityNormal,
			.stack_size = 128 };
	defaultTaskHandle = osThreadNew(StartDefaultTask, NULL,
 8006002:	1d3b      	adds	r3, r7, #4
 8006004:	461a      	mov	r2, r3
 8006006:	2100      	movs	r1, #0
 8006008:	4805      	ldr	r0, [pc, #20]	; (8006020 <main+0x74>)
 800600a:	f7fd faa7 	bl	800355c <osThreadNew>
 800600e:	4602      	mov	r2, r0
 8006010:	4b04      	ldr	r3, [pc, #16]	; (8006024 <main+0x78>)
 8006012:	601a      	str	r2, [r3, #0]
	/* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
	/* USER CODE END RTOS_THREADS */

	/* Start scheduler */
	osKernelStart();
 8006014:	f7fd fa6e 	bl	80034f4 <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
 8006018:	e7fe      	b.n	8006018 <main+0x6c>
 800601a:	bf00      	nop
 800601c:	080076d0 	.word	0x080076d0
 8006020:	080065b9 	.word	0x080065b9
 8006024:	200019a8 	.word	0x200019a8

08006028 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8006028:	b580      	push	{r7, lr}
 800602a:	b0b8      	sub	sp, #224	; 0xe0
 800602c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct =
 800602e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8006032:	2244      	movs	r2, #68	; 0x44
 8006034:	2100      	movs	r1, #0
 8006036:	4618      	mov	r0, r3
 8006038:	f000 fedb 	bl	8006df2 <memset>
	{ 0 };
	RCC_ClkInitTypeDef RCC_ClkInitStruct =
 800603c:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8006040:	2200      	movs	r2, #0
 8006042:	601a      	str	r2, [r3, #0]
 8006044:	605a      	str	r2, [r3, #4]
 8006046:	609a      	str	r2, [r3, #8]
 8006048:	60da      	str	r2, [r3, #12]
 800604a:	611a      	str	r2, [r3, #16]
	{ 0 };
	RCC_PeriphCLKInitTypeDef PeriphClkInit =
 800604c:	1d3b      	adds	r3, r7, #4
 800604e:	2284      	movs	r2, #132	; 0x84
 8006050:	2100      	movs	r1, #0
 8006052:	4618      	mov	r0, r3
 8006054:	f000 fecd 	bl	8006df2 <memset>
	{ 0 };

	/** Configure LSE Drive Capability
	 */
	HAL_PWR_EnableBkUpAccess();
 8006058:	f7fa fd78 	bl	8000b4c <HAL_PWR_EnableBkUpAccess>
	__HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800605c:	4b38      	ldr	r3, [pc, #224]	; (8006140 <SystemClock_Config+0x118>)
 800605e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006062:	4a37      	ldr	r2, [pc, #220]	; (8006140 <SystemClock_Config+0x118>)
 8006064:	f023 0318 	bic.w	r3, r3, #24
 8006068:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE
 800606c:	2305      	movs	r3, #5
 800606e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
			| RCC_OSCILLATORTYPE_LSE;
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8006072:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006076:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800607a:	2301      	movs	r3, #1
 800607c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8006080:	2302      	movs	r3, #2
 8006082:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8006086:	2303      	movs	r3, #3
 8006088:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
	RCC_OscInitStruct.PLL.PLLM = 1;
 800608c:	2301      	movs	r3, #1
 800608e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
	RCC_OscInitStruct.PLL.PLLN = 20;
 8006092:	2314      	movs	r3, #20
 8006094:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8006098:	2307      	movs	r3, #7
 800609a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800609e:	2302      	movs	r3, #2
 80060a0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80060a4:	2302      	movs	r3, #2
 80060a6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80060aa:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80060ae:	4618      	mov	r0, r3
 80060b0:	f7fa fdc0 	bl	8000c34 <HAL_RCC_OscConfig>
 80060b4:	4603      	mov	r3, r0
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d001      	beq.n	80060be <SystemClock_Config+0x96>
	{
		Error_Handler();
 80060ba:	f000 fa89 	bl	80065d0 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80060be:	230f      	movs	r3, #15
 80060c0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80060c4:	2303      	movs	r3, #3
 80060c6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80060ca:	2300      	movs	r3, #0
 80060cc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80060d0:	2300      	movs	r3, #0
 80060d2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80060d6:	2300      	movs	r3, #0
 80060d8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80060dc:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80060e0:	2104      	movs	r1, #4
 80060e2:	4618      	mov	r0, r3
 80060e4:	f7fb f956 	bl	8001394 <HAL_RCC_ClockConfig>
 80060e8:	4603      	mov	r3, r0
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d001      	beq.n	80060f2 <SystemClock_Config+0xca>
	{
		Error_Handler();
 80060ee:	f000 fa6f 	bl	80065d0 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC
 80060f2:	4b14      	ldr	r3, [pc, #80]	; (8006144 <SystemClock_Config+0x11c>)
 80060f4:	607b      	str	r3, [r7, #4]
			| RCC_PERIPHCLK_USART1 | RCC_PERIPHCLK_USART2 | RCC_PERIPHCLK_USART3
			| RCC_PERIPHCLK_UART4 | RCC_PERIPHCLK_UART5;
	PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80060f6:	2300      	movs	r3, #0
 80060f8:	63fb      	str	r3, [r7, #60]	; 0x3c
	PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80060fa:	2300      	movs	r3, #0
 80060fc:	643b      	str	r3, [r7, #64]	; 0x40
	PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80060fe:	2300      	movs	r3, #0
 8006100:	647b      	str	r3, [r7, #68]	; 0x44
	PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8006102:	2300      	movs	r3, #0
 8006104:	64bb      	str	r3, [r7, #72]	; 0x48
	PeriphClkInit.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 8006106:	2300      	movs	r3, #0
 8006108:	64fb      	str	r3, [r7, #76]	; 0x4c
	PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800610a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800610e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8006112:	1d3b      	adds	r3, r7, #4
 8006114:	4618      	mov	r0, r3
 8006116:	f7fb fb41 	bl	800179c <HAL_RCCEx_PeriphCLKConfig>
 800611a:	4603      	mov	r3, r0
 800611c:	2b00      	cmp	r3, #0
 800611e:	d001      	beq.n	8006124 <SystemClock_Config+0xfc>
	{
		Error_Handler();
 8006120:	f000 fa56 	bl	80065d0 <Error_Handler>
	}
	/** Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8006124:	f44f 7000 	mov.w	r0, #512	; 0x200
 8006128:	f7fa fd2e 	bl	8000b88 <HAL_PWREx_ControlVoltageScaling>
 800612c:	4603      	mov	r3, r0
 800612e:	2b00      	cmp	r3, #0
 8006130:	d001      	beq.n	8006136 <SystemClock_Config+0x10e>
	{
		Error_Handler();
 8006132:	f000 fa4d 	bl	80065d0 <Error_Handler>
	}
}
 8006136:	bf00      	nop
 8006138:	37e0      	adds	r7, #224	; 0xe0
 800613a:	46bd      	mov	sp, r7
 800613c:	bd80      	pop	{r7, pc}
 800613e:	bf00      	nop
 8006140:	40021000 	.word	0x40021000
 8006144:	0002001f 	.word	0x0002001f

08006148 <MX_RTC_Init>:
 * @brief RTC Initialization Function
 * @param None
 * @retval None
 */
static void MX_RTC_Init(void)
{
 8006148:	b580      	push	{r7, lr}
 800614a:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN RTC_Init 1 */

	/* USER CODE END RTC_Init 1 */
	/** Initialize RTC Only
	 */
	hrtc.Instance = RTC;
 800614c:	4b10      	ldr	r3, [pc, #64]	; (8006190 <MX_RTC_Init+0x48>)
 800614e:	4a11      	ldr	r2, [pc, #68]	; (8006194 <MX_RTC_Init+0x4c>)
 8006150:	601a      	str	r2, [r3, #0]
	hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8006152:	4b0f      	ldr	r3, [pc, #60]	; (8006190 <MX_RTC_Init+0x48>)
 8006154:	2200      	movs	r2, #0
 8006156:	605a      	str	r2, [r3, #4]
	hrtc.Init.AsynchPrediv = 127;
 8006158:	4b0d      	ldr	r3, [pc, #52]	; (8006190 <MX_RTC_Init+0x48>)
 800615a:	227f      	movs	r2, #127	; 0x7f
 800615c:	609a      	str	r2, [r3, #8]
	hrtc.Init.SynchPrediv = 255;
 800615e:	4b0c      	ldr	r3, [pc, #48]	; (8006190 <MX_RTC_Init+0x48>)
 8006160:	22ff      	movs	r2, #255	; 0xff
 8006162:	60da      	str	r2, [r3, #12]
	hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8006164:	4b0a      	ldr	r3, [pc, #40]	; (8006190 <MX_RTC_Init+0x48>)
 8006166:	2200      	movs	r2, #0
 8006168:	611a      	str	r2, [r3, #16]
	hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800616a:	4b09      	ldr	r3, [pc, #36]	; (8006190 <MX_RTC_Init+0x48>)
 800616c:	2200      	movs	r2, #0
 800616e:	615a      	str	r2, [r3, #20]
	hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8006170:	4b07      	ldr	r3, [pc, #28]	; (8006190 <MX_RTC_Init+0x48>)
 8006172:	2200      	movs	r2, #0
 8006174:	619a      	str	r2, [r3, #24]
	hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8006176:	4b06      	ldr	r3, [pc, #24]	; (8006190 <MX_RTC_Init+0x48>)
 8006178:	2200      	movs	r2, #0
 800617a:	61da      	str	r2, [r3, #28]
	if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800617c:	4804      	ldr	r0, [pc, #16]	; (8006190 <MX_RTC_Init+0x48>)
 800617e:	f7fb ff8d 	bl	800209c <HAL_RTC_Init>
 8006182:	4603      	mov	r3, r0
 8006184:	2b00      	cmp	r3, #0
 8006186:	d001      	beq.n	800618c <MX_RTC_Init+0x44>
	{
		Error_Handler();
 8006188:	f000 fa22 	bl	80065d0 <Error_Handler>
	}
	/* USER CODE BEGIN RTC_Init 2 */

	/* USER CODE END RTC_Init 2 */

}
 800618c:	bf00      	nop
 800618e:	bd80      	pop	{r7, pc}
 8006190:	20001c14 	.word	0x20001c14
 8006194:	40002800 	.word	0x40002800

08006198 <MX_SPI1_Init>:
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void)
{
 8006198:	b580      	push	{r7, lr}
 800619a:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 800619c:	4b1b      	ldr	r3, [pc, #108]	; (800620c <MX_SPI1_Init+0x74>)
 800619e:	4a1c      	ldr	r2, [pc, #112]	; (8006210 <MX_SPI1_Init+0x78>)
 80061a0:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 80061a2:	4b1a      	ldr	r3, [pc, #104]	; (800620c <MX_SPI1_Init+0x74>)
 80061a4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80061a8:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80061aa:	4b18      	ldr	r3, [pc, #96]	; (800620c <MX_SPI1_Init+0x74>)
 80061ac:	2200      	movs	r2, #0
 80061ae:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 80061b0:	4b16      	ldr	r3, [pc, #88]	; (800620c <MX_SPI1_Init+0x74>)
 80061b2:	f44f 7240 	mov.w	r2, #768	; 0x300
 80061b6:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80061b8:	4b14      	ldr	r3, [pc, #80]	; (800620c <MX_SPI1_Init+0x74>)
 80061ba:	2200      	movs	r2, #0
 80061bc:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80061be:	4b13      	ldr	r3, [pc, #76]	; (800620c <MX_SPI1_Init+0x74>)
 80061c0:	2200      	movs	r2, #0
 80061c2:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 80061c4:	4b11      	ldr	r3, [pc, #68]	; (800620c <MX_SPI1_Init+0x74>)
 80061c6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80061ca:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80061cc:	4b0f      	ldr	r3, [pc, #60]	; (800620c <MX_SPI1_Init+0x74>)
 80061ce:	2200      	movs	r2, #0
 80061d0:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80061d2:	4b0e      	ldr	r3, [pc, #56]	; (800620c <MX_SPI1_Init+0x74>)
 80061d4:	2200      	movs	r2, #0
 80061d6:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80061d8:	4b0c      	ldr	r3, [pc, #48]	; (800620c <MX_SPI1_Init+0x74>)
 80061da:	2200      	movs	r2, #0
 80061dc:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80061de:	4b0b      	ldr	r3, [pc, #44]	; (800620c <MX_SPI1_Init+0x74>)
 80061e0:	2200      	movs	r2, #0
 80061e2:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 7;
 80061e4:	4b09      	ldr	r3, [pc, #36]	; (800620c <MX_SPI1_Init+0x74>)
 80061e6:	2207      	movs	r2, #7
 80061e8:	62da      	str	r2, [r3, #44]	; 0x2c
	hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80061ea:	4b08      	ldr	r3, [pc, #32]	; (800620c <MX_SPI1_Init+0x74>)
 80061ec:	2200      	movs	r2, #0
 80061ee:	631a      	str	r2, [r3, #48]	; 0x30
	hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80061f0:	4b06      	ldr	r3, [pc, #24]	; (800620c <MX_SPI1_Init+0x74>)
 80061f2:	2208      	movs	r2, #8
 80061f4:	635a      	str	r2, [r3, #52]	; 0x34
	if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80061f6:	4805      	ldr	r0, [pc, #20]	; (800620c <MX_SPI1_Init+0x74>)
 80061f8:	f7fc f866 	bl	80022c8 <HAL_SPI_Init>
 80061fc:	4603      	mov	r3, r0
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d001      	beq.n	8006206 <MX_SPI1_Init+0x6e>
	{
		Error_Handler();
 8006202:	f000 f9e5 	bl	80065d0 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 8006206:	bf00      	nop
 8006208:	bd80      	pop	{r7, pc}
 800620a:	bf00      	nop
 800620c:	20001d24 	.word	0x20001d24
 8006210:	40013000 	.word	0x40013000

08006214 <MX_SPI2_Init>:
 * @brief SPI2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI2_Init(void)
{
 8006214:	b580      	push	{r7, lr}
 8006216:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI2_Init 1 */

	/* USER CODE END SPI2_Init 1 */
	/* SPI2 parameter configuration*/
	hspi2.Instance = SPI2;
 8006218:	4b1b      	ldr	r3, [pc, #108]	; (8006288 <MX_SPI2_Init+0x74>)
 800621a:	4a1c      	ldr	r2, [pc, #112]	; (800628c <MX_SPI2_Init+0x78>)
 800621c:	601a      	str	r2, [r3, #0]
	hspi2.Init.Mode = SPI_MODE_MASTER;
 800621e:	4b1a      	ldr	r3, [pc, #104]	; (8006288 <MX_SPI2_Init+0x74>)
 8006220:	f44f 7282 	mov.w	r2, #260	; 0x104
 8006224:	605a      	str	r2, [r3, #4]
	hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8006226:	4b18      	ldr	r3, [pc, #96]	; (8006288 <MX_SPI2_Init+0x74>)
 8006228:	2200      	movs	r2, #0
 800622a:	609a      	str	r2, [r3, #8]
	hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 800622c:	4b16      	ldr	r3, [pc, #88]	; (8006288 <MX_SPI2_Init+0x74>)
 800622e:	f44f 7240 	mov.w	r2, #768	; 0x300
 8006232:	60da      	str	r2, [r3, #12]
	hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8006234:	4b14      	ldr	r3, [pc, #80]	; (8006288 <MX_SPI2_Init+0x74>)
 8006236:	2200      	movs	r2, #0
 8006238:	611a      	str	r2, [r3, #16]
	hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800623a:	4b13      	ldr	r3, [pc, #76]	; (8006288 <MX_SPI2_Init+0x74>)
 800623c:	2200      	movs	r2, #0
 800623e:	615a      	str	r2, [r3, #20]
	hspi2.Init.NSS = SPI_NSS_SOFT;
 8006240:	4b11      	ldr	r3, [pc, #68]	; (8006288 <MX_SPI2_Init+0x74>)
 8006242:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006246:	619a      	str	r2, [r3, #24]
	hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006248:	4b0f      	ldr	r3, [pc, #60]	; (8006288 <MX_SPI2_Init+0x74>)
 800624a:	2200      	movs	r2, #0
 800624c:	61da      	str	r2, [r3, #28]
	hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800624e:	4b0e      	ldr	r3, [pc, #56]	; (8006288 <MX_SPI2_Init+0x74>)
 8006250:	2200      	movs	r2, #0
 8006252:	621a      	str	r2, [r3, #32]
	hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8006254:	4b0c      	ldr	r3, [pc, #48]	; (8006288 <MX_SPI2_Init+0x74>)
 8006256:	2200      	movs	r2, #0
 8006258:	625a      	str	r2, [r3, #36]	; 0x24
	hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800625a:	4b0b      	ldr	r3, [pc, #44]	; (8006288 <MX_SPI2_Init+0x74>)
 800625c:	2200      	movs	r2, #0
 800625e:	629a      	str	r2, [r3, #40]	; 0x28
	hspi2.Init.CRCPolynomial = 7;
 8006260:	4b09      	ldr	r3, [pc, #36]	; (8006288 <MX_SPI2_Init+0x74>)
 8006262:	2207      	movs	r2, #7
 8006264:	62da      	str	r2, [r3, #44]	; 0x2c
	hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8006266:	4b08      	ldr	r3, [pc, #32]	; (8006288 <MX_SPI2_Init+0x74>)
 8006268:	2200      	movs	r2, #0
 800626a:	631a      	str	r2, [r3, #48]	; 0x30
	hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800626c:	4b06      	ldr	r3, [pc, #24]	; (8006288 <MX_SPI2_Init+0x74>)
 800626e:	2208      	movs	r2, #8
 8006270:	635a      	str	r2, [r3, #52]	; 0x34
	if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8006272:	4805      	ldr	r0, [pc, #20]	; (8006288 <MX_SPI2_Init+0x74>)
 8006274:	f7fc f828 	bl	80022c8 <HAL_SPI_Init>
 8006278:	4603      	mov	r3, r0
 800627a:	2b00      	cmp	r3, #0
 800627c:	d001      	beq.n	8006282 <MX_SPI2_Init+0x6e>
	{
		Error_Handler();
 800627e:	f000 f9a7 	bl	80065d0 <Error_Handler>
	}
	/* USER CODE BEGIN SPI2_Init 2 */

	/* USER CODE END SPI2_Init 2 */

}
 8006282:	bf00      	nop
 8006284:	bd80      	pop	{r7, pc}
 8006286:	bf00      	nop
 8006288:	200019ac 	.word	0x200019ac
 800628c:	40003800 	.word	0x40003800

08006290 <MX_TIM1_Init>:
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void)
{
 8006290:	b580      	push	{r7, lr}
 8006292:	af00      	add	r7, sp, #0
	/* USER CODE END TIM1_Init 0 */

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 8006294:	4b0f      	ldr	r3, [pc, #60]	; (80062d4 <MX_TIM1_Init+0x44>)
 8006296:	4a10      	ldr	r2, [pc, #64]	; (80062d8 <MX_TIM1_Init+0x48>)
 8006298:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 0;
 800629a:	4b0e      	ldr	r3, [pc, #56]	; (80062d4 <MX_TIM1_Init+0x44>)
 800629c:	2200      	movs	r2, #0
 800629e:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80062a0:	4b0c      	ldr	r3, [pc, #48]	; (80062d4 <MX_TIM1_Init+0x44>)
 80062a2:	2200      	movs	r2, #0
 80062a4:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 0;
 80062a6:	4b0b      	ldr	r3, [pc, #44]	; (80062d4 <MX_TIM1_Init+0x44>)
 80062a8:	2200      	movs	r2, #0
 80062aa:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80062ac:	4b09      	ldr	r3, [pc, #36]	; (80062d4 <MX_TIM1_Init+0x44>)
 80062ae:	2200      	movs	r2, #0
 80062b0:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 80062b2:	4b08      	ldr	r3, [pc, #32]	; (80062d4 <MX_TIM1_Init+0x44>)
 80062b4:	2200      	movs	r2, #0
 80062b6:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80062b8:	4b06      	ldr	r3, [pc, #24]	; (80062d4 <MX_TIM1_Init+0x44>)
 80062ba:	2200      	movs	r2, #0
 80062bc:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_OnePulse_Init(&htim1, TIM_OPMODE_SINGLE) != HAL_OK)
 80062be:	2108      	movs	r1, #8
 80062c0:	4804      	ldr	r0, [pc, #16]	; (80062d4 <MX_TIM1_Init+0x44>)
 80062c2:	f7fc f8b6 	bl	8002432 <HAL_TIM_OnePulse_Init>
 80062c6:	4603      	mov	r3, r0
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d001      	beq.n	80062d0 <MX_TIM1_Init+0x40>
	{
		Error_Handler();
 80062cc:	f000 f980 	bl	80065d0 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */

}
 80062d0:	bf00      	nop
 80062d2:	bd80      	pop	{r7, pc}
 80062d4:	20001c38 	.word	0x20001c38
 80062d8:	40012c00 	.word	0x40012c00

080062dc <MX_TIM7_Init>:
 * @brief TIM7 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM7_Init(void)
{
 80062dc:	b580      	push	{r7, lr}
 80062de:	b084      	sub	sp, #16
 80062e0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM7_Init 0 */

	/* USER CODE END TIM7_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig =
 80062e2:	1d3b      	adds	r3, r7, #4
 80062e4:	2200      	movs	r2, #0
 80062e6:	601a      	str	r2, [r3, #0]
 80062e8:	605a      	str	r2, [r3, #4]
 80062ea:	609a      	str	r2, [r3, #8]
	{ 0 };

	/* USER CODE BEGIN TIM7_Init 1 */

	/* USER CODE END TIM7_Init 1 */
	htim7.Instance = TIM7;
 80062ec:	4b14      	ldr	r3, [pc, #80]	; (8006340 <MX_TIM7_Init+0x64>)
 80062ee:	4a15      	ldr	r2, [pc, #84]	; (8006344 <MX_TIM7_Init+0x68>)
 80062f0:	601a      	str	r2, [r3, #0]
	htim7.Init.Prescaler = 0;
 80062f2:	4b13      	ldr	r3, [pc, #76]	; (8006340 <MX_TIM7_Init+0x64>)
 80062f4:	2200      	movs	r2, #0
 80062f6:	605a      	str	r2, [r3, #4]
	htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80062f8:	4b11      	ldr	r3, [pc, #68]	; (8006340 <MX_TIM7_Init+0x64>)
 80062fa:	2200      	movs	r2, #0
 80062fc:	609a      	str	r2, [r3, #8]
	htim7.Init.Period = 0;
 80062fe:	4b10      	ldr	r3, [pc, #64]	; (8006340 <MX_TIM7_Init+0x64>)
 8006300:	2200      	movs	r2, #0
 8006302:	60da      	str	r2, [r3, #12]
	htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006304:	4b0e      	ldr	r3, [pc, #56]	; (8006340 <MX_TIM7_Init+0x64>)
 8006306:	2200      	movs	r2, #0
 8006308:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800630a:	480d      	ldr	r0, [pc, #52]	; (8006340 <MX_TIM7_Init+0x64>)
 800630c:	f7fc f866 	bl	80023dc <HAL_TIM_Base_Init>
 8006310:	4603      	mov	r3, r0
 8006312:	2b00      	cmp	r3, #0
 8006314:	d001      	beq.n	800631a <MX_TIM7_Init+0x3e>
	{
		Error_Handler();
 8006316:	f000 f95b 	bl	80065d0 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800631a:	2300      	movs	r3, #0
 800631c:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800631e:	2300      	movs	r3, #0
 8006320:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8006322:	1d3b      	adds	r3, r7, #4
 8006324:	4619      	mov	r1, r3
 8006326:	4806      	ldr	r0, [pc, #24]	; (8006340 <MX_TIM7_Init+0x64>)
 8006328:	f7fc f95a 	bl	80025e0 <HAL_TIMEx_MasterConfigSynchronization>
 800632c:	4603      	mov	r3, r0
 800632e:	2b00      	cmp	r3, #0
 8006330:	d001      	beq.n	8006336 <MX_TIM7_Init+0x5a>
	{
		Error_Handler();
 8006332:	f000 f94d 	bl	80065d0 <Error_Handler>
	}
	/* USER CODE BEGIN TIM7_Init 2 */

	/* USER CODE END TIM7_Init 2 */

}
 8006336:	bf00      	nop
 8006338:	3710      	adds	r7, #16
 800633a:	46bd      	mov	sp, r7
 800633c:	bd80      	pop	{r7, pc}
 800633e:	bf00      	nop
 8006340:	20001e34 	.word	0x20001e34
 8006344:	40001400 	.word	0x40001400

08006348 <MX_UART4_Init>:
 * @brief UART4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_UART4_Init(void)
{
 8006348:	b580      	push	{r7, lr}
 800634a:	af00      	add	r7, sp, #0
	/* USER CODE END UART4_Init 0 */

	/* USER CODE BEGIN UART4_Init 1 */

	/* USER CODE END UART4_Init 1 */
	huart4.Instance = UART4;
 800634c:	4b14      	ldr	r3, [pc, #80]	; (80063a0 <MX_UART4_Init+0x58>)
 800634e:	4a15      	ldr	r2, [pc, #84]	; (80063a4 <MX_UART4_Init+0x5c>)
 8006350:	601a      	str	r2, [r3, #0]
	huart4.Init.BaudRate = 115200;
 8006352:	4b13      	ldr	r3, [pc, #76]	; (80063a0 <MX_UART4_Init+0x58>)
 8006354:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8006358:	605a      	str	r2, [r3, #4]
	huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800635a:	4b11      	ldr	r3, [pc, #68]	; (80063a0 <MX_UART4_Init+0x58>)
 800635c:	2200      	movs	r2, #0
 800635e:	609a      	str	r2, [r3, #8]
	huart4.Init.StopBits = UART_STOPBITS_1;
 8006360:	4b0f      	ldr	r3, [pc, #60]	; (80063a0 <MX_UART4_Init+0x58>)
 8006362:	2200      	movs	r2, #0
 8006364:	60da      	str	r2, [r3, #12]
	huart4.Init.Parity = UART_PARITY_NONE;
 8006366:	4b0e      	ldr	r3, [pc, #56]	; (80063a0 <MX_UART4_Init+0x58>)
 8006368:	2200      	movs	r2, #0
 800636a:	611a      	str	r2, [r3, #16]
	huart4.Init.Mode = UART_MODE_TX_RX;
 800636c:	4b0c      	ldr	r3, [pc, #48]	; (80063a0 <MX_UART4_Init+0x58>)
 800636e:	220c      	movs	r2, #12
 8006370:	615a      	str	r2, [r3, #20]
	huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006372:	4b0b      	ldr	r3, [pc, #44]	; (80063a0 <MX_UART4_Init+0x58>)
 8006374:	2200      	movs	r2, #0
 8006376:	619a      	str	r2, [r3, #24]
	huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8006378:	4b09      	ldr	r3, [pc, #36]	; (80063a0 <MX_UART4_Init+0x58>)
 800637a:	2200      	movs	r2, #0
 800637c:	61da      	str	r2, [r3, #28]
	huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800637e:	4b08      	ldr	r3, [pc, #32]	; (80063a0 <MX_UART4_Init+0x58>)
 8006380:	2200      	movs	r2, #0
 8006382:	621a      	str	r2, [r3, #32]
	huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8006384:	4b06      	ldr	r3, [pc, #24]	; (80063a0 <MX_UART4_Init+0x58>)
 8006386:	2200      	movs	r2, #0
 8006388:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart4) != HAL_OK)
 800638a:	4805      	ldr	r0, [pc, #20]	; (80063a0 <MX_UART4_Init+0x58>)
 800638c:	f7fc f984 	bl	8002698 <HAL_UART_Init>
 8006390:	4603      	mov	r3, r0
 8006392:	2b00      	cmp	r3, #0
 8006394:	d001      	beq.n	800639a <MX_UART4_Init+0x52>
	{
		Error_Handler();
 8006396:	f000 f91b 	bl	80065d0 <Error_Handler>
	}
	/* USER CODE BEGIN UART4_Init 2 */

	/* USER CODE END UART4_Init 2 */

}
 800639a:	bf00      	nop
 800639c:	bd80      	pop	{r7, pc}
 800639e:	bf00      	nop
 80063a0:	20001c78 	.word	0x20001c78
 80063a4:	40004c00 	.word	0x40004c00

080063a8 <MX_UART5_Init>:
 * @brief UART5 Initialization Function
 * @param None
 * @retval None
 */
static void MX_UART5_Init(void)
{
 80063a8:	b580      	push	{r7, lr}
 80063aa:	af00      	add	r7, sp, #0
	/* USER CODE END UART5_Init 0 */

	/* USER CODE BEGIN UART5_Init 1 */

	/* USER CODE END UART5_Init 1 */
	huart5.Instance = UART5;
 80063ac:	4b14      	ldr	r3, [pc, #80]	; (8006400 <MX_UART5_Init+0x58>)
 80063ae:	4a15      	ldr	r2, [pc, #84]	; (8006404 <MX_UART5_Init+0x5c>)
 80063b0:	601a      	str	r2, [r3, #0]
	huart5.Init.BaudRate = 115200;
 80063b2:	4b13      	ldr	r3, [pc, #76]	; (8006400 <MX_UART5_Init+0x58>)
 80063b4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80063b8:	605a      	str	r2, [r3, #4]
	huart5.Init.WordLength = UART_WORDLENGTH_8B;
 80063ba:	4b11      	ldr	r3, [pc, #68]	; (8006400 <MX_UART5_Init+0x58>)
 80063bc:	2200      	movs	r2, #0
 80063be:	609a      	str	r2, [r3, #8]
	huart5.Init.StopBits = UART_STOPBITS_1;
 80063c0:	4b0f      	ldr	r3, [pc, #60]	; (8006400 <MX_UART5_Init+0x58>)
 80063c2:	2200      	movs	r2, #0
 80063c4:	60da      	str	r2, [r3, #12]
	huart5.Init.Parity = UART_PARITY_NONE;
 80063c6:	4b0e      	ldr	r3, [pc, #56]	; (8006400 <MX_UART5_Init+0x58>)
 80063c8:	2200      	movs	r2, #0
 80063ca:	611a      	str	r2, [r3, #16]
	huart5.Init.Mode = UART_MODE_TX_RX;
 80063cc:	4b0c      	ldr	r3, [pc, #48]	; (8006400 <MX_UART5_Init+0x58>)
 80063ce:	220c      	movs	r2, #12
 80063d0:	615a      	str	r2, [r3, #20]
	huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80063d2:	4b0b      	ldr	r3, [pc, #44]	; (8006400 <MX_UART5_Init+0x58>)
 80063d4:	2200      	movs	r2, #0
 80063d6:	619a      	str	r2, [r3, #24]
	huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 80063d8:	4b09      	ldr	r3, [pc, #36]	; (8006400 <MX_UART5_Init+0x58>)
 80063da:	2200      	movs	r2, #0
 80063dc:	61da      	str	r2, [r3, #28]
	huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80063de:	4b08      	ldr	r3, [pc, #32]	; (8006400 <MX_UART5_Init+0x58>)
 80063e0:	2200      	movs	r2, #0
 80063e2:	621a      	str	r2, [r3, #32]
	huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80063e4:	4b06      	ldr	r3, [pc, #24]	; (8006400 <MX_UART5_Init+0x58>)
 80063e6:	2200      	movs	r2, #0
 80063e8:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart5) != HAL_OK)
 80063ea:	4805      	ldr	r0, [pc, #20]	; (8006400 <MX_UART5_Init+0x58>)
 80063ec:	f7fc f954 	bl	8002698 <HAL_UART_Init>
 80063f0:	4603      	mov	r3, r0
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d001      	beq.n	80063fa <MX_UART5_Init+0x52>
	{
		Error_Handler();
 80063f6:	f000 f8eb 	bl	80065d0 <Error_Handler>
	}
	/* USER CODE BEGIN UART5_Init 2 */

	/* USER CODE END UART5_Init 2 */

}
 80063fa:	bf00      	nop
 80063fc:	bd80      	pop	{r7, pc}
 80063fe:	bf00      	nop
 8006400:	20001abc 	.word	0x20001abc
 8006404:	40005000 	.word	0x40005000

08006408 <MX_USART1_UART_Init>:
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void)
{
 8006408:	b580      	push	{r7, lr}
 800640a:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 800640c:	4b14      	ldr	r3, [pc, #80]	; (8006460 <MX_USART1_UART_Init+0x58>)
 800640e:	4a15      	ldr	r2, [pc, #84]	; (8006464 <MX_USART1_UART_Init+0x5c>)
 8006410:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 8006412:	4b13      	ldr	r3, [pc, #76]	; (8006460 <MX_USART1_UART_Init+0x58>)
 8006414:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8006418:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800641a:	4b11      	ldr	r3, [pc, #68]	; (8006460 <MX_USART1_UART_Init+0x58>)
 800641c:	2200      	movs	r2, #0
 800641e:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8006420:	4b0f      	ldr	r3, [pc, #60]	; (8006460 <MX_USART1_UART_Init+0x58>)
 8006422:	2200      	movs	r2, #0
 8006424:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8006426:	4b0e      	ldr	r3, [pc, #56]	; (8006460 <MX_USART1_UART_Init+0x58>)
 8006428:	2200      	movs	r2, #0
 800642a:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 800642c:	4b0c      	ldr	r3, [pc, #48]	; (8006460 <MX_USART1_UART_Init+0x58>)
 800642e:	220c      	movs	r2, #12
 8006430:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006432:	4b0b      	ldr	r3, [pc, #44]	; (8006460 <MX_USART1_UART_Init+0x58>)
 8006434:	2200      	movs	r2, #0
 8006436:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8006438:	4b09      	ldr	r3, [pc, #36]	; (8006460 <MX_USART1_UART_Init+0x58>)
 800643a:	2200      	movs	r2, #0
 800643c:	61da      	str	r2, [r3, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800643e:	4b08      	ldr	r3, [pc, #32]	; (8006460 <MX_USART1_UART_Init+0x58>)
 8006440:	2200      	movs	r2, #0
 8006442:	621a      	str	r2, [r3, #32]
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8006444:	4b06      	ldr	r3, [pc, #24]	; (8006460 <MX_USART1_UART_Init+0x58>)
 8006446:	2200      	movs	r2, #0
 8006448:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart1) != HAL_OK)
 800644a:	4805      	ldr	r0, [pc, #20]	; (8006460 <MX_USART1_UART_Init+0x58>)
 800644c:	f7fc f924 	bl	8002698 <HAL_UART_Init>
 8006450:	4603      	mov	r3, r0
 8006452:	2b00      	cmp	r3, #0
 8006454:	d001      	beq.n	800645a <MX_USART1_UART_Init+0x52>
	{
		Error_Handler();
 8006456:	f000 f8bb 	bl	80065d0 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 800645a:	bf00      	nop
 800645c:	bd80      	pop	{r7, pc}
 800645e:	bf00      	nop
 8006460:	20001b68 	.word	0x20001b68
 8006464:	40013800 	.word	0x40013800

08006468 <MX_USART2_UART_Init>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 8006468:	b580      	push	{r7, lr}
 800646a:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 800646c:	4b14      	ldr	r3, [pc, #80]	; (80064c0 <MX_USART2_UART_Init+0x58>)
 800646e:	4a15      	ldr	r2, [pc, #84]	; (80064c4 <MX_USART2_UART_Init+0x5c>)
 8006470:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8006472:	4b13      	ldr	r3, [pc, #76]	; (80064c0 <MX_USART2_UART_Init+0x58>)
 8006474:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8006478:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800647a:	4b11      	ldr	r3, [pc, #68]	; (80064c0 <MX_USART2_UART_Init+0x58>)
 800647c:	2200      	movs	r2, #0
 800647e:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8006480:	4b0f      	ldr	r3, [pc, #60]	; (80064c0 <MX_USART2_UART_Init+0x58>)
 8006482:	2200      	movs	r2, #0
 8006484:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8006486:	4b0e      	ldr	r3, [pc, #56]	; (80064c0 <MX_USART2_UART_Init+0x58>)
 8006488:	2200      	movs	r2, #0
 800648a:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 800648c:	4b0c      	ldr	r3, [pc, #48]	; (80064c0 <MX_USART2_UART_Init+0x58>)
 800648e:	220c      	movs	r2, #12
 8006490:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006492:	4b0b      	ldr	r3, [pc, #44]	; (80064c0 <MX_USART2_UART_Init+0x58>)
 8006494:	2200      	movs	r2, #0
 8006496:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8006498:	4b09      	ldr	r3, [pc, #36]	; (80064c0 <MX_USART2_UART_Init+0x58>)
 800649a:	2200      	movs	r2, #0
 800649c:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800649e:	4b08      	ldr	r3, [pc, #32]	; (80064c0 <MX_USART2_UART_Init+0x58>)
 80064a0:	2200      	movs	r2, #0
 80064a2:	621a      	str	r2, [r3, #32]
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80064a4:	4b06      	ldr	r3, [pc, #24]	; (80064c0 <MX_USART2_UART_Init+0x58>)
 80064a6:	2200      	movs	r2, #0
 80064a8:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart2) != HAL_OK)
 80064aa:	4805      	ldr	r0, [pc, #20]	; (80064c0 <MX_USART2_UART_Init+0x58>)
 80064ac:	f7fc f8f4 	bl	8002698 <HAL_UART_Init>
 80064b0:	4603      	mov	r3, r0
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d001      	beq.n	80064ba <MX_USART2_UART_Init+0x52>
	{
		Error_Handler();
 80064b6:	f000 f88b 	bl	80065d0 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 80064ba:	bf00      	nop
 80064bc:	bd80      	pop	{r7, pc}
 80064be:	bf00      	nop
 80064c0:	20001d88 	.word	0x20001d88
 80064c4:	40004400 	.word	0x40004400

080064c8 <MX_USART3_UART_Init>:
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void)
{
 80064c8:	b580      	push	{r7, lr}
 80064ca:	af00      	add	r7, sp, #0
	/* USER CODE END USART3_Init 0 */

	/* USER CODE BEGIN USART3_Init 1 */

	/* USER CODE END USART3_Init 1 */
	huart3.Instance = USART3;
 80064cc:	4b14      	ldr	r3, [pc, #80]	; (8006520 <MX_USART3_UART_Init+0x58>)
 80064ce:	4a15      	ldr	r2, [pc, #84]	; (8006524 <MX_USART3_UART_Init+0x5c>)
 80064d0:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 115200;
 80064d2:	4b13      	ldr	r3, [pc, #76]	; (8006520 <MX_USART3_UART_Init+0x58>)
 80064d4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80064d8:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80064da:	4b11      	ldr	r3, [pc, #68]	; (8006520 <MX_USART3_UART_Init+0x58>)
 80064dc:	2200      	movs	r2, #0
 80064de:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 80064e0:	4b0f      	ldr	r3, [pc, #60]	; (8006520 <MX_USART3_UART_Init+0x58>)
 80064e2:	2200      	movs	r2, #0
 80064e4:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 80064e6:	4b0e      	ldr	r3, [pc, #56]	; (8006520 <MX_USART3_UART_Init+0x58>)
 80064e8:	2200      	movs	r2, #0
 80064ea:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 80064ec:	4b0c      	ldr	r3, [pc, #48]	; (8006520 <MX_USART3_UART_Init+0x58>)
 80064ee:	220c      	movs	r2, #12
 80064f0:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80064f2:	4b0b      	ldr	r3, [pc, #44]	; (8006520 <MX_USART3_UART_Init+0x58>)
 80064f4:	2200      	movs	r2, #0
 80064f6:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80064f8:	4b09      	ldr	r3, [pc, #36]	; (8006520 <MX_USART3_UART_Init+0x58>)
 80064fa:	2200      	movs	r2, #0
 80064fc:	61da      	str	r2, [r3, #28]
	huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80064fe:	4b08      	ldr	r3, [pc, #32]	; (8006520 <MX_USART3_UART_Init+0x58>)
 8006500:	2200      	movs	r2, #0
 8006502:	621a      	str	r2, [r3, #32]
	huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8006504:	4b06      	ldr	r3, [pc, #24]	; (8006520 <MX_USART3_UART_Init+0x58>)
 8006506:	2200      	movs	r2, #0
 8006508:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart3) != HAL_OK)
 800650a:	4805      	ldr	r0, [pc, #20]	; (8006520 <MX_USART3_UART_Init+0x58>)
 800650c:	f7fc f8c4 	bl	8002698 <HAL_UART_Init>
 8006510:	4603      	mov	r3, r0
 8006512:	2b00      	cmp	r3, #0
 8006514:	d001      	beq.n	800651a <MX_USART3_UART_Init+0x52>
	{
		Error_Handler();
 8006516:	f000 f85b 	bl	80065d0 <Error_Handler>
	}
	/* USER CODE BEGIN USART3_Init 2 */

	/* USER CODE END USART3_Init 2 */

}
 800651a:	bf00      	nop
 800651c:	bd80      	pop	{r7, pc}
 800651e:	bf00      	nop
 8006520:	20001a10 	.word	0x20001a10
 8006524:	40004800 	.word	0x40004800

08006528 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8006528:	b480      	push	{r7}
 800652a:	b087      	sub	sp, #28
 800652c:	af00      	add	r7, sp, #0

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE()
 800652e:	4b21      	ldr	r3, [pc, #132]	; (80065b4 <MX_GPIO_Init+0x8c>)
 8006530:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006532:	4a20      	ldr	r2, [pc, #128]	; (80065b4 <MX_GPIO_Init+0x8c>)
 8006534:	f043 0304 	orr.w	r3, r3, #4
 8006538:	64d3      	str	r3, [r2, #76]	; 0x4c
 800653a:	4b1e      	ldr	r3, [pc, #120]	; (80065b4 <MX_GPIO_Init+0x8c>)
 800653c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800653e:	f003 0304 	and.w	r3, r3, #4
 8006542:	617b      	str	r3, [r7, #20]
 8006544:	697b      	ldr	r3, [r7, #20]
	;
	__HAL_RCC_GPIOH_CLK_ENABLE()
 8006546:	4b1b      	ldr	r3, [pc, #108]	; (80065b4 <MX_GPIO_Init+0x8c>)
 8006548:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800654a:	4a1a      	ldr	r2, [pc, #104]	; (80065b4 <MX_GPIO_Init+0x8c>)
 800654c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006550:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006552:	4b18      	ldr	r3, [pc, #96]	; (80065b4 <MX_GPIO_Init+0x8c>)
 8006554:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006556:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800655a:	613b      	str	r3, [r7, #16]
 800655c:	693b      	ldr	r3, [r7, #16]
	;
	__HAL_RCC_GPIOA_CLK_ENABLE()
 800655e:	4b15      	ldr	r3, [pc, #84]	; (80065b4 <MX_GPIO_Init+0x8c>)
 8006560:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006562:	4a14      	ldr	r2, [pc, #80]	; (80065b4 <MX_GPIO_Init+0x8c>)
 8006564:	f043 0301 	orr.w	r3, r3, #1
 8006568:	64d3      	str	r3, [r2, #76]	; 0x4c
 800656a:	4b12      	ldr	r3, [pc, #72]	; (80065b4 <MX_GPIO_Init+0x8c>)
 800656c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800656e:	f003 0301 	and.w	r3, r3, #1
 8006572:	60fb      	str	r3, [r7, #12]
 8006574:	68fb      	ldr	r3, [r7, #12]
	;
	__HAL_RCC_GPIOB_CLK_ENABLE()
 8006576:	4b0f      	ldr	r3, [pc, #60]	; (80065b4 <MX_GPIO_Init+0x8c>)
 8006578:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800657a:	4a0e      	ldr	r2, [pc, #56]	; (80065b4 <MX_GPIO_Init+0x8c>)
 800657c:	f043 0302 	orr.w	r3, r3, #2
 8006580:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006582:	4b0c      	ldr	r3, [pc, #48]	; (80065b4 <MX_GPIO_Init+0x8c>)
 8006584:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006586:	f003 0302 	and.w	r3, r3, #2
 800658a:	60bb      	str	r3, [r7, #8]
 800658c:	68bb      	ldr	r3, [r7, #8]
	;
	__HAL_RCC_GPIOD_CLK_ENABLE()
 800658e:	4b09      	ldr	r3, [pc, #36]	; (80065b4 <MX_GPIO_Init+0x8c>)
 8006590:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006592:	4a08      	ldr	r2, [pc, #32]	; (80065b4 <MX_GPIO_Init+0x8c>)
 8006594:	f043 0308 	orr.w	r3, r3, #8
 8006598:	64d3      	str	r3, [r2, #76]	; 0x4c
 800659a:	4b06      	ldr	r3, [pc, #24]	; (80065b4 <MX_GPIO_Init+0x8c>)
 800659c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800659e:	f003 0308 	and.w	r3, r3, #8
 80065a2:	607b      	str	r3, [r7, #4]
 80065a4:	687b      	ldr	r3, [r7, #4]
	;

}
 80065a6:	bf00      	nop
 80065a8:	371c      	adds	r7, #28
 80065aa:	46bd      	mov	sp, r7
 80065ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b0:	4770      	bx	lr
 80065b2:	bf00      	nop
 80065b4:	40021000 	.word	0x40021000

080065b8 <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80065b8:	b580      	push	{r7, lr}
 80065ba:	b082      	sub	sp, #8
 80065bc:	af00      	add	r7, sp, #0
 80065be:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN 5 */
	/* Infinite loop */
	for (;;)
	{
		//CYT_LOGE(TAG, "start up task\n");
		printf("1");
 80065c0:	2031      	movs	r0, #49	; 0x31
 80065c2:	f000 fcc7 	bl	8006f54 <putchar>
		osDelay(1000);
 80065c6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80065ca:	f7fd f871 	bl	80036b0 <osDelay>
		printf("1");
 80065ce:	e7f7      	b.n	80065c0 <StartDefaultTask+0x8>

080065d0 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 80065d0:	b480      	push	{r7}
 80065d2:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 80065d4:	bf00      	nop
 80065d6:	46bd      	mov	sp, r7
 80065d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065dc:	4770      	bx	lr
	...

080065e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80065e0:	b580      	push	{r7, lr}
 80065e2:	b082      	sub	sp, #8
 80065e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80065e6:	4b11      	ldr	r3, [pc, #68]	; (800662c <HAL_MspInit+0x4c>)
 80065e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80065ea:	4a10      	ldr	r2, [pc, #64]	; (800662c <HAL_MspInit+0x4c>)
 80065ec:	f043 0301 	orr.w	r3, r3, #1
 80065f0:	6613      	str	r3, [r2, #96]	; 0x60
 80065f2:	4b0e      	ldr	r3, [pc, #56]	; (800662c <HAL_MspInit+0x4c>)
 80065f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80065f6:	f003 0301 	and.w	r3, r3, #1
 80065fa:	607b      	str	r3, [r7, #4]
 80065fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80065fe:	4b0b      	ldr	r3, [pc, #44]	; (800662c <HAL_MspInit+0x4c>)
 8006600:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006602:	4a0a      	ldr	r2, [pc, #40]	; (800662c <HAL_MspInit+0x4c>)
 8006604:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006608:	6593      	str	r3, [r2, #88]	; 0x58
 800660a:	4b08      	ldr	r3, [pc, #32]	; (800662c <HAL_MspInit+0x4c>)
 800660c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800660e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006612:	603b      	str	r3, [r7, #0]
 8006614:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8006616:	2200      	movs	r2, #0
 8006618:	210f      	movs	r1, #15
 800661a:	f06f 0001 	mvn.w	r0, #1
 800661e:	f7fa f884 	bl	800072a <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006622:	bf00      	nop
 8006624:	3708      	adds	r7, #8
 8006626:	46bd      	mov	sp, r7
 8006628:	bd80      	pop	{r7, pc}
 800662a:	bf00      	nop
 800662c:	40021000 	.word	0x40021000

08006630 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8006630:	b480      	push	{r7}
 8006632:	b083      	sub	sp, #12
 8006634:	af00      	add	r7, sp, #0
 8006636:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	4a08      	ldr	r2, [pc, #32]	; (8006660 <HAL_RTC_MspInit+0x30>)
 800663e:	4293      	cmp	r3, r2
 8006640:	d107      	bne.n	8006652 <HAL_RTC_MspInit+0x22>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8006642:	4b08      	ldr	r3, [pc, #32]	; (8006664 <HAL_RTC_MspInit+0x34>)
 8006644:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006648:	4a06      	ldr	r2, [pc, #24]	; (8006664 <HAL_RTC_MspInit+0x34>)
 800664a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800664e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8006652:	bf00      	nop
 8006654:	370c      	adds	r7, #12
 8006656:	46bd      	mov	sp, r7
 8006658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800665c:	4770      	bx	lr
 800665e:	bf00      	nop
 8006660:	40002800 	.word	0x40002800
 8006664:	40021000 	.word	0x40021000

08006668 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8006668:	b580      	push	{r7, lr}
 800666a:	b08c      	sub	sp, #48	; 0x30
 800666c:	af00      	add	r7, sp, #0
 800666e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006670:	f107 031c 	add.w	r3, r7, #28
 8006674:	2200      	movs	r2, #0
 8006676:	601a      	str	r2, [r3, #0]
 8006678:	605a      	str	r2, [r3, #4]
 800667a:	609a      	str	r2, [r3, #8]
 800667c:	60da      	str	r2, [r3, #12]
 800667e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	4a3d      	ldr	r2, [pc, #244]	; (800677c <HAL_SPI_MspInit+0x114>)
 8006686:	4293      	cmp	r3, r2
 8006688:	d129      	bne.n	80066de <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800668a:	4b3d      	ldr	r3, [pc, #244]	; (8006780 <HAL_SPI_MspInit+0x118>)
 800668c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800668e:	4a3c      	ldr	r2, [pc, #240]	; (8006780 <HAL_SPI_MspInit+0x118>)
 8006690:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006694:	6613      	str	r3, [r2, #96]	; 0x60
 8006696:	4b3a      	ldr	r3, [pc, #232]	; (8006780 <HAL_SPI_MspInit+0x118>)
 8006698:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800669a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800669e:	61bb      	str	r3, [r7, #24]
 80066a0:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80066a2:	4b37      	ldr	r3, [pc, #220]	; (8006780 <HAL_SPI_MspInit+0x118>)
 80066a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80066a6:	4a36      	ldr	r2, [pc, #216]	; (8006780 <HAL_SPI_MspInit+0x118>)
 80066a8:	f043 0301 	orr.w	r3, r3, #1
 80066ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80066ae:	4b34      	ldr	r3, [pc, #208]	; (8006780 <HAL_SPI_MspInit+0x118>)
 80066b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80066b2:	f003 0301 	and.w	r3, r3, #1
 80066b6:	617b      	str	r3, [r7, #20]
 80066b8:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80066ba:	23e0      	movs	r3, #224	; 0xe0
 80066bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80066be:	2302      	movs	r3, #2
 80066c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80066c2:	2300      	movs	r3, #0
 80066c4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80066c6:	2303      	movs	r3, #3
 80066c8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80066ca:	2305      	movs	r3, #5
 80066cc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80066ce:	f107 031c 	add.w	r3, r7, #28
 80066d2:	4619      	mov	r1, r3
 80066d4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80066d8:	f7fa f890 	bl	80007fc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80066dc:	e049      	b.n	8006772 <HAL_SPI_MspInit+0x10a>
  else if(hspi->Instance==SPI2)
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	4a28      	ldr	r2, [pc, #160]	; (8006784 <HAL_SPI_MspInit+0x11c>)
 80066e4:	4293      	cmp	r3, r2
 80066e6:	d144      	bne.n	8006772 <HAL_SPI_MspInit+0x10a>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80066e8:	4b25      	ldr	r3, [pc, #148]	; (8006780 <HAL_SPI_MspInit+0x118>)
 80066ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80066ec:	4a24      	ldr	r2, [pc, #144]	; (8006780 <HAL_SPI_MspInit+0x118>)
 80066ee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80066f2:	6593      	str	r3, [r2, #88]	; 0x58
 80066f4:	4b22      	ldr	r3, [pc, #136]	; (8006780 <HAL_SPI_MspInit+0x118>)
 80066f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80066f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80066fc:	613b      	str	r3, [r7, #16]
 80066fe:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006700:	4b1f      	ldr	r3, [pc, #124]	; (8006780 <HAL_SPI_MspInit+0x118>)
 8006702:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006704:	4a1e      	ldr	r2, [pc, #120]	; (8006780 <HAL_SPI_MspInit+0x118>)
 8006706:	f043 0304 	orr.w	r3, r3, #4
 800670a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800670c:	4b1c      	ldr	r3, [pc, #112]	; (8006780 <HAL_SPI_MspInit+0x118>)
 800670e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006710:	f003 0304 	and.w	r3, r3, #4
 8006714:	60fb      	str	r3, [r7, #12]
 8006716:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006718:	4b19      	ldr	r3, [pc, #100]	; (8006780 <HAL_SPI_MspInit+0x118>)
 800671a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800671c:	4a18      	ldr	r2, [pc, #96]	; (8006780 <HAL_SPI_MspInit+0x118>)
 800671e:	f043 0302 	orr.w	r3, r3, #2
 8006722:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006724:	4b16      	ldr	r3, [pc, #88]	; (8006780 <HAL_SPI_MspInit+0x118>)
 8006726:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006728:	f003 0302 	and.w	r3, r3, #2
 800672c:	60bb      	str	r3, [r7, #8]
 800672e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8006730:	230c      	movs	r3, #12
 8006732:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006734:	2302      	movs	r3, #2
 8006736:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006738:	2300      	movs	r3, #0
 800673a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800673c:	2303      	movs	r3, #3
 800673e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8006740:	2305      	movs	r3, #5
 8006742:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006744:	f107 031c 	add.w	r3, r7, #28
 8006748:	4619      	mov	r1, r3
 800674a:	480f      	ldr	r0, [pc, #60]	; (8006788 <HAL_SPI_MspInit+0x120>)
 800674c:	f7fa f856 	bl	80007fc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8006750:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006754:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006756:	2302      	movs	r3, #2
 8006758:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800675a:	2300      	movs	r3, #0
 800675c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800675e:	2303      	movs	r3, #3
 8006760:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8006762:	2305      	movs	r3, #5
 8006764:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006766:	f107 031c 	add.w	r3, r7, #28
 800676a:	4619      	mov	r1, r3
 800676c:	4807      	ldr	r0, [pc, #28]	; (800678c <HAL_SPI_MspInit+0x124>)
 800676e:	f7fa f845 	bl	80007fc <HAL_GPIO_Init>
}
 8006772:	bf00      	nop
 8006774:	3730      	adds	r7, #48	; 0x30
 8006776:	46bd      	mov	sp, r7
 8006778:	bd80      	pop	{r7, pc}
 800677a:	bf00      	nop
 800677c:	40013000 	.word	0x40013000
 8006780:	40021000 	.word	0x40021000
 8006784:	40003800 	.word	0x40003800
 8006788:	48000800 	.word	0x48000800
 800678c:	48000400 	.word	0x48000400

08006790 <HAL_TIM_OnePulse_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_onepulse: TIM_OnePulse handle pointer
* @retval None
*/
void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef* htim_onepulse)
{
 8006790:	b480      	push	{r7}
 8006792:	b085      	sub	sp, #20
 8006794:	af00      	add	r7, sp, #0
 8006796:	6078      	str	r0, [r7, #4]
  if(htim_onepulse->Instance==TIM1)
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	4a0a      	ldr	r2, [pc, #40]	; (80067c8 <HAL_TIM_OnePulse_MspInit+0x38>)
 800679e:	4293      	cmp	r3, r2
 80067a0:	d10b      	bne.n	80067ba <HAL_TIM_OnePulse_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80067a2:	4b0a      	ldr	r3, [pc, #40]	; (80067cc <HAL_TIM_OnePulse_MspInit+0x3c>)
 80067a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80067a6:	4a09      	ldr	r2, [pc, #36]	; (80067cc <HAL_TIM_OnePulse_MspInit+0x3c>)
 80067a8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80067ac:	6613      	str	r3, [r2, #96]	; 0x60
 80067ae:	4b07      	ldr	r3, [pc, #28]	; (80067cc <HAL_TIM_OnePulse_MspInit+0x3c>)
 80067b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80067b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80067b6:	60fb      	str	r3, [r7, #12]
 80067b8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80067ba:	bf00      	nop
 80067bc:	3714      	adds	r7, #20
 80067be:	46bd      	mov	sp, r7
 80067c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c4:	4770      	bx	lr
 80067c6:	bf00      	nop
 80067c8:	40012c00 	.word	0x40012c00
 80067cc:	40021000 	.word	0x40021000

080067d0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80067d0:	b480      	push	{r7}
 80067d2:	b085      	sub	sp, #20
 80067d4:	af00      	add	r7, sp, #0
 80067d6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	4a0a      	ldr	r2, [pc, #40]	; (8006808 <HAL_TIM_Base_MspInit+0x38>)
 80067de:	4293      	cmp	r3, r2
 80067e0:	d10b      	bne.n	80067fa <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 80067e2:	4b0a      	ldr	r3, [pc, #40]	; (800680c <HAL_TIM_Base_MspInit+0x3c>)
 80067e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80067e6:	4a09      	ldr	r2, [pc, #36]	; (800680c <HAL_TIM_Base_MspInit+0x3c>)
 80067e8:	f043 0320 	orr.w	r3, r3, #32
 80067ec:	6593      	str	r3, [r2, #88]	; 0x58
 80067ee:	4b07      	ldr	r3, [pc, #28]	; (800680c <HAL_TIM_Base_MspInit+0x3c>)
 80067f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80067f2:	f003 0320 	and.w	r3, r3, #32
 80067f6:	60fb      	str	r3, [r7, #12]
 80067f8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 80067fa:	bf00      	nop
 80067fc:	3714      	adds	r7, #20
 80067fe:	46bd      	mov	sp, r7
 8006800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006804:	4770      	bx	lr
 8006806:	bf00      	nop
 8006808:	40001400 	.word	0x40001400
 800680c:	40021000 	.word	0x40021000

08006810 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8006810:	b580      	push	{r7, lr}
 8006812:	b092      	sub	sp, #72	; 0x48
 8006814:	af00      	add	r7, sp, #0
 8006816:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006818:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800681c:	2200      	movs	r2, #0
 800681e:	601a      	str	r2, [r3, #0]
 8006820:	605a      	str	r2, [r3, #4]
 8006822:	609a      	str	r2, [r3, #8]
 8006824:	60da      	str	r2, [r3, #12]
 8006826:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	4a83      	ldr	r2, [pc, #524]	; (8006a3c <HAL_UART_MspInit+0x22c>)
 800682e:	4293      	cmp	r3, r2
 8006830:	d129      	bne.n	8006886 <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8006832:	4b83      	ldr	r3, [pc, #524]	; (8006a40 <HAL_UART_MspInit+0x230>)
 8006834:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006836:	4a82      	ldr	r2, [pc, #520]	; (8006a40 <HAL_UART_MspInit+0x230>)
 8006838:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800683c:	6593      	str	r3, [r2, #88]	; 0x58
 800683e:	4b80      	ldr	r3, [pc, #512]	; (8006a40 <HAL_UART_MspInit+0x230>)
 8006840:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006842:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006846:	633b      	str	r3, [r7, #48]	; 0x30
 8006848:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800684a:	4b7d      	ldr	r3, [pc, #500]	; (8006a40 <HAL_UART_MspInit+0x230>)
 800684c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800684e:	4a7c      	ldr	r2, [pc, #496]	; (8006a40 <HAL_UART_MspInit+0x230>)
 8006850:	f043 0301 	orr.w	r3, r3, #1
 8006854:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006856:	4b7a      	ldr	r3, [pc, #488]	; (8006a40 <HAL_UART_MspInit+0x230>)
 8006858:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800685a:	f003 0301 	and.w	r3, r3, #1
 800685e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006860:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    /**UART4 GPIO Configuration    
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8006862:	2303      	movs	r3, #3
 8006864:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006866:	2302      	movs	r3, #2
 8006868:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800686a:	2300      	movs	r3, #0
 800686c:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800686e:	2303      	movs	r3, #3
 8006870:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8006872:	2308      	movs	r3, #8
 8006874:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006876:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800687a:	4619      	mov	r1, r3
 800687c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006880:	f7f9 ffbc 	bl	80007fc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8006884:	e0d6      	b.n	8006a34 <HAL_UART_MspInit+0x224>
  else if(huart->Instance==UART5)
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	4a6e      	ldr	r2, [pc, #440]	; (8006a44 <HAL_UART_MspInit+0x234>)
 800688c:	4293      	cmp	r3, r2
 800688e:	d145      	bne.n	800691c <HAL_UART_MspInit+0x10c>
    __HAL_RCC_UART5_CLK_ENABLE();
 8006890:	4b6b      	ldr	r3, [pc, #428]	; (8006a40 <HAL_UART_MspInit+0x230>)
 8006892:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006894:	4a6a      	ldr	r2, [pc, #424]	; (8006a40 <HAL_UART_MspInit+0x230>)
 8006896:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800689a:	6593      	str	r3, [r2, #88]	; 0x58
 800689c:	4b68      	ldr	r3, [pc, #416]	; (8006a40 <HAL_UART_MspInit+0x230>)
 800689e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80068a0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80068a4:	62bb      	str	r3, [r7, #40]	; 0x28
 80068a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80068a8:	4b65      	ldr	r3, [pc, #404]	; (8006a40 <HAL_UART_MspInit+0x230>)
 80068aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80068ac:	4a64      	ldr	r2, [pc, #400]	; (8006a40 <HAL_UART_MspInit+0x230>)
 80068ae:	f043 0304 	orr.w	r3, r3, #4
 80068b2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80068b4:	4b62      	ldr	r3, [pc, #392]	; (8006a40 <HAL_UART_MspInit+0x230>)
 80068b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80068b8:	f003 0304 	and.w	r3, r3, #4
 80068bc:	627b      	str	r3, [r7, #36]	; 0x24
 80068be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80068c0:	4b5f      	ldr	r3, [pc, #380]	; (8006a40 <HAL_UART_MspInit+0x230>)
 80068c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80068c4:	4a5e      	ldr	r2, [pc, #376]	; (8006a40 <HAL_UART_MspInit+0x230>)
 80068c6:	f043 0308 	orr.w	r3, r3, #8
 80068ca:	64d3      	str	r3, [r2, #76]	; 0x4c
 80068cc:	4b5c      	ldr	r3, [pc, #368]	; (8006a40 <HAL_UART_MspInit+0x230>)
 80068ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80068d0:	f003 0308 	and.w	r3, r3, #8
 80068d4:	623b      	str	r3, [r7, #32]
 80068d6:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80068d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80068dc:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80068de:	2302      	movs	r3, #2
 80068e0:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80068e2:	2300      	movs	r3, #0
 80068e4:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80068e6:	2303      	movs	r3, #3
 80068e8:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80068ea:	2308      	movs	r3, #8
 80068ec:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80068ee:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80068f2:	4619      	mov	r1, r3
 80068f4:	4854      	ldr	r0, [pc, #336]	; (8006a48 <HAL_UART_MspInit+0x238>)
 80068f6:	f7f9 ff81 	bl	80007fc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80068fa:	2304      	movs	r3, #4
 80068fc:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80068fe:	2302      	movs	r3, #2
 8006900:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006902:	2300      	movs	r3, #0
 8006904:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006906:	2303      	movs	r3, #3
 8006908:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800690a:	2308      	movs	r3, #8
 800690c:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800690e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8006912:	4619      	mov	r1, r3
 8006914:	484d      	ldr	r0, [pc, #308]	; (8006a4c <HAL_UART_MspInit+0x23c>)
 8006916:	f7f9 ff71 	bl	80007fc <HAL_GPIO_Init>
}
 800691a:	e08b      	b.n	8006a34 <HAL_UART_MspInit+0x224>
  else if(huart->Instance==USART1)
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	4a4b      	ldr	r2, [pc, #300]	; (8006a50 <HAL_UART_MspInit+0x240>)
 8006922:	4293      	cmp	r3, r2
 8006924:	d12a      	bne.n	800697c <HAL_UART_MspInit+0x16c>
    __HAL_RCC_USART1_CLK_ENABLE();
 8006926:	4b46      	ldr	r3, [pc, #280]	; (8006a40 <HAL_UART_MspInit+0x230>)
 8006928:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800692a:	4a45      	ldr	r2, [pc, #276]	; (8006a40 <HAL_UART_MspInit+0x230>)
 800692c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006930:	6613      	str	r3, [r2, #96]	; 0x60
 8006932:	4b43      	ldr	r3, [pc, #268]	; (8006a40 <HAL_UART_MspInit+0x230>)
 8006934:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006936:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800693a:	61fb      	str	r3, [r7, #28]
 800693c:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800693e:	4b40      	ldr	r3, [pc, #256]	; (8006a40 <HAL_UART_MspInit+0x230>)
 8006940:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006942:	4a3f      	ldr	r2, [pc, #252]	; (8006a40 <HAL_UART_MspInit+0x230>)
 8006944:	f043 0301 	orr.w	r3, r3, #1
 8006948:	64d3      	str	r3, [r2, #76]	; 0x4c
 800694a:	4b3d      	ldr	r3, [pc, #244]	; (8006a40 <HAL_UART_MspInit+0x230>)
 800694c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800694e:	f003 0301 	and.w	r3, r3, #1
 8006952:	61bb      	str	r3, [r7, #24]
 8006954:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8006956:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800695a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800695c:	2302      	movs	r3, #2
 800695e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006960:	2300      	movs	r3, #0
 8006962:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006964:	2303      	movs	r3, #3
 8006966:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8006968:	2307      	movs	r3, #7
 800696a:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800696c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8006970:	4619      	mov	r1, r3
 8006972:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006976:	f7f9 ff41 	bl	80007fc <HAL_GPIO_Init>
}
 800697a:	e05b      	b.n	8006a34 <HAL_UART_MspInit+0x224>
  else if(huart->Instance==USART2)
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	4a34      	ldr	r2, [pc, #208]	; (8006a54 <HAL_UART_MspInit+0x244>)
 8006982:	4293      	cmp	r3, r2
 8006984:	d129      	bne.n	80069da <HAL_UART_MspInit+0x1ca>
    __HAL_RCC_USART2_CLK_ENABLE();
 8006986:	4b2e      	ldr	r3, [pc, #184]	; (8006a40 <HAL_UART_MspInit+0x230>)
 8006988:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800698a:	4a2d      	ldr	r2, [pc, #180]	; (8006a40 <HAL_UART_MspInit+0x230>)
 800698c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006990:	6593      	str	r3, [r2, #88]	; 0x58
 8006992:	4b2b      	ldr	r3, [pc, #172]	; (8006a40 <HAL_UART_MspInit+0x230>)
 8006994:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006996:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800699a:	617b      	str	r3, [r7, #20]
 800699c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800699e:	4b28      	ldr	r3, [pc, #160]	; (8006a40 <HAL_UART_MspInit+0x230>)
 80069a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80069a2:	4a27      	ldr	r2, [pc, #156]	; (8006a40 <HAL_UART_MspInit+0x230>)
 80069a4:	f043 0301 	orr.w	r3, r3, #1
 80069a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80069aa:	4b25      	ldr	r3, [pc, #148]	; (8006a40 <HAL_UART_MspInit+0x230>)
 80069ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80069ae:	f003 0301 	and.w	r3, r3, #1
 80069b2:	613b      	str	r3, [r7, #16]
 80069b4:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80069b6:	230c      	movs	r3, #12
 80069b8:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80069ba:	2302      	movs	r3, #2
 80069bc:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80069be:	2300      	movs	r3, #0
 80069c0:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80069c2:	2303      	movs	r3, #3
 80069c4:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80069c6:	2307      	movs	r3, #7
 80069c8:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80069ca:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80069ce:	4619      	mov	r1, r3
 80069d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80069d4:	f7f9 ff12 	bl	80007fc <HAL_GPIO_Init>
}
 80069d8:	e02c      	b.n	8006a34 <HAL_UART_MspInit+0x224>
  else if(huart->Instance==USART3)
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	4a1e      	ldr	r2, [pc, #120]	; (8006a58 <HAL_UART_MspInit+0x248>)
 80069e0:	4293      	cmp	r3, r2
 80069e2:	d127      	bne.n	8006a34 <HAL_UART_MspInit+0x224>
    __HAL_RCC_USART3_CLK_ENABLE();
 80069e4:	4b16      	ldr	r3, [pc, #88]	; (8006a40 <HAL_UART_MspInit+0x230>)
 80069e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80069e8:	4a15      	ldr	r2, [pc, #84]	; (8006a40 <HAL_UART_MspInit+0x230>)
 80069ea:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80069ee:	6593      	str	r3, [r2, #88]	; 0x58
 80069f0:	4b13      	ldr	r3, [pc, #76]	; (8006a40 <HAL_UART_MspInit+0x230>)
 80069f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80069f4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80069f8:	60fb      	str	r3, [r7, #12]
 80069fa:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80069fc:	4b10      	ldr	r3, [pc, #64]	; (8006a40 <HAL_UART_MspInit+0x230>)
 80069fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a00:	4a0f      	ldr	r2, [pc, #60]	; (8006a40 <HAL_UART_MspInit+0x230>)
 8006a02:	f043 0304 	orr.w	r3, r3, #4
 8006a06:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006a08:	4b0d      	ldr	r3, [pc, #52]	; (8006a40 <HAL_UART_MspInit+0x230>)
 8006a0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a0c:	f003 0304 	and.w	r3, r3, #4
 8006a10:	60bb      	str	r3, [r7, #8]
 8006a12:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8006a14:	2330      	movs	r3, #48	; 0x30
 8006a16:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006a18:	2302      	movs	r3, #2
 8006a1a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006a1c:	2300      	movs	r3, #0
 8006a1e:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006a20:	2303      	movs	r3, #3
 8006a22:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8006a24:	2307      	movs	r3, #7
 8006a26:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006a28:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8006a2c:	4619      	mov	r1, r3
 8006a2e:	4806      	ldr	r0, [pc, #24]	; (8006a48 <HAL_UART_MspInit+0x238>)
 8006a30:	f7f9 fee4 	bl	80007fc <HAL_GPIO_Init>
}
 8006a34:	bf00      	nop
 8006a36:	3748      	adds	r7, #72	; 0x48
 8006a38:	46bd      	mov	sp, r7
 8006a3a:	bd80      	pop	{r7, pc}
 8006a3c:	40004c00 	.word	0x40004c00
 8006a40:	40021000 	.word	0x40021000
 8006a44:	40005000 	.word	0x40005000
 8006a48:	48000800 	.word	0x48000800
 8006a4c:	48000c00 	.word	0x48000c00
 8006a50:	40013800 	.word	0x40013800
 8006a54:	40004400 	.word	0x40004400
 8006a58:	40004800 	.word	0x40004800

08006a5c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006a5c:	b480      	push	{r7}
 8006a5e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8006a60:	bf00      	nop
 8006a62:	46bd      	mov	sp, r7
 8006a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a68:	4770      	bx	lr

08006a6a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006a6a:	b480      	push	{r7}
 8006a6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8006a6e:	e7fe      	b.n	8006a6e <HardFault_Handler+0x4>

08006a70 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8006a70:	b480      	push	{r7}
 8006a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8006a74:	e7fe      	b.n	8006a74 <MemManage_Handler+0x4>

08006a76 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8006a76:	b480      	push	{r7}
 8006a78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8006a7a:	e7fe      	b.n	8006a7a <BusFault_Handler+0x4>

08006a7c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006a7c:	b480      	push	{r7}
 8006a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006a80:	e7fe      	b.n	8006a80 <UsageFault_Handler+0x4>

08006a82 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8006a82:	b480      	push	{r7}
 8006a84:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8006a86:	bf00      	nop
 8006a88:	46bd      	mov	sp, r7
 8006a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a8e:	4770      	bx	lr

08006a90 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8006a90:	b580      	push	{r7, lr}
 8006a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8006a94:	f7f9 fd6e 	bl	8000574 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8006a98:	f7fe fa88 	bl	8004fac <xTaskGetSchedulerState>
 8006a9c:	4603      	mov	r3, r0
 8006a9e:	2b01      	cmp	r3, #1
 8006aa0:	d001      	beq.n	8006aa6 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8006aa2:	f7ff f821 	bl	8005ae8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8006aa6:	bf00      	nop
 8006aa8:	bd80      	pop	{r7, pc}

08006aaa <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8006aaa:	b580      	push	{r7, lr}
 8006aac:	b086      	sub	sp, #24
 8006aae:	af00      	add	r7, sp, #0
 8006ab0:	60f8      	str	r0, [r7, #12]
 8006ab2:	60b9      	str	r1, [r7, #8]
 8006ab4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006ab6:	2300      	movs	r3, #0
 8006ab8:	617b      	str	r3, [r7, #20]
 8006aba:	e00a      	b.n	8006ad2 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8006abc:	f3af 8000 	nop.w
 8006ac0:	4601      	mov	r1, r0
 8006ac2:	68bb      	ldr	r3, [r7, #8]
 8006ac4:	1c5a      	adds	r2, r3, #1
 8006ac6:	60ba      	str	r2, [r7, #8]
 8006ac8:	b2ca      	uxtb	r2, r1
 8006aca:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006acc:	697b      	ldr	r3, [r7, #20]
 8006ace:	3301      	adds	r3, #1
 8006ad0:	617b      	str	r3, [r7, #20]
 8006ad2:	697a      	ldr	r2, [r7, #20]
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	429a      	cmp	r2, r3
 8006ad8:	dbf0      	blt.n	8006abc <_read+0x12>
	}

return len;
 8006ada:	687b      	ldr	r3, [r7, #4]
}
 8006adc:	4618      	mov	r0, r3
 8006ade:	3718      	adds	r7, #24
 8006ae0:	46bd      	mov	sp, r7
 8006ae2:	bd80      	pop	{r7, pc}

08006ae4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8006ae4:	b580      	push	{r7, lr}
 8006ae6:	b086      	sub	sp, #24
 8006ae8:	af00      	add	r7, sp, #0
 8006aea:	60f8      	str	r0, [r7, #12]
 8006aec:	60b9      	str	r1, [r7, #8]
 8006aee:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006af0:	2300      	movs	r3, #0
 8006af2:	617b      	str	r3, [r7, #20]
 8006af4:	e009      	b.n	8006b0a <_write+0x26>
	{
		__io_putchar(*ptr++);
 8006af6:	68bb      	ldr	r3, [r7, #8]
 8006af8:	1c5a      	adds	r2, r3, #1
 8006afa:	60ba      	str	r2, [r7, #8]
 8006afc:	781b      	ldrb	r3, [r3, #0]
 8006afe:	4618      	mov	r0, r3
 8006b00:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006b04:	697b      	ldr	r3, [r7, #20]
 8006b06:	3301      	adds	r3, #1
 8006b08:	617b      	str	r3, [r7, #20]
 8006b0a:	697a      	ldr	r2, [r7, #20]
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	429a      	cmp	r2, r3
 8006b10:	dbf1      	blt.n	8006af6 <_write+0x12>
	}
	return len;
 8006b12:	687b      	ldr	r3, [r7, #4]
}
 8006b14:	4618      	mov	r0, r3
 8006b16:	3718      	adds	r7, #24
 8006b18:	46bd      	mov	sp, r7
 8006b1a:	bd80      	pop	{r7, pc}

08006b1c <_close>:

int _close(int file)
{
 8006b1c:	b480      	push	{r7}
 8006b1e:	b083      	sub	sp, #12
 8006b20:	af00      	add	r7, sp, #0
 8006b22:	6078      	str	r0, [r7, #4]
	return -1;
 8006b24:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006b28:	4618      	mov	r0, r3
 8006b2a:	370c      	adds	r7, #12
 8006b2c:	46bd      	mov	sp, r7
 8006b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b32:	4770      	bx	lr

08006b34 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8006b34:	b480      	push	{r7}
 8006b36:	b083      	sub	sp, #12
 8006b38:	af00      	add	r7, sp, #0
 8006b3a:	6078      	str	r0, [r7, #4]
 8006b3c:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8006b3e:	683b      	ldr	r3, [r7, #0]
 8006b40:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006b44:	605a      	str	r2, [r3, #4]
	return 0;
 8006b46:	2300      	movs	r3, #0
}
 8006b48:	4618      	mov	r0, r3
 8006b4a:	370c      	adds	r7, #12
 8006b4c:	46bd      	mov	sp, r7
 8006b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b52:	4770      	bx	lr

08006b54 <_isatty>:

int _isatty(int file)
{
 8006b54:	b480      	push	{r7}
 8006b56:	b083      	sub	sp, #12
 8006b58:	af00      	add	r7, sp, #0
 8006b5a:	6078      	str	r0, [r7, #4]
	return 1;
 8006b5c:	2301      	movs	r3, #1
}
 8006b5e:	4618      	mov	r0, r3
 8006b60:	370c      	adds	r7, #12
 8006b62:	46bd      	mov	sp, r7
 8006b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b68:	4770      	bx	lr

08006b6a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8006b6a:	b480      	push	{r7}
 8006b6c:	b085      	sub	sp, #20
 8006b6e:	af00      	add	r7, sp, #0
 8006b70:	60f8      	str	r0, [r7, #12]
 8006b72:	60b9      	str	r1, [r7, #8]
 8006b74:	607a      	str	r2, [r7, #4]
	return 0;
 8006b76:	2300      	movs	r3, #0
}
 8006b78:	4618      	mov	r0, r3
 8006b7a:	3714      	adds	r7, #20
 8006b7c:	46bd      	mov	sp, r7
 8006b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b82:	4770      	bx	lr

08006b84 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8006b84:	b580      	push	{r7, lr}
 8006b86:	b084      	sub	sp, #16
 8006b88:	af00      	add	r7, sp, #0
 8006b8a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8006b8c:	4b11      	ldr	r3, [pc, #68]	; (8006bd4 <_sbrk+0x50>)
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d102      	bne.n	8006b9a <_sbrk+0x16>
		heap_end = &end;
 8006b94:	4b0f      	ldr	r3, [pc, #60]	; (8006bd4 <_sbrk+0x50>)
 8006b96:	4a10      	ldr	r2, [pc, #64]	; (8006bd8 <_sbrk+0x54>)
 8006b98:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8006b9a:	4b0e      	ldr	r3, [pc, #56]	; (8006bd4 <_sbrk+0x50>)
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8006ba0:	4b0c      	ldr	r3, [pc, #48]	; (8006bd4 <_sbrk+0x50>)
 8006ba2:	681a      	ldr	r2, [r3, #0]
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	4413      	add	r3, r2
 8006ba8:	466a      	mov	r2, sp
 8006baa:	4293      	cmp	r3, r2
 8006bac:	d907      	bls.n	8006bbe <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8006bae:	f000 f8eb 	bl	8006d88 <__errno>
 8006bb2:	4602      	mov	r2, r0
 8006bb4:	230c      	movs	r3, #12
 8006bb6:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8006bb8:	f04f 33ff 	mov.w	r3, #4294967295
 8006bbc:	e006      	b.n	8006bcc <_sbrk+0x48>
	}

	heap_end += incr;
 8006bbe:	4b05      	ldr	r3, [pc, #20]	; (8006bd4 <_sbrk+0x50>)
 8006bc0:	681a      	ldr	r2, [r3, #0]
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	4413      	add	r3, r2
 8006bc6:	4a03      	ldr	r2, [pc, #12]	; (8006bd4 <_sbrk+0x50>)
 8006bc8:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8006bca:	68fb      	ldr	r3, [r7, #12]
}
 8006bcc:	4618      	mov	r0, r3
 8006bce:	3710      	adds	r7, #16
 8006bd0:	46bd      	mov	sp, r7
 8006bd2:	bd80      	pop	{r7, pc}
 8006bd4:	20001950 	.word	0x20001950
 8006bd8:	20001e78 	.word	0x20001e78

08006bdc <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8006bdc:	b480      	push	{r7}
 8006bde:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8006be0:	4b17      	ldr	r3, [pc, #92]	; (8006c40 <SystemInit+0x64>)
 8006be2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006be6:	4a16      	ldr	r2, [pc, #88]	; (8006c40 <SystemInit+0x64>)
 8006be8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006bec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8006bf0:	4b14      	ldr	r3, [pc, #80]	; (8006c44 <SystemInit+0x68>)
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	4a13      	ldr	r2, [pc, #76]	; (8006c44 <SystemInit+0x68>)
 8006bf6:	f043 0301 	orr.w	r3, r3, #1
 8006bfa:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8006bfc:	4b11      	ldr	r3, [pc, #68]	; (8006c44 <SystemInit+0x68>)
 8006bfe:	2200      	movs	r2, #0
 8006c00:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8006c02:	4b10      	ldr	r3, [pc, #64]	; (8006c44 <SystemInit+0x68>)
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	4a0f      	ldr	r2, [pc, #60]	; (8006c44 <SystemInit+0x68>)
 8006c08:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8006c0c:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8006c10:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8006c12:	4b0c      	ldr	r3, [pc, #48]	; (8006c44 <SystemInit+0x68>)
 8006c14:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006c18:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8006c1a:	4b0a      	ldr	r3, [pc, #40]	; (8006c44 <SystemInit+0x68>)
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	4a09      	ldr	r2, [pc, #36]	; (8006c44 <SystemInit+0x68>)
 8006c20:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006c24:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8006c26:	4b07      	ldr	r3, [pc, #28]	; (8006c44 <SystemInit+0x68>)
 8006c28:	2200      	movs	r2, #0
 8006c2a:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8006c2c:	4b04      	ldr	r3, [pc, #16]	; (8006c40 <SystemInit+0x64>)
 8006c2e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8006c32:	609a      	str	r2, [r3, #8]
#endif
}
 8006c34:	bf00      	nop
 8006c36:	46bd      	mov	sp, r7
 8006c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c3c:	4770      	bx	lr
 8006c3e:	bf00      	nop
 8006c40:	e000ed00 	.word	0xe000ed00
 8006c44:	40021000 	.word	0x40021000

08006c48 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8006c48:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006c80 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8006c4c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8006c4e:	e003      	b.n	8006c58 <LoopCopyDataInit>

08006c50 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8006c50:	4b0c      	ldr	r3, [pc, #48]	; (8006c84 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8006c52:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8006c54:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8006c56:	3104      	adds	r1, #4

08006c58 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8006c58:	480b      	ldr	r0, [pc, #44]	; (8006c88 <LoopForever+0xa>)
	ldr	r3, =_edata
 8006c5a:	4b0c      	ldr	r3, [pc, #48]	; (8006c8c <LoopForever+0xe>)
	adds	r2, r0, r1
 8006c5c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8006c5e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8006c60:	d3f6      	bcc.n	8006c50 <CopyDataInit>
	ldr	r2, =_sbss
 8006c62:	4a0b      	ldr	r2, [pc, #44]	; (8006c90 <LoopForever+0x12>)
	b	LoopFillZerobss
 8006c64:	e002      	b.n	8006c6c <LoopFillZerobss>

08006c66 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8006c66:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8006c68:	f842 3b04 	str.w	r3, [r2], #4

08006c6c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8006c6c:	4b09      	ldr	r3, [pc, #36]	; (8006c94 <LoopForever+0x16>)
	cmp	r2, r3
 8006c6e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8006c70:	d3f9      	bcc.n	8006c66 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8006c72:	f7ff ffb3 	bl	8006bdc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8006c76:	f000 f88d 	bl	8006d94 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8006c7a:	f7ff f997 	bl	8005fac <main>

08006c7e <LoopForever>:

LoopForever:
    b LoopForever
 8006c7e:	e7fe      	b.n	8006c7e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8006c80:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8006c84:	08007798 	.word	0x08007798
	ldr	r0, =_sdata
 8006c88:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8006c8c:	20000074 	.word	0x20000074
	ldr	r2, =_sbss
 8006c90:	20000074 	.word	0x20000074
	ldr	r3, = _ebss
 8006c94:	20001e78 	.word	0x20001e78

08006c98 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8006c98:	e7fe      	b.n	8006c98 <ADC1_2_IRQHandler>

08006c9a <in_isr_mode>:
#include "priv_os.h"

/* Determine whether we are in thread mode or handler mode. */
static int in_isr_mode(void)
{
 8006c9a:	b480      	push	{r7}
 8006c9c:	b083      	sub	sp, #12
 8006c9e:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006ca0:	f3ef 8305 	mrs	r3, IPSR
 8006ca4:	607b      	str	r3, [r7, #4]
  return(result);
 8006ca6:	687b      	ldr	r3, [r7, #4]
    return (__get_IPSR() != 0?1:0);
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	bf14      	ite	ne
 8006cac:	2301      	movne	r3, #1
 8006cae:	2300      	moveq	r3, #0
 8006cb0:	b2db      	uxtb	r3, r3
}
 8006cb2:	4618      	mov	r0, r3
 8006cb4:	370c      	adds	r7, #12
 8006cb6:	46bd      	mov	sp, r7
 8006cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cbc:	4770      	bx	lr
	...

08006cc0 <send_semaphore>:

    return 0;
}

int send_semaphore(sc_semaphore_t id)
{
 8006cc0:	b580      	push	{r7, lr}
 8006cc2:	b084      	sub	sp, #16
 8006cc4:	af00      	add	r7, sp, #0
 8006cc6:	6078      	str	r0, [r7, #4]
    portBASE_TYPE taskWoken = pdFALSE;
 8006cc8:	2300      	movs	r3, #0
 8006cca:	60fb      	str	r3, [r7, #12]

    if (in_isr_mode())
 8006ccc:	f7ff ffe5 	bl	8006c9a <in_isr_mode>
 8006cd0:	4603      	mov	r3, r0
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d017      	beq.n	8006d06 <send_semaphore+0x46>
    {
        if (xSemaphoreGiveFromISR(id, &taskWoken) != pdTRUE)
 8006cd6:	f107 030c 	add.w	r3, r7, #12
 8006cda:	4619      	mov	r1, r3
 8006cdc:	6878      	ldr	r0, [r7, #4]
 8006cde:	f7fd f889 	bl	8003df4 <xQueueGiveFromISR>
 8006ce2:	4603      	mov	r3, r0
 8006ce4:	2b01      	cmp	r3, #1
 8006ce6:	d002      	beq.n	8006cee <send_semaphore+0x2e>
        {
            return -1;
 8006ce8:	f04f 33ff 	mov.w	r3, #4294967295
 8006cec:	e018      	b.n	8006d20 <send_semaphore+0x60>
        }
        portEND_SWITCHING_ISR(taskWoken);
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d014      	beq.n	8006d1e <send_semaphore+0x5e>
 8006cf4:	4b0c      	ldr	r3, [pc, #48]	; (8006d28 <send_semaphore+0x68>)
 8006cf6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006cfa:	601a      	str	r2, [r3, #0]
 8006cfc:	f3bf 8f4f 	dsb	sy
 8006d00:	f3bf 8f6f 	isb	sy
 8006d04:	e00b      	b.n	8006d1e <send_semaphore+0x5e>
    }
    else
    {
        if (xSemaphoreGive(id) != pdTRUE)
 8006d06:	2300      	movs	r3, #0
 8006d08:	2200      	movs	r2, #0
 8006d0a:	2100      	movs	r1, #0
 8006d0c:	6878      	ldr	r0, [r7, #4]
 8006d0e:	f7fc fee3 	bl	8003ad8 <xQueueGenericSend>
 8006d12:	4603      	mov	r3, r0
 8006d14:	2b01      	cmp	r3, #1
 8006d16:	d002      	beq.n	8006d1e <send_semaphore+0x5e>
        {
            return  -1;
 8006d18:	f04f 33ff 	mov.w	r3, #4294967295
 8006d1c:	e000      	b.n	8006d20 <send_semaphore+0x60>
        }
    }

    return 0;
 8006d1e:	2300      	movs	r3, #0
}
 8006d20:	4618      	mov	r0, r3
 8006d22:	3710      	adds	r7, #16
 8006d24:	46bd      	mov	sp, r7
 8006d26:	bd80      	pop	{r7, pc}
 8006d28:	e000ed04 	.word	0xe000ed04

08006d2c <USART1_IRQHandler>:
static uint8_t serdbg_msg[DEBUG_RX_MAX];
static uint32_t ser_read_mode = WAIT_FOR_EVER;
static uint32_t temp;

void USART1_IRQHandler(void)
{
 8006d2c:	b580      	push	{r7, lr}
 8006d2e:	af00      	add	r7, sp, #0

	if (((__HAL_UART_GET_FLAG(&SD_PORT, UART_FLAG_IDLE)) != RESET))
 8006d30:	4b12      	ldr	r3, [pc, #72]	; (8006d7c <USART1_IRQHandler+0x50>)
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	69db      	ldr	r3, [r3, #28]
 8006d36:	f003 0310 	and.w	r3, r3, #16
 8006d3a:	2b10      	cmp	r3, #16
 8006d3c:	d118      	bne.n	8006d70 <USART1_IRQHandler+0x44>
	{
		__HAL_UART_CLEAR_IDLEFLAG(&SD_PORT);
 8006d3e:	4b0f      	ldr	r3, [pc, #60]	; (8006d7c <USART1_IRQHandler+0x50>)
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	2210      	movs	r2, #16
 8006d44:	621a      	str	r2, [r3, #32]
		temp = SD_PORT.Instance->ISR;
 8006d46:	4b0d      	ldr	r3, [pc, #52]	; (8006d7c <USART1_IRQHandler+0x50>)
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	69db      	ldr	r3, [r3, #28]
 8006d4c:	4a0c      	ldr	r2, [pc, #48]	; (8006d80 <USART1_IRQHandler+0x54>)
 8006d4e:	6013      	str	r3, [r2, #0]
		temp = SD_PORT.Instance->RDR;
 8006d50:	4b0a      	ldr	r3, [pc, #40]	; (8006d7c <USART1_IRQHandler+0x50>)
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006d56:	b29b      	uxth	r3, r3
 8006d58:	461a      	mov	r2, r3
 8006d5a:	4b09      	ldr	r3, [pc, #36]	; (8006d80 <USART1_IRQHandler+0x54>)
 8006d5c:	601a      	str	r2, [r3, #0]

		if (serdbg_semap != NULL)
 8006d5e:	4b09      	ldr	r3, [pc, #36]	; (8006d84 <USART1_IRQHandler+0x58>)
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d004      	beq.n	8006d70 <USART1_IRQHandler+0x44>
		{
			send_semaphore(serdbg_semap);
 8006d66:	4b07      	ldr	r3, [pc, #28]	; (8006d84 <USART1_IRQHandler+0x58>)
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	4618      	mov	r0, r3
 8006d6c:	f7ff ffa8 	bl	8006cc0 <send_semaphore>
		}
	}

	HAL_UART_IRQHandler(&SD_PORT);
 8006d70:	4802      	ldr	r0, [pc, #8]	; (8006d7c <USART1_IRQHandler+0x50>)
 8006d72:	f7fb fcef 	bl	8002754 <HAL_UART_IRQHandler>
}
 8006d76:	bf00      	nop
 8006d78:	bd80      	pop	{r7, pc}
 8006d7a:	bf00      	nop
 8006d7c:	20001b68 	.word	0x20001b68
 8006d80:	20001958 	.word	0x20001958
 8006d84:	20001954 	.word	0x20001954

08006d88 <__errno>:
 8006d88:	4b01      	ldr	r3, [pc, #4]	; (8006d90 <__errno+0x8>)
 8006d8a:	6818      	ldr	r0, [r3, #0]
 8006d8c:	4770      	bx	lr
 8006d8e:	bf00      	nop
 8006d90:	20000010 	.word	0x20000010

08006d94 <__libc_init_array>:
 8006d94:	b570      	push	{r4, r5, r6, lr}
 8006d96:	4e0d      	ldr	r6, [pc, #52]	; (8006dcc <__libc_init_array+0x38>)
 8006d98:	4c0d      	ldr	r4, [pc, #52]	; (8006dd0 <__libc_init_array+0x3c>)
 8006d9a:	1ba4      	subs	r4, r4, r6
 8006d9c:	10a4      	asrs	r4, r4, #2
 8006d9e:	2500      	movs	r5, #0
 8006da0:	42a5      	cmp	r5, r4
 8006da2:	d109      	bne.n	8006db8 <__libc_init_array+0x24>
 8006da4:	4e0b      	ldr	r6, [pc, #44]	; (8006dd4 <__libc_init_array+0x40>)
 8006da6:	4c0c      	ldr	r4, [pc, #48]	; (8006dd8 <__libc_init_array+0x44>)
 8006da8:	f000 fc7a 	bl	80076a0 <_init>
 8006dac:	1ba4      	subs	r4, r4, r6
 8006dae:	10a4      	asrs	r4, r4, #2
 8006db0:	2500      	movs	r5, #0
 8006db2:	42a5      	cmp	r5, r4
 8006db4:	d105      	bne.n	8006dc2 <__libc_init_array+0x2e>
 8006db6:	bd70      	pop	{r4, r5, r6, pc}
 8006db8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006dbc:	4798      	blx	r3
 8006dbe:	3501      	adds	r5, #1
 8006dc0:	e7ee      	b.n	8006da0 <__libc_init_array+0xc>
 8006dc2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006dc6:	4798      	blx	r3
 8006dc8:	3501      	adds	r5, #1
 8006dca:	e7f2      	b.n	8006db2 <__libc_init_array+0x1e>
 8006dcc:	08007790 	.word	0x08007790
 8006dd0:	08007790 	.word	0x08007790
 8006dd4:	08007790 	.word	0x08007790
 8006dd8:	08007794 	.word	0x08007794

08006ddc <memcpy>:
 8006ddc:	b510      	push	{r4, lr}
 8006dde:	1e43      	subs	r3, r0, #1
 8006de0:	440a      	add	r2, r1
 8006de2:	4291      	cmp	r1, r2
 8006de4:	d100      	bne.n	8006de8 <memcpy+0xc>
 8006de6:	bd10      	pop	{r4, pc}
 8006de8:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006dec:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006df0:	e7f7      	b.n	8006de2 <memcpy+0x6>

08006df2 <memset>:
 8006df2:	4402      	add	r2, r0
 8006df4:	4603      	mov	r3, r0
 8006df6:	4293      	cmp	r3, r2
 8006df8:	d100      	bne.n	8006dfc <memset+0xa>
 8006dfa:	4770      	bx	lr
 8006dfc:	f803 1b01 	strb.w	r1, [r3], #1
 8006e00:	e7f9      	b.n	8006df6 <memset+0x4>
	...

08006e04 <_free_r>:
 8006e04:	b538      	push	{r3, r4, r5, lr}
 8006e06:	4605      	mov	r5, r0
 8006e08:	2900      	cmp	r1, #0
 8006e0a:	d045      	beq.n	8006e98 <_free_r+0x94>
 8006e0c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006e10:	1f0c      	subs	r4, r1, #4
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	bfb8      	it	lt
 8006e16:	18e4      	addlt	r4, r4, r3
 8006e18:	f000 f98a 	bl	8007130 <__malloc_lock>
 8006e1c:	4a1f      	ldr	r2, [pc, #124]	; (8006e9c <_free_r+0x98>)
 8006e1e:	6813      	ldr	r3, [r2, #0]
 8006e20:	4610      	mov	r0, r2
 8006e22:	b933      	cbnz	r3, 8006e32 <_free_r+0x2e>
 8006e24:	6063      	str	r3, [r4, #4]
 8006e26:	6014      	str	r4, [r2, #0]
 8006e28:	4628      	mov	r0, r5
 8006e2a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006e2e:	f000 b980 	b.w	8007132 <__malloc_unlock>
 8006e32:	42a3      	cmp	r3, r4
 8006e34:	d90c      	bls.n	8006e50 <_free_r+0x4c>
 8006e36:	6821      	ldr	r1, [r4, #0]
 8006e38:	1862      	adds	r2, r4, r1
 8006e3a:	4293      	cmp	r3, r2
 8006e3c:	bf04      	itt	eq
 8006e3e:	681a      	ldreq	r2, [r3, #0]
 8006e40:	685b      	ldreq	r3, [r3, #4]
 8006e42:	6063      	str	r3, [r4, #4]
 8006e44:	bf04      	itt	eq
 8006e46:	1852      	addeq	r2, r2, r1
 8006e48:	6022      	streq	r2, [r4, #0]
 8006e4a:	6004      	str	r4, [r0, #0]
 8006e4c:	e7ec      	b.n	8006e28 <_free_r+0x24>
 8006e4e:	4613      	mov	r3, r2
 8006e50:	685a      	ldr	r2, [r3, #4]
 8006e52:	b10a      	cbz	r2, 8006e58 <_free_r+0x54>
 8006e54:	42a2      	cmp	r2, r4
 8006e56:	d9fa      	bls.n	8006e4e <_free_r+0x4a>
 8006e58:	6819      	ldr	r1, [r3, #0]
 8006e5a:	1858      	adds	r0, r3, r1
 8006e5c:	42a0      	cmp	r0, r4
 8006e5e:	d10b      	bne.n	8006e78 <_free_r+0x74>
 8006e60:	6820      	ldr	r0, [r4, #0]
 8006e62:	4401      	add	r1, r0
 8006e64:	1858      	adds	r0, r3, r1
 8006e66:	4282      	cmp	r2, r0
 8006e68:	6019      	str	r1, [r3, #0]
 8006e6a:	d1dd      	bne.n	8006e28 <_free_r+0x24>
 8006e6c:	6810      	ldr	r0, [r2, #0]
 8006e6e:	6852      	ldr	r2, [r2, #4]
 8006e70:	605a      	str	r2, [r3, #4]
 8006e72:	4401      	add	r1, r0
 8006e74:	6019      	str	r1, [r3, #0]
 8006e76:	e7d7      	b.n	8006e28 <_free_r+0x24>
 8006e78:	d902      	bls.n	8006e80 <_free_r+0x7c>
 8006e7a:	230c      	movs	r3, #12
 8006e7c:	602b      	str	r3, [r5, #0]
 8006e7e:	e7d3      	b.n	8006e28 <_free_r+0x24>
 8006e80:	6820      	ldr	r0, [r4, #0]
 8006e82:	1821      	adds	r1, r4, r0
 8006e84:	428a      	cmp	r2, r1
 8006e86:	bf04      	itt	eq
 8006e88:	6811      	ldreq	r1, [r2, #0]
 8006e8a:	6852      	ldreq	r2, [r2, #4]
 8006e8c:	6062      	str	r2, [r4, #4]
 8006e8e:	bf04      	itt	eq
 8006e90:	1809      	addeq	r1, r1, r0
 8006e92:	6021      	streq	r1, [r4, #0]
 8006e94:	605c      	str	r4, [r3, #4]
 8006e96:	e7c7      	b.n	8006e28 <_free_r+0x24>
 8006e98:	bd38      	pop	{r3, r4, r5, pc}
 8006e9a:	bf00      	nop
 8006e9c:	2000195c 	.word	0x2000195c

08006ea0 <_malloc_r>:
 8006ea0:	b570      	push	{r4, r5, r6, lr}
 8006ea2:	1ccd      	adds	r5, r1, #3
 8006ea4:	f025 0503 	bic.w	r5, r5, #3
 8006ea8:	3508      	adds	r5, #8
 8006eaa:	2d0c      	cmp	r5, #12
 8006eac:	bf38      	it	cc
 8006eae:	250c      	movcc	r5, #12
 8006eb0:	2d00      	cmp	r5, #0
 8006eb2:	4606      	mov	r6, r0
 8006eb4:	db01      	blt.n	8006eba <_malloc_r+0x1a>
 8006eb6:	42a9      	cmp	r1, r5
 8006eb8:	d903      	bls.n	8006ec2 <_malloc_r+0x22>
 8006eba:	230c      	movs	r3, #12
 8006ebc:	6033      	str	r3, [r6, #0]
 8006ebe:	2000      	movs	r0, #0
 8006ec0:	bd70      	pop	{r4, r5, r6, pc}
 8006ec2:	f000 f935 	bl	8007130 <__malloc_lock>
 8006ec6:	4a21      	ldr	r2, [pc, #132]	; (8006f4c <_malloc_r+0xac>)
 8006ec8:	6814      	ldr	r4, [r2, #0]
 8006eca:	4621      	mov	r1, r4
 8006ecc:	b991      	cbnz	r1, 8006ef4 <_malloc_r+0x54>
 8006ece:	4c20      	ldr	r4, [pc, #128]	; (8006f50 <_malloc_r+0xb0>)
 8006ed0:	6823      	ldr	r3, [r4, #0]
 8006ed2:	b91b      	cbnz	r3, 8006edc <_malloc_r+0x3c>
 8006ed4:	4630      	mov	r0, r6
 8006ed6:	f000 f851 	bl	8006f7c <_sbrk_r>
 8006eda:	6020      	str	r0, [r4, #0]
 8006edc:	4629      	mov	r1, r5
 8006ede:	4630      	mov	r0, r6
 8006ee0:	f000 f84c 	bl	8006f7c <_sbrk_r>
 8006ee4:	1c43      	adds	r3, r0, #1
 8006ee6:	d124      	bne.n	8006f32 <_malloc_r+0x92>
 8006ee8:	230c      	movs	r3, #12
 8006eea:	6033      	str	r3, [r6, #0]
 8006eec:	4630      	mov	r0, r6
 8006eee:	f000 f920 	bl	8007132 <__malloc_unlock>
 8006ef2:	e7e4      	b.n	8006ebe <_malloc_r+0x1e>
 8006ef4:	680b      	ldr	r3, [r1, #0]
 8006ef6:	1b5b      	subs	r3, r3, r5
 8006ef8:	d418      	bmi.n	8006f2c <_malloc_r+0x8c>
 8006efa:	2b0b      	cmp	r3, #11
 8006efc:	d90f      	bls.n	8006f1e <_malloc_r+0x7e>
 8006efe:	600b      	str	r3, [r1, #0]
 8006f00:	50cd      	str	r5, [r1, r3]
 8006f02:	18cc      	adds	r4, r1, r3
 8006f04:	4630      	mov	r0, r6
 8006f06:	f000 f914 	bl	8007132 <__malloc_unlock>
 8006f0a:	f104 000b 	add.w	r0, r4, #11
 8006f0e:	1d23      	adds	r3, r4, #4
 8006f10:	f020 0007 	bic.w	r0, r0, #7
 8006f14:	1ac3      	subs	r3, r0, r3
 8006f16:	d0d3      	beq.n	8006ec0 <_malloc_r+0x20>
 8006f18:	425a      	negs	r2, r3
 8006f1a:	50e2      	str	r2, [r4, r3]
 8006f1c:	e7d0      	b.n	8006ec0 <_malloc_r+0x20>
 8006f1e:	428c      	cmp	r4, r1
 8006f20:	684b      	ldr	r3, [r1, #4]
 8006f22:	bf16      	itet	ne
 8006f24:	6063      	strne	r3, [r4, #4]
 8006f26:	6013      	streq	r3, [r2, #0]
 8006f28:	460c      	movne	r4, r1
 8006f2a:	e7eb      	b.n	8006f04 <_malloc_r+0x64>
 8006f2c:	460c      	mov	r4, r1
 8006f2e:	6849      	ldr	r1, [r1, #4]
 8006f30:	e7cc      	b.n	8006ecc <_malloc_r+0x2c>
 8006f32:	1cc4      	adds	r4, r0, #3
 8006f34:	f024 0403 	bic.w	r4, r4, #3
 8006f38:	42a0      	cmp	r0, r4
 8006f3a:	d005      	beq.n	8006f48 <_malloc_r+0xa8>
 8006f3c:	1a21      	subs	r1, r4, r0
 8006f3e:	4630      	mov	r0, r6
 8006f40:	f000 f81c 	bl	8006f7c <_sbrk_r>
 8006f44:	3001      	adds	r0, #1
 8006f46:	d0cf      	beq.n	8006ee8 <_malloc_r+0x48>
 8006f48:	6025      	str	r5, [r4, #0]
 8006f4a:	e7db      	b.n	8006f04 <_malloc_r+0x64>
 8006f4c:	2000195c 	.word	0x2000195c
 8006f50:	20001960 	.word	0x20001960

08006f54 <putchar>:
 8006f54:	b538      	push	{r3, r4, r5, lr}
 8006f56:	4b08      	ldr	r3, [pc, #32]	; (8006f78 <putchar+0x24>)
 8006f58:	681c      	ldr	r4, [r3, #0]
 8006f5a:	4605      	mov	r5, r0
 8006f5c:	b124      	cbz	r4, 8006f68 <putchar+0x14>
 8006f5e:	69a3      	ldr	r3, [r4, #24]
 8006f60:	b913      	cbnz	r3, 8006f68 <putchar+0x14>
 8006f62:	4620      	mov	r0, r4
 8006f64:	f000 f85a 	bl	800701c <__sinit>
 8006f68:	68a2      	ldr	r2, [r4, #8]
 8006f6a:	4629      	mov	r1, r5
 8006f6c:	4620      	mov	r0, r4
 8006f6e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006f72:	f000 b8df 	b.w	8007134 <_putc_r>
 8006f76:	bf00      	nop
 8006f78:	20000010 	.word	0x20000010

08006f7c <_sbrk_r>:
 8006f7c:	b538      	push	{r3, r4, r5, lr}
 8006f7e:	4c06      	ldr	r4, [pc, #24]	; (8006f98 <_sbrk_r+0x1c>)
 8006f80:	2300      	movs	r3, #0
 8006f82:	4605      	mov	r5, r0
 8006f84:	4608      	mov	r0, r1
 8006f86:	6023      	str	r3, [r4, #0]
 8006f88:	f7ff fdfc 	bl	8006b84 <_sbrk>
 8006f8c:	1c43      	adds	r3, r0, #1
 8006f8e:	d102      	bne.n	8006f96 <_sbrk_r+0x1a>
 8006f90:	6823      	ldr	r3, [r4, #0]
 8006f92:	b103      	cbz	r3, 8006f96 <_sbrk_r+0x1a>
 8006f94:	602b      	str	r3, [r5, #0]
 8006f96:	bd38      	pop	{r3, r4, r5, pc}
 8006f98:	20001e74 	.word	0x20001e74

08006f9c <std>:
 8006f9c:	2300      	movs	r3, #0
 8006f9e:	b510      	push	{r4, lr}
 8006fa0:	4604      	mov	r4, r0
 8006fa2:	e9c0 3300 	strd	r3, r3, [r0]
 8006fa6:	6083      	str	r3, [r0, #8]
 8006fa8:	8181      	strh	r1, [r0, #12]
 8006faa:	6643      	str	r3, [r0, #100]	; 0x64
 8006fac:	81c2      	strh	r2, [r0, #14]
 8006fae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006fb2:	6183      	str	r3, [r0, #24]
 8006fb4:	4619      	mov	r1, r3
 8006fb6:	2208      	movs	r2, #8
 8006fb8:	305c      	adds	r0, #92	; 0x5c
 8006fba:	f7ff ff1a 	bl	8006df2 <memset>
 8006fbe:	4b05      	ldr	r3, [pc, #20]	; (8006fd4 <std+0x38>)
 8006fc0:	6263      	str	r3, [r4, #36]	; 0x24
 8006fc2:	4b05      	ldr	r3, [pc, #20]	; (8006fd8 <std+0x3c>)
 8006fc4:	62a3      	str	r3, [r4, #40]	; 0x28
 8006fc6:	4b05      	ldr	r3, [pc, #20]	; (8006fdc <std+0x40>)
 8006fc8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006fca:	4b05      	ldr	r3, [pc, #20]	; (8006fe0 <std+0x44>)
 8006fcc:	6224      	str	r4, [r4, #32]
 8006fce:	6323      	str	r3, [r4, #48]	; 0x30
 8006fd0:	bd10      	pop	{r4, pc}
 8006fd2:	bf00      	nop
 8006fd4:	080071a1 	.word	0x080071a1
 8006fd8:	080071c3 	.word	0x080071c3
 8006fdc:	080071fb 	.word	0x080071fb
 8006fe0:	0800721f 	.word	0x0800721f

08006fe4 <_cleanup_r>:
 8006fe4:	4901      	ldr	r1, [pc, #4]	; (8006fec <_cleanup_r+0x8>)
 8006fe6:	f000 b885 	b.w	80070f4 <_fwalk_reent>
 8006fea:	bf00      	nop
 8006fec:	080074f9 	.word	0x080074f9

08006ff0 <__sfmoreglue>:
 8006ff0:	b570      	push	{r4, r5, r6, lr}
 8006ff2:	1e4a      	subs	r2, r1, #1
 8006ff4:	2568      	movs	r5, #104	; 0x68
 8006ff6:	4355      	muls	r5, r2
 8006ff8:	460e      	mov	r6, r1
 8006ffa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006ffe:	f7ff ff4f 	bl	8006ea0 <_malloc_r>
 8007002:	4604      	mov	r4, r0
 8007004:	b140      	cbz	r0, 8007018 <__sfmoreglue+0x28>
 8007006:	2100      	movs	r1, #0
 8007008:	e9c0 1600 	strd	r1, r6, [r0]
 800700c:	300c      	adds	r0, #12
 800700e:	60a0      	str	r0, [r4, #8]
 8007010:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007014:	f7ff feed 	bl	8006df2 <memset>
 8007018:	4620      	mov	r0, r4
 800701a:	bd70      	pop	{r4, r5, r6, pc}

0800701c <__sinit>:
 800701c:	6983      	ldr	r3, [r0, #24]
 800701e:	b510      	push	{r4, lr}
 8007020:	4604      	mov	r4, r0
 8007022:	bb33      	cbnz	r3, 8007072 <__sinit+0x56>
 8007024:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8007028:	6503      	str	r3, [r0, #80]	; 0x50
 800702a:	4b12      	ldr	r3, [pc, #72]	; (8007074 <__sinit+0x58>)
 800702c:	4a12      	ldr	r2, [pc, #72]	; (8007078 <__sinit+0x5c>)
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	6282      	str	r2, [r0, #40]	; 0x28
 8007032:	4298      	cmp	r0, r3
 8007034:	bf04      	itt	eq
 8007036:	2301      	moveq	r3, #1
 8007038:	6183      	streq	r3, [r0, #24]
 800703a:	f000 f81f 	bl	800707c <__sfp>
 800703e:	6060      	str	r0, [r4, #4]
 8007040:	4620      	mov	r0, r4
 8007042:	f000 f81b 	bl	800707c <__sfp>
 8007046:	60a0      	str	r0, [r4, #8]
 8007048:	4620      	mov	r0, r4
 800704a:	f000 f817 	bl	800707c <__sfp>
 800704e:	2200      	movs	r2, #0
 8007050:	60e0      	str	r0, [r4, #12]
 8007052:	2104      	movs	r1, #4
 8007054:	6860      	ldr	r0, [r4, #4]
 8007056:	f7ff ffa1 	bl	8006f9c <std>
 800705a:	2201      	movs	r2, #1
 800705c:	2109      	movs	r1, #9
 800705e:	68a0      	ldr	r0, [r4, #8]
 8007060:	f7ff ff9c 	bl	8006f9c <std>
 8007064:	2202      	movs	r2, #2
 8007066:	2112      	movs	r1, #18
 8007068:	68e0      	ldr	r0, [r4, #12]
 800706a:	f7ff ff97 	bl	8006f9c <std>
 800706e:	2301      	movs	r3, #1
 8007070:	61a3      	str	r3, [r4, #24]
 8007072:	bd10      	pop	{r4, pc}
 8007074:	08007724 	.word	0x08007724
 8007078:	08006fe5 	.word	0x08006fe5

0800707c <__sfp>:
 800707c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800707e:	4b1b      	ldr	r3, [pc, #108]	; (80070ec <__sfp+0x70>)
 8007080:	681e      	ldr	r6, [r3, #0]
 8007082:	69b3      	ldr	r3, [r6, #24]
 8007084:	4607      	mov	r7, r0
 8007086:	b913      	cbnz	r3, 800708e <__sfp+0x12>
 8007088:	4630      	mov	r0, r6
 800708a:	f7ff ffc7 	bl	800701c <__sinit>
 800708e:	3648      	adds	r6, #72	; 0x48
 8007090:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007094:	3b01      	subs	r3, #1
 8007096:	d503      	bpl.n	80070a0 <__sfp+0x24>
 8007098:	6833      	ldr	r3, [r6, #0]
 800709a:	b133      	cbz	r3, 80070aa <__sfp+0x2e>
 800709c:	6836      	ldr	r6, [r6, #0]
 800709e:	e7f7      	b.n	8007090 <__sfp+0x14>
 80070a0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80070a4:	b16d      	cbz	r5, 80070c2 <__sfp+0x46>
 80070a6:	3468      	adds	r4, #104	; 0x68
 80070a8:	e7f4      	b.n	8007094 <__sfp+0x18>
 80070aa:	2104      	movs	r1, #4
 80070ac:	4638      	mov	r0, r7
 80070ae:	f7ff ff9f 	bl	8006ff0 <__sfmoreglue>
 80070b2:	6030      	str	r0, [r6, #0]
 80070b4:	2800      	cmp	r0, #0
 80070b6:	d1f1      	bne.n	800709c <__sfp+0x20>
 80070b8:	230c      	movs	r3, #12
 80070ba:	603b      	str	r3, [r7, #0]
 80070bc:	4604      	mov	r4, r0
 80070be:	4620      	mov	r0, r4
 80070c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80070c2:	4b0b      	ldr	r3, [pc, #44]	; (80070f0 <__sfp+0x74>)
 80070c4:	6665      	str	r5, [r4, #100]	; 0x64
 80070c6:	e9c4 5500 	strd	r5, r5, [r4]
 80070ca:	60a5      	str	r5, [r4, #8]
 80070cc:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80070d0:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80070d4:	2208      	movs	r2, #8
 80070d6:	4629      	mov	r1, r5
 80070d8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80070dc:	f7ff fe89 	bl	8006df2 <memset>
 80070e0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80070e4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80070e8:	e7e9      	b.n	80070be <__sfp+0x42>
 80070ea:	bf00      	nop
 80070ec:	08007724 	.word	0x08007724
 80070f0:	ffff0001 	.word	0xffff0001

080070f4 <_fwalk_reent>:
 80070f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80070f8:	4680      	mov	r8, r0
 80070fa:	4689      	mov	r9, r1
 80070fc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007100:	2600      	movs	r6, #0
 8007102:	b914      	cbnz	r4, 800710a <_fwalk_reent+0x16>
 8007104:	4630      	mov	r0, r6
 8007106:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800710a:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800710e:	3f01      	subs	r7, #1
 8007110:	d501      	bpl.n	8007116 <_fwalk_reent+0x22>
 8007112:	6824      	ldr	r4, [r4, #0]
 8007114:	e7f5      	b.n	8007102 <_fwalk_reent+0xe>
 8007116:	89ab      	ldrh	r3, [r5, #12]
 8007118:	2b01      	cmp	r3, #1
 800711a:	d907      	bls.n	800712c <_fwalk_reent+0x38>
 800711c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007120:	3301      	adds	r3, #1
 8007122:	d003      	beq.n	800712c <_fwalk_reent+0x38>
 8007124:	4629      	mov	r1, r5
 8007126:	4640      	mov	r0, r8
 8007128:	47c8      	blx	r9
 800712a:	4306      	orrs	r6, r0
 800712c:	3568      	adds	r5, #104	; 0x68
 800712e:	e7ee      	b.n	800710e <_fwalk_reent+0x1a>

08007130 <__malloc_lock>:
 8007130:	4770      	bx	lr

08007132 <__malloc_unlock>:
 8007132:	4770      	bx	lr

08007134 <_putc_r>:
 8007134:	b570      	push	{r4, r5, r6, lr}
 8007136:	460d      	mov	r5, r1
 8007138:	4614      	mov	r4, r2
 800713a:	4606      	mov	r6, r0
 800713c:	b118      	cbz	r0, 8007146 <_putc_r+0x12>
 800713e:	6983      	ldr	r3, [r0, #24]
 8007140:	b90b      	cbnz	r3, 8007146 <_putc_r+0x12>
 8007142:	f7ff ff6b 	bl	800701c <__sinit>
 8007146:	4b13      	ldr	r3, [pc, #76]	; (8007194 <_putc_r+0x60>)
 8007148:	429c      	cmp	r4, r3
 800714a:	d112      	bne.n	8007172 <_putc_r+0x3e>
 800714c:	6874      	ldr	r4, [r6, #4]
 800714e:	68a3      	ldr	r3, [r4, #8]
 8007150:	3b01      	subs	r3, #1
 8007152:	2b00      	cmp	r3, #0
 8007154:	60a3      	str	r3, [r4, #8]
 8007156:	da16      	bge.n	8007186 <_putc_r+0x52>
 8007158:	69a2      	ldr	r2, [r4, #24]
 800715a:	4293      	cmp	r3, r2
 800715c:	db02      	blt.n	8007164 <_putc_r+0x30>
 800715e:	b2eb      	uxtb	r3, r5
 8007160:	2b0a      	cmp	r3, #10
 8007162:	d110      	bne.n	8007186 <_putc_r+0x52>
 8007164:	4622      	mov	r2, r4
 8007166:	4629      	mov	r1, r5
 8007168:	4630      	mov	r0, r6
 800716a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800716e:	f000 b85b 	b.w	8007228 <__swbuf_r>
 8007172:	4b09      	ldr	r3, [pc, #36]	; (8007198 <_putc_r+0x64>)
 8007174:	429c      	cmp	r4, r3
 8007176:	d101      	bne.n	800717c <_putc_r+0x48>
 8007178:	68b4      	ldr	r4, [r6, #8]
 800717a:	e7e8      	b.n	800714e <_putc_r+0x1a>
 800717c:	4b07      	ldr	r3, [pc, #28]	; (800719c <_putc_r+0x68>)
 800717e:	429c      	cmp	r4, r3
 8007180:	bf08      	it	eq
 8007182:	68f4      	ldreq	r4, [r6, #12]
 8007184:	e7e3      	b.n	800714e <_putc_r+0x1a>
 8007186:	6823      	ldr	r3, [r4, #0]
 8007188:	1c5a      	adds	r2, r3, #1
 800718a:	6022      	str	r2, [r4, #0]
 800718c:	701d      	strb	r5, [r3, #0]
 800718e:	b2e8      	uxtb	r0, r5
 8007190:	bd70      	pop	{r4, r5, r6, pc}
 8007192:	bf00      	nop
 8007194:	08007748 	.word	0x08007748
 8007198:	08007768 	.word	0x08007768
 800719c:	08007728 	.word	0x08007728

080071a0 <__sread>:
 80071a0:	b510      	push	{r4, lr}
 80071a2:	460c      	mov	r4, r1
 80071a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80071a8:	f000 fa46 	bl	8007638 <_read_r>
 80071ac:	2800      	cmp	r0, #0
 80071ae:	bfab      	itete	ge
 80071b0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80071b2:	89a3      	ldrhlt	r3, [r4, #12]
 80071b4:	181b      	addge	r3, r3, r0
 80071b6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80071ba:	bfac      	ite	ge
 80071bc:	6563      	strge	r3, [r4, #84]	; 0x54
 80071be:	81a3      	strhlt	r3, [r4, #12]
 80071c0:	bd10      	pop	{r4, pc}

080071c2 <__swrite>:
 80071c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80071c6:	461f      	mov	r7, r3
 80071c8:	898b      	ldrh	r3, [r1, #12]
 80071ca:	05db      	lsls	r3, r3, #23
 80071cc:	4605      	mov	r5, r0
 80071ce:	460c      	mov	r4, r1
 80071d0:	4616      	mov	r6, r2
 80071d2:	d505      	bpl.n	80071e0 <__swrite+0x1e>
 80071d4:	2302      	movs	r3, #2
 80071d6:	2200      	movs	r2, #0
 80071d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80071dc:	f000 f9b6 	bl	800754c <_lseek_r>
 80071e0:	89a3      	ldrh	r3, [r4, #12]
 80071e2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80071e6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80071ea:	81a3      	strh	r3, [r4, #12]
 80071ec:	4632      	mov	r2, r6
 80071ee:	463b      	mov	r3, r7
 80071f0:	4628      	mov	r0, r5
 80071f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80071f6:	f000 b869 	b.w	80072cc <_write_r>

080071fa <__sseek>:
 80071fa:	b510      	push	{r4, lr}
 80071fc:	460c      	mov	r4, r1
 80071fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007202:	f000 f9a3 	bl	800754c <_lseek_r>
 8007206:	1c43      	adds	r3, r0, #1
 8007208:	89a3      	ldrh	r3, [r4, #12]
 800720a:	bf15      	itete	ne
 800720c:	6560      	strne	r0, [r4, #84]	; 0x54
 800720e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007212:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007216:	81a3      	strheq	r3, [r4, #12]
 8007218:	bf18      	it	ne
 800721a:	81a3      	strhne	r3, [r4, #12]
 800721c:	bd10      	pop	{r4, pc}

0800721e <__sclose>:
 800721e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007222:	f000 b8d3 	b.w	80073cc <_close_r>
	...

08007228 <__swbuf_r>:
 8007228:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800722a:	460e      	mov	r6, r1
 800722c:	4614      	mov	r4, r2
 800722e:	4605      	mov	r5, r0
 8007230:	b118      	cbz	r0, 800723a <__swbuf_r+0x12>
 8007232:	6983      	ldr	r3, [r0, #24]
 8007234:	b90b      	cbnz	r3, 800723a <__swbuf_r+0x12>
 8007236:	f7ff fef1 	bl	800701c <__sinit>
 800723a:	4b21      	ldr	r3, [pc, #132]	; (80072c0 <__swbuf_r+0x98>)
 800723c:	429c      	cmp	r4, r3
 800723e:	d12a      	bne.n	8007296 <__swbuf_r+0x6e>
 8007240:	686c      	ldr	r4, [r5, #4]
 8007242:	69a3      	ldr	r3, [r4, #24]
 8007244:	60a3      	str	r3, [r4, #8]
 8007246:	89a3      	ldrh	r3, [r4, #12]
 8007248:	071a      	lsls	r2, r3, #28
 800724a:	d52e      	bpl.n	80072aa <__swbuf_r+0x82>
 800724c:	6923      	ldr	r3, [r4, #16]
 800724e:	b363      	cbz	r3, 80072aa <__swbuf_r+0x82>
 8007250:	6923      	ldr	r3, [r4, #16]
 8007252:	6820      	ldr	r0, [r4, #0]
 8007254:	1ac0      	subs	r0, r0, r3
 8007256:	6963      	ldr	r3, [r4, #20]
 8007258:	b2f6      	uxtb	r6, r6
 800725a:	4283      	cmp	r3, r0
 800725c:	4637      	mov	r7, r6
 800725e:	dc04      	bgt.n	800726a <__swbuf_r+0x42>
 8007260:	4621      	mov	r1, r4
 8007262:	4628      	mov	r0, r5
 8007264:	f000 f948 	bl	80074f8 <_fflush_r>
 8007268:	bb28      	cbnz	r0, 80072b6 <__swbuf_r+0x8e>
 800726a:	68a3      	ldr	r3, [r4, #8]
 800726c:	3b01      	subs	r3, #1
 800726e:	60a3      	str	r3, [r4, #8]
 8007270:	6823      	ldr	r3, [r4, #0]
 8007272:	1c5a      	adds	r2, r3, #1
 8007274:	6022      	str	r2, [r4, #0]
 8007276:	701e      	strb	r6, [r3, #0]
 8007278:	6963      	ldr	r3, [r4, #20]
 800727a:	3001      	adds	r0, #1
 800727c:	4283      	cmp	r3, r0
 800727e:	d004      	beq.n	800728a <__swbuf_r+0x62>
 8007280:	89a3      	ldrh	r3, [r4, #12]
 8007282:	07db      	lsls	r3, r3, #31
 8007284:	d519      	bpl.n	80072ba <__swbuf_r+0x92>
 8007286:	2e0a      	cmp	r6, #10
 8007288:	d117      	bne.n	80072ba <__swbuf_r+0x92>
 800728a:	4621      	mov	r1, r4
 800728c:	4628      	mov	r0, r5
 800728e:	f000 f933 	bl	80074f8 <_fflush_r>
 8007292:	b190      	cbz	r0, 80072ba <__swbuf_r+0x92>
 8007294:	e00f      	b.n	80072b6 <__swbuf_r+0x8e>
 8007296:	4b0b      	ldr	r3, [pc, #44]	; (80072c4 <__swbuf_r+0x9c>)
 8007298:	429c      	cmp	r4, r3
 800729a:	d101      	bne.n	80072a0 <__swbuf_r+0x78>
 800729c:	68ac      	ldr	r4, [r5, #8]
 800729e:	e7d0      	b.n	8007242 <__swbuf_r+0x1a>
 80072a0:	4b09      	ldr	r3, [pc, #36]	; (80072c8 <__swbuf_r+0xa0>)
 80072a2:	429c      	cmp	r4, r3
 80072a4:	bf08      	it	eq
 80072a6:	68ec      	ldreq	r4, [r5, #12]
 80072a8:	e7cb      	b.n	8007242 <__swbuf_r+0x1a>
 80072aa:	4621      	mov	r1, r4
 80072ac:	4628      	mov	r0, r5
 80072ae:	f000 f81f 	bl	80072f0 <__swsetup_r>
 80072b2:	2800      	cmp	r0, #0
 80072b4:	d0cc      	beq.n	8007250 <__swbuf_r+0x28>
 80072b6:	f04f 37ff 	mov.w	r7, #4294967295
 80072ba:	4638      	mov	r0, r7
 80072bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80072be:	bf00      	nop
 80072c0:	08007748 	.word	0x08007748
 80072c4:	08007768 	.word	0x08007768
 80072c8:	08007728 	.word	0x08007728

080072cc <_write_r>:
 80072cc:	b538      	push	{r3, r4, r5, lr}
 80072ce:	4c07      	ldr	r4, [pc, #28]	; (80072ec <_write_r+0x20>)
 80072d0:	4605      	mov	r5, r0
 80072d2:	4608      	mov	r0, r1
 80072d4:	4611      	mov	r1, r2
 80072d6:	2200      	movs	r2, #0
 80072d8:	6022      	str	r2, [r4, #0]
 80072da:	461a      	mov	r2, r3
 80072dc:	f7ff fc02 	bl	8006ae4 <_write>
 80072e0:	1c43      	adds	r3, r0, #1
 80072e2:	d102      	bne.n	80072ea <_write_r+0x1e>
 80072e4:	6823      	ldr	r3, [r4, #0]
 80072e6:	b103      	cbz	r3, 80072ea <_write_r+0x1e>
 80072e8:	602b      	str	r3, [r5, #0]
 80072ea:	bd38      	pop	{r3, r4, r5, pc}
 80072ec:	20001e74 	.word	0x20001e74

080072f0 <__swsetup_r>:
 80072f0:	4b32      	ldr	r3, [pc, #200]	; (80073bc <__swsetup_r+0xcc>)
 80072f2:	b570      	push	{r4, r5, r6, lr}
 80072f4:	681d      	ldr	r5, [r3, #0]
 80072f6:	4606      	mov	r6, r0
 80072f8:	460c      	mov	r4, r1
 80072fa:	b125      	cbz	r5, 8007306 <__swsetup_r+0x16>
 80072fc:	69ab      	ldr	r3, [r5, #24]
 80072fe:	b913      	cbnz	r3, 8007306 <__swsetup_r+0x16>
 8007300:	4628      	mov	r0, r5
 8007302:	f7ff fe8b 	bl	800701c <__sinit>
 8007306:	4b2e      	ldr	r3, [pc, #184]	; (80073c0 <__swsetup_r+0xd0>)
 8007308:	429c      	cmp	r4, r3
 800730a:	d10f      	bne.n	800732c <__swsetup_r+0x3c>
 800730c:	686c      	ldr	r4, [r5, #4]
 800730e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007312:	b29a      	uxth	r2, r3
 8007314:	0715      	lsls	r5, r2, #28
 8007316:	d42c      	bmi.n	8007372 <__swsetup_r+0x82>
 8007318:	06d0      	lsls	r0, r2, #27
 800731a:	d411      	bmi.n	8007340 <__swsetup_r+0x50>
 800731c:	2209      	movs	r2, #9
 800731e:	6032      	str	r2, [r6, #0]
 8007320:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007324:	81a3      	strh	r3, [r4, #12]
 8007326:	f04f 30ff 	mov.w	r0, #4294967295
 800732a:	e03e      	b.n	80073aa <__swsetup_r+0xba>
 800732c:	4b25      	ldr	r3, [pc, #148]	; (80073c4 <__swsetup_r+0xd4>)
 800732e:	429c      	cmp	r4, r3
 8007330:	d101      	bne.n	8007336 <__swsetup_r+0x46>
 8007332:	68ac      	ldr	r4, [r5, #8]
 8007334:	e7eb      	b.n	800730e <__swsetup_r+0x1e>
 8007336:	4b24      	ldr	r3, [pc, #144]	; (80073c8 <__swsetup_r+0xd8>)
 8007338:	429c      	cmp	r4, r3
 800733a:	bf08      	it	eq
 800733c:	68ec      	ldreq	r4, [r5, #12]
 800733e:	e7e6      	b.n	800730e <__swsetup_r+0x1e>
 8007340:	0751      	lsls	r1, r2, #29
 8007342:	d512      	bpl.n	800736a <__swsetup_r+0x7a>
 8007344:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007346:	b141      	cbz	r1, 800735a <__swsetup_r+0x6a>
 8007348:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800734c:	4299      	cmp	r1, r3
 800734e:	d002      	beq.n	8007356 <__swsetup_r+0x66>
 8007350:	4630      	mov	r0, r6
 8007352:	f7ff fd57 	bl	8006e04 <_free_r>
 8007356:	2300      	movs	r3, #0
 8007358:	6363      	str	r3, [r4, #52]	; 0x34
 800735a:	89a3      	ldrh	r3, [r4, #12]
 800735c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007360:	81a3      	strh	r3, [r4, #12]
 8007362:	2300      	movs	r3, #0
 8007364:	6063      	str	r3, [r4, #4]
 8007366:	6923      	ldr	r3, [r4, #16]
 8007368:	6023      	str	r3, [r4, #0]
 800736a:	89a3      	ldrh	r3, [r4, #12]
 800736c:	f043 0308 	orr.w	r3, r3, #8
 8007370:	81a3      	strh	r3, [r4, #12]
 8007372:	6923      	ldr	r3, [r4, #16]
 8007374:	b94b      	cbnz	r3, 800738a <__swsetup_r+0x9a>
 8007376:	89a3      	ldrh	r3, [r4, #12]
 8007378:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800737c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007380:	d003      	beq.n	800738a <__swsetup_r+0x9a>
 8007382:	4621      	mov	r1, r4
 8007384:	4630      	mov	r0, r6
 8007386:	f000 f917 	bl	80075b8 <__smakebuf_r>
 800738a:	89a2      	ldrh	r2, [r4, #12]
 800738c:	f012 0301 	ands.w	r3, r2, #1
 8007390:	d00c      	beq.n	80073ac <__swsetup_r+0xbc>
 8007392:	2300      	movs	r3, #0
 8007394:	60a3      	str	r3, [r4, #8]
 8007396:	6963      	ldr	r3, [r4, #20]
 8007398:	425b      	negs	r3, r3
 800739a:	61a3      	str	r3, [r4, #24]
 800739c:	6923      	ldr	r3, [r4, #16]
 800739e:	b953      	cbnz	r3, 80073b6 <__swsetup_r+0xc6>
 80073a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80073a4:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80073a8:	d1ba      	bne.n	8007320 <__swsetup_r+0x30>
 80073aa:	bd70      	pop	{r4, r5, r6, pc}
 80073ac:	0792      	lsls	r2, r2, #30
 80073ae:	bf58      	it	pl
 80073b0:	6963      	ldrpl	r3, [r4, #20]
 80073b2:	60a3      	str	r3, [r4, #8]
 80073b4:	e7f2      	b.n	800739c <__swsetup_r+0xac>
 80073b6:	2000      	movs	r0, #0
 80073b8:	e7f7      	b.n	80073aa <__swsetup_r+0xba>
 80073ba:	bf00      	nop
 80073bc:	20000010 	.word	0x20000010
 80073c0:	08007748 	.word	0x08007748
 80073c4:	08007768 	.word	0x08007768
 80073c8:	08007728 	.word	0x08007728

080073cc <_close_r>:
 80073cc:	b538      	push	{r3, r4, r5, lr}
 80073ce:	4c06      	ldr	r4, [pc, #24]	; (80073e8 <_close_r+0x1c>)
 80073d0:	2300      	movs	r3, #0
 80073d2:	4605      	mov	r5, r0
 80073d4:	4608      	mov	r0, r1
 80073d6:	6023      	str	r3, [r4, #0]
 80073d8:	f7ff fba0 	bl	8006b1c <_close>
 80073dc:	1c43      	adds	r3, r0, #1
 80073de:	d102      	bne.n	80073e6 <_close_r+0x1a>
 80073e0:	6823      	ldr	r3, [r4, #0]
 80073e2:	b103      	cbz	r3, 80073e6 <_close_r+0x1a>
 80073e4:	602b      	str	r3, [r5, #0]
 80073e6:	bd38      	pop	{r3, r4, r5, pc}
 80073e8:	20001e74 	.word	0x20001e74

080073ec <__sflush_r>:
 80073ec:	898a      	ldrh	r2, [r1, #12]
 80073ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80073f2:	4605      	mov	r5, r0
 80073f4:	0710      	lsls	r0, r2, #28
 80073f6:	460c      	mov	r4, r1
 80073f8:	d458      	bmi.n	80074ac <__sflush_r+0xc0>
 80073fa:	684b      	ldr	r3, [r1, #4]
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	dc05      	bgt.n	800740c <__sflush_r+0x20>
 8007400:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007402:	2b00      	cmp	r3, #0
 8007404:	dc02      	bgt.n	800740c <__sflush_r+0x20>
 8007406:	2000      	movs	r0, #0
 8007408:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800740c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800740e:	2e00      	cmp	r6, #0
 8007410:	d0f9      	beq.n	8007406 <__sflush_r+0x1a>
 8007412:	2300      	movs	r3, #0
 8007414:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007418:	682f      	ldr	r7, [r5, #0]
 800741a:	6a21      	ldr	r1, [r4, #32]
 800741c:	602b      	str	r3, [r5, #0]
 800741e:	d032      	beq.n	8007486 <__sflush_r+0x9a>
 8007420:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007422:	89a3      	ldrh	r3, [r4, #12]
 8007424:	075a      	lsls	r2, r3, #29
 8007426:	d505      	bpl.n	8007434 <__sflush_r+0x48>
 8007428:	6863      	ldr	r3, [r4, #4]
 800742a:	1ac0      	subs	r0, r0, r3
 800742c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800742e:	b10b      	cbz	r3, 8007434 <__sflush_r+0x48>
 8007430:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007432:	1ac0      	subs	r0, r0, r3
 8007434:	2300      	movs	r3, #0
 8007436:	4602      	mov	r2, r0
 8007438:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800743a:	6a21      	ldr	r1, [r4, #32]
 800743c:	4628      	mov	r0, r5
 800743e:	47b0      	blx	r6
 8007440:	1c43      	adds	r3, r0, #1
 8007442:	89a3      	ldrh	r3, [r4, #12]
 8007444:	d106      	bne.n	8007454 <__sflush_r+0x68>
 8007446:	6829      	ldr	r1, [r5, #0]
 8007448:	291d      	cmp	r1, #29
 800744a:	d848      	bhi.n	80074de <__sflush_r+0xf2>
 800744c:	4a29      	ldr	r2, [pc, #164]	; (80074f4 <__sflush_r+0x108>)
 800744e:	40ca      	lsrs	r2, r1
 8007450:	07d6      	lsls	r6, r2, #31
 8007452:	d544      	bpl.n	80074de <__sflush_r+0xf2>
 8007454:	2200      	movs	r2, #0
 8007456:	6062      	str	r2, [r4, #4]
 8007458:	04d9      	lsls	r1, r3, #19
 800745a:	6922      	ldr	r2, [r4, #16]
 800745c:	6022      	str	r2, [r4, #0]
 800745e:	d504      	bpl.n	800746a <__sflush_r+0x7e>
 8007460:	1c42      	adds	r2, r0, #1
 8007462:	d101      	bne.n	8007468 <__sflush_r+0x7c>
 8007464:	682b      	ldr	r3, [r5, #0]
 8007466:	b903      	cbnz	r3, 800746a <__sflush_r+0x7e>
 8007468:	6560      	str	r0, [r4, #84]	; 0x54
 800746a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800746c:	602f      	str	r7, [r5, #0]
 800746e:	2900      	cmp	r1, #0
 8007470:	d0c9      	beq.n	8007406 <__sflush_r+0x1a>
 8007472:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007476:	4299      	cmp	r1, r3
 8007478:	d002      	beq.n	8007480 <__sflush_r+0x94>
 800747a:	4628      	mov	r0, r5
 800747c:	f7ff fcc2 	bl	8006e04 <_free_r>
 8007480:	2000      	movs	r0, #0
 8007482:	6360      	str	r0, [r4, #52]	; 0x34
 8007484:	e7c0      	b.n	8007408 <__sflush_r+0x1c>
 8007486:	2301      	movs	r3, #1
 8007488:	4628      	mov	r0, r5
 800748a:	47b0      	blx	r6
 800748c:	1c41      	adds	r1, r0, #1
 800748e:	d1c8      	bne.n	8007422 <__sflush_r+0x36>
 8007490:	682b      	ldr	r3, [r5, #0]
 8007492:	2b00      	cmp	r3, #0
 8007494:	d0c5      	beq.n	8007422 <__sflush_r+0x36>
 8007496:	2b1d      	cmp	r3, #29
 8007498:	d001      	beq.n	800749e <__sflush_r+0xb2>
 800749a:	2b16      	cmp	r3, #22
 800749c:	d101      	bne.n	80074a2 <__sflush_r+0xb6>
 800749e:	602f      	str	r7, [r5, #0]
 80074a0:	e7b1      	b.n	8007406 <__sflush_r+0x1a>
 80074a2:	89a3      	ldrh	r3, [r4, #12]
 80074a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80074a8:	81a3      	strh	r3, [r4, #12]
 80074aa:	e7ad      	b.n	8007408 <__sflush_r+0x1c>
 80074ac:	690f      	ldr	r7, [r1, #16]
 80074ae:	2f00      	cmp	r7, #0
 80074b0:	d0a9      	beq.n	8007406 <__sflush_r+0x1a>
 80074b2:	0793      	lsls	r3, r2, #30
 80074b4:	680e      	ldr	r6, [r1, #0]
 80074b6:	bf08      	it	eq
 80074b8:	694b      	ldreq	r3, [r1, #20]
 80074ba:	600f      	str	r7, [r1, #0]
 80074bc:	bf18      	it	ne
 80074be:	2300      	movne	r3, #0
 80074c0:	eba6 0807 	sub.w	r8, r6, r7
 80074c4:	608b      	str	r3, [r1, #8]
 80074c6:	f1b8 0f00 	cmp.w	r8, #0
 80074ca:	dd9c      	ble.n	8007406 <__sflush_r+0x1a>
 80074cc:	4643      	mov	r3, r8
 80074ce:	463a      	mov	r2, r7
 80074d0:	6a21      	ldr	r1, [r4, #32]
 80074d2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80074d4:	4628      	mov	r0, r5
 80074d6:	47b0      	blx	r6
 80074d8:	2800      	cmp	r0, #0
 80074da:	dc06      	bgt.n	80074ea <__sflush_r+0xfe>
 80074dc:	89a3      	ldrh	r3, [r4, #12]
 80074de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80074e2:	81a3      	strh	r3, [r4, #12]
 80074e4:	f04f 30ff 	mov.w	r0, #4294967295
 80074e8:	e78e      	b.n	8007408 <__sflush_r+0x1c>
 80074ea:	4407      	add	r7, r0
 80074ec:	eba8 0800 	sub.w	r8, r8, r0
 80074f0:	e7e9      	b.n	80074c6 <__sflush_r+0xda>
 80074f2:	bf00      	nop
 80074f4:	20400001 	.word	0x20400001

080074f8 <_fflush_r>:
 80074f8:	b538      	push	{r3, r4, r5, lr}
 80074fa:	690b      	ldr	r3, [r1, #16]
 80074fc:	4605      	mov	r5, r0
 80074fe:	460c      	mov	r4, r1
 8007500:	b1db      	cbz	r3, 800753a <_fflush_r+0x42>
 8007502:	b118      	cbz	r0, 800750c <_fflush_r+0x14>
 8007504:	6983      	ldr	r3, [r0, #24]
 8007506:	b90b      	cbnz	r3, 800750c <_fflush_r+0x14>
 8007508:	f7ff fd88 	bl	800701c <__sinit>
 800750c:	4b0c      	ldr	r3, [pc, #48]	; (8007540 <_fflush_r+0x48>)
 800750e:	429c      	cmp	r4, r3
 8007510:	d109      	bne.n	8007526 <_fflush_r+0x2e>
 8007512:	686c      	ldr	r4, [r5, #4]
 8007514:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007518:	b17b      	cbz	r3, 800753a <_fflush_r+0x42>
 800751a:	4621      	mov	r1, r4
 800751c:	4628      	mov	r0, r5
 800751e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007522:	f7ff bf63 	b.w	80073ec <__sflush_r>
 8007526:	4b07      	ldr	r3, [pc, #28]	; (8007544 <_fflush_r+0x4c>)
 8007528:	429c      	cmp	r4, r3
 800752a:	d101      	bne.n	8007530 <_fflush_r+0x38>
 800752c:	68ac      	ldr	r4, [r5, #8]
 800752e:	e7f1      	b.n	8007514 <_fflush_r+0x1c>
 8007530:	4b05      	ldr	r3, [pc, #20]	; (8007548 <_fflush_r+0x50>)
 8007532:	429c      	cmp	r4, r3
 8007534:	bf08      	it	eq
 8007536:	68ec      	ldreq	r4, [r5, #12]
 8007538:	e7ec      	b.n	8007514 <_fflush_r+0x1c>
 800753a:	2000      	movs	r0, #0
 800753c:	bd38      	pop	{r3, r4, r5, pc}
 800753e:	bf00      	nop
 8007540:	08007748 	.word	0x08007748
 8007544:	08007768 	.word	0x08007768
 8007548:	08007728 	.word	0x08007728

0800754c <_lseek_r>:
 800754c:	b538      	push	{r3, r4, r5, lr}
 800754e:	4c07      	ldr	r4, [pc, #28]	; (800756c <_lseek_r+0x20>)
 8007550:	4605      	mov	r5, r0
 8007552:	4608      	mov	r0, r1
 8007554:	4611      	mov	r1, r2
 8007556:	2200      	movs	r2, #0
 8007558:	6022      	str	r2, [r4, #0]
 800755a:	461a      	mov	r2, r3
 800755c:	f7ff fb05 	bl	8006b6a <_lseek>
 8007560:	1c43      	adds	r3, r0, #1
 8007562:	d102      	bne.n	800756a <_lseek_r+0x1e>
 8007564:	6823      	ldr	r3, [r4, #0]
 8007566:	b103      	cbz	r3, 800756a <_lseek_r+0x1e>
 8007568:	602b      	str	r3, [r5, #0]
 800756a:	bd38      	pop	{r3, r4, r5, pc}
 800756c:	20001e74 	.word	0x20001e74

08007570 <__swhatbuf_r>:
 8007570:	b570      	push	{r4, r5, r6, lr}
 8007572:	460e      	mov	r6, r1
 8007574:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007578:	2900      	cmp	r1, #0
 800757a:	b096      	sub	sp, #88	; 0x58
 800757c:	4614      	mov	r4, r2
 800757e:	461d      	mov	r5, r3
 8007580:	da07      	bge.n	8007592 <__swhatbuf_r+0x22>
 8007582:	2300      	movs	r3, #0
 8007584:	602b      	str	r3, [r5, #0]
 8007586:	89b3      	ldrh	r3, [r6, #12]
 8007588:	061a      	lsls	r2, r3, #24
 800758a:	d410      	bmi.n	80075ae <__swhatbuf_r+0x3e>
 800758c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007590:	e00e      	b.n	80075b0 <__swhatbuf_r+0x40>
 8007592:	466a      	mov	r2, sp
 8007594:	f000 f862 	bl	800765c <_fstat_r>
 8007598:	2800      	cmp	r0, #0
 800759a:	dbf2      	blt.n	8007582 <__swhatbuf_r+0x12>
 800759c:	9a01      	ldr	r2, [sp, #4]
 800759e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80075a2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80075a6:	425a      	negs	r2, r3
 80075a8:	415a      	adcs	r2, r3
 80075aa:	602a      	str	r2, [r5, #0]
 80075ac:	e7ee      	b.n	800758c <__swhatbuf_r+0x1c>
 80075ae:	2340      	movs	r3, #64	; 0x40
 80075b0:	2000      	movs	r0, #0
 80075b2:	6023      	str	r3, [r4, #0]
 80075b4:	b016      	add	sp, #88	; 0x58
 80075b6:	bd70      	pop	{r4, r5, r6, pc}

080075b8 <__smakebuf_r>:
 80075b8:	898b      	ldrh	r3, [r1, #12]
 80075ba:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80075bc:	079d      	lsls	r5, r3, #30
 80075be:	4606      	mov	r6, r0
 80075c0:	460c      	mov	r4, r1
 80075c2:	d507      	bpl.n	80075d4 <__smakebuf_r+0x1c>
 80075c4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80075c8:	6023      	str	r3, [r4, #0]
 80075ca:	6123      	str	r3, [r4, #16]
 80075cc:	2301      	movs	r3, #1
 80075ce:	6163      	str	r3, [r4, #20]
 80075d0:	b002      	add	sp, #8
 80075d2:	bd70      	pop	{r4, r5, r6, pc}
 80075d4:	ab01      	add	r3, sp, #4
 80075d6:	466a      	mov	r2, sp
 80075d8:	f7ff ffca 	bl	8007570 <__swhatbuf_r>
 80075dc:	9900      	ldr	r1, [sp, #0]
 80075de:	4605      	mov	r5, r0
 80075e0:	4630      	mov	r0, r6
 80075e2:	f7ff fc5d 	bl	8006ea0 <_malloc_r>
 80075e6:	b948      	cbnz	r0, 80075fc <__smakebuf_r+0x44>
 80075e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80075ec:	059a      	lsls	r2, r3, #22
 80075ee:	d4ef      	bmi.n	80075d0 <__smakebuf_r+0x18>
 80075f0:	f023 0303 	bic.w	r3, r3, #3
 80075f4:	f043 0302 	orr.w	r3, r3, #2
 80075f8:	81a3      	strh	r3, [r4, #12]
 80075fa:	e7e3      	b.n	80075c4 <__smakebuf_r+0xc>
 80075fc:	4b0d      	ldr	r3, [pc, #52]	; (8007634 <__smakebuf_r+0x7c>)
 80075fe:	62b3      	str	r3, [r6, #40]	; 0x28
 8007600:	89a3      	ldrh	r3, [r4, #12]
 8007602:	6020      	str	r0, [r4, #0]
 8007604:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007608:	81a3      	strh	r3, [r4, #12]
 800760a:	9b00      	ldr	r3, [sp, #0]
 800760c:	6163      	str	r3, [r4, #20]
 800760e:	9b01      	ldr	r3, [sp, #4]
 8007610:	6120      	str	r0, [r4, #16]
 8007612:	b15b      	cbz	r3, 800762c <__smakebuf_r+0x74>
 8007614:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007618:	4630      	mov	r0, r6
 800761a:	f000 f831 	bl	8007680 <_isatty_r>
 800761e:	b128      	cbz	r0, 800762c <__smakebuf_r+0x74>
 8007620:	89a3      	ldrh	r3, [r4, #12]
 8007622:	f023 0303 	bic.w	r3, r3, #3
 8007626:	f043 0301 	orr.w	r3, r3, #1
 800762a:	81a3      	strh	r3, [r4, #12]
 800762c:	89a3      	ldrh	r3, [r4, #12]
 800762e:	431d      	orrs	r5, r3
 8007630:	81a5      	strh	r5, [r4, #12]
 8007632:	e7cd      	b.n	80075d0 <__smakebuf_r+0x18>
 8007634:	08006fe5 	.word	0x08006fe5

08007638 <_read_r>:
 8007638:	b538      	push	{r3, r4, r5, lr}
 800763a:	4c07      	ldr	r4, [pc, #28]	; (8007658 <_read_r+0x20>)
 800763c:	4605      	mov	r5, r0
 800763e:	4608      	mov	r0, r1
 8007640:	4611      	mov	r1, r2
 8007642:	2200      	movs	r2, #0
 8007644:	6022      	str	r2, [r4, #0]
 8007646:	461a      	mov	r2, r3
 8007648:	f7ff fa2f 	bl	8006aaa <_read>
 800764c:	1c43      	adds	r3, r0, #1
 800764e:	d102      	bne.n	8007656 <_read_r+0x1e>
 8007650:	6823      	ldr	r3, [r4, #0]
 8007652:	b103      	cbz	r3, 8007656 <_read_r+0x1e>
 8007654:	602b      	str	r3, [r5, #0]
 8007656:	bd38      	pop	{r3, r4, r5, pc}
 8007658:	20001e74 	.word	0x20001e74

0800765c <_fstat_r>:
 800765c:	b538      	push	{r3, r4, r5, lr}
 800765e:	4c07      	ldr	r4, [pc, #28]	; (800767c <_fstat_r+0x20>)
 8007660:	2300      	movs	r3, #0
 8007662:	4605      	mov	r5, r0
 8007664:	4608      	mov	r0, r1
 8007666:	4611      	mov	r1, r2
 8007668:	6023      	str	r3, [r4, #0]
 800766a:	f7ff fa63 	bl	8006b34 <_fstat>
 800766e:	1c43      	adds	r3, r0, #1
 8007670:	d102      	bne.n	8007678 <_fstat_r+0x1c>
 8007672:	6823      	ldr	r3, [r4, #0]
 8007674:	b103      	cbz	r3, 8007678 <_fstat_r+0x1c>
 8007676:	602b      	str	r3, [r5, #0]
 8007678:	bd38      	pop	{r3, r4, r5, pc}
 800767a:	bf00      	nop
 800767c:	20001e74 	.word	0x20001e74

08007680 <_isatty_r>:
 8007680:	b538      	push	{r3, r4, r5, lr}
 8007682:	4c06      	ldr	r4, [pc, #24]	; (800769c <_isatty_r+0x1c>)
 8007684:	2300      	movs	r3, #0
 8007686:	4605      	mov	r5, r0
 8007688:	4608      	mov	r0, r1
 800768a:	6023      	str	r3, [r4, #0]
 800768c:	f7ff fa62 	bl	8006b54 <_isatty>
 8007690:	1c43      	adds	r3, r0, #1
 8007692:	d102      	bne.n	800769a <_isatty_r+0x1a>
 8007694:	6823      	ldr	r3, [r4, #0]
 8007696:	b103      	cbz	r3, 800769a <_isatty_r+0x1a>
 8007698:	602b      	str	r3, [r5, #0]
 800769a:	bd38      	pop	{r3, r4, r5, pc}
 800769c:	20001e74 	.word	0x20001e74

080076a0 <_init>:
 80076a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076a2:	bf00      	nop
 80076a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80076a6:	bc08      	pop	{r3}
 80076a8:	469e      	mov	lr, r3
 80076aa:	4770      	bx	lr

080076ac <_fini>:
 80076ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076ae:	bf00      	nop
 80076b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80076b2:	bc08      	pop	{r3}
 80076b4:	469e      	mov	lr, r3
 80076b6:	4770      	bx	lr
